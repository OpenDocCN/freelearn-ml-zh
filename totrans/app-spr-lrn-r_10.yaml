- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: R for Advanced Analytics'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: Create an R Markdown File to Read a CSV File and Write a Summary
    of Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start the RStudio and navigate to **Files** | **New Files** | **R Markdown**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the New R Markdown window, provide the **Title** and **Author** name, as
    illustrated in the following screenshot. Ensure that you select the **Word** option
    under the **Default Output Format** section:![Figure 1.13: Creating a new R Markdown
    file in Rstudio'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C12624_01_121.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.13: Creating a new R Markdown file in Rstudio'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, use the `read.csv()` method to read the `bank-full.csv` file:![Figure
    1.14: Using the read.csv method to read the data'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C12624_01_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.14: Using the read.csv method to read the data'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Finally, print the summary into a word file using the `summary` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.15: Final output after using the summary method'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C12624_01_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.15: Final output after using the summary method'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 2: Create a List of Two Matrices and Access the Values'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create two matrices of size `10 x 4` and `4 x 5` by randomly generated numbers
    from a binomial distribution (use `rbinom` method). Call the matrix `mat_A` and
    `mat_B`, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, store the two matrices in a list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the list, access the row 4 and column 2 of `mat_A` and store it in variable
    `A`, and access row 2 and column 1 of `mat_B` and store it in variable `B`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Multiply the `A` and `B` matrices and subtract from row 2 and column 1 of `mat_A`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 3: Create a DataFrame with Five Summary Statistics for All Numeric
    Variables from Bank Data Using dplyr and tidyr'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the `dplyr` and `tidyr` packages in the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `df` DataFrame and import the file into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extract all numeric variables from bank data using `select()`, and compute
    min, 1st quartile, 3rd quartile, median, mean, max, and standard deviation using
    the `summarise_all()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result is a wide data frame. 4 variable, 7 measures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store the result in a DataFrame of wide format named `df_wide`, reshape it
    using the `tidyr` functions, and, finally, convert the wide format to deep, use
    the gather, separate, and spread functions of the `tidyr` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 2: Exploratory Analysis of Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 4: Plotting Multiple Density Plots and Boxplots'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, load the necessary libraries and packages in the RStudio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Read the `bank-additional-full.csv` dataset in a DataFrame named `df`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `plot_grid_numeric` function for density plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the density plot for the `campaign`, `pdays`, `previous`, and `emp.var.rate`
    variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.27: Density plot for the campaign, pdays, previous, and emp.var.rate
    variables'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C12624_02_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.27: Density plot for the campaign, pdays, previous, and emp.var.rate
    variables'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Observe that the interpretations we obtained using the histogram are visibly
    true in density plot as well. Hence, this serves as another alternative plot for
    looking at the same trend.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Repeat step 4 for boxplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.28: Boxplot for the campaign, pdays, previous, and emp.var.rate
    variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C12624_02_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.28: Boxplot for the campaign, pdays, previous, and emp.var.rate variables'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now, let's explore the last four numeric variable of the dataset, that is, `nr.employed`,
    `euribor3m`, `cons.conf.index`, and `duration`, and see whether we could derive
    some meaningful insights.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 3: Introduction to Supervised Learning'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 5: Draw a Scatterplot between PRES and PM2.5 Split by Months'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Import the `ggplot2` package into the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `ggplot`, assign the component of the `a()` method with the variable `PRES`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the next layer of the `geom_smooth()` method, passing `colour = "blue"` to
    differentiate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, in the `facet_wrap()` layer, use the `month` variable to draw a separate
    segregation for each month.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final code will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The plot is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.19: Scatterplot showing the relationship between PRES and PM2.5'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C12624_03_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.19: Scatterplot showing the relationship between PRES and PM2.5'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 6: Transforming Variables and Deriving New Variables to Build a Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps for building the model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the required libraries and packages into the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Combine the year, month, day, and hour into a `datetime` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the rows with missing values in any column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `rollapply()` method from the package `zoo` to compute the moving average
    of PM2.5; this is to smoothen any noise from a reading of PM2.5:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two levels of the PM25 pollution, `0â€“Normal`, `1-Above Normal`. We can
    also create more than two levels; however, for logistic regression, which works
    best with binary classification, we have used two levels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Merge the resulting data frame (PM25_three_hour_pm25_avg ) with the values
    of other environmental variables such as `TEMP`, `DEWP`, and `Iws`, which we used
    in the linear regression model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fit the generalized linear model (`glm`) on `pollution_level` using the TEMP,
    DEWP and Iws variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Summarize the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 4: Regression'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 7: Printing Various Attributes Using Model Object Without Using the
    summary Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, print the coefficient values using the following command. Make sure
    the output is like the output of the `summary` function using the `coefficients`
    option. The coefficients are the fitted values from the model that uses the OLS
    algorithm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find the residual value (difference) of the predicted and actual values of PM2.5,
    which should be as small as possible. Residual reflects how far the fitted values
    using the coefficients are from the actual value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, find the fitted values that should be closer to the actual PM2.5 for
    the best model. Using the coefficients, we can compute the fitted values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the R-Squared values. They should look the same as the one you obtained
    in the output of the `summary` function next to the text Multiple R-squared. R-Square
    helps in evaluating the model performance. If the value is closer to 1, the better
    the model is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the F-Statistic values. Make sure the output should look same as the one
    you obtained in the output of the `summary` function next to the text F-Statistics.
    This will tell you if your model fits better than just using the mean of the target
    variable. In many practical applications, F-Statistic is used along with p-values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, find the coefficient p-values and make sure the values should look
    the same as the one you obtained in the output of the `summary` function under
    Coefficients for each variable. It will be present under the column titled `Pr(>|t|):`.
    If the value is less than 0.05, the variable is statistically significant in predicting
    the target variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The attributes of a model are equally essential to understand, especially in
    linear regression than to obtain the prediction. They help in interpreting the
    model well and connect the problem to its real use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 5: Classification'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 8: Building a Logistic Regression Model with Additional Features'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a copy of the `df_new` data frame into `df_copy` for the activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create new features for square root, square power, and cube power transformations
    for each of the three selected numeric features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Divide the `df_copy` dataset into train and test in 70:30 ratio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fit the logistic regression model with the new training data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Predict the responses using the fitted model on the train data and create a
    confusion matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Predict the responses using the fitted model on test data and create a confusion
    matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 9: Create a Decision Tree Model with Additional Control Parameters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Load the `rpart` library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the control object for decision tree with new values `minsplit =15`
    and `cp = 0.00`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fit the tree model with the train data and pass the control object to the `rpart`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the complexity parameter plot to see how the tree performs at different
    values of `CP`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.10: Decision tree output'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C12624_05_071.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.10: Decision tree output'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use the fitted model to make predictions on train data and create the confusion
    matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the fitted model to make predictions on test data and create the confusion
    matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 10: Build a Random Forest Model with a Greater Number of Trees'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, import the `randomForest` library using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build random forest model with all independent features available. Define the
    number of trees in the model to be 500.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Evaluate on training data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Evaluate on test data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 6: Feature Selection and Dimensionality Reduction'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 11: Converting the CBWD Feature of the Beijing PM2.5 Dataset into
    One-Hot Encoded Columns'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Read the Beijing PM2.5 dataset into the DataFrame `PM25`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable `cbwd_one_hot` for storing the result of the `dummyVars`
    function with `~ cbwd` as its first argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the output of the `predict()` function on `cbwd_one_hot` and case it as
    DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the original `cbwd` variable from the `PM25` DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `cbind()` function, add `cbwd_one_hot` to the `PM25` DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the top 6 rows of `PM25`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the previous command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the variable `cbwd` in the output of the `head(PM25)` command: it is
    now transformed into one-hot encoded columns with the `NE`, `NW`, and `SE` suffixes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 7: Model Improvements'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 12: Perform Repeated K-Fold Cross Validation and Grid Search Optimization'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Load the required packages `mlbench`, `caret`, and `dplyr` for the exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the `PimaIndianDiabetes` dataset into memory from `mlbench` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a `seed` value as `2019` for reproducibility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the K-Fold validation object using the `trainControl` function from
    the `caret` package and define `method` as `repeatedcv` instead of `cv`. Define
    an additional construct in the `trainControl` function for the number of repeats
    in the validation `repeats = 10`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the grid for hyperparameter `mtry` of random forest model as `(3,4,5)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fit the model with the grid values, cross-validation object, and random forest
    classifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Study the model performance by printing the average accuracy and standard deviation
    of accuracy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Study the model performance by plotting the accuracy across different values
    of the hyperparameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.17: Model performance accuracy across different values of the hyperparameter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C12624_07_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.17: Model performance accuracy across different values of the hyperparameter'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this plot, we can see that we perform repeated k-fold cross-validation and
    grid search optimization on the same model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 8: Model Deployment'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 13: Deploy an R Model Using Plumber'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a `model.r` script that will load the required libraries, data, fit a
    regression model and necessary function to predict on unseen data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the `mlbench` library that has the data for this activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load `BostonHousing` data into a DataFrame `df`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create train dataset using the first `400` rows of df and test with the remaining:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Fit a logistic regression model using the `lm` function with dependent variable
    as `medv` (median value) and 10 independent variables, such as, `crim`, `zn`,
    `indus`, `chas`, `nox`, `rm`, `age`, `dis`, `rad`, and `tax`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a model endpoint as `predict_data`; this will be used as the API endpoint
    for Plumber:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the function, convert the parameters to numeric and factor (since the
    API call will pass them as string only):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wrap the 10 independent features for the model as a DataFrame named `sample`,
    with the same name for the columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the `sample` DataFrame to the predict function with the model (created
    in the 4th step) and return predictions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire `model.r` file will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Load the `plumber` library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a plumber object using the `plumb` function and pass the `model.r` file
    (created in part 1).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the plumber object by passing the hostname as `localhost` or `127.0.0.1`
    and a port, say `8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test the deployed model using the browser or Postman and invoke the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'API invoke:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: http://127.0.0.1:8080/predict_
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ata?crim=0.01&zn=18&indus=2.3&chas=0&nox=0.5&rm=6&
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: age=65&dis=4&rad=1&tax=242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 9: Capstone Project - Based on Research Papers'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 14: Getting the Binary Performance Step with classif.C50 Learner Instead
    of classif.rpart'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Define the algorithm adaptation methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the problem transformation method, and change the `classif.rpart` learner
    to `classif.C50`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: You need to install the `C50` package for this code to work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Print the learner details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the multilabel learner details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Train the model using the same dataset with training dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the model details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Predict the output using the `C50` model we created for the test dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the performance measures:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the performance measures for the `listMeasures` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the resampling with cross-validation method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the binary performance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
