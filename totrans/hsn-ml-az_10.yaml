- en: Building Deep Learning Solutions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建深度学习解决方案
- en: Deep learning is a superset of machine learning incorporating algorithms influenced
    by the design and functionality of the human brain, known as the artificial intelligent
    neural network. It's represented in the form of supervised, semi-supervised, and
    unsupervised algorithms, where architectures profoundly concentrate on deep neural
    networks, deep belief networks, and recurrent neural networks. Deep learning today
    is widely accepted and utilized in industry as well as in R and D sectors in the
    field of computer vision, speech recognition, audio synthesis, image recognition,
    natural language processing, social media content moderation, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习是机器学习的一个超集，它结合了受人类大脑设计和功能影响的算法，称为人工智能神经网络。它以监督、半监督和无监督算法的形式表示，其中架构深刻地集中在深度神经网络、深度信念网络和循环神经网络上。如今，深度学习在工业界以及计算机视觉、语音识别、音频合成、图像识别、自然语言处理、社交媒体内容审核等领域的研究与开发（R&D）部门得到了广泛接受和应用。
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: An overview of Microsoft CNTK and the MMLSpark framework, along with third-party
    deep learning tools
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft CNTK和MMLSpark框架的概述，以及第三方深度学习工具
- en: TensorFlow and Keras, and the steps of deployment on Azure compute
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow和Keras，以及部署在Azure计算上的步骤
- en: What is deep learning?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是深度学习？
- en: Deep learning is a subclass of traditional machine learning algorithms that
    utilizes a series of non-linear processing layers for feature extraction, transformation,
    and, finally, analysis over the successive layers of output from the previous
    layers of input.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习是传统机器学习算法的一个子类，它利用一系列非线性处理层进行特征提取、转换，并在前一层输入的连续输出层上进行最终分析。
- en: 'The first layer of the deep learning neural network consists of an input layer,
    an output layer (the outermost layer), and a hidden layer, which is a complex
    layer in-between the input and output layers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习神经网络的第一层由输入层、输出层（最外层层）和隐藏层组成，隐藏层位于输入层和输出层之间，是一个复杂的层：
- en: '![](img/e92c8ffa-5be6-43bf-91bc-83648a72fdfc.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e92c8ffa-5be6-43bf-91bc-83648a72fdfc.png)'
- en: Differences between traditional machine learning and deep learning
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统机器学习和深度学习之间的差异
- en: 'The comparison between traditional machine learning and deep learning are as
    follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 传统机器学习和深度学习的比较如下：
- en: '| **Traditional Machine learning** | **Deep learning** |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| **传统机器学习** | **深度学习** |'
- en: '| Traditional machine learning needs manual features of data extraction/engineering.
    | Deep learning learns automatically from the data features. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 传统机器学习需要手动提取/工程化数据特征。 | 深度学习自动从数据特征中学习。 |'
- en: '| For unstructured data, feature extraction is difficult. | Deep learning updates
    learned network weights and bias in each layer. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 对于非结构化数据，特征提取很困难。 | 深度学习更新每一层的网络权重和偏置。 |'
- en: Common Deep Learning Neural Networks (DNNs)
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的深度学习神经网络（DNNs）
- en: 'There are a diverse set of deep learning neural networks available that are
    used to solve deep learning problems in the data science platform. Some of them
    are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学平台上，有各种各样的深度学习神经网络可用于解决深度学习问题。以下是一些例子：
- en: '**Deep Convolutional Neural Network **(**DCNN**): Used for the extraction of
    images representation'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度卷积神经网络**（**DCNN**）：用于提取图像表示'
- en: '**Recurrent Neural Network** (**RNN**): Used for the extraction of sequential
    data representation'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环神经网络**（**RNN**）：用于提取序列数据表示'
- en: '**Deep Belief Neural Network** (**DBN**): Applied for the extraction of hierarchical
    dataset representation'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度信念神经网络**（**DBN**）：用于提取层次数据集表示'
- en: '**Deep Reinforcement Learning** (**DRL**): Prediction of agent behaviors to
    maximize the future cumulative reward'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度强化学习**（**DRL**）：预测代理行为以最大化未来的累积奖励'
- en: The traditional manner of working on various deep learning frameworks and tools
    comes with a lot of challenges as it consists of various dependencies ...
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种深度学习框架和工具上工作的传统方式带来了许多挑战，因为它包含了许多依赖关系...
- en: Overview of the Azure Notebook service
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Notebook服务的概述
- en: The Azure Notebook service is a managed service that basically provides easy
    access to Jupyter Notebooks by using the computational power of R, Python, and
    F#, and users can utilize its numerous visual libraries and share the notebooks
    both publicly and in a private manner with a shareable link.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Azure笔记本服务是一项托管服务，基本上通过使用R、Python和F#的计算能力，为Jupyter Notebooks提供便捷的访问。用户可以利用其众多的可视化库，并以公开或私密的方式通过可分享的链接共享笔记本。
- en: Microsoft's **Cognitive Toolkit** (**CNTK**) has native support for Azure Notebook
    services so that Python-based Jupyter Notebooks can be executed with the CNTK
    framework. For execution in other DL frameworks like TensorFlow, Keras, or Theano,
    users need to install the respective framework components by using Miniconda or
    Pip/wheel.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的**认知工具包**（**CNTK**）对Azure笔记本服务有原生支持，因此基于Python的Jupyter Notebooks可以使用CNTK框架执行。对于在TensorFlow、Keras或Theano等其他深度学习框架中执行，用户需要通过Miniconda或Pip/wheel安装相应的框架组件。
- en: 'The Azure Notebook services are available at [https://notebooks.azure.com/](https://notebooks.azure.com/),
    and leverage the features of free, cloud-based, web-based Jupyter Notebook environments,
    including facilities for the creation of libraries and numerous interactive graphics
    that are built using data science languages like Python 2, Python 3, R, and F#.
    You can create your own libraries and build interactive notebooks, and you can
    simply upload your existing Jupyter Notebooks as well:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Azure笔记本服务可在[https://notebooks.azure.com/](https://notebooks.azure.com/)获取，并利用免费、基于云的、基于Web的Jupyter
    Notebook环境的功能，包括使用Python 2、Python 3、R和F#等数据科学语言创建库和众多交互式图形的设施。您可以创建自己的库并构建交互式笔记本，也可以简单地上传现有的Jupyter
    Notebooks：
- en: '![](img/e2cfe591-4e0c-4560-88fa-6df493d4ce44.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e2cfe591-4e0c-4560-88fa-6df493d4ce44.png)'
- en: Microsoft CNTK notebooks have built-in support in Azure Notebooks. All of the
    notebooks in Azure Notebooks can be organized into individual groups known as
    libraries that are shareable but non-editable. Notebooks can be cloned from other
    repositories as well.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 微软CNTK笔记本在Azure笔记本中内置了支持。Azure笔记本中的所有笔记本都可以组织成称为库的单独组，这些库是可分享的但不可编辑的。笔记本也可以从其他存储库克隆。
- en: 'Data can be uploaded with ease to Azure Notebooks by using the Data menu and
    loading it into memory with function cells. It can also be downloaded, as demonstrated
    in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过数据菜单轻松上传数据到Azure笔记本，并使用函数单元格将其加载到内存中。它也可以被下载，如下面的截图所示：
- en: '![](img/7f7c1d77-c8b9-44b2-9f5c-6733a77c69ab.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7f7c1d77-c8b9-44b2-9f5c-6733a77c69ab.png)'
- en: 'Azure Notebook services provide the ability to implement interactive IPython
    notebooks by using libraries like matplotlib, scikit-learn, scipy, numpy, pandas,
    and so on. In the following demo, an interactive IPython notebook on the World''s
    Population Growth rate analytics has been implemented:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Azure笔记本服务提供了使用matplotlib、scikit-learn、scipy、numpy、pandas等库实现交互式IPython笔记本的能力。在以下演示中，实现了关于世界人口增长率分析的交互式IPython笔记本：
- en: '![](img/1dd41b8b-7895-44b3-b3be-1f74130df022.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1dd41b8b-7895-44b3-b3be-1f74130df022.png)'
- en: 'First, data exploration is performed by importing the raw data into a DataFrame:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过将原始数据导入DataFrame来执行数据探索：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we implement the filtering in order to build a more concise pivot table:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们实现筛选以构建一个更简洁的数据透视表：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the preceding code snippet is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段的输出如下：
- en: '![](img/cd079e1d-1cac-492a-95a7-9cf5033954f6.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cd079e1d-1cac-492a-95a7-9cf5033954f6.png)'
- en: Pivot table formation with Azure Notebook
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure笔记本构建数据透视表
- en: 'The Pivot table can be populated using function like `pivot_table()`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用如`pivot_table()`这样的函数来填充数据透视表：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we can build interactive Python-based visuals by using visualization
    libraries, such as `matplotlib`, `seaborn`, `pandas`, `folium` and so on:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用如`matplotlib`、`seaborn`、`pandas`、`folium`等可视化库构建基于Python的交互式可视化：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Overview of Azure Deep Learning Virtual Machine toolkits
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure深度学习虚拟机工具包概述
- en: The **Deep Learning Virtual Machine **(**DLVM**) is a superset variant of the
    traditional Azure data science VM which consists of pre-configured environments
    that are mainly used to develop and deploy deep learning models on top of GPU
    instances (for example, a Azure GPU NC series VM), and is available on two OSes—Windows
    Server 2016 and Ubuntu Linux edition.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**深度学习虚拟机**（**DLVM**）是传统Azure数据科学VM的超集变体，它由预配置的环境组成，主要用于在GPU实例（例如，Azure GPU
    NC系列VM）上开发和部署深度学习模型，并在两个操作系统上提供——Windows Server 2016和Ubuntu Linux版本。'
- en: The DSVM on Azure contains several AI tools that have been pre-built, including
    CNTK, Keras, Caffe2, and Chainer to pre-process and extract visual data, text,
    audio, or video data. You can perform data science modelling and use implementation
    operations by using tools like Microsoft R server, Anaconda Python, Jupyter Notebooks
    for Python /2.x , R , SQL Server 2017, Azure ML workbench, Julia,  F# SDK and
    so on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 上的 DSVM 包含了预构建的多个 AI 工具，包括 CNTK、Keras、Caffe2 和 Chainer，用于预处理和提取视觉数据、文本、音频或视频数据。您可以使用
    Microsoft R 服务器、Anaconda Python、Jupyter Notebooks for Python/2.x、R、SQL Server
    2017、Azure ML 工作台、Julia、F# SDK 等工具进行数据科学建模和使用实现操作。
- en: 'You can provision the Deep Learning VM in the Azure portal from the marketplace
    as an Azure Resource Manager (ARM) and by providing various details like the type
    of OS, user credentials, and the instance size of the GPU that''s been accelerated
    on a deep learning machine:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 Azure 门户的市场中配置 Deep Learning VM 作为 Azure 资源管理器 (ARM)，并提供各种详细信息，如操作系统类型、用户凭据以及加速在深度学习机器上的
    GPU 实例大小：
- en: '![](img/96f16dad-8a88-4eea-85fe-404480779449.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96f16dad-8a88-4eea-85fe-404480779449.png)'
- en: More details on the Azure DLVM from the marketplace can be found at the following
    link:[https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft-ads.dsvm-deep-learning](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft-ads.dsvm-deep-learning).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场中的 Azure DLVM 的更多详细信息可以在以下链接中找到：[https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft-ads.dsvm-deep-learning](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft-ads.dsvm-deep-learning)。
- en: Open source deep learning frameworks
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源深度学习框架
- en: 'The details of various open source deep learning frameworks that are used in
    enterprise situations can be seen in the following table:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了在企业环境中使用的各种开源深度学习框架的详细信息：
- en: '| **Software** | **Innovator** | **Platform** | **Software license** | **Open
    source?** | **CUDA (GPU) support** | **Platform interface** |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **软件** | **创新者** | **平台** | **软件许可** | **开源？** | **CUDA (GPU) 支持** | **平台接口**
    |'
- en: '| CNTK | Microsoft research | Windows and Linux | MIT | Yes | Yes  | Python,
    C++ , C#, and CLI support |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| CNTK | 微软研究院 | Windows 和 Linux | MIT | 是 | 是 | Python、C++、C# 和 CLI 支持 |'
- en: '| TensorFlow | Google Brain | Linux, macOS, and Windows | Apache 2.0 | Yes
    | Yes | Python(NumPy) and C/C++ |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| TensorFlow | Google Brain | Linux, macOS, 和 Windows | Apache 2.0 | 是 | 是
    | Python(NumPy) 和 C/C++ |'
- en: '| Theano | University of Montreal | Cross-platform | Apache 2.0 | BSD license
    | Yes | Python |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| Theano | 蒙特利尔大学 | 跨平台 | Apache 2.0 | BSD 许可证 | 是 | Python |'
- en: '| Caffe | Berkeley AI  | Linux, macOS, and Windows | BSD license | Yes | Yes
    | Python and Matlab |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| Caffe | 伯克利人工智能 | Linux、macOS 和 Windows | BSD 许可证 | 是 | 是 | Python 和 Matlab
    |'
- en: '| Apache MXNet | Distributed ML community | Ubuntu, macOS, Windows, AWS, Android,
    and iOS | Apache 2.0 | Yes | Yes | C++ , Python, Matlab, ... |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Apache MXNet | 分布式机器学习社区 | Ubuntu、macOS、Windows、AWS、Android 和 iOS | Apache
    2.0 | 是 | 是 | C++、Python、Matlab 等 |'
- en: In-depth analysis of Microsoft deep learning tools
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入分析微软深度学习工具
- en: Microsoft has brought out extensive new deep learning toolkits which can be
    utilized to speed up advances in areas like text analysis, speech/voice recognition,
    and image classification by applying the cognitive toolkit known as CNTK, which
    can be run on-premise or in Azure GPU instances. The Azure Cognitive toolkit has
    support for binding to BrainScript and Python (versions 2.7, 3.5, and 3.6 at the
    time of writing), C++, and the .NET managed C# platform.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 微软推出了广泛的新的深度学习工具包，可以利用认知工具包 CNTK 加速文本分析、语音/语音识别和图像分类等领域的进步，CNTK 可在本地或 Azure
    GPU 实例上运行。Azure 认知工具包支持绑定到 BrainScript 和 Python（截至编写时为版本 2.7、3.5 和 3.6），C++ 和
    .NET 管理的 C# 平台。
- en: 'The following are the features of CNTK 2.0 in deep learning:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在深度学习中 CNTK 2.0 的功能：
- en: An extension facility for the CNTK function for the extraction, feature engineering,
    and scoring of optimizer ML algorithms in a variety of languages like Python,
    C#, and C++.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CNTK 函数的扩展功能，用于在多种语言（如 Python、C# 和 C++）中提取、特征工程和评分优化器机器学习算法。
- en: The integration of TensorFlow models for visualization in CNTK.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CNTK 中集成 TensorFlow 模型进行可视化。
- en: Several pre-trained models are available as samples.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了几个预训练模型作为示例。
- en: Support for image recognition via the use of the FAST R-CNN algorithm on GPU
    instances (for example, Nvidia Tesla CUDA, and cuDNN).
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在 GPU 实例（例如，Nvidia Tesla CUDA 和 cuDNN）上使用 FAST R-CNN 算法支持图像识别。
- en: The availability of a performance profiler for Python and BrainScript.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了 Python 和 BrainScript 的性能分析器。
- en: Autoscaling feasibility of deep learning projects on Azure by running on kubernetes
    clusters. The autoscaling facility on Kubernetes provides both pod-level scaling
    (out of the box) as well as node-level scaling. **Horizontal pod scaling** (**HPA**)
    is a major feature of running CNTK models on AKS, as this automatically scales
    the number of pods in the clusters based on your requirements and also takes care
    to specify several node metrics like the percentage of CPU utilization and % of
    memory availability based on being scaled out or in.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure上通过运行kubernetes集群来实现深度学习项目的自动扩展可行性。Kubernetes上的自动扩展功能提供了Pod级别的扩展（开箱即用）以及节点级别的扩展。**水平Pod扩展（HPA**）是运行CNTK模型在AKS上的一个主要功能，因为它根据您的需求自动扩展集群中的Pod数量，并注意指定多个节点指标，如CPU利用率百分比和内存可用性百分比，基于扩展或缩减。
- en: Support of VS tools for AIs, which provides easy local installation for most,
    if not all, deep learning libraries (for example, Tensorflow, MXNet, Keras, Caffe2,
    Theano, Torch, Pytorch, Chainer (with GPU cuda support as cuPy), XG-Boost, Scikit-learn,
    LIBSVM, **Open Neural Network Exchange** (**ONNX**), Core ML Community Tools (coremltools),
    Microsoft ML tools, tf2onnx, Netron, and so on).
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持VS工具包的AI，为大多数（如果不是所有）深度学习库提供了易于本地安装的功能（例如，Tensorflow、MXNet、Keras、Caffe2、Theano、Torch、Pytorch、Chainer（具有GPU
    cuda支持作为cuPy）、XG-Boost、Scikit-learn、LIBSVM、**开放神经网络交换（ONNX**）、Core ML社区工具（coremltools）、微软ML工具、tf2onnx、Netron等）。
- en: 'More details on AI tools for Visual Studio and its supported ML/DL libraries
    can be found at the following GitHub link: [https://github.com/Microsoft/vs-tools-for-ai/blob/master/docs/](https://github.com/Microsoft/vs-tools-for-ai/blob/master/docs/prepare-localmachine.md).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Visual Studio的AI工具及其支持的ML/DL库的详细信息，可以在以下GitHub链接中找到：[https://github.com/Microsoft/vs-tools-for-ai/blob/master/docs/](https://github.com/Microsoft/vs-tools-for-ai/blob/master/docs/prepare-localmachine.md)。
- en: Overview of Microsoft CNTK
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软CNTK概述
- en: Microsoft CNTK is a commercial-grade open source toolkit that's used for deep
    learning and specifies the neural network structure as a series of computational
    directed graphs. It was introduced by Microsoft speech researchers (Dong Yu et
    al.) in 2012, open sourced in 2015, and published on Codeplex. On GitHub, the
    source code base of CNTK has been available under a permissions license from 2016\.
    CNTK provides the flexibility of ease of use, is fast, and composes simple building
    blocks into complex networks. This deep learning toolkit is 100% production ready
    and gives state-of-the-art accuracy, making it efficient and scalable to any CPU/GPU
    processing platform. It incorporates the popular training models of feed-forward
    ...
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 微软CNTK是一个商业级开源工具包，用于深度学习，并将神经网络结构指定为一系列计算有向图。它由微软语音研究人员（董宇等人）于2012年推出，2015年开源，并在Codeplex上发布。从2016年起，CNTK的源代码库在GitHub上以权限许可的形式可用。CNTK提供了易用性、快速性和将简单构建块组合成复杂网络的灵活性。这个深度学习工具包100%适用于生产环境，并提供了最先进的准确性，使其能够高效且可扩展到任何CPU/GPU处理平台。它集成了流行的前馈训练模型...
- en: The architecture building blocks of CNTK
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK的架构构建块
- en: The **open neural network exchange** (**ONNX**) format that's supported by CNTK 
    as the first deep learning toolkit has a shared open source model representation
    for framework interoperability and optimization. ONNX also extends support for
    moving trained models between frameworks such as CNTK, Caffe2, Apache MXNet, and
    PyTorch.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: CNTK作为第一个深度学习工具包支持**开放神经网络交换（ONNX**）格式，它为框架互操作性和优化提供了一个共享的开源模型表示。ONNX还扩展了对在CNTK、Caffe2、Apache
    MXNet和PyTorch等框架之间移动训练模型的支持。
- en: The top-level command blocks of CNTK, which are CNTK configuration files, define
    what actions are to be carried out with related information. The configuration
    parameter classifies what command blocks are to be implemented, and in what order
    context, if more than one command block is defined.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: CNTK的顶级命令块，即CNTK配置文件，定义了要执行的操作以及相关信息的执行。配置参数分类了要实现哪些命令块，以及如果定义了多个命令块，它们的顺序。
- en: 'Architecture-wise, CNTK configuration parameter command blocks consists of
    the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从架构角度来看，CNTK配置参数命令块包括以下内容：
- en: '**Input reader block**: Specifies the building concepts of the network from
    the corpus and by loading an existing model'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入读取器块**：指定从语料库加载现有模型来构建网络的基本概念'
- en: '**Network layer**: Defines the specified training algorithm to use'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络层**：定义要使用的特定训练算法'
- en: '**Learner layer**: Specifies the *where* and *how* to load the training modules
    and labels:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习器层**：指定*在哪里*和*如何*加载训练模块和标签：'
- en: '![](img/05fb49a2-b118-4b00-98ae-6e43018d402f.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/05fb49a2-b118-4b00-98ae-6e43018d402f.png)'
- en: 'The most widely used configuration blocks of CNTK are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: CNTK最广泛使用的配置块如下：
- en: 'Network layer building block:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络层构建块：
- en: '**SimpleNetwork Builder**: Executes one of the network models with constrained
    customization'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单网络构建器**：执行具有约束定制的网络模型之一'
- en: '**BrainScriptNetwork Builder**: Implements a network based on the CNTK network
    description language (BrainScript), which provides benefits in network designs
    and neural network configurations'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BrainScript网络构建器**：基于CNTK网络描述语言（BrainScript）实现网络，这为网络设计和神经网络配置提供了好处'
- en: 'Learners:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习者：
- en: '**SGD model**: It mainly applies the stochastic gradient descent algorithm
    for the training of the model.'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SGD模型**：主要应用随机梯度下降算法对模型进行训练。'
- en: 'Input readers:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入读取器：
- en: '**CNTK Text format Reader**: Reads input text files which merge multiple input
    text files in the same format.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CNTK文本格式读取器**：读取合并了多个相同格式输入文本文件的输入文本文件。'
- en: '**LM Sequence Reader**: Reads input text files containing word sequences for
    predicting word sequences.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LM序列读取器**：读取包含单词序列的输入文本文件，用于预测单词序列。'
- en: '**LU Sequence Reader**: Accepts input text-based files as word sequences, as
    well as its associated labels. This is mainly used for language understanding
    API building.'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LU序列读取器**：接受基于文本的文件作为单词序列，以及其关联的标签。这主要用于构建语言理解API。'
- en: '**HTKMLF Reader**: Reads the input files in the format of HTK/MLF for speech
    recognition and voice synthesis applications.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTKMLF读取器**：读取用于语音识别和语音合成应用的HTK/MLF格式的输入文件。'
- en: Concepts on CNTK
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK概念
- en: The input, output, and parameters of CNTK are organized as *tensors*, where
    rank classifies each tensor. A tensor of rank 0 is associated as Scalar, a tensor
    of *rank 1* is specified as a Vector, and a tensor of *rank 2* is defined as a
    Matrix. There are some static and dynamic axes available for every CNTK. Static
    axes have the same length throughout the lifetime of the network. The dynamic
    network's static axes are defined as a meaningful grouping of  tensors where a)
    their axes' lengths can differentiate from instance to instance, b) their axes
    lengths are typically unknown before each minibatch is represented, and c) the
    dynamic axes are ordered. The minibatch is called a tensor, and is called a dynamic
    axis or batch axis if ...
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: CNTK的输入、输出和参数以*张量*的形式组织，其中秩对每个张量进行分类。秩为0的张量关联为标量，秩为*1*的张量指定为向量，秩为*2*的张量定义为矩阵。每个CNTK都有一些静态和动态轴可用。静态轴在整个网络生命周期中长度相同。动态网络的静态轴定义为有意义的张量分组，其中a)它们的轴长度可以不同实例而异，b)它们的轴长度在表示每个小批量之前通常是未知的，c)动态轴是有序的。小批量被称为张量，如果...
- en: Developing and deploying CNTK layers in the Azure Deep Learning VM to implement
    a neural network
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Azure深度学习虚拟机中开发和部署CNTK层以实现神经网络
- en: Microsoft CNTK is flexible and easy to use, and mainly applies simple building
    blocks to build complex layers quickly. One of the major utilities of CNTK is
    that it can be used as a backend for the Keras framework as well. From a few benchmark
    results, we can see that CNTK is generally faster than Google's TensorFlow and
    up to 5-10 times faster than recurrent/LSTM networks.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 微软CNTK灵活易用，主要应用简单的构建块快速构建复杂层。CNTK的主要用途之一是它可以作为Keras框架的后端。从一些基准测试结果中，我们可以看到CNTK通常比谷歌的TensorFlow快，并且比循环/LSTM网络快5-10倍。
- en: 'To get started and build the CNTK building blocks of Azure Deep Learning GPU
    instances, we need to provision the DLVM from an Azure portal that supports GPU
    instances. You can provision the DLVM from the Azure Marketplace by selecting
    Create a Resource | New, and then typing `Deep Learning Virtual Machine` in the
    search bar, as demonstrated in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建Azure深度学习GPU实例的CNTK构建块，我们需要从支持GPU实例的Azure门户中配置DLVM。您可以通过选择“创建资源”|“新建”，然后在搜索栏中键入`深度学习虚拟机`来从Azure市场配置DLVM，如下面的截图所示：
- en: '![](img/ceb43971-110f-4801-998e-28a3ece752ea.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ceb43971-110f-4801-998e-28a3ece752ea.png)'
- en: Next, by providing the appropriate VM details, such as OS type (Windows/Linux),
    user credentials, and resource group, you may choose the required GPU instance
    size, for example, NV6 or NV12, or, if a sufficient quota is available in your
    Azure subscription, then you can try out the instance sizes such as NC6sv3 (for
    example, 6 core GPU, 112 GB RAM, and 12 data disks) and NC12sv3 (for example,
    12 core GPU, 224 GB of RAM, 24 data disks, and 40k disk IOPS availability).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过提供适当的虚拟机详细信息，例如操作系统类型（Windows/Linux）、用户凭据和资源组，您可以选择所需的GPU实例大小，例如NV6或NV12，或者如果您的Azure订阅中有足够的配额，那么您可以尝试实例大小，例如NC6sv3（例如，6核心GPU，112
    GB RAM，12个数据盘）和NC12sv3（例如，12核心GPU，224 GB RAM，24个数据盘，40k磁盘IOPS可用性）。
- en: Azure deep learning is accessible either through the remote desktop (RDP) mode
    (port `3389`), or SSH mode (port `22`).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Azure深度学习可以通过远程桌面（RDP）模式（端口`3389`）或SSH模式（端口`22`）访问。
- en: CNTK inputs and variables declaration
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK输入和变量声明
- en: The foremost exceptional thing about the deep learning framework is its ability
    to handle input datasets, declared variables, and performance management on computational
    graphs. In this CNTK demo on the Azure Deep Learning VM, three layers will be
    associated so that they can recognize a MNIST dataset of handwritten digits.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习框架最显著的特点是其处理输入数据集、声明变量和计算图性能管理的能力。在这个Azure深度学习虚拟机上的CNTK演示中，将关联三个层，以便它们可以识别手写数字的MNIST数据集。
- en: CNTK variables section
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK变量部分
- en: 'In the MNIST dataset classification problem, a flattened 28 x 28 pixel value
    scale input and its associated ten labels are present for classification. In CNTK,
    the variables could be declared to capture data, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在MNIST数据集分类问题中，存在一个平铺的28 x 28像素值缩放输入及其相关的十个标签用于分类。在CNTK中，可以声明变量来捕获数据，如下所示：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These types of `input_variable` functions are declared, just like the placeholder
    variables in TensorFlow. However, Microsoft CNTK eliminates the necessity to identify
    the number of sample/batch sizes and users can also supply the dimensions for
    each evaluation sample. In the case of a convolution neural network task, users
    can assign `input_dimension = (1,28,28)` for a flattened 28 x 28 = 784 pixel input
    and 10 output labels or classes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的`input_variable`函数被声明，就像TensorFlow中的占位符变量一样。然而，微软CNTK消除了识别样本/批量大小数量的必要性，用户还可以为每个评估样本提供维度。在卷积神经网络任务的情况下，用户可以为平铺的28
    x 28 = 784像素输入和10个输出标签或类别分配`input_dimension = (1,28,28)`。
- en: Data readers for CNTK
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK的数据读取器
- en: Microsoft CNTK provides a few helper modules to assist in getting training data
    into an acceptable format and having it read into the model in a minibatch context.
    `CTFDeserializer()` is a type of function in CNTK that can read input text files
    in a special CNTK format (where data comes in a sample per line with a pipe/delimiter).
    Another one is the `StreamDef()` function, which acts like a dictionary object.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 微软CNTK提供了一些辅助模块，以帮助将训练数据格式化为可接受的格式，并在小批量上下文中将其读入模型。`CTFDeserializer()`是CNTK中的一种函数类型，可以读取特殊CNTK格式的输入文本文件（其中数据以每行一个样本的形式出现，使用管道/分隔符）。另一个是`StreamDef()`函数，它类似于字典对象。
- en: 'Using the `CTFDeserializer()` function, the CNTK file format is read in the
    following way:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CTFDeserializer()`函数，以下方式读取CNTK文件格式：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Operations in CNTK
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK中的操作
- en: Similar to TensorFlow, Microsoft CNTK allows operations that are nodes in a
    computational graph. These nodes and operations provide support for flows. CNTK
    specifies operations from graph multiplication and division to softmax and convolutional
    operations. There is a need for the explicit evaluation of the operation code
    via the `eval()` method on the operation runtime. Though most of these operations
    are not explicitly evaluated, it's evaluated implicitly during the final layer's
    network execution.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与TensorFlow类似，微软CNTK允许操作作为计算图中的节点。这些节点和操作为流程提供支持。CNTK指定从图乘法和除法到softmax和卷积操作的操作。需要通过操作运行时的`eval()`方法显式评估操作代码。尽管大多数这些操作不是显式评估的，但在最终层网络执行期间会隐式评估。
- en: 'For example, in the MNIST dataset, a simple CNTK operation is performed to
    scale input features. This scaling is achieved by using 1/256 ~ 0.00390625:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在MNIST数据集中，通过简单的CNTK操作对输入特征进行缩放。这种缩放是通过使用1/256 ~ 0.00390625来实现的：
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, a constant of 0.00390 is declared, as well as the usage of `element_times()`
    operations for multiplying it by the input variable features. The input dataset
    is scaled between 0 and 1.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，声明了一个常量0.00390，以及使用`element_times()`操作将其与输入变量features相乘的用法。输入数据集被缩放到0到1之间。
- en: Layers of the Microsoft CNTK
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软CNTK的层
- en: 'The Microsoft Cognitive Toolkit provides us with the capability to provision
    neural network layers, which provides many layer features such as Dense, Convolution,
    MaxPooling, Recurrentm, and LSTM. For example, in an MNIST dataset, the standard
    neural network classifier consists of some densely connected layers such as the
    input layer, the first hidden layer, the second hidden layer, and the final output
    layer:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 微软认知工具包为我们提供了配置神经网络层的能力，这提供了许多层功能，如Dense、卷积、MaxPooling、递归和LSTM。例如，在MNIST数据集中，标准的神经网络分类器包括一些密集连接的层，如输入层、第一个隐藏层、第二个隐藏层和最终的输出层：
- en: '![](img/a4fe8523-fd91-4c16-9c71-172ad89a5fe7.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4fe8523-fd91-4c16-9c71-172ad89a5fe7.png)'
- en: Fundamentally, the input layer consists of 784 flattened pixel input layers
    that are proceeded by two hidden layers of size 200 and a final output layer on
    which a softmax has been activated. The layers ...
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，输入层由784个展平的像素输入层组成，这些层由两个大小为200的隐藏层和一个激活了softmax的最终输出层组成。层...
- en: CNTK layer provision helpers
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK层配置助手
- en: 'To make network definitions more streamlined, CNTK provides some helper functions/object
    classes, such as the `Sequential()` module, which is similar to the `Sequential(
    )` paradigm in Keras. It also allows you to sequentially stack layer after layer
    on top without specifying output, which is then passed to the next layer as the
    input of the next:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使网络定义更加简洁，CNTK提供了一些辅助函数/对象类，例如`Sequential()`模块，它类似于Keras中的`Sequential( )`范式。它还允许你连续堆叠一层又一层的层，而不需要指定输出，然后这个输出作为下一层的输入传递：
- en: '[PRE7]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There is the presence of the `layers.default_options()` module in CNTK, which
    can assist in streamlining, and which is used in more complicated networks. Activation
    functions are no longer required here, but `default_option` is used for the output
    layer since it allows us to apply softmax in the loss function. The same initialization
    of the `glorot_uniform()` function is specified in each layer:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: CNTK中存在`layers.default_options()`模块，它可以协助简化，并在更复杂的网络中使用。激活函数在这里不再需要，但使用`default_option`来为输出层，因为它允许我们在损失函数中应用softmax。每个层中指定了相同的`glorot_uniform()`函数的初始化：
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: CNTK modules for losses and error handling
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK的损失和错误处理模块
- en: 'The CNTK library has a full set of loss functions and error handling modules
    to train the model. This range classifies from standard cross entropy and squared
    error to cosine distances such as lambda ranks. For classification purposes, the
    `cross_entropy_with_softmax` option can be applied:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: CNTK库提供了一套完整的损失函数和错误处理模块来训练模型。这个范围从标准的交叉熵和平方误差到余弦距离如lambda ranks。对于分类目的，可以应用`cross_entropy_with_softmax`选项：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, the output layer, `z`, is supplied with a labelled output variable value
    and the cross entropy loss is calculated with softmax precision on `z`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，输出层`z`被提供了一个标记的输出变量值，并且使用softmax精度在`z`上计算交叉熵损失。
- en: 'Next, for accessing errors on the test set, the training model has to be used.
    For the classification task, the `classification_error()` function has to be used:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了访问测试集中的错误，必须使用训练模型。对于分类任务，必须使用`classification_error()`函数：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Input training models in CNTK
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK中的输入训练模型
- en: 'CNTK has various options for performing training, such as simply calling a
    dictionary containing input and output training sets:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: CNTK提供了各种进行训练的选项，例如简单地调用一个包含输入和输出训练集的字典：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `MinibatchSource()` object that's been used here calls `reader_train`, and
    is where you can access the streams/data by using the dot notation.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用的`MinibatchSource()`对象调用`reader_train`，这是你可以通过点符号访问流/数据的地方。
- en: 'A `ProgressPrinter` also needs to be defined, and this is where an object allows
    you to design output metrices such as loss and classification errors. The progress
    writers can be instantiated as well:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要定义一个`ProgressPrinter`，这是一个对象，允许你设计输出指标，如损失和分类错误。进度编写器也可以实例化：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `tag` argument specifies the demonstration of a value in the log that's
    been attached in each update. The total number of epochs during model training
    is counted by a counter, and is declared by `num_epochs`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`tag` 参数指定了在每次更新中附加到日志中的值的演示。模型训练期间的总周期数由计数器计算，并通过 `num_epochs` 声明。'
- en: Instantiating the Trainer object
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例化训练器对象
- en: 'In order to set up the `Trainer` object, we need a module that trains the model
    and feeds it into a number of information layers, such as the output layer and
    the prior layer, which is used to train a computational graph structure. Then,
    we need to utilize the loss function that''s going to be used for computing gradients
    where optimizers such as stochastic descent, and Ada Grad can be used:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置 `Trainer` 对象，我们需要一个训练模型并将其输入到多个信息层（如输出层和先验层）的模块，先验层用于训练计算图结构。然后，我们需要利用将要用于计算梯度的损失函数，其中可以使用随机下降和
    Ada Grad 等优化器：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Defining the training session object
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义训练会话对象
- en: 'The CNTK library has a marvellous way of expressing the `training_session()`
    object and its minibatch initialization. It associates defining the input data,
    logging, `num_sweeps_to_train`, samples per sweep, and so on:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: CNTK 库有一种奇妙的方式来表示 `training_session()` 对象及其小批量初始化。它关联定义输入数据、记录、`num_sweeps_to_train`、每扫视的样本数等：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this `training_session()` object, all of the optimization and parameter learning
    is going to occur in the source, and is where we can extract minibatch data that's
    used as the `reader_main` `MinibatchSource` object.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 `training_session()` 对象中，所有的优化和参数学习都将发生在源中，并且我们可以从中提取作为 `reader_main` `MinibatchSource`
    对象使用的小批量数据。
- en: 'Once you execute the training, the output is shown on the progress writer,
    as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行训练，输出将显示在进度写入器中，如下截图所示：
- en: '![](img/0db99f30-730c-431d-895c-e649b42cae03.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0db99f30-730c-431d-895c-e649b42cae03.png)'
- en: The CNTK testing model
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNTK 测试模型
- en: 'For testing the CNTK training model, we need to load `Test-28x28_cntk__text.txt` in
    the path retrieved from the MNIST dataset. We need to set up `MinibatchSource`
    to read our test data, and we also need to assign input maps to the test data:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 CNTK 训练模型，我们需要从 MNIST 数据集获取的路径中加载 `Test-28x28_cntk__text.txt`。我们需要设置 `MinibatchSource`
    来读取我们的测试数据，并且还需要为测试数据分配输入映射：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The ...
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Deploying CNTK tools by using Azure Containers (Docker)
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure 容器（Docker）部署 CNTK 工具
- en: For running CNTK Jupyter Notebooks on Docker containers and pulling CNTK images
    from Docker, make sure that you use a Linux-based VM or Azure Linux Data Science/DLVM.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Docker 容器上运行 CNTK Jupyter Notebooks 并从 Docker 中拉取 CNTK 镜像，请确保您使用基于 Linux
    的虚拟机或 Azure Linux 数据科学/深度学习虚拟机。
- en: 'The latest build of CNTK can be pulled using a Docker container that''s using
    Azure DSVM via the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令通过使用 Azure DSVM 的 Docker 容器拉取 CNTK 的最新构建版本：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`docker pull microsoft/cntk:2.6-gpu-python3.6` can be used for a GPU-specific
    version of Python. The Nvidia-docker driver is required for the execution of GPU
    versions of CNTK Jupyter Notebooks:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker pull microsoft/cntk:2.6-gpu-python3.6` 可以用于特定于 GPU 的 Python 版本。执行 CNTK
    Jupyter Notebooks 的 GPU 版本需要 Nvidia-docker 驱动程序：'
- en: '![](img/0c9a7652-5903-42f5-9c1c-d13be0152867.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0c9a7652-5903-42f5-9c1c-d13be0152867.png)'
- en: 'To run CNTK Jupyter Notebooks in the Docker container of the Azure Deep Learning
    VM, the CNTK container needs to be created and started with the IP port exposed
    in detached mode in the default port `8888:8888`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Azure 深度学习虚拟机的 Docker 容器中运行 CNTK Jupyter Notebooks，需要创建并启动 CNTK 容器，并在默认端口
    `8888:8888` 中以分离模式公开 IP 端口：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, the following command starts and activates the CNTK for Jupyter Notebooks.
    You need to expose port `8888` in the **network security group** (**NSG**) configuration
    settings for inbound network rules:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下命令启动并激活了 CNTK for Jupyter Notebooks。您需要在 **网络安全组**（**NSG**）配置设置中的入站网络规则中公开端口
    `8888`：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output screenshot looks like it does in the following image:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 输出截图看起来如下图像所示：
- en: '![](img/026a31dd-ec8a-44c6-870b-ec329890e10e.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/026a31dd-ec8a-44c6-870b-ec329890e10e.png)'
- en: More details on executing CNTK in GPU mode on Docker containers in a Linux environment
    can be found at the following link: [https://docs.microsoft.com/en-us/cognitive-toolkit/CNTK-Docker-Containers](https://docs.microsoft.com/en-us/cognitive-toolkit/CNTK-Docker-Containers).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 环境中在 Docker 容器上以 GPU 模式执行 CNTK 的更多详细信息可以在以下链接中找到：[https://docs.microsoft.com/en-us/cognitive-toolkit/CNTK-Docker-Containers](https://docs.microsoft.com/en-us/cognitive-toolkit/CNTK-Docker-Containers)。
- en: Keras as a backend for Microsoft CNTK
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Keras 作为 Microsoft CNTK 的后端
- en: 'Keras is a high-level neural network API that''s written in Python that abstracts
    complex configurations and builds production grade training models using matrix
    algebra. Keras is capable of executing on top of Microsoft CNTK, Google TensorFlow,
    or Theano, and has been developed with aim of enabling fast experimentation in
    a sequence or a graph of standalone, fully configurable modules:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Keras是一个用Python编写的用于高级神经网络的API，它抽象了复杂的配置，并使用矩阵代数构建生产级训练模型。Keras能够在Microsoft
    CNTK、Google TensorFlow或Theano之上执行，并且旨在通过一系列或图中的独立、完全可配置的模块实现快速实验：
- en: Keras supports both convolutional and recurrent networks and executes on CPU/GPU.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keras支持卷积和循环网络，并在CPU/GPU上执行。
- en: After CNTK activation, Keras can be simply installed by using `pip`. The `keras.json`
    file can be used as the backend of CNTK.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在CNTK激活后，可以通过使用`pip`简单地安装Keras。`keras.json`文件可以用作CNTK的后端。
- en: 'Update `keras.json` at `%USERPROFILE%/.keras` on Windows, or `$HOME/.keras`
    on Linux:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上的`%USERPROFILE%/.keras`或Linux上的`$HOME/.keras`更新`keras.json`：
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: An overview of the Microsoft Machine Learning Library for Apache Spark (MMLSpark)
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Machine Learning Library for Apache Spark (MMLSpark)概述
- en: The Microsoft **Machine Learning Library for Apache Spark** (**MMLSpark**) assists
    in provisioning scalable machine learning models for large datasets, especially
    for building deep learning problems. MMLSpark works with SparkML pipelines, including
    Microsoft CNTK and the OpenCV library, which provide end-to-end support for the
    ingress and processing of image input data, categorization of images, and text
    analytics using pre-trained deep learning algorithms. They also train and retrieve
    scores from classification and regression models by applying featurization.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft **Machine Learning Library for Apache Spark** (**MMLSpark**)帮助在大数据集上提供可扩展的机器学习模型，特别是用于构建深度学习问题。MMLSpark与SparkML管道协同工作，包括Microsoft
    CNTK和OpenCV库，它们为图像输入数据的入口和加工、图像分类以及使用预训练的深度学习算法进行文本分析提供端到端支持。它们还通过应用特征化来训练和检索分类和回归模型的分数。
- en: Environment setup for MMLSpark
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MMLSpark的环境设置
- en: 'The following prerequisites are mandatory for setting up MMLSpark library for
    deep learning projects on Azure:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure上为深度学习项目设置MMLSpark库的以下先决条件是强制性的：
- en: The `MMLSpark` library can be used with the Azure ML workbench
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用Azure ML工作台使用`MMLSpark`库
- en: '`MMLSpark` can also be integrated with the Azure HDInsight Spark cluster'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MMLSpark`也可以集成到Azure HDInsight Spark集群中'
- en: Use of a Databricks Cloud
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Databricks Cloud的使用
- en: Use of an Azure GPU VM
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure GPU VM的使用
- en: Use of the Spark/pyspark/Scala(SBT) package
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spark/pyspark/Scala(SBT)包的使用
- en: Use of a Docker container
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker容器的使用
- en: Execution of MMLSpark notebooks using a Docker container
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker容器执行MMLSpark笔记本
- en: 'In order to execute `MMLSpark` Jupyter Notebooks by using a Docker container,
    you can run the following command in a PowerShell prompt:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过Docker容器执行`MMLSpark` Jupyter Notebooks，你可以在PowerShell提示符中运行以下命令：
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The execution output of the MMLSpark Jupyter Notebook running on a Docker container
    appear as in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker容器上运行的MMLSpark Jupyter Notebooks的执行输出如下截图所示：
- en: '![](img/7861d68b-1759-415a-a60c-da45977edac1.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7861d68b-1759-415a-a60c-da45977edac1.png)'
- en: 'Here, the notebook is tagged with the name `mmlsparkbook` and is accepting
    the EULA agreement by default. Next, the Docker container needs to be started
    and activated for `mmlsparkbook`, which opens the MMLSpark notebooks at the following
    URL: `http://localhost:8888`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，笔记本被标记为`mmlsparkbook`，默认接受EULA协议。接下来，需要启动和激活`mmlsparkbook`的Docker容器，这将打开以下URL的MMLSpark笔记本：`http://localhost:8888`：
- en: '![](img/f4a40dce-4e83-47eb-acef-82ad9efa53f2.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f4a40dce-4e83-47eb-acef-82ad9efa53f2.png)'
- en: Azure HDInsight Spark cluster setup for MMLSpark
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure HDInsight Spark集群设置用于MMLSpark
- en: 'The MMLSpark library can be installed by using an existing Spark cluster and
    applying the `--packages` options, as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用现有的Spark集群并应用`--packages`选项来安装MMLSpark库，如下所示：
- en: '`spark-shell --packages Azure:MMLSpark:0.13`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spark-shell --packages Azure:MMLSpark:0.13`'
- en: '`pyspark --packages Azure:MMLSpark:0.13`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pyspark --packages Azure:MMLSpark:0.13`'
- en: '`spark-submit --packages Azure:MMLSpark:0.13 MyMMLSparkApp.jar`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spark-submit --packages Azure:MMLSpark:0.13 MyMMLSparkApp.jar`'
- en: Similarly, it can be applied for Spark contexts as well, which can be done by
    using MMLSpark in AZTK in the `.aztk/spark-default.conf` file.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，它也可以应用于Spark上下文，这可以通过在`.aztk/spark-default.conf`文件中使用MMLSpark来完成。
- en: More details on the MMLSpark library can be found at the following GitHub link: [https://github.com/Azure/MMLSpark](https://github.com/Azure/mmlspark).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于MMLSpark库的详细信息可以在以下GitHub链接中找到：[https://github.com/Azure/MMLSpark](https://github.com/Azure/mmlspark)。
- en: Overview of TensorFlow on Azure
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure上TensorFlow概述
- en: TensorFlow is an open source, deep learning library that was introduced by Google
    and is used for solving a range of tasks. TensorFlow was introduced to fulfill
    the requirement of building and training complex neural networks in order to detect
    and decipher patterns, recognitions, and correlations, similar to that of the
    learning process of the human brain. Google introduced the TPU (Tensor Processing
    Unit) cloud platform for running the TensorFlow Python API and utilizing TensorFlow
    graph units.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow是由Google引入的开源深度学习库，用于解决一系列任务。TensorFlow的引入是为了满足构建和训练复杂神经网络的需求，以便检测和解析模式、识别和相关性，类似于人脑的学习过程。Google引入了TPU（Tensor
    Processing Unit）云平台，用于运行TensorFlow Python API并利用TensorFlow图单元。
- en: 'In order to get started on TensorFlow with Azure, the two easiest options are
    as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Azure上开始使用TensorFlow，两个最简单的方法如下：
- en: '**Using Deep Learning toolkit for Data Science VM (Deep Learning VM)**: Provides
    a Windows GPU version of mxnet, CNTK, TensorFlow, and Keras that''s able to run
    on a GPU-NC, N-series, or FPGA infrastructure.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用数据科学虚拟机（Deep Learning VM）的深度学习工具包**：提供能够在GPU-NC、N系列或FPGA基础设施上运行的Windows
    GPU版本的mxnet、CNTK、TensorFlow和Keras。'
- en: '**Using Data Science VM for Azure**: Support for CNTK, TensorFlow, MXNet, Caffe,
    Caffe2, DIGITS, H2O, Keras, Theano, and PyTorch is installed by default, and has
    been configured so that it''s ready to use along with the support of NVidia CUDA,
    and cuDNN. Jupyter Notebooks and VS tools with AI are preconfigured as well.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Azure数据科学虚拟机**：默认安装了对CNTK、TensorFlow、MXNet、Caffe、Caffe2、DIGITS、H2O、Keras、Theano和PyTorch的支持，并且已经配置好，可以与NVidia
    CUDA和cuDNN一起使用。Jupyter Notebooks和带有AI的VS工具也已预先配置。'
- en: Simple computation graph on TensorFlow
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow上的简单计算图
- en: 'The TensorFlow library is based on computational graphs, such as *a = d * e*,*d
    = b + c*, and *e = c+ 2*, and so this formula can be written as *a = (b+c) * (c+2)*,
    as shown in the following diagram:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow库基于计算图，如*a = d * e*、*d = b + c* 和 *e = c+ 2*，因此这个公式可以写成*a = (b+c)
    * (c+2)*，如下面的图所示：
- en: '![](img/4ca8392b-d8f0-4ad7-93fe-8727e2590e80.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ca8392b-d8f0-4ad7-93fe-8727e2590e80.png)'
- en: The preceding graph computation can be parallelized by executing (*d = b + c*
    and *e = c + 2*) and by splitting the calculations on both CPUs and GPUs. For
    complex deep learning problems, especially in Convolutional Neural Network (CNNs)
    and **Recurrent Neural Network** (**RNNs**) architectures, this is essential.
    The concept behind TensorFlow is to have the capability to provision these computational
    graphs in code and allow ...
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图计算可以通过执行(*d = b + c* 和 *e = c + 2*)以及将计算在CPU和GPU上分割来并行化。对于复杂的深度学习问题，特别是在卷积神经网络（CNNs）和**循环神经网络**（**RNNs**）架构中，这是必不可少的。TensorFlow背后的概念是能够在代码中提供这些计算图的能力，并允许
    ...
- en: TensorFlow operations
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow操作
- en: 'TensorFlow supports a bunch of operations so that it can initialize the graph''s
    structure:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow支持一系列操作，以便可以初始化图的结构：
- en: '[PRE22]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In order to run the operations between the variables, we need to start a TensorFlow
    session, such as `tensorf.Session`. The TensorFlow session is an object where
    all such operations can run. In the TensorFlow session `run` function, the operation
    initializes variables that need to be initialized. Next is an operation. This
    needs to be run and can be executed with the `tfsess.run(a)` command. We can assign
    the output to `a_graphout` so that it can be printed:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在变量之间运行操作，我们需要启动一个TensorFlow会话，例如`tensorf.Session`。TensorFlow会话是一个对象，所有这些操作都可以在其中运行。在TensorFlow会话的`run`函数中，操作初始化需要初始化的变量。接下来是一个操作。这需要运行，可以使用`tfsess.run(a)`命令执行。我们可以将输出分配给`a_graphout`，以便可以打印：
- en: '[PRE24]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Declaration of the TensorFlow placeholder
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow占位符的声明
- en: 'TensorFlow assigns the basic structure of data by using a placeholder variable
    declaration such as the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow通过使用如下占位符变量声明来分配数据的基本结构：
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Neural Network Formation using TensorFlow
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TensorFlow构建神经网络
- en: 'TensorFlow specifies the Neural Network Formation for solving complex real-life
    problems, especially on CNNs or RNNS. For example, we can use the MNIST dataset
    TensorFlow package, where the dataset contains a 28 x 28 pixel grayscale image
    with approximately 55k rows, 10k testing rows, and 5k validation handwritten digit
    rows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 指定神经网络结构以解决复杂现实生活中的问题，尤其是在 CNN 或 RNN 上。例如，我们可以使用 TensorFlow 的 MNIST
    数据集包，其中数据集包含大约 55k 行的 28 x 28 像素的灰度图像，10k 行测试数据和 5k 行验证手写数字数据：
- en: '[PRE27]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'For training data and parameters, the placeholder variables can be provisioned:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于训练数据和参数，可以提供占位符变量：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here, the `x` input data layer consists of 28 x 28 = 784 pixels and y nodes
    like 10 digits. Also, for a neural network, the weight and bias also need to be
    initialized. In TensorFlow, there is the possibility of an L-1 number of weights/bias
    tensors or graphs:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`x` 输入数据层由 28 x 28 = 784 个像素组成，以及 10 个数字节点。此外，对于神经网络，还需要初始化权重和偏差。在 TensorFlow
    中，存在 L-1 个权重/偏差张量或图的可能性：
- en: '[PRE30]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: First, we need to declare some variables for `W1` and `b1` for the weights and
    bias for the connections between the input and hidden layer, where the neural
    network will have 300 nodes in the hidden layer. The size of the weight tensor, `W1`,
    is `[784, 300]`. Similarly, TensorFlow supports the NumPy random normal function,
    which assigns to provision a matrix of a given size that's populated with random
    samples. In a similar manner, the weight variable, `W2`, and the bias variable, `b2`,
    connect the hidden layer to the output of the neural network.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为 `W1` 和 `b1` 声明一些变量，用于输入层和隐藏层之间的权重和偏差，其中神经网络在隐藏层将有 300 个节点。权重张量 `W1`
    的大小是 `[784, 300]`。同样，TensorFlow 支持 NumPy 随机正态函数，它分配一个给定大小的矩阵，用随机样本填充。以类似的方式，权重变量
    `W2` 和偏差变量 `b2` 将隐藏层连接到神经网络的输出。
- en: 'The output of the hidden layer is calculated by using the `relu` function (by
    applying the rectified linear unit):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏层的输出是通过使用 `relu` 函数（应用修正线性单元）来计算的：
- en: '[PRE31]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The weight multiplication with the output from the hidden layer, and the addition
    of a `b2` bias value, is applied by using the softmax activation for the output
    layer. This can be found via the TensorFlow softmax function `tf.nn.softmax`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 权重与隐藏层输出的乘积，以及 `b2` 偏置值的加和，通过使用输出层的 softmax 激活函数应用。这可以通过 TensorFlow 的 softmax
    函数 `tf.nn.softmax` 找到：
- en: '[PRE32]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For the optimizer, we need to include a cost or loss function. The cross entropy
    cost function is used for this purpose. Here is how we set up the optimizer in
    TensorFlow:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 对于优化器，我们需要包含一个成本或损失函数。交叉熵成本函数用于此目的。以下是我们在 TensorFlow 中设置优化器的方式：
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The gradient descent optimizer is supplied by TensorFlow alongside a learning
    rate that''s used to specify the minimized cross entropy cost operation that has
    been provisioned. The function is going to perform gradient descent and back propagation
    as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 提供梯度下降优化器以及一个学习率，用于指定已提供的最小化交叉熵成本操作。该函数将执行以下梯度下降和反向传播：
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The correct prediction operation provides `correct_prediction`, which utilizes
    TensorFlow. `tensorf.equal` provides a true/false reading depending on the arguments
    of the Boolean value. `tensorf.argmax` works in the same way as the NumPy `argmax`
    function, since it returns the index of the maximum value in a particular tensor
    or vector.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 正确预测操作提供 `correct_prediction`，它利用 TensorFlow 的 `tensorf.equal` 提供一个基于布尔值参数的真/假读取。`tensorf.argmax`
    与 NumPy 的 `argmax` 函数类似工作，因为它返回特定张量或向量中最大值的索引。
- en: Henceforth, the `correct_prediction` operation assigns a tensor of size (`mx1`)
    true or false, designating whether the neural network is correctly predicting
    the digit value.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 从此以后，`correct_prediction` 操作分配一个大小为 (`mx1`) 的张量，表示是否神经网络正确预测了数字值。
- en: TensorFlow training
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow 训练
- en: For provisioning the TensorFlow training, first, the TensorFlow session needs
    to be set up and initialize the variables.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 对于提供 TensorFlow 训练，首先需要设置 TensorFlow 会话并初始化变量。
- en: 'It also provides the details from a minibatch training scheme that can be executed
    for the neural network. It also calculates the number of batches to run through
    in each epoch by calculating each training epoch and initializing an `avg_cost`
    variable. TensorFlow supplies an MNIST dataset that has a utility function, such
    as `next_batch`, which makes it easier to extract batches of training data:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了可以用于神经网络的小批量训练方案的详细信息。它还通过计算每个训练周期和初始化一个 `avg_cost` 变量来计算每个周期需要运行的批次数。TensorFlow
    提供了一个具有实用函数（如 `next_batch`）的 MNIST 数据集，这使得提取训练数据批次变得更容易：
- en: '[PRE37]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Execution of TensorFlow on Azure using Docker container services
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 容器服务在 Azure 上执行 TensorFlow
- en: 'TensorFlow can be executed using Docker container services on top of Azure
    Linux virtual machines. The endpoint needs to be exposed in the NSG port `8888`,
    and the following command, which initializes a Docker container running TensorFlow
    inside a Jupyter Notebook, needs to be executed:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 可以在 Azure Linux 虚拟机之上使用 Docker 容器服务执行。需要在 NSG 端口 `8888` 上公开端点，并执行以下命令，该命令在
    Jupyter Notebook 内初始化运行 TensorFlow 的 Docker 容器：
- en: '[PRE38]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![](img/a2afbfff-6672-406f-8a1b-d6028b910a37.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2afbfff-6672-406f-8a1b-d6028b910a37.png)'
- en: Running TensorFlow containers on an Azure Kubernetes Cluster (AKS)
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure Kubernetes Cluster (AKS) 上运行 TensorFlow 容器
- en: A sample Kubernetes cluster on the **Azure container service** (**AKS**) is
    provisioned by using the open source toolkit DLWorkspace ([https://microsoft.github.io/DLWorkspace/](https://microsoft.github.io/DLWorkspace/)).
    The repository provides standard Azure VMs on CPU/GPU. The sample k8 cluster and
    Alluxio-FUSE-enabled k8 pods can be created.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 使用开源工具包 DLWorkspace ([https://microsoft.github.io/DLWorkspace/](https://microsoft.github.io/DLWorkspace/))
    配置了一个示例 Kubernetes 集群在 Azure 容器服务（**AKS**）上。该仓库提供了标准 Azure VMs 在 CPU/GPU 上。可以创建示例
    k8 集群和启用 Alluxio-FUSE 的 k8 pods。
- en: 'The sample pod configuration is available at the following GitHub link: [https://github.com/jichang1/TensorFlowonAzure/tree/master/Alluxio](https://github.com/jichang1/TensorFlowonAzure/tree/master/Alluxio).'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 pod 配置的 GitHub 链接为：[https://github.com/jichang1/TensorFlowonAzure/tree/master/Alluxio](https://github.com/jichang1/TensorFlowonAzure/tree/master/Alluxio)。
- en: 'TensorFlow jobs can be executed on the parameter server pods and worker pods
    by using the following commands:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令在参数服务器 pod 和工作 pod 上执行 TensorFlow 作业：
- en: '[PRE39]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Other deep learning libraries
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他深度学习库
- en: 'Microsoft provides samples of deep learning tools across Theano, Caffe, MXNet,
    Chainer, PyTorch, and Keras on datasets such as MNIST and CIFAR10\. The following
    are the prerequisites to run these samples:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在 MNIST 和 CIFAR10 等数据集上提供了 Theano、Caffe、MXNet、Chainer、PyTorch 和 Keras 等深度学习工具的示例。运行这些示例的先决条件如下：
- en: 'You need Visual Studio 2017 with VS tools for AI and the MNIST dataset. The
    VS tools for AI are available to download from Extensions and Updates under Tools:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要安装带有 VS tools for AI 和 MNIST 数据集的 Visual Studio 2017。VS tools for AI 可从“工具”下的“扩展和更新”中下载：
- en: '![](img/17aba079-166e-4747-993d-319890d26abb.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17aba079-166e-4747-993d-319890d26abb.png)'
- en: An NVIDIA GPU driver/CUDA 9.0/cuDNN 7.0, as applicable, and Python 3.5/3.6\.
    Python 2.x is still not supported (as of the time of writing).
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要，安装 NVIDIA GPU 驱动程序/CUDA 9.0/cuDNN 7.0 和 Python 3.5/3.6。Python 2.x 仍然不支持（截至编写本文时）。
- en: 'The deep learning libraries that need to be installed include NumPy, SciPy,
    Matplotlib, ONNX, CNTK, TensorFlow, Caffe2 , MXNet, Keras, theano, and PyTorch:'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要安装的深度学习库包括 NumPy、SciPy、Matplotlib、ONNX、CNTK、TensorFlow、Caffe2、MXNet、Keras、theano
    和 PyTorch：
- en: '![](img/a2655502-f1b4-43ac-801d-5ef11f740bbd.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2655502-f1b4-43ac-801d-5ef11f740bbd.png)'
- en: The GitHub link for the AI samples repository is available at [https://github.com/Microsoft/samples-for-ai](https://github.com/Microsoft/samples-for-ai).
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AI 示例仓库的 GitHub 链接为[https://github.com/Microsoft/samples-for-ai](https://github.com/Microsoft/samples-for-ai)。
- en: '**Apache MXNet**: Apache MXNet is a scalable deep learning library that''s
    used to train and deploy deep neural networks  that are available to scale across
    GPU or CPU. MXNet offers support for Azure. More details on MXNet are available
    at [https://mxnet.incubator.apache.org/](https://mxnet.incubator.apache.org/).'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache MXNet**：Apache MXNet 是一个可扩展的深度学习库，用于训练和部署可在 GPU 或 CPU 上扩展的深度神经网络。MXNet
    提供了对 Azure 的支持。有关 MXNet 的更多详细信息，请访问[https://mxnet.incubator.apache.org/](https://mxnet.incubator.apache.org/)。'
- en: '**Caffe**: This deep learning framework provides expressions, speed, scalability,
    modularity, openness, and huge community support for building and training complex
    neural networks. Caffe 2.0 is pre-installed in Azure Deep Learning toolkits and
    DSVM.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Caffe**：这个深度学习框架提供了表达式、速度、可扩展性、模块化、开放性和庞大的社区支持，用于构建和训练复杂的神经网络。Caffe 2.0已预安装在Azure深度学习工具包和DSVM中。'
- en: '**Theano**: This is a Python-based deep learning library that''s used for the
    evaluation of complex mathematical, statistical expressions by using the NumPy-esque
    syntax and is compiled by using CPU/GPU architectures.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Theano**：这是一个基于Python的深度学习库，它使用NumPy式的语法来评估复杂的数学和统计表达式，并通过CPU/GPU架构进行编译。'
- en: '**Pytorch**: Pytorch is again a Python-based scientific computing framework
    that''s used for Numpy executions on GPU and Deep Learning interactive research.
    Pytorch allows for interactive debugging with clean dynamic graphs with a mixture
    of high-level and low-level API support. This works for **Artificial Neural Networks**
    (**ANNs**), Regression, and **Convolution Neural Networks** (**CNNs**).'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pytorch**：Pytorch再次是一个基于Python的科学计算框架，用于在GPU上执行Numpy操作和深度学习交互式研究。Pytorch允许使用混合高级和低级API支持进行交互式调试，具有清晰的动态图。这适用于**人工神经网络**（**ANNs**）、回归和**卷积神经网络**（**CNNs**）。'
- en: '**Chainer**: An open source deep learning library based on Python that''s used
    for NumPy and CuPy `libraries.supports` CUDA implementations and intuitive, flexible
    DL frameworks that allow the use of feed-forward nets, convnets, recurrent nets,
    and recursive nets. More details can be found at [https://chainer.org/](https://chainer.org/).'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chainer**：这是一个基于Python的开源深度学习库，它使用NumPy和CuPy `libraries.supports` CUDA实现，并提供了直观、灵活的深度学习框架，允许使用前馈网络、卷积网络、循环网络和递归网络。更多详细信息请参阅[https://chainer.org/](https://chainer.org/)。'
- en: Summary
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about deep learning methodology and the tools
    that are supported on the Microsoft Azure AI platform. We have demonstrated various
    AI tools, such as CNTK, MMLSpark, and TensorFlow, as well as its execution process
    on Azure deep learning toolkits/data science VMs, along with other open source
    deep learning libraries and utilities.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了深度学习方法论以及Microsoft Azure AI平台所支持的工具。我们展示了各种AI工具，如CNTK、MMLSpark和TensorFlow，以及它们在Azure深度学习工具包/数据科学虚拟机上的执行过程，以及其他开源深度学习库和实用工具。
- en: In the next chapter, we will be looking at a step-by-step overview of integrating
    other Azure services with the Microsoft AI platform.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将逐步概述如何将其他Azure服务与Microsoft AI平台集成。
