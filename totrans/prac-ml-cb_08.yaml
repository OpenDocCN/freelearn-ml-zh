- en: Chapter 8. Reinforcement Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 强化学习
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Markov chains - the stocks regime switching model
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马尔可夫链 - 股票状态切换模型
- en: Markov chains - the multi-channel attribution model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马尔可夫链 - 多渠道归因模型
- en: Markov chains - the car rental agency service
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马尔可夫链 - 汽车租赁代理服务
- en: Continuous Markov chains - vehicle service at the gas station
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连续马尔可夫链 - 加油站车辆服务
- en: Monte Carlo simulations - calibrated hull and white short-rates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蒙特卡洛模拟 - 校准的Hull和White短期利率
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**The Markov chain**: A sequence  of trials of an experiment is a Markov chain
    if the outcome of each experiment is one of the set of discrete states, and the
    outcome of the experiment is dependent only on the present state and not of any
    of the past states. The probability of changing from one state to another state
    is represented as![Introduction](img/image_08_001.jpg). It is called a transition
    probability. The transition probability matrix is an n × n matrix such that each
    element of the matrix is non-negative and each row of the matrix sums to one.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**马尔可夫链**：如果一个实验的每次试验的结果是离散状态集合中的一个，并且试验的结果只依赖于当前状态而不依赖于任何过去的状态，那么这个实验的试验序列就是一个马尔可夫链。从一个状态转换到另一个状态的概率表示为![介绍](img/image_08_001.jpg)。这被称为转移概率。转移概率矩阵是一个n
    × n矩阵，其中矩阵的每个元素都是非负的，并且矩阵的每一行之和为1。'
- en: '**Continuous time Markov chains**: Continuous-time Markov chains can be labeled
    as transition systems augmented with rates that have discrete states. The states
    have continuous time-steps and the delays are exponentially distributed. Continuous-time
    Markov chains are suited to model reliability models, control systems, biological
    pathways, chemical reactions, and so on.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**连续时间马尔可夫链**：连续时间马尔可夫链可以被标记为带有离散状态的速率增强的转移系统。状态具有连续的时间步长，延迟是指数分布的。连续时间马尔可夫链适用于建模可靠性模型、控制系统、生物途径、化学反应等。'
- en: '**Monte Carlo simulations**: Monte Carlo simulation  is a stochastic simulation
    of system behavior. The simulation uses sampling experiments to be performed on
    the model and then conducts numerical experiments using the computer to obtain
    a statistical understanding of the system behavior. Monte Carlo simulations are
    used to construct theories for observed behavior of complicated systems, predict
    future behavior of a system, and study effects on final results based upon input
    and parameter changes within a system. The stochastic simulation is a way of experimenting
    with a system to find ways to improve or better understand the system behavior.
    It uses random numbers that are uniformly distributed over the interval [0, 1].
    These uniformly distributed random numbers are used for the generation of stochastic
    variables from various probability distributions. Sampling experiments are then
    generated, which are associated with the modeling of system behavior.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**蒙特卡洛模拟**：蒙特卡洛模拟是对系统行为的随机模拟。模拟使用对模型进行的采样实验，然后使用计算机进行数值实验，以获得对系统行为的统计理解。蒙特卡洛模拟用于构建复杂系统观察行为的理论，预测系统的未来行为，并研究系统内部输入和参数变化对最终结果的影响。随机模拟是一种实验系统以找到改进或更好地理解系统行为的方法。它使用在区间[0,
    1]上均匀分布的随机数。这些均匀分布的随机数用于从各种概率分布中生成随机变量。然后生成与系统行为建模相关的采样实验。'
- en: Markov chains - the stocks regime switching model
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 马尔可夫链 - 股票状态切换模型
- en: In the last few decades, a lot of studies have been conducted on the analysis
    and forecasting of volatility. Volatility is the degree of variation of a trading
    price series over time as measured by the standard deviation of returns. Models
    of stock returns assume that the returns follow a geometric Brownian motion. This
    implies that over any discrete time interval, the return on stocks is log normally
    distributed and that returns in non-overlapping intervals are independent. Studies
    have found that this model fails to capture extreme price movements and stochastic
    variability in the volatility parameter. Stochastic volatility takes discrete
    values, switching between these values randomly. This is the basis of the **regime-switching
    lognormal process** (**RSLN**).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几十年中，对波动性的分析和预测进行了大量研究。波动性是指随着时间的推移，通过回报率的标准差来衡量的交易价格系列的变动程度。股票回报率模型假设回报率遵循几何布朗运动。这意味着在任何离散时间间隔内，股票的回报率是对数正态分布的，且非重叠间隔内的回报率是独立的。研究发现，该模型无法捕捉极端价格变动和波动性参数中的随机变异性。随机波动性取离散值，在这些值之间随机切换。这是**制度切换对数正态过程**（**RSLN**）的基础。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: In order to perform the Markov chains regime switching model we shall be using
    data collected from the Stock's dataset.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行马尔可夫链制度切换模型，我们将使用从股票数据集中收集的数据。
- en: Step 1 - collecting and describing the data
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步 - 收集和描述数据
- en: 'The dataset called `StocksRegimeSwitching.csv` shall be used. This dataset
    is available in csv format and called `StocksRegimeSwitching.csv`. The dataset
    is in the standard format. There are 66 rows of data. There are seven variables.
    The numeric variables are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用名为`StocksRegimeSwitching.csv`的数据集。该数据集以csv格式提供，并命名为`StocksRegimeSwitching.csv`。数据集采用标准格式。有66行数据。有七个变量。数值变量如下：
- en: '`LRY`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LRY`'
- en: '`LRV`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LRV`'
- en: '`INT`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INT`'
- en: '`LRC`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LRC`'
- en: '`LVS`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LVS`'
- en: '`LGS`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LGS`'
- en: 'The non-numeric variable is as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 非数值变量如下：
- en: '`DATE`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATE`'
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's get into the details.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解细节。
- en: Step 2 - exploring the data
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二步 - 探索数据
- en: 'The first step is to load the following packages:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是加载以下包：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.2.2 (2015-08-14).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在R版本3.2.2（2015-08-14）中进行了测试。
- en: 'Let''s explore the data and understand the relationships between the variables.
    We''ll begin by importing the CSV data file called `StocksRegimeSwitching.csv`.
    We will be saving the data to the `MarkovSwitchData` data frame:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索数据并了解变量之间的关系。我们将首先导入名为`StocksRegimeSwitching.csv`的CSV数据文件。我们将把数据保存到`MarkovSwitchData`数据框中：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Attaching the dataset. The `attach()` function attaches the dataset to the
    search path. The dataset is searched when evaluating the variables. `MarkovSwitchData`
    is passed as a parameter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 附加数据集。`attach()`函数将数据集附加到搜索路径。在评估变量时搜索数据集。`MarkovSwitchData`作为参数传递：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Printing the `MarkovSwitchData` data frame. The `head()` function returns the
    first part of the `MarkovSwitchData` data frame. The `MarkovSwitchData` data frame
    is passed as an input parameter:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`MarkovSwitchData`数据框。`head()`函数返回`MarkovSwitchData`数据框的前部分。`MarkovSwitchData`数据框作为输入参数传递：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The results are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_08_002.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_08_002.jpg)'
- en: 'Exploring the dimension of the `MarkovSwitchData` data frame. The `dim()`function
    returns the dimension of the `MarkovSwitchData` frame. The `MarkovSwitchData`
    data frame is passed as an input parameter. The result clearly states that there
    are 66 rows of data and seven single columns:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 探索`MarkovSwitchData`数据框的维度。`dim()`函数返回`MarkovSwitchData`数据框的维度。`MarkovSwitchData`数据框作为输入参数传递。结果清楚地表明，有66行数据，七个单列：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_08_003.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_08_003.jpg)'
- en: 'Printing the summary of the `MarkovSwitchData` data frame. The `summary()`
    function is a multipurpose function. The `summary()` function is a generic function
    that provides a summary of the data related to the individual object or data frame.
    The `MarkovSwitchData` data frame is passed as an R object to the `summary()`
    function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`MarkovSwitchData`数据框的摘要。`summary()`函数是一个多功能函数。`summary()`函数是一个通用函数，它提供了与单个对象或数据框相关的数据摘要。`MarkovSwitchData`数据框作为R对象传递给`summary()`函数：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The result is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_08_004.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_08_004.jpg)'
- en: Step 3 - preparing the regression model
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 - 准备回归模型
- en: A regression model will be prepared on the dataset. Regression analysis is used
    when two or more variables are thought to be systematically connected by a linear
    relationship. Regression models are used to predict one variable from another
    variable. They provide a prediction about the past, present, and future events,
    based on information.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据集上准备回归模型。当认为两个或更多变量通过线性关系系统性地连接时，使用回归分析。回归模型用于从一个变量预测另一个变量。它们基于信息提供关于过去、现在和未来事件的预测。
- en: 'Defining the dependent variable. The `cbind()` function is used to define the
    dependent variable. The function takes in the `LVS` data frame. The resulting
    data frame is stored in the `yLogValueStocks` data frame:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 定义因变量。`cbind()` 函数用于定义因变量。该函数接受 `LVS` 数据框。结果数据框存储在 `yLogValueStocks` 数据框中：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Printing the `yLogValueStocks` frame. The `head()` function returns the first
    part of the `yLogValueStocks` frame. The `yLogValueStocks` frame is passed as
    an input parameter:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `yLogValueStocks` 数据框。`head()` 函数返回 `yLogValueStocks` 数据框的前部分。`yLogValueStocks`
    数据框作为输入参数传递：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The result is as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the regression model](img/image_08_005.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备回归模型](img/image_08_005.jpg)'
- en: The `cbind ()` function takes in the `LGS` data frame. The resulting data frame
    is stored in the `yLogGrowthStocks` data frame.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`cbind()` 函数接受 `LGS` 数据框。结果数据框存储在 `yLogGrowthStocks` 数据框中。'
- en: 'Printing the `yLogGrowthStocks` frame. The `head()` function returns the first
    part of the `yLogGrowthStocks` data frame. The `yLogGrowthStocks` frame is passed
    as an input parameter:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `yLogGrowthStocks` 数据框。`head()` 函数返回 `yLogGrowthStocks` 数据框的前部分。`yLogGrowthStocks`
    数据框作为输入参数传递：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the regression model](img/image_08_006.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备回归模型](img/image_08_006.jpg)'
- en: 'Defining the independent variable The `cbind()` function is used to define
    the dependent variable. The function takes in the `LRY`, `LRC`, `INT`, `LRV` data
    frames. The resulting data frame is stored in the `x` data frame:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 定义自变量。`cbind()` 函数用于定义因变量。该函数接受 `LRY`、`LRC`、`INT`、`LRV` 数据框。结果数据框存储在 `x` 数据框中：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Creating an **ordinary least square** (**OLS**) regression equation. The `lm()`
    function is used to fit linear models. The model to be fitted is represented symbolically
    by `yLogValueStocks~x`. The result is then stored in the `olsLogValueStocks` data
    frame:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个**普通最小二乘**（**OLS**）回归方程。使用 `lm()` 函数拟合线性模型。要拟合的模型以符号形式表示为 `yLogValueStocks~x`。结果存储在
    `olsLogValueStocks` 数据框中：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Printing the summary of the `olsLogValueStocks` data frame. The `summary()`
    function is used to provide a summary of the data related to the individual object
    or data frame. The `olsLogValueStocks` data frame is passed as an R object to
    the `summary()` function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `olsLogValueStocks` 数据框的摘要。使用 `summary()` 函数提供与单个对象或数据框相关的数据摘要。将 `olsLogValueStocks`
    数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the regression model](img/image_08_007.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备回归模型](img/image_08_007.jpg)'
- en: 'Creating an ordinary least square regression equation. The model to be fitted
    is represented symbolically by `yLogGrowthStocks~x`. The result is then stored
    in the `olsLogGrowthStocks` data frame:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个普通最小二乘回归方程。要拟合的模型以符号形式表示为 `yLogGrowthStocks~x`。结果存储在 `olsLogGrowthStocks`
    数据框中：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Printing the summary of the `olsLogGrowthStocks` data frame. The `olsLogGrowthStocks`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `olsLogGrowthStocks` 数据框的摘要。将 `olsLogGrowthStocks` 数据框作为 R 对象传递给 `summary()`
    函数：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The result is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the regression model](img/image_08_008.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备回归模型](img/image_08_008.jpg)'
- en: Step 4 - preparing the Markov-switching model
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4 - 准备马尔可夫切换模型
- en: The Markov switching model involves multiple equations that can characterize
    the time series behaviors in different regimes. The model is able to capture complex
    dynamic patterns by switching between structures. The current value of the state
    variable depends on the immediate past value, which is controlled by the Markovian
    property.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 马尔可夫切换模型涉及多个方程，可以表征不同制度下的时间序列行为。模型通过在结构之间切换来捕捉复杂的动态模式。状态变量的当前值取决于即时过去值，该值由马尔可夫性质控制。
- en: 'Creating a Markov switching model for the value of stocks. The `msmFit()` function
    implements a Markov switching models using the EM algorithm, as follows. `olsLogValueStocks`
    is of the object class of the `lm` type. `k = 2` represents the estimated number
    of regimes. The result is stored in the `MarkovSwtchLogValueStocks` data frame:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为股票价值创建马尔可夫切换模型。`msmFit()` 函数使用 EM 算法实现马尔可夫切换模型，如下所示。`olsLogValueStocks` 是 `lm`
    类型的对象。`k = 2` 代表估计的状态数量。结果存储在 `MarkovSwtchLogValueStocks` 数据框中：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Printing the summary of the `MarkovSwtchLogValueStocks` data frame as follows.
    The `MarkovSwtchLogValueStocks` data frame is passed as an R object to the `summary()`
    function:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式打印 `MarkovSwtchLogValueStocks` 数据框的摘要。将 `MarkovSwtchLogValueStocks` 数据框作为
    R 对象传递给 `summary()` 函数：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing the Markov-switching model](img/image_08_009.jpg)![Step
    4 - preparing the Markov-switching model](img/image_08_010.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备马尔可夫切换模型](img/image_08_009.jpg)![步骤 4 - 准备马尔可夫切换模型](img/image_08_010.jpg)'
- en: 'Creating a Markov switching model for growth stocks. The `msmFit()` function
    implements the Markov switching model using the EM algorithm. `olsLogGrowthStocks`
    is of the object class of the `lm` type. `k = 2` represents the estimated number
    of regimes. The result is stored in the `MarkoSwtchLogGrowthStocks` data frame:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 创建增长股票的马尔可夫切换模型。`msmFit()` 函数使用 EM 算法实现马尔可夫切换模型。`olsLogGrowthStocks` 是 `lm`
    类型的对象。`k = 2` 代表估计的状态数量。结果存储在 `MarkoSwtchLogGrowthStocks` 数据框中：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Printing the summary of the `MarkoSwtchLogGrowthStocksdata` frame. The `MarkoSwtchLogGrowthStocks`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `MarkoSwtchLogGrowthStocks` 数据框的摘要。将 `MarkoSwtchLogGrowthStocks` 数据框作为 R
    对象传递给 `summary()` 函数：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing the Markov-switching model](img/image_08_011.jpg)![Step
    4 - preparing the Markov-switching model](img/image_08_012.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备马尔可夫切换模型](img/image_08_011.jpg)![步骤 4 - 准备马尔可夫切换模型](img/image_08_012.jpg)'
- en: Step 5 - plotting the regime probabilities
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5 - 绘制状态概率图
- en: Next we shall be plotting the regime probabilities that have been calculated.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将绘制已计算出的状态概率图。
- en: 'Plotting the regime probabilities for the value of stocks. The `par()` function
    is used to query the graphical parameters as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制股票价值的状态概率图。使用 `par()` 函数查询图形参数如下：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `plotProb()` function creates each plot for each regime. The plot contains
    smoothed and filtered probabilities. `MarkovSwtchLogValueStocks` is passed as
    an object of type `MSM.lm`. The `which = 1` value represents the subset of the
    plots that is required. Use the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotProb()` 函数为每个状态创建每个图。该图包含平滑和过滤后的概率。`MarkovSwtchLogValueStocks` 作为 `MSM.lm`
    类型的对象传递。`which = 1` 的值代表所需的图集子集。使用以下命令：'
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - plotting the regime probabilities](img/image_08_013.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 绘制状态概率图](img/image_08_013.jpg)'
- en: 'The `plotProb()` function creates each plot for each regime. The plot contains
    smoothed and filtered probabilities. `MarkovSwtchLogValueStocks` is passed as
    an object of the `MSM.lm` type. The `which = 2` value represents the plot of the
    regime with the response variable against the smoothed probabilities. Use the
    following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotProb()` 函数为每个状态创建每个图。该图包含平滑和过滤后的概率。`MarkovSwtchLogValueStocks` 作为 `MSM.lm`
    类型的对象传递。`which = 2` 的值代表响应变量与平滑概率的图。使用以下命令：'
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result is as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - plotting the regime probabilities](img/image_08_014.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 绘制状态概率图](img/image_08_014.jpg)'
- en: 'The `plotProb()` function creates each plot for each regime. `MarkoSwtchLogGrowthStocks`
    is passed as an object of the `MSM.lm` type. The `which = 1` value represents
    the subset of the plots that is required:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotProb()` 函数为每个状态创建每个图。`MarkoSwtchLogGrowthStocks` 作为 `MSM.lm` 类型的对象传递。`which
    = 1` 的值代表所需的图集子集：'
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - plotting the regime probabilities](img/image_08_015.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 绘制状态概率图](img/image_08_015.jpg)'
- en: 'The `plotProb()` function creates each plot for each regime. `MarkoSwtchLogGrowthStocks`
    is passed as an object of the `MSM.lm` type. The `which = 2` value represents
    the plot of the regime with the response variable against the smoothed probabilities.
    Use the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotProb()` 函数为每个状态创建每个图。`MarkoSwtchLogGrowthStocks` 作为 `MSM.lm` 类型的对象传递。`which
    = 2` 的值代表响应变量与平滑概率的图。使用以下命令：'
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - plotting the regime probabilities](img/image_08_016.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 绘制状态概率图](img/image_08_016.jpg)'
- en: Step 6 - testing the Markov switching model
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 6 步 - 测试马尔可夫切换模型
- en: Next we shall run a set of diagnostic tests on the Markov switching model.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将对马尔可夫切换模型运行一系列诊断测试。
- en: 'Ploting the regime probabilities for the value of stocks. The `par()` function
    is used to query graphical parameters:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制股票价值的制度概率图。使用 `par()` 函数查询图形参数：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Creating the plots for the residual analysis. The `plotDiag()` function plots
    the residuals against the fitted values. `MarkovSwtchLogValueStocks` is passed
    as an object of the `MSM.lm` type. The `which = 1` value represents the subset
    of the plots is that required. The `which=1` value represents the plot of residuals
    against fitted values:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 创建残差分析的绘图。`plotDiag()` 函数将残差与拟合值进行绘图。`MarkovSwtchLogValueStocks` 作为 `MSM.lm`
    类型的对象传递。`which = 1` 的值表示所需的绘图子集。`which=1` 的值表示残差与拟合值的绘图：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - testing the Markov switching model](img/image_08_017.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 测试马尔可夫切换模型](img/image_08_017.jpg)'
- en: 'The `plotDiag()` function plots the residuals against the fitted values. `MarkovSwtchLogValueStocks`
    is passed as an object of the `MSM.lm` type. `which = 2` represents the subset
    of the plots that is required. `which=2` represents the Normal Q-Q plot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotDiag()` 函数将残差与拟合值进行绘图。`MarkovSwtchLogValueStocks` 作为 `MSM.lm` 类型的对象传递。`which
    = 2` 表示所需的绘图子集。`which=2` 表示正态 Q-Q 图：'
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The result is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - testing the Markov switching model](img/image_08_018.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 测试马尔可夫切换模型](img/image_08_018.jpg)'
- en: 'The `plotDiag()` function plots the residuals against the fitted values. `MarkoSwtchLogGrowthStocks`
    is passed as an object of the `MSM.lm` type. `which = 3` represents the subset
    of the plots that is required. `which=3` represents the ACF/PACF of residuals
    and the ACF/PACF of square residuals:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotDiag()` 函数将残差与拟合值进行绘图。`MarkoSwtchLogGrowthStocks` 作为 `MSM.lm` 类型的对象传递。`which
    = 3` 表示所需的绘图子集。`which=3` 表示残差和平方残差的 ACF/PACF：'
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The result is as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - testing the Markov switching model](img/image_08_019.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 测试马尔可夫切换模型](img/image_08_019.jpg)'
- en: 'The `plotDiag()` function plots the residuals against the fitted values. `MarkoSwtchLogGrowthStocks`
    is passed as an object of the `MSM.lm` type. `which = 1` represents the subset
    of the plots that is required. `which = 1` represents the plot of residuals against
    fitted values:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotDiag()` 函数将残差与拟合值进行绘图。`MarkoSwtchLogGrowthStocks` 作为 `MSM.lm` 类型的对象传递。`which
    = 1` 表示所需的绘图子集。`which = 1` 表示残差与拟合值的绘图：'
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The result is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - testing the Markov switching model](img/image_08_020.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 测试马尔可夫切换模型](img/image_08_020.jpg)'
- en: 'The `plotDiag()` function plots the residuals against the fitted values. `MarkoSwtchLogGrowthStocks`
    is passed as an object of the `MSM.lm` type. `which = 2` represents the subset
    of the plots that is required. `which=2` represents the Normal Q-Q plot:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotDiag()` 函数将残差与拟合值进行绘图。`MarkoSwtchLogGrowthStocks` 作为 `MSM.lm` 类型的对象传递。`which
    = 2` 表示所需的绘图子集。`which=2` 表示正态 Q-Q 图：'
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The result is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - testing the Markov switching model](img/image_08_021.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 测试马尔可夫切换模型](img/image_08_021.jpg)'
- en: 'The `plotDiag()` function plots the residuals against the fitted values. `MarkoSwtchLogGrowthStocks`
    is passed as an object of the `MSM.lm` type. `which = 3` represents the subset
    of the plots that is required. `which=3` represents the ACF/PACF of residuals
    and the ACF/PACF of square residuals:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`plotDiag()` 函数将残差与拟合值进行绘图。`MarkoSwtchLogGrowthStocks` 作为 `MSM.lm` 类型的对象传递。`which
    = 3` 表示所需的绘图子集。`which=3` 表示残差和平方残差的 ACF/PACF：'
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The result is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - testing the Markov switching model](img/image_08_022.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 测试马尔可夫切换模型](img/image_08_022.jpg)'
- en: Markov chains - the multi-channel attribution model
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 马尔可夫链 - 多渠道归因模型
- en: A customer's journey undergoes a path of different channels before a purchase
    on an e-commerce website. Multi-channel attribution assigns a value to each step
    in the journey. The question is how one can identify the value in the actions
    people take on your website that lead to a conversion. Commonly, businesses use
    "last click" attribution, which means assigning all the conversion value to the
    last step in the journey or "first click" attribution. The first step in developing
    multi-channel attribution analytics is to understand the customer's journey -
    from awareness through purchase to after-purchase support. The ultimate goal is
    to develop loyal customers who spend a significant money on purchases, recommend
    the brand to others, and it potentially becomes a brand.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子商务网站上，顾客的购物之旅会经历不同的渠道路径，在购买之前。多渠道归因会给旅程中的每一步分配一个价值。问题是人们在你网站上采取哪些行动可以识别导致转化的价值。通常，企业使用“最后点击”归因，这意味着将所有转化价值分配给旅程中的最后一步或“首次点击”归因。发展多渠道归因分析的第一步是理解顾客的旅程——从意识通过购买到购买后的支持。最终目标是培养忠诚的顾客，他们在购买上花费大量金钱，向他人推荐品牌，并可能成为品牌。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to perform a Markov chains multi-channel attribution model we shall
    be simulating customer journeys containing three unique channels.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行马尔可夫链多渠道归因模型，我们将模拟包含三个独特渠道的顾客旅程。
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's get into the details.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解细节。
- en: Step 1 - preparing the dataset
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1 - 准备数据集
- en: 'First load the following packages:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 首先加载以下包：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.2.2 (2015-08-14).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在R版本3.2.2（2015-08-14）中进行了测试。
- en: 'Creating the data sample: The `c()` function combines arguments to form a vector.
    All the arguments passed to the function are combined to form a common type that
    is the type of the returned value. The `data.frame()` function creates a tightly
    coupled data frame that is the collection of variables that share many of the
    properties of matrices and of lists. We will be saving the data to the `datafrm1`
    data frame as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据样本：`c()`函数将参数组合起来形成一个向量。传递给函数的所有参数都会组合成一个共同类型，即返回值的类型。`data.frame()`函数创建了一个紧密耦合的数据框，它是具有许多矩阵和列表属性变量的集合。我们将以下方式将数据保存到`datafrm1`数据框中：
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Print the `datafrm1` data frame as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式打印`datafrm1`数据框：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The result is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 1 - preparing the dataset](img/image_08_023.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 1 - 准备数据集](img/image_08_023.jpg)'
- en: Step 2 - preparing the model
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2 - 准备模型
- en: Preparing the Markov model. The `markov_model()` function estimates the k-order
    Markov model from customer journey data. `datafrm1` is the data frame that contains
    the customer journeys as defined. The `var_path` variable has the names of the
    columns that contain the journey path. The `var_conv` variable represents the
    name of the columns containing total conversions. The `var_null` variable represents
    the columns containing total paths that do not lead to conversions. `out_more
    = TRUE` returns the transition probabilities between channels and removal effects.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 准备马尔可夫模型。`markov_model()`函数从顾客旅程数据中估计k阶马尔可夫模型。`datafrm1`是包含定义好的顾客旅程的数据框。`var_path`变量包含包含旅程路径的列名。`var_conv`变量代表包含总转化的列名。`var_null`变量代表包含不导致转化的总路径的列。`out_more
    = TRUE`返回渠道之间的转移概率和消除效应。
- en: 'The result of the estimated k-order Markov model is stored in the `model1`
    data frame as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 估计的k阶马尔可夫模型的结果存储在以下`model1`数据框中：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Printing the `model1` data frame:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`model1`数据框：
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The result is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - preparing the model](img/image_08_024.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 准备模型](img/image_08_024.jpg)'
- en: 'Extract the result attribution from the `model1data` frame as follows. The
    result is then stored in the `datafrmresult1` data frame:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式从`model1data`数据框中提取结果归因。结果随后存储在`datafrmresult1`数据框中：
- en: '[PRE35]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Extracting the `transition_matrix` attribution from the `model1data` frame
    as follows. The result is then stored in the `datafrmtransmatrix1` data frame:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式从`model1data`数据框中提取`transition_matrix`归因。结果随后存储在`datafrmtransmatrix1`数据框中：
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Reshaping the data frame. The result of the reshaped data frame is stored in
    `datafrmtransmatrix`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 重新塑形数据框。重塑后的数据框结果存储在`datafrmtransmatrix`：
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Printing the `datafrmtransmatrix` data frame:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`datafrmtransmatrix`数据框：
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The result is as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - preparing the model](img/image_08_025.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 准备模型](img/image_08_025.jpg)'
- en: Step 3 - plotting the Markov graph
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 - 绘制马尔可夫图
- en: 'Extracting the `transition_matrix` attribution from the `model1` data frame.
    The result is then stored in the `datafrmtransmatrix` data frame:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `model1` 数据框中提取 `transition_matrix` 属性。结果随后存储在 `datafrmtransmatrix` 数据框中：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Print the `datafrmtransmatrix` data frame as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式打印 `datafrmtransmatrix` 数据框：
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The result is as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_026.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_026.jpg)'
- en: 'Creating the `datafrmdummy` data sample. The `c()` function combines arguments
    to form a vector. All the arguments passed to the function are combined to form
    a common type that is the type of the returned value. The `data.frame()` function
    creates a tightly coupled data frame that is the collection of variables that
    share many of the properties of matrices and of lists. We will be saving the data
    to the `datafrmdummy` data frame as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `datafrmdummy` 数据样本。`c()` 函数将参数组合成向量。传递给函数的所有参数组合成一个返回值的公共类型。`data.frame()`
    函数创建一个紧密耦合的数据框，它是具有矩阵和列表许多属性的变量的集合。我们将如下将数据保存到 `datafrmdummy` 数据框中：
- en: '[PRE41]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Printing the `datafrmtransmatrix` data frame:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrmtransmatrix` 数据框：
- en: '[PRE42]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The result is as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_027.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_027.jpg)'
- en: 'Combining the columns as follows*.* `rbind()` takes a sequence of data frames
    and combines them. `datafrmtransmatrix` and `df_dummy` are passed as input parameters.
    The result is then the `datafrmtransmatrix` data frame:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式合并列*.* `rbind()` 函数接受一系列数据框并将它们合并。`datafrmtransmatrix` 和 `df_dummy` 作为输入参数传递。结果是
    `datafrmtransmatrix` 数据框：
- en: '[PRE43]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Printing the `datafrmtransmatrix` data frame:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrmtransmatrix` 数据框：
- en: '[PRE44]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The result is as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_028.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_028.jpg)'
- en: 'Order the channels as follows. `factor()` as a function is used to encode a
    vector as a factor. `datafrmtransmatrix$channel_from` is passed as a vector of
    data. `levels = c(''(start)'', ''(conversion)'', ''(null)'', ''c1'', ''c2'', ''c3'')`
    represents an optional vector of the values:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下顺序排列通道。`factor()` 函数用作将向量编码为因子的函数。`datafrmtransmatrix$channel_from` 作为数据向量传递。`levels
    = c('(start)', '(conversion)', '(null)', 'c1', 'c2', 'c3')` 表示一个可选的值向量：
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Printing the `datafrmtransmatrix$channel_from` data frame as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式打印 `datafrmtransmatrix$channel_from` 数据框：
- en: '[PRE46]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The result is as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_029.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_029.jpg)'
- en: 'Ordering the channels as follows. `datafrmtransmatrix$channel_to` is passed
    as a vector of data:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下顺序排列通道。`datafrmtransmatrix$channel_to` 作为数据向量传递：
- en: '[PRE47]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Print `datafrmtransmatrix$channel_to` the data frame:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrmtransmatrix$channel_to` 数据框：
- en: '[PRE48]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The result is as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_030.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_030.jpg)'
- en: 'Reshaping the data frame. The result of the reshaped data frame is stored in
    `datafrmtransmatrix`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 重新塑形数据框。重塑数据框的结果存储在 `datafrmtransmatrix` 中：
- en: '[PRE49]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Printing the `datafrmtransmatrix` data frame:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrmtransmatrix` 数据框：
- en: '[PRE50]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The result is as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_031.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_031.jpg)'
- en: 'Creating the Markov chain object. `matrix()` as a function creates a matrix
    from a given set of values:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 创建马尔可夫链对象。`matrix()` 函数从给定的一组值创建矩阵：
- en: '[PRE51]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Printing the `transitionmatrix` data frame:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `transitionmatrix` 数据框：
- en: '[PRE52]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The result is as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_032.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_032.jpg)'
- en: '[PRE53]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Creating a Markov chain object. The `transitionMatrix` will be a transition
    matrix, that is, all entries will be probabilities and either all rows or all
    columns will sum up to one:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 创建马尔可夫链对象。`transitionMatrix` 将是一个转换矩阵，即所有条目都是概率，并且所有行或所有列的总和都等于一：
- en: '[PRE54]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Printing the `transitionmatrix1` data frame:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `transitionmatrix1` 数据框：
- en: '[PRE55]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The result is as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_033.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_033.jpg)'
- en: 'Plotting the graph:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制图形：
- en: '[PRE56]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The result is as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - plotting the Markov graph](img/image_08_034.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 绘制马尔可夫图](img/image_08_034.jpg)'
- en: Step 4 - simulating the dataset of customer journeys
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4 - 模拟客户旅程数据集
- en: 'The `data.frame()` function creates a tightly coupled data frame that is the
    collection of variables that share many of the properties of matrices and of lists.
    We will be saving the data to the `datafrm2` data frame as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`data.frame()` 函数创建了一个紧密耦合的数据框，它是具有许多矩阵和列表属性集合的变量。我们将如下将数据保存到 `datafrm2` 数据框中：'
- en: '[PRE57]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Printing the `datafrm2` frame. The `head()` function returns the first part
    of the `datafrm2` frame. The `datafrm2` frame is passed as an input parameter:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrm2` 数据框。`head()` 函数返回 `datafrm2` 数据框的前部分。将 `datafrm2` 数据框作为输入参数传递：
- en: '[PRE58]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The result is as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - simulating the dataset of customer journeys](img/image_08_035.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 模拟客户旅程数据集](img/image_08_035.jpg)'
- en: 'Converting the character objects to date objects. `datafrm2$date` represents
    the object to be converted. `origin = "2016-01-01"` represents the `Date` object:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符对象转换为日期对象。`datafrm2$date` 表示要转换的对象。`origin = "2016-01-01"` 表示 `Date` 对象：
- en: '[PRE59]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Concatenating the vectors after converting to characters. Add the `channel_`
    object to the channel. `datafrm2$channel` represents the data frame:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在转换为字符后连接向量。将 `channel_` 对象添加到渠道中。`datafrm2$channel` 表示数据框：
- en: '[PRE60]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Printing the `datafrm2` frame. The `head()` function returns the first part
    of the `datafrm2` frame. The `datafrm2` frame is passed as an input parameter:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrm2` 数据框。`head()` 函数返回 `datafrm2` 数据框的前部分。将 `datafrm2` 数据框作为输入参数传递：
- en: '[PRE61]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The result is as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - simulating the dataset of customer journeys](img/image_08_036.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 模拟客户旅程数据集](img/image_08_036.jpg)'
- en: 'Aggregating the channels to the paths for each customer:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 将渠道聚合到每个客户的路径中：
- en: '[PRE62]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Printing the `datafrm2` data frame:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrm2` 数据框：
- en: '[PRE63]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The result is as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - simulating the dataset of customer journeys](img/image_08_037.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 模拟客户旅程数据集](img/image_08_037.jpg)'
- en: Preparing the Markov models. The `markov_model()` function estimates the k-order
    Markov model from customer journey data. `datafrm2` is the data frame that contains
    the customer journeys as defined. `var_path` has the names of the columns that
    contain the journey path. `var_conv` represents the name of the columns containing
    total conversions. `var_null` represents the columns containing total paths that
    do not lead to conversions. `out_more = TRUE` returns the transition probabilities
    between channels and removal effects.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 准备马尔可夫模型。`markov_model()` 函数从客户旅程数据中估计 k 阶马尔可夫模型。`datafrm2` 是包含客户旅程数据的数据框。`var_path`
    包含包含旅程路径的列名。`var_conv` 表示包含总转换的列名。`var_null` 表示包含总路径但不导致转换的列。`out_more = TRUE`
    返回渠道之间的转换概率和移除效果。
- en: 'The result of the estimated k-order Markov model is stored in the `model2`
    data frame as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 估计的 k 阶马尔可夫模型的结果存储在 `model2` 数据框中，如下所示：
- en: '[PRE64]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Printing the `datafrmheuristic` data frame:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrmheuristic` 数据框：
- en: '[PRE66]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The result is as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - simulating the dataset of customer journeys](img/image_08_038.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 模拟客户旅程数据集](img/image_08_038.jpg)'
- en: '[PRE67]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Printing the `datafrmfirsttouch` data frame:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrmfirsttouch` 数据框：
- en: '[PRE68]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The result is as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - simulating the dataset of customer journeys](img/image_08_039.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 模拟客户旅程数据集](img/image_08_039.jpg)'
- en: '[PRE69]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Printing the `datafrmfirsttouch` data frame:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `datafrmfirsttouch` 数据框：
- en: '[PRE70]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The result is as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - simulating the dataset of customer journeys](img/image_08_040.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 模拟客户旅程数据集](img/image_08_040.jpg)'
- en: 'Merging the two data frames by common columns. The result is stored in the
    `heuristicmodel2` data frame:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 通过公共列合并两个数据框。结果存储在 `heuristicmodel2` 数据框中：
- en: '[PRE71]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Printing the `heuristicmodel2` data frame:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `heuristicmodel2` 数据框：
- en: '[PRE72]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The result is as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - simulating the dataset of customer journeys](img/image_08_041.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 模拟客户旅程数据集](img/image_08_041.jpg)'
- en: 'Merging all the models:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 合并所有模型：
- en: '[PRE73]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Printing the `allmodels` data frame:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `allmodels` 数据框：
- en: '[PRE74]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The result is as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - simulating the dataset of customer journeys](img/image_08_042.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 模拟客户旅程数据集](img/image_08_042.jpg)'
- en: Step 5 - preparing a transition matrix heat map for real data
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5 - 准备真实数据的转换矩阵热图
- en: Plotting the heatmap.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制热图。
- en: '[PRE75]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Return the maximum value of all the arguments present in the `datafrmplottransition$transition_probability`
    data frame:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `datafrmplottransition$transition_probability` 数据框中返回所有参数的最大值：
- en: '[PRE76]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Printing the value of `t`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `t` 的值：
- en: '[PRE77]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The result is as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - preparing a transition matrix heat map for real data](img/image_08_043.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 为真实数据准备转移矩阵热图](img/image_08_043.jpg)'
- en: '[PRE78]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The result is as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - preparing a transition matrix heat map for real data](img/image_08_044.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 为真实数据准备转移矩阵热图](img/image_08_044.jpg)'
- en: Markov chains - the car rental agency service
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 马尔可夫链 - 汽车租赁机构服务
- en: 'Suppose a car rental agency has three locations in Ottawa: A downtown location
    (labeled A), A East End location (labeled B), and a West End location (labeled
    C). The agency has a group of delivery drivers to serve all three locations. The
    agency''s statistician has determined the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一家汽车租赁机构在渥太华有三个位置：一个市中心位置（标记为A），一个东部端位置（标记为B），以及一个西部端位置（标记为C）。该机构有一组送货司机为所有三个位置提供服务。该机构的统计学家已经确定了以下情况：
- en: Of the calls to the `Downtown` location, 30% are delivered in the Downtown area,
    30% are delivered in the `East` end, and 40% are delivered in the `West` end
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对“市中心”位置的呼叫中，30%的呼叫被投递到市中心区域，30%的呼叫被投递到“东部”端，40%的呼叫被投递到“西部”端
- en: Of the calls to the `East` end location, 40% are delivered in the downtown area,
    40% are delivered in the `East` end, and 20% are delivered in the `West` end
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对“东部”端位置的呼叫中，40%的呼叫被投递到市中心区域，40%的呼叫被投递到“东部”端，20%的呼叫被投递到“西部”端
- en: Of the calls to the `West` end location, 50% are delivered in the Downtown area,
    30% are delivered in the `East` end, and 20% are delivered in the `West` end
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对“西部”端位置的呼叫中，50%的呼叫被投递到市中心区域，30%的呼叫被投递到“东部”端，20%的呼叫被投递到“西部”端
- en: After making a delivery, a driver goes to the nearest location to make the next
    delivery. This way, the location of a specific driver is determined only by their
    previous location.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成一次送货后，司机前往最近的地点进行下一次送货。这样，特定司机的位置仅由其先前位置决定。
- en: How to do it...
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's get into the details.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解。
- en: Step 1 - preparing the dataset
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1 - 准备数据集
- en: 'Load the following packages:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 加载以下包：
- en: '[PRE79]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Note
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.2.2 (2015-08-14).'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页代码在R版本3.2.2（2015-08-14）中进行了测试。
- en: 'Creating the data sample. The `c()` function combines arguments to form a vector.
    All the arguments passed to the function are combined to form a common type that
    is the type of the returned value. We will be saving the data to the `RentalStates`
    data frame:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据样本。`c()`函数将参数组合成一个向量。传递给函数的所有参数都被组合成一个返回值的共同类型。我们将数据保存到`RentalStates`数据框中：
- en: '[PRE80]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Printing the value of `RentalStates`:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`RentalStates`的值：
- en: '[PRE81]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The result is as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 1 - preparing the dataset](img/image_08_045.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 1 - 准备数据集](img/image_08_045.jpg)'
- en: 'Creating the matrix. The `matrix()` function creates a matrix from the given
    set of values. The `byrow = T` matrix is filled by rows. `nrow = 3` represents
    the desired number of rows. The `c()` function combines arguments to form a vector.
    All the arguments passed to the function are combined to form a common type that
    is the type of the returned value:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 创建矩阵。`matrix()`函数从给定的值集合创建矩阵。`byrow = T`矩阵按行填充。`nrow = 3`代表所需的行数。`c()`函数将参数组合成一个向量。传递给函数的所有参数都被组合成一个返回值的共同类型：
- en: '[PRE82]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Printing the value of `RentalTransitionMatrix`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`RentalTransitionMatrix`的值：
- en: '[PRE83]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The result is as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 1 - preparing the dataset](img/image_08_046.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 1 - 准备数据集](img/image_08_046.jpg)'
- en: Step 2 - preparing the model
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2 - 准备模型
- en: 'Creating a Markov chain object. The `new()` function creates object of the
    type `markovchain`. States represents the `RentalStates` as defined previously.
    `byrow = T matrix` is filled by rows. The result is then stored in the data frame `mcRental`:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 创建马尔可夫链对象。`new()`函数创建`markovchain`类型的对象。状态表示之前定义的`RentalStates`。`byrow = T`矩阵按行填充。结果随后存储在数据框`mcRental`中：
- en: '[PRE84]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Printing the `mcRental` data frame:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`mcRental`数据框：
- en: '[PRE85]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The result is as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - preparing the model](img/image_08_047.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 准备模型](img/image_08_047.jpg)'
- en: 'Accessing the transition matrix by calling the `mcRental` object as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`mcRental`对象来访问转移矩阵如下：
- en: '[PRE86]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The result is as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - preparing the model](img/image_08_048.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 准备模型](img/image_08_048.jpg)'
- en: 'Ploting the `mcRental` object. `plot()` is a generic function to plot R objects:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制`mcRental`对象。`plot()`是一个通用的绘图函数：
- en: '[PRE87]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The result is as follows:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - preparing the model](img/image_08_049.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 准备模型](img/image_08_049.jpg)'
- en: Calculating the transition probability. `transitionProbability` `()` provides
    direct access to transition probabilities.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 计算转移概率。`transitionProbability` `()` 提供了对转移概率的直接访问。
- en: '[PRE88]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The result is as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - preparing the model](img/image_08_050.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 准备模型](img/image_08_050.jpg)'
- en: Step 3 - improving the model
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 - 改进模型
- en: 'Calculating the probability of being in Downtown in two trips; Downtown to
    Downtown:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 计算两次行程中在市中心的可能性；市中心到市中心：
- en: '[PRE89]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Calculating the probability of going Downtown from the East location; East
    to Downtown:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 计算从东位置前往市中心的概率；东到市中心：
- en: '[PRE90]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Calculating the probability of going Downtown from the West location; West
    to Downtown:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 计算从西位置前往市中心的概率；西到市中心：
- en: '[PRE91]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The result is as follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_051.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_051.jpg)'
- en: 'Squaring the `mcRental` matrix to calculate the probability, we will be downtown
    in two trips:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `mcRental` 矩阵平方以计算两次行程中到达市中心的概率：
- en: '[PRE92]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The result is as follows:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_052.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_052.jpg)'
- en: 'Checking the probability that we will be downtown in 20 trips using the `mcRental`
    matrix probability calculation as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `mcRental` 矩阵概率计算检查我们将在 20 次行程中到达市中心的概率如下：
- en: '[PRE93]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The result is as follows:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_053.jpg)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_053.jpg)'
- en: 'Checking the probability that we will be downtown in three trips using the
    `mcRental` matrix probability calculation as follows:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `mcRental` 矩阵概率计算检查我们将在三次行程中到达市中心的概率如下：
- en: '[PRE94]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The result is as follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_054.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_054.jpg)'
- en: 'This method returns the stationary vector in matrix form of a markovchain object:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回 markovchain 对象的矩阵形式的稳态向量：
- en: '[PRE95]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The result is as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_055.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_055.jpg)'
- en: 'Printing the summary of `mcRental`:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `mcRental` 的摘要：
- en: '[PRE96]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The result is as follows:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_056.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_056.jpg)'
- en: 'Extracting the conditional distribution of the subsequent state, given the
    current state. `mcRental` is the markov chain object that is passed while `"Downtown"`
    is the next state:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 提取给定当前状态的后续状态的条件分布。`mcRental` 是传递的 markov chain 对象，而 `"Downtown"` 是下一个状态：
- en: '[PRE97]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The result is as follows:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_057.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_057.jpg)'
- en: '[PRE98]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The result is as follows:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_058.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_058.jpg)'
- en: '[PRE99]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'The result is as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - improving the model](img/image_08_059.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 改进模型](img/image_08_059.jpg)'
- en: Continuous Markov chains - vehicle service at a gas station
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连续马尔可夫链 - 加油站车辆服务
- en: A gas station has a single pump. There is no space for vehicles to wait. If
    a vehicle arrives at the pump and there is no place the vehicle leaves without
    filling at the pump. Vehicles arrive at the gas station following a Poisson process
    with a rate of 3/20 vehicles per minute. Of the vehicles arriving at the pump,
    75% are cars and 25% are motorcycles. The refueling time can be modeled with an
    exponential random variable with a mean of eight minutes for cars and three minutes
    for motorcycles.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 一个加油站只有一个加油机。没有空间供车辆等待。如果一辆车到达加油机，且没有地方加油，那么车辆将离开加油机而不加油。车辆以每分钟 3/20 辆车的速率按照泊松过程到达加油站。到达加油机的车辆中，75%
    是汽车，25% 是摩托车。加油时间可以用平均为八分钟的指数随机变量来建模，对于摩托车则是三分钟。
- en: Getting ready
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: In order to perform continuous Markov chains for vehicle service at a gas station
    we shall be simulating data.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对加油站车辆服务进行连续马尔可夫链模拟，我们需要模拟数据。
- en: How to do it...
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's get into the details.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解。
- en: Step 1 - preparing the dataset
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1 - 准备数据集
- en: 'Load the following packages:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 加载以下包：
- en: '[PRE100]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Note
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.2.2 (2015-08-14)'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在 R 版本 3.2.2（2015-08-14）下进行了测试
- en: 'Initializing the vehicle arrival rate:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化车辆到达速率：
- en: '[PRE101]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Printing the `ArrivalRate` data frame:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `ArrivalRate` 数据框：
- en: '[PRE102]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The result is as follows:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 1 - preparing the dataset](img/image_08_060.jpg)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 1 - 准备数据集](img/image_08_060.jpg)'
- en: 'Initializing the service rate of the vehicles and create the data sample. The
    `c()` function combines arguments to form a vector. All the arguments passed to
    the function are combined to form a common type that is the type of the returned
    value. We will be saving the data to the `ServiceRate` data frame:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化车辆的服务速率并创建数据样本。`c()` 函数将参数组合成一个向量。传递给函数的所有参数组合形成一个返回值的共同类型。我们将数据保存到 `ServiceRate`
    数据框中：
- en: '[PRE103]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Printing the `ServiceRate` data frame:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `ServiceRate` 数据框：
- en: '[PRE104]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The result is as follows:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 1 - preparing the dataset](img/image_08_061.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 1 - 准备数据集](img/image_08_061.jpg)'
- en: 'Initializing the probability of the arrival of the car:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化汽车到达的概率：
- en: '[PRE105]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Creating a transition matrix. `matrix()` as a function creates a matrix from
    a given set of values. The result is stored in the `TransitionMatrix` data frame:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 创建转移矩阵。`matrix()` 函数从给定的一组值创建矩阵。结果存储在 `TransitionMatrix` 数据框中：
- en: '[PRE106]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Printing the `TransitionMatrix` data frame:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `TransitionMatrix` 数据框：
- en: '[PRE107]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The result is as follows:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 1 - preparing the dataset](img/image_08_062.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 1 - 准备数据集](img/image_08_062.jpg)'
- en: 'Initializing the vector:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化向量：
- en: '[PRE108]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Step 2 - computing the theoretical resolution
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2 - 计算理论分辨率
- en: 'Solving the linear system of equations. `solve()` is used to compute the linear
    equation. `t(A)` represents the transition matrix while `B` is the vector. The
    result is then stored in `P`:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 解线性方程组。`solve()` 用于计算线性方程。`t(A)` 表示转移矩阵，而 `B` 是向量。结果随后存储在 `P` 中：
- en: '[PRE109]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Printing the `P` data frame:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `P` 数据框：
- en: '[PRE110]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'The result is as follows:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - computing the theoretical resolution](img/image_08_063.jpg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 计算理论分辨率](img/image_08_063.jpg)'
- en: 'Computing the theoretical resolution. `sum()` computes the sum. The result
    is then stored in `Resolution`:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 计算理论分辨率。`sum()` 计算总和。结果随后存储在 `Resolution` 中：
- en: '[PRE111]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Printing the `Resolution` data frame:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `Resolution` 数据框：
- en: '[PRE112]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The result is as follows:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - computing the theoretical resolution](img/image_08_064.jpg)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 计算理论分辨率](img/image_08_064.jpg)'
- en: Step 3 - verifying the convergence of a theoretical solution
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 - 验证理论解的收敛性
- en: 'Simulating the system and verify that it converges to a theoretical solution:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟系统并验证其收敛到理论解：
- en: '[PRE113]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Defining the `option.1` function. A `create_trajectory()` function creates the
    trajectory object of car and motorcycle types. These objects comprise a chain
    of activities that is to be attached to a generator object. Activities for seizing
    the pump object by name are carried out. `amount=1` means the number of objects
    that require to be seized. The `timeout()` function inserts the delays based on
    the user definition. The `timeout()` function also takes in the `rexp()` function
    that randomly generates the exponential distribution with a rate defined as `ServiceRate[1]
    = 1/8` for the `car` object and `ServiceRate[1] = 1/3` for the `motorcycle` object.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 `option.1` 函数。一个 `create_trajectory()` 函数创建汽车和摩托车类型的轨迹对象。这些对象构成一个要附加到生成器对象的活动链。通过名称捕获泵对象的活动被执行。`amount=1`
    表示需要捕获的对象数量。`timeout()` 函数根据用户定义插入延迟。`timeout()` 函数还接受 `rexp()` 函数，该函数随机生成指数分布，其速率定义为
    `ServiceRate[1] = 1/8` 用于 `car` 对象，以及 `ServiceRate[1] = 1/3` 用于 `motorcycle` 对象。
- en: 'Then a simulator object is created as follows. The method initializes a simulation
    environment. The `car` and `motorcycle` objects are created with the exponential
    distribution with the rate defined as `p*ArrivalRate` where `ArrivalRate = 0.15`.
    Then a new generator of arrivals in a simulation environment is created:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建如下模拟对象。该方法初始化模拟环境。使用指数分布创建 `car` 和 `motorcycle` 对象，其速率定义为 `p*ArrivalRate`，其中
    `ArrivalRate = 0.15`。然后在模拟环境中创建一个新的到达生成器：
- en: '[PRE114]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Defining the `option.2` function. Define a single generator for all kinds of
    vehicles and a single trajectory. In order to distinguish between cars and motorcycles,
    define a branch after seizing the resource to select the proper service time.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 `option.2` 函数。为所有类型的车辆定义一个生成器和一个轨迹。为了区分汽车和摩托车，在捕获资源后定义一个分支以选择适当的服务时间。
- en: A `create_trajectory()` function creates the trajectory object of the `vehicle`
    type. This object comprises a chain of activities that is to be attached to a
    generator object. Activities for seizing the pump object by name are carried out.
    `amount=1` means the number of objects that are required to be seized. The `create_trajectory()`
    function then calls the `timeout()` function that inserts the delays based on
    the user definition. The `timeout()` function, also takes in the `rexp()` function
    which randomly generates the exponential distribution with the rate defined as
    `ServiceRate[1] = 1/8` for a car object and `ServiceRate[1] = 1/3` for a `motorcycle`
    object.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_trajectory()`函数创建了`vehicle`类型的轨迹对象。此对象包含一系列要附加到生成器对象的活动。执行按名称捕获泵对象的活动。`amount=1`表示需要捕获的对象数量。然后`create_trajectory()`函数调用`timeout()`函数，该函数根据用户定义插入延迟。`timeout()`函数还接受`rexp()`函数，该函数随机生成指数分布，其速率定义为汽车对象的`ServiceRate[1]
    = 1/8`和摩托车对象的`ServiceRate[1] = 1/3`。'
- en: 'Then a simulator object is created as follows. The method initializes a simulation
    environment. The `car` and `motorcycle` objects are created with the exponential
    distribution with the rate defined as `p*ArrivalRate. ArrivalRate = 0.15`. The
    `run()` function then continues to run until the user-defined time out, as mentioned
    in `until=t`:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按照以下方式创建一个模拟对象。该方法初始化一个模拟环境。使用指数分布创建了`car`和`motorcycle`对象，其速率定义为`p*ArrivalRate.
    ArrivalRate = 0.15`。然后`run()`函数继续运行，直到用户定义的超时时间，如`until=t`所述：
- en: '[PRE117]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Defining the `option.3` function. `option.2` adds an unnecessary overhead.
    An additional call is made to select the branch, and therefore performance decreases.
    Select the service time directly inside the `timeout()` function:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`option.3`函数。`option.2`添加了不必要的开销。额外调用以选择分支，因此性能降低。直接在`timeout()`函数内选择服务时间：
- en: '[PRE118]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Call the options created as follows:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式调用创建的选项：
- en: '[PRE119]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Step 4 - plotting the results
  id: totrans-434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4 - 绘制结果
- en: 'Plotting the results. `plot_resource_usage()` is used to plot the usage of
    a resource over the simulation time frame. `gas.station` represents a single simmer
    environment. `"pump"` represents the name of the resource. `items="system"` refers
    to the components of the resource to be plotted. The result is then stored in
    an object of `ggplot2` type graph:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制结果。使用`plot_resource_usage()`绘制资源在模拟时间框架内的使用情况。`gas.station`代表单个模拟环境。"pump"代表资源的名称。"items="system"`指的是要绘制的资源组件。结果随后存储在`ggplot2`类型图形的对象中：
- en: '[PRE120]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'The result is as follows:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - plotting the results](img/image_08_065.jpg)'
  id: totrans-438
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 绘制结果](img/image_08_065.jpg)'
- en: Monte Carlo simulations - calibrated Hull and White short-rates
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蒙特卡洛模拟 - 校准的 Hull 和 White 短期利率
- en: Monte Carlo simulation is a stochastic simulation of system behavior. The simulation
    uses sampling experiments to be performed on the model and it then conducts numerical
    experiments using the computer to obtain a statistical understanding of the system
    behavior.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 蒙特卡洛模拟是对系统行为的随机模拟。模拟使用采样实验在模型上执行，然后使用计算机进行数值实验，以获得对系统行为的统计理解。
- en: Getting ready
  id: totrans-441
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to perform Monte Carlo simulations for calibrated hull and white short-rates,
    data is taken from sample code that has been shipped with `QuantLib` 0.3.10, market
    data used to construct the term structure of interest rates and swaption volatility
    matrix with corresponding maturities and tenors.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对校准的船体和白短期利率进行蒙特卡洛模拟，从与`QuantLib` 0.3.10一起发布的示例代码中获取数据，使用市场数据构建利率期限结构和期权波动率矩阵，并对应于到期日和期限。
- en: Step 1 - installing the packages and libraries
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1 - 安装包和库
- en: 'Load the following packages:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 加载以下包：
- en: '[PRE121]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Note
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.2.2 (2015-08-14)'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在 R 版本 3.2.2（2015-08-14）中进行了测试
- en: In order to make part of the `Quantlib` package accessible to the R environment
    `RQuantLib` is used. The `Quantlib` package provides a comprehensive software
    framework for quantitative finance. The goal of the `RQuantLib` is to provide
    source libraries for modeling, trading, sources, either local or remote sources.
    GSPC is assets.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`Quantlib`包的部分内容对 R 环境`RQuantLib`可用，使用了`RQuantLib`。`Quantlib`包提供了一个用于定量金融的全面软件框架。`RQuantLib`的目标是提供用于建模、交易、来源的源库，无论是本地还是远程来源。GSPC是资产。
- en: '`type="binary"` indicates the type of package to be downloaded and installed.
    This means that the nature of the package to be installed is not a source package.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`type="binary"` 表示要下载和安装的包的类型。这意味着要安装的包的性质不是源包。'
- en: How to do it...
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's get into the details.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解。
- en: Step 2 - initializing the data and variables
  id: totrans-452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步 - 初始化数据和变量
- en: 'Initializing the variables:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化变量：
- en: '[PRE122]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Printing the value of `delta_t`:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `delta_t` 的值：
- en: '[PRE123]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The result is as follows:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - initializing the data and variables](img/image_08_066.jpg)'
  id: totrans-458
  prefs: []
  type: TYPE_IMG
  zh: '![第2步 - 初始化数据和变量](img/image_08_066.jpg)'
- en: 'Initializing the variables from the sample code integrated with `QuantLib`
    0.3.10\. A list specifying the `tradeDate` (month/day/year), `settleDate`, forward
    rate time span `dt`, and two curve construction options: `interpWhat` (with possible
    values discount, forward, and zero) and `interpHow` (with possible values linear,
    loglinear, and spline). spline here means cubic spline interpolation of the `interpWhat`
    value.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 从与 `QuantLib` 0.3.10 集成的示例代码中初始化变量。一个指定 `tradeDate`（月/日/年）、`settleDate`、远期利率时间跨度
    `dt` 以及两个曲线构建选项：`interpWhat`（可能的值为贴现、远期和零）和 `interpHow`（可能的值为线性、对数线性和平滑）。这里的平滑意味着对
    `interpWhat` 值进行三次样条插值。
- en: 'The result is then stored in the `params` data frame:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将结果存储在 `params` 数据框中：
- en: '[PRE124]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Initializing the market data. The term structure is constructed for interest
    rates, deposits, and swaps. The result is then stored in `TermQuotes`:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化市场数据。为利率、存款和掉期构建了期限结构。然后将结果存储在 `TermQuotes` 中：
- en: '[PRE125]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Initializing the `Swaptionmaturities`:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化 `Swaptionmaturities`：
- en: '[PRE126]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Printing the value of `SwaptionMaturities`:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `SwaptionMaturities` 的值：
- en: '[PRE127]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The result is as follows:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - initializing the data and variables](img/image_08_067.jpg)'
  id: totrans-469
  prefs: []
  type: TYPE_IMG
  zh: '![第2步 - 初始化数据和变量](img/image_08_067.jpg)'
- en: 'Initializing the swap tenors:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化掉期期限：
- en: '[PRE128]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Printing the value of `SwapTenors`:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `SwapTenors` 的值：
- en: '[PRE129]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The result is as follows:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - initializing the data and variables](img/image_08_068.jpg)'
  id: totrans-475
  prefs: []
  type: TYPE_IMG
  zh: '![第2步 - 初始化数据和变量](img/image_08_068.jpg)'
- en: 'Initializing the volatility matrix. The `matrix()` function creates a matrix
    from the given set of values. `ncol=5` denotes the number of desired of columns.
    `byrow=TRUE` means the matrix is filled by rows. The result is then stored in
    `VolatilityMatrix`:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化波动率矩阵。`matrix()` 函数从给定的值集中创建矩阵。`ncol=5` 表示所需的列数。`byrow=TRUE` 表示矩阵按行填充。然后将结果存储在
    `VolatilityMatrix` 中：
- en: '[PRE130]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Step 3 - pricing the Bermudan swaptions
  id: totrans-478
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第3步 - 评估伯努利掉期期权
- en: 'Price the Bermudan swaption as follows. `BermudanSwaption` is part of the `Quantlib`
    package. This is accessible to the R environment using `RQuantLib`. `BermudanSwaption`
    prices a Bermudan swaption with specified strike and maturity (in years), after
    calibrating the selected short-rate model to an input swaption volatility matrix.
    Swaption maturities and swap tenors are in years. It is assumed that the Bermudan
    swaption is exercisable on each reset date of the underlying swaps. Passing `params`,
    `TermQuotes`, `SwaptionMaturities`, `SwapTenors`, and `VolatilityMatrix` as inputs
    is used to compute Bermudan swaption. The result is stored in `BermudanSwaption`:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式评估伯努利掉期期权。`BermudanSwaption` 是 `Quantlib` 包的一部分。通过 `RQuantLib` 可在 R 环境中使用。`BermudanSwaption`
    在将选定的短期利率模型校准到输入的掉期波动率矩阵后，评估具有指定行权和到期日（以年为单位）的伯努利掉期期权。掉期期权的到期日和掉期期限以年为单位。假设伯努利掉期期权在基础掉期的每个重置日均可行使。通过传递
    `params`、`TermQuotes`、`SwaptionMaturities`、`SwapTenors` 和 `VolatilityMatrix` 作为输入来计算伯努利掉期期权。结果存储在
    `BermudanSwaption` 中：
- en: '[PRE131]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The `BermudanSwaption` valuation is displayed. The result is as follows:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `BermudanSwaption` 的估值。结果如下：
- en: '![Step 3 - pricing the Bermudan swaptions](img/image_08_069.jpg)'
  id: totrans-482
  prefs: []
  type: TYPE_IMG
  zh: '![第3步 - 评估伯努利掉期期权](img/image_08_069.jpg)'
- en: 'Printing the summary of `BermudanSwaption`:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `BermudanSwaption` 的摘要：
- en: '[PRE132]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'The result is as follows:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - pricing the Bermudan swaptions](img/image_08_070.jpg)'
  id: totrans-486
  prefs: []
  type: TYPE_IMG
  zh: '![第3步 - 评估伯努利掉期期权](img/image_08_070.jpg)'
- en: 'Printing the valuations of `BermudanSwaption`:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `BermudanSwaption` 的估值：
- en: '[PRE133]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The result is as follows:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - pricing the Bermudan swaptions](img/image_08_071.jpg)'
  id: totrans-490
  prefs: []
  type: TYPE_IMG
  zh: '![第3步 - 评估伯努利掉期期权](img/image_08_071.jpg)'
- en: Step 4 - constructing the spot term structure of interest rates
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第4步 - 构建利率的现货期限结构
- en: 'Initializing the vector of times at which to return the discount factors, forward
    rates, and zero rates. Times are specified such that the largest time plus `delta_t`
    does not exceed the longest maturity of the instruments used for calibration (no
    extrapolation):'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化返回贴现因子、远期利率和零利率的时间向量。时间指定为最大时间加上 `delta_t` 不超过用于校准的金融工具的最长期限（不进行外推）：
- en: '[PRE134]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '`DiscountCurve` constructs the spot term structure of interest rates based
    on input market data including the settlement date, deposit rates, and swap rates.
    It returns the corresponding discount factors, zero rates, and forward rates for
    a vector of times that is specified as input. params represents a list that specifies
    the `tradeDate` (month/day/year), `settleDate`, forward rate time span, and two
    curve construction options: `interpWhat` (with possible values discount, forward,
    and zero) and `interpHow` (with possible values `linear`, `loglinear`, and `spline`).
    spline here means cubic spline interpolation of the `interpWhat` value. `TermQuotes`
    represents market quotes to construct the spot term structure of interest rates.
    Use the following command:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`DiscountCurve` 根据输入的市场数据构建利率的即期期限结构，包括结算日期、存款利率和掉期利率。它返回指定为输入的时间向量对应的贴现因子、零利率和远期利率。`params`
    代表一个列表，指定了 `tradeDate`（月/日/年）、`settleDate`、远期利率时间跨度以及两个曲线构建选项：`interpWhat`（可能的值为贴现、远期和零）和
    `interpHow`（可能的值为 `linear`、`loglinear` 和 `spline`）。这里的 `spline` 表示对 `interpWhat`
    值的三次样条插值。`TermQuotes` 代表构建利率即期期限结构的市场报价。使用以下命令：'
- en: '[PRE135]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Exploring the internal structure of the `DiscountCurve` data frame. The `str()`
    function displays the internal structure of the data frame. The `DiscountCurve`
    is passed as an R object to the `str()` function:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `DiscountCurve` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`DiscountCurve` 作为R对象传递给 `str()`
    函数：
- en: '[PRE136]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'The result is as follows:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - constructing the spot term structure of interest rates](img/image_08_072.jpg)'
  id: totrans-499
  prefs: []
  type: TYPE_IMG
  zh: '![第4步 - 构建利率的即期期限结构](img/image_08_072.jpg)'
- en: 'Finding the maturity time at which to return the discount factors, forward
    rates, and zero rates:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找返回贴现因子、远期利率和零利率的到期时间：
- en: '[PRE137]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Printing the value of maturities:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 打印到期日的值：
- en: '[PRE138]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The result is as follows:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - constructing the spot term structure of interest rates](img/image_08_073.jpg)'
  id: totrans-505
  prefs: []
  type: TYPE_IMG
  zh: '![第4步 - 构建利率的即期期限结构](img/image_08_073.jpg)'
- en: 'Finding zero coupon rates:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找零息利率：
- en: '[PRE139]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Printing the value of zero coupon rates:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 打印零息利率的值：
- en: '[PRE140]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'The result is as follows:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - constructing the spot term structure of interest rates](img/image_08_074.jpg)'
  id: totrans-511
  prefs: []
  type: TYPE_IMG
  zh: '![第4步 - 构建利率的即期期限结构](img/image_08_074.jpg)'
- en: 'Finding discount factors:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找贴现因子：
- en: '[PRE141]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Printing the discount factors:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 打印贴现因子：
- en: '[PRE142]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The result is as follows:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - constructing the spot term structure of interest rates](img/image_08_075.jpg)'
  id: totrans-517
  prefs: []
  type: TYPE_IMG
  zh: '![第4步 - 构建利率的即期期限结构](img/image_08_075.jpg)'
- en: Step 5 - simulating Hull-White short-rates
  id: totrans-518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第5步 - 模拟Hull-White短期利率
- en: 'Setting the time horizons:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 设置时间范围：
- en: '[PRE143]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Setting the number of simulations:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 设置模拟次数：
- en: '[PRE144]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Printing the value of `a`:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `a` 的值：
- en: '[PRE145]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_076.jpg)'
  id: totrans-525
  prefs: []
  type: TYPE_IMG
  zh: '![第5步 - 模拟Hull-White短期利率](img/image_08_076.jpg)'
- en: '[PRE146]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Printing the value of `sigma`:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `sigma` 的值：
- en: '[PRE147]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_077.jpg)'
  id: totrans-529
  prefs: []
  type: TYPE_IMG
  zh: '![第5步 - 模拟Hull-White短期利率](img/image_08_077.jpg)'
- en: 'Simulating Gaussian shocks. `simshocks()` create a simulated version of correlated
    or dependent Gaussian shocks for risk factors. `n = NoSimulations` denotes number
    of simulations. `horizon = 5` means the time horizons. `frequency = monthly`.
    The result is then stored in the `GaussianShocks` data frame:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟高斯冲击。`simshocks()` 创建与风险因子相关的或依赖的高斯冲击的模拟版本。`n = NoSimulations` 表示模拟次数。`horizon
    = 5` 表示时间范围。`frequency = monthly`。结果随后存储在 `GaussianShocks` 数据框中：
- en: '[PRE148]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '`simdiff()` makes simulations of diffusion processes. `n = NoSimulations` represents
    the number of independent observations. `frequency = freq` is monthly. `model
    = "OU"` stands for the Ornstein-Uhlenbeck method. `x0 = 0` is the starting value
    of the process. `eps = GaussianShocks` represents Gaussian shocks:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '`simdiff()` 用于模拟扩散过程。`n = NoSimulations` 表示独立观察的数量。`frequency = freq` 表示每月。`model
    = "OU"` 代表奥恩斯坦-乌伦贝克方法。`x0 = 0` 是过程的起始值。`eps = GaussianShocks` 代表高斯冲击：'
- en: '[PRE149]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Calculating the forward rates. `ts()` creates time series objects. `replicate(nb.sims,
    DiscountCurve$forwards)` creates a vector of time-series values. `start = start(x)`
    represents the time of the first observation. `deltat = deltat(x)` represents
    the fraction of the sampling period between successive observations. The result
    is then stored in the `ForwardRates` data frame:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 计算远期利率。`ts()` 创建时间序列对象。`replicate(nb.sims, DiscountCurve$forwards)` 创建时间序列值向量。`start
    = start(x)` 表示第一次观察的时间。`deltat = deltat(x)` 表示连续观察之间的采样周期分数。结果存储在 `ForwardRates`
    数据框中：
- en: '[PRE150]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Generating regular sequences. `from = 0`, `to = horizon` denotes the starting
    and end values of sequences. `by = delta_t` denotes the increments in sequence:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 生成常规序列。`from = 0`，`to = horizon` 表示序列的起始和结束值。`by = delta_t` 表示序列的增量：
- en: '[PRE151]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Generating the short-term rates:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 生成短期利率：
- en: '[PRE152]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Calculating stochastic discount values. `r = ShortRates` denotes the short
    term rates, `X = 1` denotes the asset''s price:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 计算随机贴现值：
- en: '[PRE153]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Calculating the mean of stochastic discount values:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 计算随机贴现值的平均值：
- en: '[PRE154]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Printing the values of `MonteCarloPrices`:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `MonteCarloPrices` 的值：
- en: '[PRE155]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'The result is as follows:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_078.jpg)'
  id: totrans-547
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 模拟 Hull-White 短利率](img/image_08_078.jpg)'
- en: 'Calculating the zero rates of stochastic discount values:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 计算随机贴现值的零利率：
- en: '[PRE156]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Printing the values of `MonteCarloZeroRates`:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `MonteCarloZeroRates` 的值：
- en: '[PRE157]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'The result is as follows:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_079.jpg)'
  id: totrans-553
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 模拟 Hull-White 短利率](img/image_08_079.jpg)'
- en: 'Performing the student t test on the difference between stochastic discount
    terms and market prices. `t.test(x)` performs the t test. `conf.int` means confidence
    interval for the mean appropriate:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 对随机贴现项与市场价格之间的差异进行学生 t 检验。`t.test(x)` 执行 t 检验。`conf.int` 表示均值适当的置信区间：
- en: '[PRE158]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'The `head()` function returns the first part of the `ConfidenceInterval` frame.
    The `ConfidenceInterval` frame is passed as an input parameter as follows:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '`head()` 函数返回 `ConfidenceInterval` 框架的第一部分。`ConfidenceInterval` 框架作为输入参数按如下方式传递：'
- en: '[PRE159]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_080.jpg)'
  id: totrans-558
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 模拟 Hull-White 短利率](img/image_08_080.jpg)'
- en: 'Set the graphical parameters as follows:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 设置图形参数如下：
- en: '[PRE160]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '`esgplotbands()` plots color bands confidence intervals as follows. `ShortRates`
    represents the confidence interval:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '`esgplotbands()` 按如下方式绘制颜色置信区间带。`ShortRates` 表示置信区间：'
- en: '[PRE161]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_081.jpg)'
  id: totrans-563
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 模拟 Hull-White 短利率](img/image_08_081.jpg)'
- en: 'Plotting the **Monte Carlo v/s Market n Zero Rates** as follows. maturities,
    `MonteCarloZeroRates` represents the time series:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式绘制 **蒙特卡洛与市场 n 零利率** 对比图。到期日，`MonteCarloZeroRates` 表示时间序列：
- en: '[PRE162]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_082.jpg)'
  id: totrans-566
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 模拟 Hull-White 短利率](img/image_08_082.jpg)'
- en: 'Adding a sequence of points at the specified coordinates of the plot between
    maturities, `MonteCarloZeroRates`:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 在到期日 `MonteCarloZeroRates` 之间的指定坐标处添加一系列点：
- en: '[PRE163]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_083.jpg)'
  id: totrans-569
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 模拟 Hull-White 短利率](img/image_08_083.jpg)'
- en: 'Plotting the Monte Carlo v/s Market Prices as follows. maturities, `MonteCarloPrices`
    represents the time series:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 按如下方式绘制蒙特卡洛与市场价格对比图。到期日，`MonteCarloPrices` 表示时间序列：
- en: '[PRE164]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_084.jpg)'
  id: totrans-572
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 模拟 Hull-White 短利率](img/image_08_084.jpg)'
- en: 'Adding a sequence of points at the specified coordinates of the plot between
    maturities, `MonteCarloPrices`:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在到期日 `MonteCarloPrices` 之间的指定坐标处添加一系列点：
- en: '[PRE165]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '![Step 5 - simulating Hull-White short-rates](img/image_08_085.jpg)'
  id: totrans-575
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 模拟 Hull-White 短利率](img/image_08_085.jpg)'
- en: '[PRE166]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
