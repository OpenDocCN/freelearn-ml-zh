- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Planning a Robot with Raspberry Pi Pico
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Raspberry Pi Pico 规划机器人
- en: When you plan, you create the best chance for a mission’s success. We want to
    build robots in an achievable way. Let’s start with a plan in mind! We’ll use
    this plan to explore why **Raspberry Pi Pico** is a great fit for this and make
    a shopping list!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进行规划时，你为任务的成功创造了最佳机会。我们希望以可实现的方式构建机器人。让我们带着一个计划开始！我们将使用这个计划来探讨为什么 **Raspberry
    Pi Pico** 是一个非常适合的选择，并制作购物清单！
- en: In this chapter, you’ll learn about Raspberry Pi Pico’s capabilities. You’ll
    discover **CircuitPython** and understand why it is a great language for Raspberry
    Pi Pico. Additionally, we’ll plan a robot design and understand the trade-offs
    to make choices about the robot early in the project. We’ll check that our robot
    fits together, working out the parts and tools you’ll need with suggestions on
    how to get them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解 Raspberry Pi Pico 的功能。你将发现 **CircuitPython** 并了解为什么它是一种非常适合 Raspberry
    Pi Pico 的语言。此外，我们还将规划一个机器人设计，并了解在项目早期做出选择时需要权衡的内容。我们将检查我们的机器人是否组装得当，确定所需的零件和工具，并提供如何获取它们的建议。
- en: At the end of the chapter, you’ll have both a plan and parts arriving so that
    you are ready to build a robot. Additionally, you’ll have a starting process for
    making other robots and setting yourself up for success with them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将有一个计划，并且零部件也将到达，这样你就可以准备好组装机器人了。此外，你还将有一个制作其他机器人的起始过程，并为自己与它们一起取得成功做好准备。
- en: 'In this chapter, we’ll cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What is Raspberry Pi Pico, and why is it suitable for robotics?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi Pico 是什么，为什么它适合机器人？
- en: What is CircuitPython?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 CircuitPython？
- en: Planning a Raspberry Pi Pico robot
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划 Raspberry Pi Pico 机器人
- en: Test fitting a Raspberry Pi Pico robot
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试组装 Raspberry Pi Pico 机器人
- en: A recommended shopping list for robot basics
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人基础推荐的购物清单
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We’ll go into the necessary hardware and shopping list as we progress further
    in this chapter. So, in this section, we’ll just focus on what you will need physically
    and on your computer to get started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 随着本章的进一步深入，我们将详细介绍所需的硬件和购物清单。因此，在本节中，我们将只关注你开始时所需的物理物品和电脑上的内容。
- en: 'You will require the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下物品：
- en: Some thin cardboard
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些薄纸板
- en: A ruler, pencil, and scissors
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尺子、铅笔和剪刀
- en: A good web browser with internet access
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个好的网络浏览器，并且可以访问互联网
- en: What is Raspberry Pi Pico, and why is it suitable for robotics?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raspberry Pi Pico 是什么，为什么它适合机器人？
- en: At the heart of every robot is a **controller**. Usually, this is a computing
    device that is responsible for running the code for the robot to perform its tasks
    and behaviors. Choosing a controller is a key choice in robot design. You can
    either come from the *I have this controller, what can I do with it?* perspective
    or the *which controllers have the capabilities I’ll want for a particular* *robot?*
    perspective.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个机器人的核心都是一个**控制器**。通常，这是一个负责运行机器人执行任务和行为的代码的计算设备。选择控制器是机器人设计中的一个关键选择。你可以从“我有这个控制器，我能用它做什么？”的角度出发，或者从“哪些控制器具有我想要为特定机器人使用的功能？”的角度出发。
- en: In this section, we’ll take a closer look at what Raspberry Pi Pico offers as
    a controller and the trade-offs it’s made. We’ll explore why it is good for robotics
    and why it could be part of a larger, more interesting system, too.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更详细地了解 Raspberry Pi Pico 作为控制器所能提供的内容及其权衡。我们将探讨为什么它适合机器人，以及为什么它也可以成为更大、更有趣系统的一部分。
- en: Additionally, we’ll delve into the details of its interfaces and how they’ll
    be useful to us.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将深入了解其接口的细节以及它们将如何对我们有用。
- en: A microcontroller that runs Python
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 Python 的微控制器
- en: 'Let’s start by taking a look at Raspberry Pi Pico, and discover what it has.
    The following photograph shows Raspberry Pi Pico:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看 Raspberry Pi Pico，并发现它有什么。以下照片显示了 Raspberry Pi Pico：
- en: '![Figure 1.1 – Raspberry Pi Pico ](img/Figure_1.01_B18001.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – Raspberry Pi Pico](img/Figure_1.01_B18001.jpg)'
- en: Figure 1.1 – Raspberry Pi Pico
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – Raspberry Pi Pico
- en: Raspberry Pi Pico, as shown in *Figure 1**.1*, is an *RP2040* microcontroller
    on a Raspberry Pi-designed board. This **microcontroller** is a small computing
    device that has been designed to interface closely with hardware. It has a USB
    connection on the right-hand side for power or programming on a computer. The
    LED is useful for debugging. Also, there are many **input/output** (**IO**) pins
    around the edges to connect things. It is with these IO pins that the magic happens
    when it comes to controlling robots!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图1.1*所示，树莓派Pico是一款安装在树莓派设计板上的**RP2040**微控制器。这个**微控制器**是一个小型计算设备，旨在与硬件紧密接口。它右侧有一个USB连接，用于在计算机上供电或编程。LED对于调试很有用。此外，边缘周围有许多**输入/输出**（**IO**）引脚，可以连接各种设备。当涉及到控制机器人时，正是通过这些IO引脚发生魔法！
- en: Controllers use IO pins to write and read from attached hardware. They can group
    pins into buses (which we’ll cover in more detail later) to exchange data with
    other devices. Additionally, they can create waveforms on outputs for controlling
    motors and LEDs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器使用IO引脚从连接的硬件中写入和读取。它们可以将引脚分组为总线（我们将在后面更详细地介绍），以与其他设备交换数据。此外，它们可以在输出上创建波形，以控制电机和LED。
- en: 'This sounds a lot like the other **Raspberry Pi** models. However, this is
    a different class of computer. **Raspberry Pi Pico** has more in common with an
    **Arduino** board. Let’s take a closer look at what that difference means with
    the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来很像其他**树莓派**型号。然而，这是一个不同的计算机类别。**树莓派Pico**与**Arduino**板有更多共同之处。让我们通过以下图表更详细地看看这种差异意味着什么：
- en: '![Figure 1.2 – Microcontroller boards versus single-board computers ](img/Figure_1.02_B18001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 微控制器板与单板计算机对比](img/Figure_1.02_B18001.jpg)'
- en: Figure 1.2 – Microcontroller boards versus single-board computers
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 微控制器板与单板计算机对比
- en: '*Figure 1**.2* shows that while microcontroller boards such as Raspberry Pi
    Pico and Arduino might look similar to **single-board computers** (**SBCs**) such
    as Raspberry Pi 4 or BeagleBone, they have different key areas. For instance,
    they differ in storage, CPU speed, cost size, the complexity of software, and
    how closely your software runs to the hardware.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.2*显示，虽然像树莓派Pico和Arduino这样的微控制器板可能看起来与像树莓派4或BeagleBone这样的**单板计算机**（**SBC**）相似，但它们在关键区域有所不同。例如，它们在存储、CPU速度、成本大小、软件复杂性和软件与硬件的紧密程度方面存在差异。'
- en: While Raspberry Pi Pico is brilliantly suited to controlling hardware, such
    as robots, it isn’t as suited to high-memory or CPU tasks such as AI or visual
    recognition. There’s a kind of robot system known as **horse-and-rider**, which
    combines an SBC (for example, Raspberry Pi 4) for complex processing with a microcontroller
    (for example, Pico) for controlling hardware.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然树莓派Pico非常适合控制硬件，如机器人，但它并不适合高内存或CPU任务，如AI或视觉识别。有一种名为**马和骑手**的机器人系统，它将用于复杂处理的SBC（例如，树莓派4）与用于控制硬件的微控制器（例如，Pico）结合起来。
- en: 'The low complexity means that code on a microcontroller has nearly no boot
    time, which means your code doesn’t have to coexist with other software in an
    operating system. Take a look at the following block diagram:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 低复杂性意味着微控制器上的代码几乎没有任何启动时间，这意味着你的代码不需要与操作系统中的其他软件共存。看看以下块图：
- en: '![Figure 1.3 – Running your code on Raspberry Pi versus Pico ](img/Figure_1.03_B18001.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 在树莓派与Pico上运行你的代码](img/Figure_1.03_B18001.jpg)'
- en: Figure 1.3 – Running your code on Raspberry Pi versus Pico
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 在树莓派与Pico上运行你的代码
- en: This preceding diagram represents the software architecture on Raspberry Pi
    versus Raspberry Pi Pico. It shows how a Linux computer, such as Raspberry Pi,
    has additional layers of software along with competing apps running alongside
    your code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此前图展示了在树莓派和树莓派Pico之间的软件架构对比。它展示了Linux计算机，例如树莓派，拥有额外的软件层，以及与你的代码并行运行的竞争性应用程序。
- en: In addition to this, controllers have **interrupts**. They can notify the code
    that something has changed, such as the state of an IO pin. You’ll find this on
    the other Raspberry Pi models, but they are controlled by that pesky operating
    system again. In Pico and other microcontrollers, you get more control over what
    happens or when something changes on an IO pin, allowing responsive code with
    predictable timing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，控制器还有**中断**。它们可以通知代码某些事情已经改变，例如IO引脚的状态。你会在其他树莓派型号上找到这个功能，但它们再次受那个讨厌的操作系统控制。在Pico和其他微控制器上，你可以获得更多控制权，了解IO引脚上发生的事情或何时发生变化，从而实现响应性代码和可预测的时间。
- en: 'So, how does Raspberry Pi Pico compare with the Arduino Uno? The following
    table shows details from their specifications and datasheets:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Raspberry Pi Pico与Arduino Uno相比如何？以下表格显示了它们的规格和数据表中的详细信息：
- en: '![Table 1.1 – Comparing the Pico with the Arduino Uno ](img/B18001_01_Table_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![表1.1 – 比较Pico与Arduino Uno](img/B18001_01_Table_01.jpg)'
- en: Table 1.1 – Comparing the Pico with the Arduino Uno
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.1 – 比较Pico与Arduino Uno
- en: The preceding table shows that Raspberry Pi Pico has a faster multicore processor,
    along with more storage and digital IO pins. Additionally, Raspberry Pi Pico has
    a unique **Programmable IO** (**PIO**) system for extreme flexibility in organizing
    data to and from these pins. Official Pico boards are also cheaper than official
    Arduino boards.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表格显示，Raspberry Pi Pico具有更快的多核处理器，以及更多的存储和数字IO引脚。此外，Raspberry Pi Pico还有一个独特的**可编程IO**（**PIO**）系统，用于在组织数据到和从这些引脚时提供极大的灵活性。官方Pico板也比官方Arduino板便宜。
- en: Another place that Raspberry Pi Pico compares favorably with Arduino is in its
    use of Python (CircuitPython or MicroPython). Many microcontrollers, such as Arduino,
    require C/C++ to program, which can be difficult for beginners. Python is easier
    to understand, allows for complex and interesting data structures, and has access
    to many libraries of code, too.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Pico在Python（CircuitPython或MicroPython）的使用上与Arduino相比也有优势。许多微控制器，如Arduino，需要C/C++进行编程，这对初学者来说可能很困难。Python更容易理解，允许使用复杂和有趣的数据结构，并且还可以访问许多代码库。
- en: 'In short, the key features of Raspberry Pi Pico are as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Raspberry Pi Pico的关键特性如下：
- en: A microcontroller—this offers low power and is small compared with SBCs.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个微控制器——这提供了低功耗，与SBC相比体积小。
- en: It has responsible and flexible IO options.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有责任感和灵活的IO选项。
- en: It is low cost compared to many microcontroller boards and most SBCs.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与许多微控制器板和大多数SBC相比，它的成本较低。
- en: It is programmable in Python.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以用Python编程。
- en: A number of the features I attribute to Raspberry Pi Pico are due to the *RP2040*—the
    chip that powers Pico and is available in forms other than Raspberry Pi Pico.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我归因于Raspberry Pi Pico的一些特性是由于*RP2040*——为Pico供电的芯片，并且除了Raspberry Pi Pico外还有其他形式。
- en: IO flexibility is Raspberry Pi Pico’s most interesting feature, so let’s take
    a look at that next.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: IO灵活性是Raspberry Pi Pico最有趣的特点，所以让我们接下来看看这一点。
- en: Raspberry Pi Pico’s interfaces for sensors and devices
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Raspberry Pi Pico的传感器和设备接口
- en: Raspberry Pi Pico has many interfaces for connecting to hardware, along with
    its unique PIO system. In this section, we’ll look at each type of interface.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi Pico具有许多接口用于连接硬件，以及其独特的PIO系统。在本节中，我们将查看每种类型的接口。
- en: A **digital IO pin** is the basic IO system for Raspberry Pi Pico. An output
    can be on or off, which is great for turning LEDs on or off, but you are unable
    to control their brightness. Similarly, an input can also detect on or off states.
    Raspberry Pi Pico has 26 of these pins.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**数字IO引脚**是Raspberry Pi Pico的基本IO系统。输出可以是开或关，这对于打开或关闭LED很好，但你无法控制它们的亮度。同样，输入也可以检测开或关状态。Raspberry
    Pi Pico有26个这样的引脚。'
- en: '**Pulse-Width Modulation** (**PWM**) is a waveform for controlling outputs
    such as LEDs and motors—including DC motors, stepper motors, and servo motors.
    PWM pins output square wave pulses, with a changing (modulating) on-off ratio
    (pulse widths). Changing pulse width results in changes to the brightness of an
    LED, the speed of a motor, or a servo motor’s position. Raspberry Pi Pico has
    16 PWM channels, making it capable of controlling many such devices at once. These
    PWM pins still require a power control device to drive the motors.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**脉冲宽度调制**（**PWM**）是用于控制LED和电机等输出的波形——包括直流电机、步进电机和伺服电机。PWM引脚输出方波脉冲，具有变化的（调制的）开关比（脉冲宽度）。改变脉冲宽度会导致LED亮度、电机速度或伺服电机位置的变化。Raspberry
    Pi Pico有16个PWM通道，使其能够同时控制许多此类设备。这些PWM引脚仍然需要一个电源控制设备来驱动电机。'
- en: '**Analog** input pins detect levels of voltage between **ground** (**GND**)
    and 3.3V. This is good for interfacing with simple sensors, such as light sensors,
    joysticks, slider/knob controls, temperature sensors, and measuring currents (using
    a bit of additional circuitry). Raspberry Pi Pico has three of these inputs.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟**输入引脚检测**地**（**GND**）和3.3V之间的电压级别。这对于与简单的传感器接口很好，例如光传感器、摇杆、滑动/旋钮控制、温度传感器以及测量电流（使用一些额外的电路）。Raspberry
    Pi Pico有三个这样的输入。'
- en: 'A **universal asynchronous receiver-transmitter** (**UART**) controls a serial
    port. It can send streams of data to and from devices using two pins: a **TX transmit**
    pin and an **RX receive** pin. With this, it is capable of sending/receiving data
    that is more complicated than just a varying level. Raspberry Pi Pico has two
    independent UART interfaces.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用异步收发传输器**（**UART**）控制串行端口。它可以使用两个引脚发送和接收数据流：一个 **TX 发送**引脚和一个 **RX 接收**引脚。有了这个，它能够发送/接收比仅仅变化电平更复杂的数据。Raspberry
    Pi Pico 有两个独立的 UART 接口。'
- en: 'Pico has two **Serial Peripheral Interface** (**SPI**) bus controllers. SPI
    uses four pins, as shown in the following diagram:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Pico 有两个 **串行外设接口**（**SPI**）总线控制器。SPI 使用四个引脚，如下面的图所示：
- en: '![Figure 1.4 – Raspberry Pi Pico SPI bus usage ](img/Figure_1.04_B18001.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – Raspberry Pi Pico SPI 总线使用](img/Figure_1.04_B18001.jpg)'
- en: Figure 1.4 – Raspberry Pi Pico SPI bus usage
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Raspberry Pi Pico SPI 总线使用
- en: The preceding diagram shows Raspberry Pi Pico using an SPI bus to connect to
    two devices—for example, displays or sensors. The bus has **transmit** (**TX**),
    also known as **Controller Out/ Peripheral In** (**COPI**) or **Microcontroller
    Out/Sensor In** (**MOSI**) for transmitting data from the controller, **receive**
    (**RX**) also known as **Controller In/ Peripheral Out** (**CIPO**) or **Microcontroller
    In/Sensor Out** (**MISO**) for receiving data back to the controller, **SCK**
    (a clock for timing the signal), and **Chip Select** (**CSEL/CS**) a chip selection
    pin for each peripheral. SPI uses chip selections to enable communication with
    multiple devices, as shown by the dashed lines of **Device 1 CS** and **Device
    2 CS**. See [https://makezine.com/article/maker-news/mosi-miso-and-140-years-of-wrong/](https://makezine.com/article/maker-news/mosi-miso-and-140-years-of-wrong/)
    for details on the current SPI acronyms.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了 Raspberry Pi Pico 使用 SPI 总线连接到两个设备——例如，显示屏或传感器。总线有 **发送**（**TX**），也称为
    **控制器输出/外围设备输入**（**COPI**）或 **微控制器输出/传感器输入**（**MOSI**），用于从控制器发送数据，**接收**（**RX**），也称为
    **控制器输入/外围设备输出**（**CIPO**）或 **微控制器输入/传感器输出**（**MISO**），用于将数据接收回控制器，**SCK**（用于定时信号的时钟），以及
    **芯片选择**（**CSEL/CS**）每个外围设备的芯片选择引脚。SPI 使用芯片选择来启用与多个设备的通信，如 **设备 1 CS** 和 **设备
    2 CS** 的虚线所示。有关当前 SPI 缩略语的详细信息，请参阅 [https://makezine.com/article/maker-news/mosi-miso-and-140-years-of-wrong/](https://makezine.com/article/maker-news/mosi-miso-and-140-years-of-wrong/)。
- en: 'The **Inter-Integrated Circuit** (**I2C**) is a data bus designed for communicating
    between integrated circuits such as sensors, memory devices, and output devices.
    An I2C bus has a data pin (which is often called *SDA – Serial Data*) and a clock
    pin (which is often called *SCL – Serial Clock*) keeping things synchronized.
    Multiple devices share an I2C bus by sending/receiving data with addresses, such
    as those in the following diagram:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**互集成电路**（**I2C**）是一种为传感器、存储设备、输出设备等集成电路之间通信而设计的总线。I2C 总线有一个数据引脚（通常称为 *SDA
    – 串行数据*）和一个时钟引脚（通常称为 *SCL – 串行时钟*），用于保持事物同步。多个设备通过发送/接收带有地址的数据来共享 I2C 总线，如下面的图所示：'
- en: '![Figure 1.5 – I2C buses on Raspberry Pi Pico ](img/Figure_1.05_B18001.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – Raspberry Pi Pico 上的 I2C 总线](img/Figure_1.05_B18001.jpg)'
- en: Figure 1.5 – I2C buses on Raspberry Pi Pico
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Raspberry Pi Pico 上的 I2C 总线
- en: '*Figure 1**.5* shows Pico and then some child peripherals connected via two
    independent I2C buses, assignable to different pin configurations, with some devices
    having the same address but different I2C connections. Additionally, I2C can address
    registers (such as memory locations) within devices. We’ll use I2C later to communicate
    with sensors.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.5* 展示了通过两个独立的 I2C 总线连接到 Pico 的某些子外围设备，这些总线可以分配到不同的引脚配置，一些设备具有相同的地址但不同的
    I2C 连接。此外，I2C 可以寻址设备内的寄存器（如存储位置）。我们将在后面使用 I2C 与传感器通信。'
- en: 'Finally, Raspberry Pi Pico has PIO. PIO is a feature that is unique to Pico.
    PIO consists of two blocks with four *state machines*. Each can run simple code
    independently of the main CPU and control one or more pins to send data to or
    from them. A single-state machine can control all the pins if that was useful
    for the code. Additionally, each state machine comes with buffers to hold data
    until it can be transferred. The following is an example block diagram of the
    PIO system:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Raspberry Pi Pico 有 PIO。PIO 是 Pico 独有的功能。PIO 由两个包含四个 *状态机* 的块组成。每个块可以独立于主
    CPU 运行简单的代码，并控制一个或多个引脚以发送或接收数据。如果对代码有用，单个状态机可以控制所有引脚。此外，每个状态机都带有缓冲区，用于在数据可以传输之前存储数据。以下是一个
    PIO 系统的示例框图：
- en: '![Figure 1.6 – The Raspberry Pi Pico PIO system ](img/Figure_1.06_B18001.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – Raspberry Pi Pico 的 PIO 系统](img/Figure_1.06_B18001.jpg)'
- en: Figure 1.6 – The Raspberry Pi Pico PIO system
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Raspberry Pi Pico 的 PIO 系统
- en: The preceding diagram shows two PIO devices inside the Pico. Each has code storage
    memory, so you can have two independent functions. In each PIO device, there are
    state machines that can independently run the code from that local memory.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示显示了 Pico 内部的两个 PIO 设备。每个设备都有代码存储内存，因此你可以拥有两个独立的功能。在每个 PIO 设备中，都有可以独立运行该本地内存中代码的状态机。
- en: Since PIO state machines run independently, and their instructions are about
    shifting data to/from pins, they can create interfaces for many kinds of hardware.
    For example, is there a weird protocol device? Use PIO. Do you need rapid counting
    independent of the main CPU? Use PIO. People have made **Video Graphics Array**
    (**VGA**) outputs with PIO, so it’s capable of fast and complex data handling.
    Additionally, you can also get interrupts from PIOs to tell you when something
    has happened.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 PIO 状态机独立运行，并且它们的指令是关于将数据从/到引脚移动，因此它们可以为许多类型的硬件创建接口。例如，有一个奇怪的协议设备吗？使用 PIO。你需要独立于主
    CPU 的快速计数吗？使用 PIO。人们已经使用 PIO 制作了 **视频图形阵列** (**VGA**) 输出，因此它能够快速处理复杂的数据。此外，你还可以从
    PIO 获取中断，告诉你何时发生了某些事情。
- en: 'That was quite a lot of IO systems. Let’s summarize them in a table, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有相当多的 IO 系统。让我们将它们总结到表中，如下所示：
- en: '![Table 1.2 – The Raspberry Pi Pico IO systems ](img/B18001_01_Table_02.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![表 1.2 – Raspberry Pi Pico 的 IO 系统](img/B18001_01_Table_02.jpg)'
- en: Table 1.2 – The Raspberry Pi Pico IO systems
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.2 – Raspberry Pi Pico 的 IO 系统
- en: These protocols share pins, so using an I2C bus consumes 2 pins from the 26-pin
    pool.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些协议共享引脚，因此使用 I2C 总线会从 26 引脚池中占用 2 个引脚。
- en: Now that we’ve had a tour of Raspberry Pi Pico’s features and interfaces, let’s
    take a look at how we’ll program it in this book, using **CircuitPython**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经游览了 Raspberry Pi Pico 的功能和接口，让我们看看在这本书中我们将如何编程它，使用 **CircuitPython**。
- en: What is CircuitPython?
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 CircuitPython？
- en: Many microcontrollers require C/C++ or Assembler to program—for example, the
    popular Arduino ecosystem. However, in robotics, Python is rapidly becoming a
    de facto language. It is used for AI and data science and is great for rapidly
    trying out new ideas. Let’s examine why it is handy and, specifically, why I’ve
    chosen **CircuitPython** for this book.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 许多微控制器需要 C/C++ 或汇编语言来编程——例如，流行的 Arduino 生态系统。然而，在机器人技术中，Python 正迅速成为事实上的语言。它用于人工智能和数据科学，并且非常适合快速尝试新想法。让我们看看为什么它很方便，特别是为什么我选择了
    **CircuitPython** 来编写这本书。
- en: 'Python does not require a compile step. Getting you quick feedback on your
    code and Python’s **read-eval-print loop** (**REPL**) allow you to start typing
    and experimenting with code instantly. The REPL allows you to see what works before
    using ideas in code that you’ll keep. Here’s a REPL session with CircuitPython:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Python 不需要编译步骤。它能够快速提供代码反馈和 Python 的 **读取-评估-打印循环** (**REPL**) 允许你立即开始输入和实验代码。REPL
    允许你在将想法用于代码之前看到它们是否有效。以下是一个 CircuitPython 的 REPL 会话：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding session shows a print running in a REPL on Raspberry Pi Pico.
    We’ll explore how to use the REPL for some Pico experiments. It even comes with
    built-in assistance; however, on Pico, not all of the help is left in, for size
    reasons.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述会话显示了在 Raspberry Pi Pico 的 REPL 中运行的打印操作。我们将探讨如何使用 REPL 进行一些 Pico 实验。它甚至内置了辅助功能；然而，由于大小原因，Pico
    上并非所有帮助都保留在内。
- en: Python has other things that help, such as being able to directly return multiple
    values from a function. Python has function calls and classes like C++, but functions
    can be used as data, and references to them can be stored in variables. Additionally,
    Python has functional programming elements that allow programmers to chain tools
    together for processing streams of data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有其他帮助功能，例如能够从函数中直接返回多个值。Python 有类似于 C++ 的函数调用和类，但函数可以用作数据，并且它们的引用可以存储在变量中。此外，Python
    还具有函数式编程元素，允许程序员将工具链在一起以处理数据流。
- en: Python uses exceptions to handle errors, allowing you to choose how to respond
    to them or observe their output, leading you directly to a problem.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用异常来处理错误，允许你选择如何响应它们或观察它们的输出，这直接引导你到问题所在。
- en: MicroPython is the original port of the Python language to run on small memory
    devices such as microcontrollers. It has a community working on it, and CircuitPython
    builds on it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: MicroPython 是将 Python 语言移植到运行在小内存设备上，如微控制器上的原始版本。它有一个正在工作的社区，CircuitPython 是基于它构建的。
- en: In CircuitPython, Raspberry Pi Pico mounts as a USB storage device, so you can
    copy your code and the libraries your code uses, directly onto the Pico. This
    makes composing code from multiple libraries or using third parties simple. Copying
    code over with the correct name is enough to run that code when Raspberry Pi Pico
    is powered up again.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在CircuitPython中，Raspberry Pi Pico作为USB存储设备安装，因此你可以直接将你的代码和代码使用的库复制到Pico上。这使得从多个库或第三方使用代码变得简单。只需正确命名并复制代码，当Raspberry
    Pi Pico再次通电时，就可以运行该代码。
- en: CircuitPython has a huge library of device support for Neopixel LEDs, Bluetooth,
    many sensors, displays, and other devices. This library not only works with Pico
    but runs across many CircuitPython controllers, so familiarity with these library
    components will be useful when you are working with other controllers.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: CircuitPython有一个庞大的设备支持库，包括Neopixel LED、蓝牙、许多传感器、显示屏和其他设备。这个库不仅与Pico兼容，还运行在许多CircuitPython控制器上，因此熟悉这些库组件将有助于你在使用其他控制器时工作。
- en: Now that we’ve chosen a language and the controller that we will build robots
    with in this book, it’s time to start planning a robot!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经选择了语言和本书中我们将构建机器人的控制器，现在是时候开始规划一个机器人了！
- en: Planning a Raspberry Pi Pico robot
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划Raspberry Pi Pico机器人
- en: We’ve been fact-finding for our robot-building mission. Before we start our
    robot-building journey, we’ll make a rough plan of what we want to do, then refine
    it. We’ll make important decisions, which we can examine further as we start to
    build the robot.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在为我们的机器人构建任务进行实地考察。在我们开始机器人构建之旅之前，我们将制定一个粗略的计划，确定我们想要做什么，然后进行细化。我们将做出重要的决定，随着我们开始构建机器人，我们可以进一步探讨这些决定。
- en: An overview of robot planning
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器人规划的概述
- en: 'When planning the robot, there are several things we need to consider:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划机器人时，我们需要考虑几个方面：
- en: What do we want this robot to do? What is it for?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望这个机器人做什么？它是用来做什么的？
- en: What style of robot is suitable?
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么类型的机器人是合适的？
- en: What kinds of sensors or outputs will we need?
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要哪些类型的传感器或输出？
- en: What rough shape and size will it have?
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将是什么粗糙的形状和大小？
- en: Once we’ve answered these questions, we can make further decisions about what
    we build. These don’t require much detail. Robotics is full of interesting diversions,
    making it tempting to jump between ideas. By having a constrained plan and working
    to it, you can keep your pace on getting a robot built, saving distractions and
    cool ideas for the next robot or three!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们回答了这些问题，我们就可以进一步决定我们要构建什么。这些不需要太多细节。机器人领域充满了有趣的分心事物，这使得人们容易在想法之间跳跃。通过制定一个受限制的计划并按照它工作，你可以保持构建机器人的步伐，将分心和酷炫的想法留到下一个或几个机器人上！
- en: What do we want this robot to do? What is it for?
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们希望这个机器人做什么？它是用来做什么的？
- en: Will the robot solve a problem, clean your kitchen, explore a space, deliver
    packages, impress guests at a conference, or compete in a robot competition?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人将解决什么问题，清洁厨房，探索空间，递送包裹，在会议中给客人留下深刻印象，还是在机器人竞赛中竞争？
- en: 'The robot we’ll build in this book has several purposes:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本书我们将构建的机器人有几个用途：
- en: Exploring Raspberry Pi Pico and its capabilities
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Raspberry Pi Pico及其功能
- en: Trying out sensors
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试传感器
- en: Writing algorithms guided a little by challenges in robot competitions
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以机器人竞赛中的挑战为指导编写算法
- en: Navigating a known space
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在已知空间中导航
- en: Building a custom chassis, adaptable for future ideas
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个可适应未来想法的自定义底盘
- en: Keeping it simple enough to get started
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持简单以开始
- en: With these goals in mind, we can look at the specific details.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些目标指导下，我们可以查看具体细节。
- en: What style of robot is suitable?
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么类型的机器人是合适的？
- en: 'There are many robot styles. We should choose one, probably the simplest possible
    for our goal. Take a look at the following diagram for a selection of different
    robot styles:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人有很多种风格。我们应该选择一种，可能是最简单的一种来满足我们的目标。请看以下图表，了解不同机器人风格的选项：
- en: '![Figure 1.7 – Different robot styles ](img/Figure_1.07_B18001.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – 不同的机器人风格](img/Figure_1.07_B18001.jpg)'
- en: Figure 1.7 – Different robot styles
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – 不同的机器人风格
- en: The first robot style is a robot arm used in industry. These are fascinating
    and fun to build. However, they do not satisfy our goals of building a robot chassis
    to try out sensors.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种机器人风格是工业中使用的机器人臂。这些机器人既迷人又有趣构建。然而，它们并不满足我们构建机器人底盘以测试传感器的目标。
- en: The next panel shows a quadcopter drone—an **unmanned aerial vehicle** (**UAV**).
    These are complicated to build and program, so they do not meet our goal of keeping
    it simple.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个面板展示的是四旋翼无人机——**无人驾驶飞行器**（**UAV**）。这些无人机的构建和编程比较复杂，所以它们不符合我们保持简单化的目标。
- en: The third panel shows a walking robot—a hexapod. These require controlling many
    servo motors. Their power usage and complexity make them an unsuitable but exciting
    option for a follow-up robot!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第三面板展示了一个行走机器人——六足机器人。这些机器人需要控制许多伺服电机。它们的功耗和复杂性使它们成为一个不适合但令人兴奋的后续机器人选项！
- en: The fourth panel shows a wheeled robot. Wheeled robots can be simple **two-wheel-drive**
    (**2WD**) robots with a roller, such as this one. 2WD rover platforms such as
    this satisfy our goals of building a chassis and getting to know sensors and algorithms.
    They can later be made more interesting, with tracks, mecanum wheels, rocker bogies,
    or individually steered wheels, allowing them to also meet the adaptable goal.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 第四面板展示了一个带轮子的机器人。带轮子的机器人可以是简单的**两轮驱动**（**2WD**）机器人，如这个例子所示。这种2WD漫游平台满足我们构建底盘和了解传感器和算法的目标。它们可以后来通过添加履带、梅卡诺轮、摇臂悬挂或独立转向轮变得更有趣，从而使它们也能满足适应性目标。
- en: I recommend that we go ahead with a 2WD rover throughout this book but keep
    the other variations in mind for further robot builds!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议我们在整本书中继续使用2WD漫游车，但也要记住其他变体，以备后续的机器人构建！
- en: What kinds of sensors or outputs will we need?
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们需要哪些类型的传感器或输出？
- en: One of our goals is to try out different sensors. A robot made to navigate spaces
    will influence the sensors we’ll use. They all contribute to locating the robot.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标之一是尝试不同的传感器。一个用于导航空间的机器人将影响我们将使用的传感器。它们都为定位机器人做出贡献。
- en: 'Good sensors for this include the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于此的传感器包括以下内容：
- en: '**Distance sensors**: What is in front of the robot? How far are the nearest
    objects? We might want more than one of these devices.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**距离传感器**：机器人前方有什么？最近的对象有多远？我们可能需要不止一个这样的设备。'
- en: '**Encoders**: How has the robot moved? How far did it go?'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码器**：机器人是如何移动的？它走了多远？'
- en: '**Inertial Measurement Unit** (**IMU**): Has the robot turned? What is its
    position relative to north?'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**惯性测量单元**（**IMU**）：机器人是否已经转向？它的位置相对于北方的方向是什么？'
- en: Along with these sensors, we can have simple outputs—the motors that we drive
    wheels with. As a later extension, we could also add Bluetooth to give us some
    feedback on our robot’s status. We don’t need to plan all of this yet but leave
    space for it so that we can extend the robot later.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些传感器，我们还可以有简单的输出——我们用它们驱动轮子的电机。作为一个后续的扩展，我们还可以添加蓝牙来给我们一些关于机器人状态的反馈。我们不需要现在就计划所有这些，但要留出空间，以便我们可以在以后扩展机器人。
- en: What rough shape and size will it have?
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它将大致是什么形状和大小？
- en: 'Now, we have a firm idea of a 2WD robot. We know it probably needs to support
    the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对2WD机器人有一个明确的想法。我们知道它可能需要支持以下功能：
- en: Raspberry Pi Pico
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi Pico
- en: A pair of motors with wheels and a caster
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一对带轮子和万向节的电机
- en: Many sensors and, later, Bluetooth
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多传感器，以及后来的蓝牙
- en: Power for the system, including batteries plus voltage conversion
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统的电源，包括电池和电压转换
- en: A breadboard for wiring all of this together
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于连接所有这些的面包板
- en: Although we don’t want the robot to be too big, we are going to need some real
    estate to play with. Let’s start with a rough estimate of 150 mm x 200 mm.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不希望机器人太大，但我们仍需要一些空间来玩耍。让我们先做一个粗略估计，150 mm x 200 mm。
- en: So, we’ve answered some questions about what we want. We will use the next few
    sections to dive deeper into the planning of this robot, looking at the different
    aspects of the planning and the choices we’ll make. The first of those is to consider
    trade-offs.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经回答了一些关于我们想要什么的问题。接下来，我们将使用接下来的几个部分来深入探讨这个机器人的规划，查看规划的不同方面以及我们将做出的选择。首先是考虑权衡。
- en: A note on trade-offs
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于权衡的一个注意事项
- en: All designs make trade-offs. The truth is that no design fits all cases, and
    usually, no design is perfect but will be good enough in the right aspects where
    it works. We will need to make decisions and read datasheets for parts to also
    assist us.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所有设计都会做出权衡。事实是，没有一种设计适合所有情况，通常，没有一种设计是完美的，但它在工作得当的方面足够好。我们需要做出决定，并阅读零件的数据表来帮助我们。
- en: One example is size and weight—we already mentioned that we don’t want a large
    robot. After all, we have a limited workbench size, and larger robots require
    more power, larger motors, and larger batteries. Additionally, we’d need to work
    with tougher and—likely—harder-to-cut materials. For a different context and goal,
    perhaps a large, heavier robot would be more suitable. So, the first trade-off
    is to keep the robot small but not too small—that is, to keep it simple.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是尺寸和重量——我们之前提到过，我们不希望机器人太大。毕竟，我们的工作台空间有限，大型机器人需要更多的功率、更大的电机和更大的电池。此外，我们还需要处理更坚固的——可能更难切割的材料。对于不同的环境和目标，可能一个大型、重型的机器人会更合适。因此，第一个权衡是要保持机器人小，但不要太小——也就是说，要简单。
- en: We’ve suggested Raspberry Pi Pico, and the trade-offs from Raspberry Pi there,
    for example lighter weight, reduced cost, and power.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用树莓派Pico，以及从树莓派那里权衡的选项，例如更轻的重量、降低的成本和功耗。
- en: But what of sensor trade-offs? Every sensor has multiple types, which we will
    dive into in their respective chapters. They differ in price, features, and complexity.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 但传感器权衡如何？每个传感器都有多种类型，我们将在各自的章节中深入探讨。它们在价格、功能和复杂性方面有所不同。
- en: In many aspects, we can trade having more complexity for reduced weight or cost
    or more features for a higher cost.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，我们可以用减少重量或成本或更多功能来换取更高的成本。
- en: Choosing a robot chassis
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择机器人底盘
- en: 'We have many options for our 2WD robot chassis. Again, this depends on what
    we want to learn or achieve. We have stated our goal of building a flexible chassis.
    Some good options for doing this are as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的2WD机器人底盘提供了许多选择。同样，这取决于我们想要学习或实现的目标。我们已声明我们的目标是构建一个灵活的底盘。以下是一些实现这一目标的良好选择：
- en: Buying a chassis kit
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买底盘套件
- en: Adapting a lunchbox or toy
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改装午餐盒或玩具
- en: Doing a scratch build by hand
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动搭建底盘
- en: 3D printing or laser cutting a chassis
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D打印或激光切割底盘
- en: Chassis kits are an easy option but have limited flexibility. Many come with
    motors, wheels, batteries, and even a motor driver designed for a specific main
    controller. In this way, they can save time and money, allowing you to focus entirely
    on the code and sensors, but they offer less opportunity to learn design aspects.
    It’s often tricky to find a chassis kit with the right shape and size, and as
    they get larger, they quickly become more expensive.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 底盘套件是一个简单的选择，但灵活性有限。许多套件包含电机、轮子、电池，甚至为特定主控制器设计的电机驱动器。这样，它们可以节省时间和金钱，让你能够完全专注于代码和传感器，但它们提供了较少的学习设计方面的机会。通常很难找到形状和尺寸合适的底盘套件，而且随着尺寸的增大，它们的价格会迅速上升。
- en: You could also adapt a lunchbox into a robot chassis—cutting mounting holes
    for motors, sensors, boards, and other parts can be a good place to learn design
    skills. However, you’d need to fit your robot electronics and hardware in a constrained
    space. Note that the curved sides of lunchboxes can complicate things.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将午餐盒改装成机器人底盘——为电机、传感器、板和其他部件切割安装孔可以是一个学习设计技能的好地方。然而，你需要在一个受限的空间内安装你的机器人电子和硬件。请注意，午餐盒的曲面可能会使事情变得复杂。
- en: Scratch-building a chassis gives you great flexibility. You can learn how to
    design in CAD and how to use hand tools. Additionally, you need to make choices
    about the type and thickness of the material, and in doing so, you’ll be able
    to understand more about making strong robots. You’ll learn how to fit sensors
    and expand your robot if things get a bit tight. This requires more time and patience
    than the kits, but the rewards are great.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 自行搭建底盘提供了极大的灵活性。你可以学习如何在CAD中设计以及如何使用手工工具。此外，你还需要在材料类型和厚度上做出选择，通过这样做，你将能够更多地了解制作坚固机器人的方法。如果你遇到空间紧张的情况，你将学习如何安装传感器并扩展你的机器人。这比套件需要更多的时间和耐心，但回报是巨大的。
- en: 3D printing and laser cutting require precise designs, along with expensive
    and specialist tools or services. As you dive further into robotics, and progress
    beyond a simple 2WD robot, creating more interesting shapes and sensor mounts,
    it is likely to be an important area of exploration. If you are not confident
    with hand tools, finding a laser-cutting service for the same parts will achieve
    good results, but it can be costly.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 3D打印和激光切割需要精确的设计，以及昂贵和专业的工具或服务。随着你进一步深入机器人领域，并超越简单的2WD机器人，创建更有趣的形状和传感器支架，这很可能是重要的探索领域。如果你不擅长手工工具，为相同部件找到激光切割服务可以达到良好的效果，但这可能成本高昂。
- en: In this book, so that you can get exposure to the design and hand tools while
    still giving us lots of flexibility, we will take the scratch-building option.
    We will learn CAD skills that are transferable to 3D printing. We’ll learn how
    to cut and drill parts, looking at some premade parts to save time. Additionally,
    we’ll size our design at approximately 150 mm x 200 mm and modify this if needed.
    But what about the motors?
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，为了让你在接触设计和手工工具的同时，还能给我们提供很多灵活性，我们将选择从零开始构建。我们将学习可转移到3D打印的CAD技能。我们将学习如何切割和钻孔零件，并查看一些预制零件以节省时间。此外，我们将设计尺寸约为150毫米
    x 200毫米，并在需要时进行修改。但电机怎么办？
- en: Choosing motors
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择电机
- en: This 2WD motor requires two main drive motors. We could consider stepper motors,
    which move a little each time they are pulsed, although these bring a little extra
    complexity—perhaps an idea to keep for later. DC motors, which rotate continuously
    when powered, seem like the right choice. They will need to be geared so that
    they have enough power to move the robot, without being too quick and hard to
    control.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个2WD电机需要两个主要的驱动电机。我们可以考虑步进电机，每次脉冲时它们会移动一点，尽管这些会带来一些额外的复杂性——也许是一个稍后考虑的想法。直流电机在供电时持续旋转，看起来是正确的选择。它们需要通过齿轮减速，以便有足够的动力移动机器人，同时不会太快且难以控制。
- en: We should keep these motors small and at a low voltage. As we are unlikely to
    want to build an additional gearbox, geared motors are sensible. There are some
    options here in terms of the size we are working with. First is the yellow *TT*
    motor with plastic gears— however, these motors are not of great quality and take
    up a fair amount of space. Another option is to use servomotors that are adapted
    for continuous rotation—however, these can be a little expensive.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该保持这些电机小且电压低。由于我们不太可能想要构建额外的变速箱，因此带齿轮的电机是明智的选择。在这个尺寸范围内有一些选择。首先是带有塑料齿轮的黄色*TT*电机——然而，这些电机的质量并不高，而且占用相当多的空间。另一个选择是使用适用于连续旋转的伺服电机——然而，这些可能会稍微昂贵一些。
- en: A small, common, high-quality but inexpensive option is N20 or micro-metal gear
    motors. To save space and effort, there are models of these that have encoders
    pre-fitted. We can use similarly common plastic brackets to attach them to our
    robot. That makes them convenient to use, too.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一种小型、常见、高质量但价格低廉的选项是N20或微型金属齿轮电机。为了节省空间和努力，这些电机中有一些是预先安装了编码器的。我们可以使用类似常见的塑料支架将它们固定到我们的机器人上。这使得它们使用起来也很方便。
- en: Robot wheels
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器人轮子
- en: For a 2WD robot, there are a few ways in which to lay the wheels out. One possibility
    is to have two driving wheels with two idler wheels (that is, unpowered). However,
    those wheels can drag, making it harder to turn the robot. A common way is to
    have a third wheel as a caster—either a ball that can roll in any direction or
    a swivel wheel such as a shopping trolley. Because of the size of the robot, a
    ball caster seems like a good idea.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于2WD机器人，有几种方式可以布置轮子。一种可能性是使用两个驱动轮和两个惰轮（即不带电的轮子）。然而，这些轮子可能会拖动，使得机器人转向更困难。一种常见的方式是使用第三个轮子作为万向轮——要么是一个可以朝任何方向滚动的球，要么是一个像购物车那样的可旋转轮子。由于机器人的尺寸，球型万向轮似乎是个好主意。
- en: The wheels themselves should have a hub that is compatible with the motors that
    we’ve chosen. A pair of N20 wheels with a diameter of 60-100 mm should be suitable.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 轮子本身应该有一个与我们所选择的电机兼容的轮毂。一对直径为60-100毫米的N20轮子应该是合适的。
- en: So, we have a rough size for our robot, and we know the controllers, motors,
    and some of the sensors. The next item to choose is the power systems.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有了机器人的大致尺寸，并且我们知道控制器、电机和一些传感器。接下来要选择的是电源系统。
- en: Choosing the power systems
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择电源系统
- en: 'A robot isn’t much fun without independent power—by which I mean its own source
    of power without needing to be plugged into a wall. Usually, this means batteries.
    It then needs ways to provide power to the control electronics, sensors, external
    boards, and motors. Take a look at the following diagram for an outline of power
    distribution in a 2WD robot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 没有独立电源的机器人乐趣不多——我的意思是它不需要插上墙上的电源就能有自己的电源。通常，这意味着电池。然后它需要提供电源给控制电子设备、传感器、外部板和电机。请看以下图表了解2WD机器人的电源分配概述：
- en: '![Figure 1.8 – Power distribution in a 2WD robot ](img/Figure_1.08_B18001.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – 2WD机器人的电源分配](img/Figure_1.08_B18001.jpg)'
- en: Figure 1.8 – Power distribution in a 2WD robot
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 2WD机器人的电源分配
- en: In *Figure 1**.8*, the thicker lines show raw battery power connections. A 2WD
    chassis will need to drive at least two motors, which are power-hungry devices
    that require a battery connection.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图1**.8中，较粗的线条表示原始电池电源连接。一个两轮驱动底盘需要至少驱动两个电机，这些是耗电设备，需要电池连接。
- en: This robot needs to power Raspberry Pi Pico and other sensors. Since we intend
    to add Bluetooth, we should leave power aside for that. So, the other thick line
    goes to a regulator for these, making more palatable power for these systems—the
    raw battery voltage would likely destroy them. The thinner solid lines show regulated
    power.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机器人需要为Raspberry Pi Pico和其他传感器供电。由于我们打算添加蓝牙，我们应该为它预留电源。因此，另一条粗线连接到这些设备的稳压器，使这些系统的电源更加易于接受——原始电池电压可能会损坏它们。较细的实线表示稳压电源。
- en: The Pico will be sending/receiving electronic control signals, designated by
    the thin dashed lines in the preceding diagram. These also go to the motor controller.
    The motor controller will provide PWM-controlled power from the batteries to the
    motor, modulated by the signals the Pico sends to them. The motor power is shown
    by the thick dashed lines to the motors on the left-hand side.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Pico将发送/接收电子控制信号，这些信号由前面图中细虚线表示。这些信号也连接到电机控制器。电机控制器将从电池向电机提供PWM控制的电源，这些电源由Pico发送给它们的信号调制。电机电源通过左侧电机上的粗虚线表示。
- en: Here, we have a few considerations to bear in mind. We require an input voltage
    that is suitable for the motors and to drive a regulator. We need a regulator
    that can handle the power capacity requirements for the Pico, sensors, and Bluetooth,
    and we need batteries that can supply enough current to drive them.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有几个需要考虑的因素。我们需要一个适合电机和驱动稳压器的输入电压。我们需要一个能够处理Pico、传感器和蓝牙的功率容量需求的稳压器，并且我们需要能够为它们提供足够电流的电池。
- en: Calculating power requirements
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计算功率需求
- en: Let’s start with what we know—5V is a good output voltage for a regulator, and
    where needed, the Pico can further regulate down to 3.3V. A regulator for 5V likely
    requires 7V or more.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从已知信息开始——5V是稳压器的一个良好输出电压，在需要的情况下，Pico可以进一步调节至3.3V。5V稳压器可能需要7V或更高的电压。
- en: Important note
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: Voltage measures electrical pressure. A current measures how fast electrical
    energy flows. Combining both of them shows system power usage. A current in amps
    or milliamps can be used as a stand-in for power in watts when the voltage is
    known.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 电压衡量的是电气压力。电流衡量的是电气能量流动的速度。将两者结合起来显示系统功率使用情况。当已知电压时，安培或毫安培的电流可以用作瓦特的替代来衡量功率。
- en: Let’s look up the specifications for the N20 gear motors. Perform an online
    search for the N20 motor datasheet. You’ll be looking for a PDF document. Usually,
    these have a picture or diagram of the product, followed by the specification
    and feature tables. If you look for *Rated Voltage*, they say 6V; however, further
    down the sheet, there is usually a table relating to the voltage of the motor
    speed. Based on the motors and regulator basics, an input voltage of 7V-12V would
    make sense.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查找N20齿轮电机的规格。在网上搜索N20电机数据表。你将寻找一个PDF文档。通常，这些文档包含产品的图片或图表，随后是规格和特性表。如果你寻找*额定电压*，它们会说6V；然而，在表格的下方，通常有一个与电机速度电压相关的表格。基于电机和稳压器的基本原理，7V-12V的输入电压是合理的。
- en: Our electronics don’t operate on voltage alone and require a current to operate.
    So, a regulator will need to handle the minimum current requirements. We’ll need
    to look at some datasheets and specifications for the other parts. We will include
    sensors. For Bluetooth, we will include a low-power **Bluetooth Low Energy** (**BLE**)
    board using the highest current measurements from [https://learn.adafruit.com/introducing-the-adafruit-bluefruit-le-uart-friend/current-measurements](https://learn.adafruit.com/introducing-the-adafruit-bluefruit-le-uart-friend/current-measurements).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的电子产品不仅仅依赖于电压运行，还需要电流来操作。因此，稳压器需要处理最小电流需求。我们需要查看一些其他部件的数据表和规格。我们将包括传感器。对于蓝牙，我们将包括一个低功耗的**蓝牙低功耗（BLE**）板，使用来自[https://learn.adafruit.com/introducing-the-adafruit-bluefruit-le-uart-friend/current-measurements](https://learn.adafruit.com/introducing-the-adafruit-bluefruit-le-uart-friend/current-measurements)的最高电流测量值。
- en: 'We’ll base it on worst-case values so that we can handle them. Let’s start
    by looking at datasheets and gathering numbers into a table, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将基于最坏情况值来计算，以便我们可以处理它们。让我们先查看数据表，并将数字汇总到以下表格中：
- en: '![Table 1.3 – Device power requirements ](img/B18001_01_Table_03.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![表1.3 – 设备功率需求](img/B18001_01_Table_03.jpg)'
- en: Table 1.3 – Device power requirements
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.3 – 设备功率需求
- en: '[*Chapter 3*](B18001_03.xhtml#_idTextAnchor055) of the datasheet for Raspberry
    Pi Pico (which can be found at [https://datasheets.raspberrypi.com/pico/pico-datasheet.pdf](https://datasheets.raspberrypi.com/pico/pico-datasheet.pdf))
    shows the electrical specification, with peak currents at a little under 92 mA
    (milliamps—a measure of current). We’ll round this up to 100 mA as a margin.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第3章*](B18001_03.xhtml#_idTextAnchor055)的Raspberry Pi Pico数据表（可在[https://datasheets.raspberrypi.com/pico/pico-datasheet.pdf](https://datasheets.raspberrypi.com/pico/pico-datasheet.pdf)找到）显示了电气规格，峰值电流略低于92
    mA（毫安——电流的度量）。我们将将其四舍五入到100 mA作为余量。'
- en: The Adafruit Bluetooth board uses only 15.2 mA when fully active, but we can
    round it up to 20 mA to be generous. The sensors need maybe 50 mA of extra room
    to accommodate them.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit蓝牙板在完全激活时仅消耗15.2 mA，但我们可以将其四舍五入到20 mA以示慷慨。传感器可能需要额外的50 mA空间来容纳它们。
- en: We can add these estimates together to suggest a minimum current specification.
    Based on these datasheets and estimates, any regulator capable of over 400 mA
    will be plenty.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这些估计值相加，以建议一个最小电流规格。基于这些数据表和估计，任何能够提供超过400 mA的稳压器都将是足够的。
- en: Choosing a regulator
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个稳压器
- en: Motor control and power supplies can be totally separate concerns, giving great
    flexibility, but this can take up more space. There are boards designed for Raspberry
    Pi Pico that allow you to control motors while supplying power to Raspberry Pi
    Pico. However, will they supply 400 mA?
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 电机控制和电源可以完全分开考虑，这提供了很大的灵活性，但可能会占用更多空间。有一些专为Raspberry Pi Pico设计的电路板，允许你在为Raspberry
    Pi Pico供电的同时控制电机。然而，它们能提供400 mA的电流吗？
- en: Kitronik has some neat Raspberry Pi Pico motor boards—a small motor only, along
    with a larger robotics board with servo motor outputs and a prototyping area.
    However, the supply for the Pico on the robotics board datasheet has 100 mA for
    peripherals, which won’t work.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Kitronik有一些整洁的Raspberry Pi Pico电机板——仅有一个小电机，以及一个带有伺服电机输出和原型设计区域的更大型的机器人板。然而，机器人板数据表上Pico的供电为100
    mA，这不会工作。
- en: Now, we understand that we need a regulator that is capable of outputting 5V,
    at a minimum of 400 mA. We want something small and simple. A suitable device
    for this is a **Universal Battery Eliminator Circuit** (**UBEC**). These can handle
    3 A. We’d put this through a VSYS pin on the Pico.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们明白我们需要一个能够输出5V、至少400 mA的稳压器。我们想要一个小巧简单的设备。适用于此的设备是**通用电池消除电路**（**UBEC**）。这些可以处理3
    A。我们将通过Pico的VSYS引脚连接这个设备。
- en: Choosing a motor controller
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个电机控制器
- en: 'The suggested motors are small. Motors have a stall current—that is, the power
    they draw if they are trying to move and block a logical maximum. For the N20s,
    their datasheet suggests 350 mA at 6V. It might be a little over that, perhaps
    550 mA. A motor controller needs to handle a little over this peak per channel—motor
    controllers that are unable to handle motor load tend to go up in smoke! Take
    a look at the following two common simple motor controllers:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的电机较小。电机有一个堵转电流——即它们在试图移动并阻止逻辑最大值时吸取的功率。对于N20s，它们的数据表建议在6V下为350 mA。可能略高，可能是550
    mA。电机控制器需要处理略高于每个通道的峰值——无法处理电机负载的电机控制器往往会冒烟！看看以下两个常见的简单电机控制器：
- en: '![Figure 1.9 – An L298N motor controller next to a TB6612fng ](img/Figure_1.09_B18001.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – L298N电机控制器旁边是TB6612fng](img/Figure_1.09_B18001.jpg)'
- en: Figure 1.9 – An L298N motor controller next to a TB6612fng
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – L298N电机控制器旁边是TB6612fng
- en: In *Figure 1**.9*, on the left-hand side, you can see the very common **L298N**—internet
    searches suggest this handles 2 A per channel. They are small, inexpensive, and
    easy to find. However, this is a 5V logic device. Raspberry Pi Pico outputs 3.3V
    logic, which might not work properly with this controller without logic-level
    conversion.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在**图1.9**的左侧，你可以看到非常常见的**L298N**——网络搜索表明每个通道可以处理2 A。它们体积小，价格低廉，易于找到。然而，这是一个5V逻辑设备。Raspberry
    Pi Pico输出3.3V逻辑，可能需要逻辑电平转换才能与这个控制器正常工作。
- en: On the right-hand side is another good choice, the **Toshiba TB6612fng**. These
    handle 1.2 A per channel, which is a bit less than shown previously but still
    good enough. It will handle up to 15V for controlling motors and logic voltages
    from 3V to 5V, so it won’t require level shifters for Raspberry Pi Pico. There
    is a module from *SparkFun* for these, which will work well with the Pico and
    is small enough to fit on a breadboard next to it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧还有一个不错的选择，**东芝TB6612fng**。这些每通道可以处理1.2 A，比之前显示的略少，但仍然足够好。它可以处理高达15V的电压来控制电机和从3V到5V的逻辑电压，因此不需要为Raspberry
    Pi Pico使用电平转换器。SparkFun有一个模块可以配合Pico使用，足够小，可以放在面包板旁边。
- en: Additionally, we should plan to have a power switch on the breadboard from the
    batteries to the motor controller and regulator. Talking of batteries, we still
    need to select them.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还应计划在面包板上从电池到电机控制器和调节器之间有一个电源开关。说到电池，我们仍然需要选择它们。
- en: Choosing batteries
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择电池
- en: We also need something to go through the power regulator—batteries.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一些东西通过电源调节器——电池。
- en: While we can (and should, at a more advanced stage) consider Lithium-ion batteries,
    the type used in **remote control** cars, the simplest possible option is AA batteries.
    For our motor and regulator choice, 8 x AA gives 12V. These are easy to buy and
    replace but take up a lot of space for their power output. Our motors don’t require
    a lot of current, so they will be good enough.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以（并且应该在更高级的阶段考虑）考虑锂离子电池，这种在**遥控车**中使用的电池类型，但最简单的选择是AA电池。对于我们的电机和调节器选择，8个AA电池提供12V。这些电池容易购买和更换，但它们的功率输出需要占用大量空间。我们的电机不需要太多电流，所以它们将足够好。
- en: Now that we’ve examined our power requirements and some solutions, we’ll take
    a look at which pins are being used on our Raspberry Pi Pico and ensure that our
    plans for hardware won’t conflict.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经检查了我们的电源需求和一些解决方案，我们将查看我们的Raspberry Pi Pico上正在使用的引脚，并确保我们的硬件计划不会发生冲突。
- en: Pin usage
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引脚使用
- en: Our Raspberry Pi Pico has many IO pins, but we need to consider whether all
    the items we intend to connect to it will be able to simultaneously connect to
    it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Raspberry Pi Pico有很多IO引脚，但我们需要考虑我们打算连接到它的所有项目是否能够同时连接。
- en: 'Let’s re-examine the specifications for the Pico at [https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html](https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视Pico的规格，请参阅[https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html](https://www.raspberrypi.com/documentation/microcontrollers/raspberry-pi-pico.html)：
- en: 26 **General Purpose Input/Output** (**GPIO**) pins
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 26个**通用输入/输出**（**GPIO**）引脚
- en: 2 x UART, 2 x SPI, and 2 x SPI
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2个UART，2个SPI，和2个SPI
- en: The motor controller will consume two pins per motor, and we know these motors
    come with encoders, with a further two pins each. That means, so far, we’ve used
    8 of the 26 IO pins. This should leave us plenty of room for expansion.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 电机控制器将每个电机消耗两个引脚，我们知道这些电机带有编码器，每个编码器还需要两个引脚。这意味着到目前为止，我们已经使用了26个IO引脚中的8个。这应该给我们留下足够的空间进行扩展。
- en: Now that we’ve checked our basic concept, we’ll move on to test fitting—an approximation
    of how we’ll build the robot.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经检查了我们的基本概念，我们将继续进行测试装配——这是我们对如何构建机器人的近似。
- en: Test fitting a Raspberry Pi Pico robot
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试装配Raspberry Pi Pico机器人
- en: Now that we’ve checked that we can power our system, we need to make sure it
    is all going to fit on the robot. In this step, you get a rough idea of where
    things will be, whether your chassis will be big enough, and whether the robot
    design is likely to work.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经检查了我们可以为系统供电，我们需要确保所有东西都能适合在机器人上。在这个步骤中，你可以大致了解物品将放在哪里，你的底盘是否足够大，以及机器人设计是否可能工作。
- en: The key thing for a test fit is that it is not detailed. Use the simplest method
    to check whether things will fit, be it sliding around cut-out paper rectangles
    or using simple software.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 测试装配的关键是它不是详细的。使用最简单的方法来检查物品是否适合，无论是滑动切割的纸张矩形还是使用简单的软件。
- en: Let’s make some simple paper or card parts. For this section, you’ll require
    card, a pencil, a ruler, and scissors. Card from a cereal box is great for this,
    but paper will also do.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们制作一些简单的纸张或卡片部件。对于本节，你需要卡片、一支铅笔、一把尺子和剪刀。来自谷物箱的卡片非常适合这个用途，但纸张也可以。
- en: For a test fit, rectangles are often good enough. The intention is to determine
    what will fit inside a space and position things. Detail isn’t necessary. For
    large robots, you might need to make a scale model. As this robot is small, you
    can make parts at a 1:1 scale. This has an added advantage—if you already have
    parts in your possession, you get to use them.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试安装，矩形通常就足够了。目的是确定什么可以放入空间并放置物品。细节不是必要的。对于大型机器人，你可能需要制作一个比例模型。由于这个机器人很小，你可以以1:1的比例制作零件。这有一个额外的优势——如果你已经拥有零件，你可以使用它们。
- en: Creating your first test-fit part
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个测试安装零件
- en: You’ll need the datasheets for your devices again—this time to start looking
    at the mechanical sizes of things. For a test fit, you just need to create bounding
    boxes for items, ensuring there is enough space for them.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你将再次需要你的设备的规格表——这次是为了开始查看物品的机械尺寸。为了测试安装，你只需要为物品创建边界框，确保有足够的空间。
- en: 'Let’s start with a breadboard and the Pico. Since the Pico is on the breadboard,
    you can just model the breadboard size. I recommend a 400-pin breadboard, which
    is also known as a half-plus. Use a search engine to look for `half plus breadboard
    dimensions` and click on the images panel. What you are looking for is a flat
    diagram showing the outside dimensions of the board, such as the following diagram:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从面包板和Pico开始。由于Pico在面包板上，你只需模拟面包板的尺寸。我推荐使用400针面包板，也称为半加。使用搜索引擎查找`半加面包板尺寸`，并点击图片面板。你正在寻找的是显示板外尺寸的平面图，如下所示：
- en: '![Figure 1.10 – Breadboard dimensions ](img/Figure_1.10_B18001.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10 – 面板尺寸](img/Figure_1.10_B18001.jpg)'
- en: Figure 1.10 – Breadboard dimensions
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – 面板尺寸
- en: The preceding diagram shows what to expect with a drawing/picture in terms of
    dimensions, which, in this case, is a breadboard. It measures 84 mm along the
    top and 56 mm along the right-hand side. It’s important to note here that I’m
    using millimeters throughout the book, and I will convert from other units if
    necessary. Stick to one measurement system in a robot design!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表显示了在尺寸方面的绘图/图片预期，在这种情况下是面包板。它沿顶部测量84毫米，沿右侧测量56毫米。在这里需要注意的是，我在整本书中都在使用毫米，如果需要，我会从其他单位转换。在机器人设计中坚持使用一个测量系统！
- en: 'We can take the paper or card and draw an 84 mm by 56 mm rectangle in pencil.
    This does not need to be too accurate—the nearest 5 mm is good enough. The following
    photograph shows this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用纸张或卡片画一个84毫米乘以56毫米的矩形。这不需要太精确——最接近的5毫米就足够了。以下照片显示了这一点：
- en: '![Figure 1.11 – Making a breadboard test-fit part ](img/Figure_1.11_B18001.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图1.11 – 制作面包板测试安装零件](img/Figure_1.11_B18001.jpg)'
- en: Figure 1.11 – Making a breadboard test-fit part
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 – 制作面包板测试安装零件
- en: As the preceding photograph shows, you simply draw it out. Additionally, so
    that we can identify it later, write *breadboard* on the part, along with its
    dimensions of *84 x 56*. Keep these handy so that they can be used for reference
    later.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如前照片所示，你只需画出来。此外，为了我们以后能识别它，在零件上写上*breadboard*，以及其尺寸*84 x 56*。把它们放在手边，以便以后作为参考。
- en: Then, you can cut this out with scissors. I tend to make a wide rough cut, and
    then a finer close cut as a second pass for this.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以用剪刀剪下来。我倾向于先做一个宽的粗糙切割，然后进行第二次更精细的切割。
- en: This simple rectangle, with the right measurements, is our first test-fit part.
    Next, we will need the motor parts.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的矩形，有正确的尺寸，是我们第一个测试安装零件。接下来，我们需要电机零件。
- en: Motors
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电机
- en: The motors we are using are N20 motors. If we place them on the underside of
    the robot, as is common with these designs, we still need to consider how their
    wires come up through the chassis. It is easier to put them on top so that the
    motor wires can face upward.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的电机是N20电机。如果我们将它们放在机器人的底部，这与这些设计很常见，我们仍然需要考虑它们的电线如何穿过底盘。将它们放在上面更容易，这样电机电线就可以向上面对。
- en: 'We can search the web for N20 motor brackets. Look in the images tab for drawings
    so that we can get the correct dimensions and add extra space for wiring behind
    the motor. The following photograph shows me making these test parts:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在网上搜索N20电机支架。在图片标签中查找图纸，这样我们可以得到正确的尺寸，并在电机后面添加额外的布线空间。以下照片显示了我制作这些测试零件：
- en: '![Figure 1.12 – Making cardboard motor test-fit parts ](img/Figure_1.12_B18001.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图1.12 – 制作纸板电机测试安装零件](img/Figure_1.12_B18001.jpg)'
- en: Figure 1.12 – Making cardboard motor test-fit parts
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12 – 制作纸板电机测试安装零件
- en: For this part, as the preceding photograph shows, we want two rectangles of
    30 mm by 35 mm. Label them. On one of the longer edges of each part, add an arrow
    to show that this is where the wheels will go.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这部分，如前照片所示，我们想要两个30 mm x 35 mm的矩形。给它们贴上标签。在每个部件的一个较长的边缘上，添加一个箭头以表明这是车轮将放置的位置。
- en: We have motors and a breadboard. Next, we need to make stand-in parts for powering
    them.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有电机和面包板。接下来，我们需要为它们制作替代的电源部件。
- en: Power systems
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电力系统
- en: The UBEC doesn’t take up a lot of space, so we can ignore it. The controller
    we’ve chosen will fit on a breadboard with the Pico, so it is already accounted
    for. We do need to account for the batteries.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: UBEC占用的空间不多，所以我们可以忽略它。我们选择的控制器可以与Pico一起安装在面包板上，所以它已经考虑在内了。我们需要考虑电池。
- en: We have a couple of variants on an 8 x AA battery holder—the flat kind, which
    takes up more space but comes with mounting screws, or the 4 x 2 kind. These use
    vertical space instead. Another way to save space is to put batteries on the underside
    of the chassis.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有几种8 x AA电池盒的变体——平板式，它占用更多空间但附带安装螺丝，或者4 x 2式。这些使用垂直空间。另一种节省空间的方法是将电池放在底盘的底部。
- en: 'At this stage, we will use the flat holder as it is easier. You can look up
    the size for them and create a labeled rectangle for them. My battery box came
    out as 93 mm x 57 mm:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们将使用平板支架，因为它更容易。你可以查找它们的大小，并为它们创建一个带标签的矩形。我的电池盒尺寸为93 mm x 57 mm：
- en: '![Figure 1.13 – A battery box in cardboard ](img/Figure_1.13_B18001.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图1.13 – 纸板电池盒](img/Figure_1.13_B18001.jpg)'
- en: Figure 1.13 – A battery box in cardboard
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13 – 纸板电池盒
- en: The preceding photograph shows a battery box created from cardboard. Now, we
    have a bunch of parts to go on the chassis. Next, we need to represent the chassis
    itself.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的照片显示了一个由纸板制成的电池盒。现在，我们有了一堆要放在底盘上的部件。接下来，我们需要表示底盘本身。
- en: Creating a rough chassis
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个粗略的底盘
- en: 'We previously suggested that the chassis should be about 150 mm x 200 mm. Create
    this rectangle in cardboard, as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前建议底盘的大小应该是大约150 mm x 200 mm。按照以下方式在纸板上创建这个矩形：
- en: '![Figure 1.14 – The cardboard chassis ](img/Figure_1.14_B18001.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图1.14 – 纸板底盘](img/Figure_1.14_B18001.jpg)'
- en: Figure 1.14 – The cardboard chassis
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14 – 纸板底盘
- en: As you can see from the preceding photograph, this is not—at all—intended to
    be a perfectly neat cut. It is simply meant to be good enough to see where things
    likely need to go. Give the chassis labels just as we have done so far with the
    other parts. Additionally, we can label one of the shorter edges of the chassis
    part as the front.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如前照片所示，这并不是——完全——为了达到完美的整洁切割。它只是意味着足够好，以便看到东西可能需要放置的位置。就像我们之前对其他部件所做的那样，给底盘贴上标签。此外，我们还可以将底盘部件的一个较短的边缘标记为前面。
- en: This is the last item to test fit. Let’s start to arrange these parts.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最后需要测试安装的部件。让我们开始安排这些部件。
- en: Arranging the test-fit parts
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安排测试安装部件
- en: 'Now, you should have a set of rectangles representing the different parts.
    The following photograph shows the parts and how we can arrange them:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该有一组代表不同部分的矩形。以下照片显示了这些部分以及我们如何安排它们：
- en: '![Figure 1.15 – Our test-fit parts in cardboard ](img/Figure_1.15_B18001.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图1.15 – 我们在纸板上的测试安装部件](img/Figure_1.15_B18001.jpg)'
- en: Figure 1.15 – Our test-fit parts in cardboard
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15 – 我们在纸板上的测试安装部件
- en: The boxes on the left-hand side of *Figure 1**.15* are correctly proportioned
    parts and have been placed in a rough position. However, they aren’t properly
    laid out yet. The right-hand side shows a possible layout.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15左侧的方框是比例正确的部件，并且已经放置在一个大致的位置。然而，它们还没有正确布局。右侧显示了一个可能的布局。
- en: It’ll be easier to fit motors around the breadboard if we rotate it so that
    it’s tall instead of wide. We have the batteries at the back of the robot, in
    the middle, then we have the breadboard in front of them, along the middle. Notice
    that there is a gap between the batteries and the breadboard—we don’t want any
    parts to be too close together.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将面包板旋转，使其垂直而不是水平，那么在面包板周围安装电机会更方便。电池位于机器人的后面，中间位置，然后我们在它们前面放置面包板，沿着中间位置。请注意，电池和面包板之间存在间隙——我们不希望任何部件过于靠近。
- en: We’ve put the motors on either side of the breadboard, leaving space at the
    front to expand our robot design.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将电机放在面包板的两侧，前面留出空间以扩展我们的机器人设计。
- en: We have accounted for the major parts of the robot, including computing, power,
    and motors. There’s also adequate space for expansion. We’ll tune this later as
    we get deeper into the design, but this shows our combination is viable.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经考虑了机器人的主要部分，包括计算、电源和电机。同时，也留有足够的空间用于扩展。随着我们对设计的深入了解，我们将在之后调整这些组合，但这一点显示了我们的组合是可行的。
- en: Now that we have our robot design, it’s time to shop for tools and materials!
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的机器人设计，是时候购买工具和材料了！
- en: A recommended shopping list for robot basics
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器人基础推荐的购物清单
- en: We’ve got a plan—a test fit, a method to make the chassis, decisions about the
    processing on board, and how we will power the thing. Now, we need to buy the
    necessary parts and tools to make this happen.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个计划——进行测试组装，确定底盘的制作方法，对板上的处理做出决策，以及如何为这个设备供电。现在，我们需要购买必要的零件和工具来实现这一点。
- en: Let’s start with the parts.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从零件开始。
- en: Robot parts and where to find them
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器人零件及其购买地点
- en: There are many places to find robot parts, and some of these parts go by different
    names from different manufacturers. I’ll attempt to provide enough information
    about the parts so that they can be easily found in many countries.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多地方可以找到机器人零件，而且这些零件在不同制造商那里有不同的名称。我将尝试提供足够的信息关于这些零件，以便它们可以在许多国家轻松找到。
- en: Part shopping list
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 零件购物清单
- en: 'We’ll start with a part list for the initial robot chassis. For each part,
    where necessary, we’ll show search terms, synonyms, and manufacturer numbers.
    You can try combinations of these to find parts—I wouldn’t suggest using all the
    terms at once but instead refining them until you get something else. Then, we
    can discuss places to buy them:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从初始机器人底盘的零件清单开始。对于每个零件，在必要时，我们将展示搜索词、同义词和制造商编号。您可以尝试这些术语的组合来找到零件——我不建议一次使用所有术语，而是逐步细化它们，直到找到其他东西。然后，我们可以讨论购买它们的地点：
- en: '**Raspberry Pi Pico**: This is the most important part to get you started.
    Other RP2040-based boards might be suitable; however, with different form factors
    and pins, you’ll need to get creative when it comes to wiring them. Beware of
    parts with fewer exposed pins, and ensure that they are *RP2040* boards. *Alternative
    parts*: Headered Pico, Pimoroni Pico LiPo, Adafruit Feather *RP2040*, *SparkFun
    Pro Micro RP2040*, *RP2040* Plus.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspberry Pi Pico**：这是开始时最重要的零件。其他基于RP2040的板可能也适用；然而，由于不同的外形和引脚，您在布线时需要发挥创意。注意那些暴露引脚较少的零件，并确保它们是*RP2040*板。*替代零件*：带引脚头的Pico，Pimoroni
    Pico LiPo，Adafruit Feather *RP2040*，*SparkFun Pro Micro RP2040*，*RP2040* Plus。'
- en: '**A USB micro cable**: You might already have one for your phone, but phones
    have been coming with USB-C cables for some time. To be specific, I mean a USB-A
    to USB-Micro cable. However, some laptops have a USB-C port—for those cases, consider
    a USB-C to USB-Micro cable instead.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**USB微型电缆**：您可能已经为您的手机配备了这样的电缆，但手机已经有一段时间在配备USB-C电缆了。具体来说，我指的是USB-A到USB-Micro电缆。然而，一些笔记本电脑有USB-C端口——对于这些情况，考虑使用USB-C到USB-Micro电缆。'
- en: '**Headers**: You’ll need to solder headers onto Raspberry Pi Pico and the motor
    controller. Later sensors will require them, too. Search terms for these include
    *male breakaway strip and single-row PCB through-hole pin headers*. Make sure
    that you choose 2.54 mm or 0.1-inch pitch headers.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引脚头**：您需要将引脚头焊接在Raspberry Pi Pico和电机控制器上。未来的传感器也将需要它们。这些的搜索词包括*雄性断开式条带和单排PCB通孔引脚头*。确保您选择2.54毫米或0.1英寸间距的引脚头。'
- en: '**A solderless breadboard**: I suggest a mini/half plus 400 tie-point breadboard,
    self-adhesive. Standard 0.1-inch (or 2.54 mm) pitch spacing, with a separating
    channel between the columns.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无焊面包板**：我建议使用迷你/半尺寸加400个接线点的面包板，自粘式。标准0.1英寸（或2.54毫米）间距，列之间有分隔通道。'
- en: '**Wiring**: You’ll need wiring between the components on the breadboard. For
    this, I suggest precut breadboard jump wire kits. These should be of the U-shape
    solderless kind—insulated cables with bare ends. They will be in different color-coded
    lengths and can be bent into shape to fit across breadboard connections.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布线**：您需要在面包板上的组件之间进行布线。为此，我建议使用预切割的面包板跳线套件。这些应该是U型无焊类型——绝缘电缆，两端裸露。它们将具有不同颜色编码的长度，并且可以弯曲成形状以适应面包板连接。'
- en: '**A Drv8833 or TB6612fng motor controller or motor driver**: I recommend the
    SparkFun or Adafruit models; however, other models will work. Stick to this chip,
    and ensure it’s a module/breakout board, not just the bare chip. It should have
    a square device with a capacitor on the board, too. I recommend getting a model
    that has pin functions printed on it. Alternatives are the L9110S, the less efficient
    L298n boards, or the L293 chip, which may need additional space.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Drv8833或TB6612fng电机控制器或电机驱动器**：我推荐SparkFun或Adafruit的型号；然而，其他型号也可以工作。坚持使用这个芯片，并确保它是一个模块/分线板，而不仅仅是裸片。板上应该有一个带有电容器的方形设备。我推荐购买一个上面印有引脚功能的型号。替代品包括L9110S、效率较低的L298n板或L293芯片，可能需要额外的空间。'
- en: '**A 5V 3A UBEC or a 5V UBEC (DC/DC step-down buck converter)**: Search for
    ones that can handle a minimum of 3 A. Larger ones are also fine. Look for those
    with a 5V output. If they allow 6V too, just make sure that you set the jumper
    to 5V. Look for those with bare input cables and a pin header end. Other buck
    converter modules may be suitable, but check for 3 A current capacity, and ensure
    that the output is 5V.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**5V 3A UBEC或5V UBEC（DC/DC降压转换器）**：寻找至少能处理3A电流的型号。更大的型号也可以。寻找输出为5V的型号。如果它们也允许6V，只需确保将跳线设置为5V。寻找那些带有裸露输入电缆和引脚端子的型号。其他降压转换器模块可能也适用，但请检查其3A电流容量，并确保输出为5V。'
- en: '**8 x AA battery holder or battery compartment**: Look for the flat-style ones
    with an integrated switch. Some come with round barrel jacks instead of bare ends—in
    which case, a 2.1-mm jack to screw the terminal block can be used to finish this.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**8 x AA电池夹或电池盒**：寻找带有集成开关的平板式型号。有些型号带有圆形柱状插头而不是裸露端子——在这种情况下，可以使用2.1毫米插头将端子块固定好。'
- en: '**A 1N5817 Schottky diode**: These are common in many electronic outlets.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**1N5817肖特基二极管**：这些在许多电子商店都很常见。'
- en: '**Motors**: The N20 micro-metal gear motors with encoders. The 298:1 ratio
    motors have the right combination of speed and torque. Adafruit has these as ADA4640\.
    Small DC gear motors with encoders can be substituted, but please be aware that
    the larger motors may require the robot to scale up along with power requirements.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电机**：带有编码器的N20微型金属齿轮电机。298:1比例的电机具有合适的速度和扭矩组合。Adafruit有这些型号，型号为ADA4640。带有编码器的小型直流齿轮电机也可以替代，但请注意，较大的电机可能需要机器人及其功率需求一起升级。'
- en: '**Ball caster**: A 16-30-mm caster should be fine. Most models will be suitable.
    Just remember to use the drawings for their mount holes later.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**球型万向轮**：16-30毫米的万向轮应该足够。大多数型号都适用。只需记住稍后使用它们的安装孔图纸。'
- en: '**40-90-mm wheels with N20 d-hole or universal hubs**: Make sure they are designed
    for N20 motors.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**40-90毫米的轮子，带有N20 d孔或通用轮毂**：确保它们是为N20电机设计的。'
- en: '**3 mm or 0.118-inch thick styrene card sheets/plates**: Go for an A4, 200
    x 150 mm, or greater size. They should be solid, flat sheets—not foam or hollow,
    and, ideally, not textured. Possible search terms include Plasticard, styrene
    sheet, Evergreen, and Plastruct. ABS sheets are suitable, but not acrylic as this
    can be brittle.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3毫米或0.118英寸厚的聚苯乙烯卡片纸/板**：选择A4，200 x 150毫米或更大的尺寸。它们应该是坚固、平坦的纸张——不是泡沫或中空的，理想情况下，不要有纹理。可能的搜索词包括Plasticard、聚苯乙烯板、Evergreen和Plastruct。ABS板也适用，但丙烯酸板不适用，因为这种材料可能较脆。'
- en: '**Kit for mounting parts**: Possible search terms include standoff and mounting
    kit. Preferably, they should be in metal, but nylon will do fine. They should
    be M2, M2.5, or M3 if possible. M2.5 will cover most cases. They should have standoffs,
    bolts (including machine screws and truss screws), and nuts.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部件安装套件**：可能的搜索词包括支架和安装套件。最好它们是金属的，但尼龙也可以。如果可能的话，它们应该是M2、M2.5或M3。M2.5将覆盖大多数情况。它们应该有支架、螺栓（包括机螺丝和桁架螺丝）和螺母。'
- en: This list of parts and search terms will help you find all the suggested parts
    to build this robot. Here is a helpful list of places to buy parts from. It isn’t
    exhaustive, and there might be sellers in your country that can help.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这份部件和搜索词列表将帮助您找到构建这个机器人所需的所有建议部件。以下是一个有用的购买部件地点列表。这不是详尽的，您所在国家可能还有其他卖家可以提供帮助。
- en: 'For electronics parts, wheels, motors, and modules, the following stores ship
    worldwide:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 对于电子部件、轮子、电机和模块，以下商店可全球发货：
- en: '[ThePiHut.com](https://ThePiHut.com), [pimoroni.com](https://pimoroni.com),
    [adafruit.com](https://adafruit.com), [Robu.in](https://Robu.in), and [mouser.com](https://mouser.com).
    For some items, [Pololu.com](https://Pololu.com) and [Sparkfun.com](https://Sparkfun.com)
    might carry them.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ThePiHut.com](https://ThePiHut.com), [pimoroni.com](https://pimoroni.com),
    [adafruit.com](https://adafruit.com), [Robu.in](https://Robu.in), 和 [mouser.com](https://mouser.com).
    对于某些物品，[Pololu.com](https://Pololu.com) 和 [Sparkfun.com](https://Sparkfun.com)
    可能会提供。'
- en: 'Both Adafruit and Pimoroni have web pages that list their various distributors:
    [https://www.adafruit.com/distributors](https://www.adafruit.com/distributors)
    and [https://shop.pimoroni.com/pages/worldwide-distributors](https://shop.pimoroni.com/pages/worldwide-distributors).
    They are a reliable source of reference.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adafruit和Pimoroni都有列出他们各种分销商的网页：[https://www.adafruit.com/distributors](https://www.adafruit.com/distributors)
    和 [https://shop.pimoroni.com/pages/worldwide-distributors](https://shop.pimoroni.com/pages/worldwide-distributors)。它们是可靠的参考资料来源。
- en: Online marketplaces such as eBay, AliExpress, and Alibaba can be used—but buyers
    beware. Sellers on them might not have good support or return policies in place.
    Parts might also be cheap substitutes, and they could take a long time to deliver.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线市场如eBay、AliExpress和Alibaba可以使用——但买家要小心。这些平台上的卖家可能没有良好的支持或退货政策。零件也可能是便宜的替代品，并且可能需要很长时间才能发货。
- en: For the styrene sheet, model supply shops are a good bet. Brands such as Evergreen
    are widely distributed. Hobbycraft, AliExpress, Alibaba, and Amazon carry these.
    While there, I suggest getting styrene angle strips and square tubes for later
    robot enhancements.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对于聚苯乙烯板，模型用品店是个不错的选择。Evergreen等品牌广泛分布。Hobbycraft、AliExpress、Alibaba和Amazon都有销售。在那里，我建议购买聚苯乙烯角条和方形管，以备将来机器人升级使用。
- en: The robot workshop and makerspaces
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器人工作坊和创客空间
- en: There is a list of workshop and hand tools associated with this book. You can
    buy them yourself or use a makerspace. Let’s start with the tools that you will
    need access to.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书与工作坊和手工具有关。你可以自己购买或使用创客空间。让我们从你需要访问的工具开始。
- en: List of tools
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具清单
- en: 'The tools required for this book are common in many workshops. In addition
    to this, school and college DT rooms, makerspaces, and many workshop stores will
    carry them:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书所需的工具在许多工作坊中都很常见。此外，学校、大学DT教室、创客空间和许多工作坊商店都会销售它们：
- en: '**Plastic cutter**: The kind with changeable blades. We will be cutting through
    styrene, which can quickly dull a knife. Linoleum flooring cutting blades will
    also be a useful alternative here.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**塑料切割器**：带有可更换刀片的类型。我们将切割聚苯乙烯，这可能会迅速使刀片变钝。亚麻地板切割刀片在这里也是一个有用的替代品。'
- en: A cutting mat to protect your work surfaces.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个切割垫来保护你的工作表面。
- en: You’ll need a try square, preferably metal.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要一个三角板，最好是金属的。
- en: '**A ruler**: This should be at least 200 mm long. Since the book is working
    in metric, I suggest metric markings, too.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一把尺子**：这应该至少有200毫米长。由于这本书使用公制单位，我建议使用公制刻度。'
- en: '**Sandpaper**: You will need a selection of, at the very least, 400, 600, and
    1,000 grit or similar.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**砂纸**：你需要至少400、600和1000目或类似的砂纸。'
- en: '**Soldering iron and stand**: You’ll be soldering some parts, so an iron is
    essential. Do not use a soldering iron without a stand! Many come with them. I
    recommend a temperature-controlled iron. In addition to this, a brass wool tip
    cleaner and some solder are required. We’ll use lead-free flux core solder wire.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**焊锡枪和支架**：你将需要焊接一些零件，所以焊锡枪是必不可少的。不要在没有支架的情况下使用焊锡枪！许多焊锡枪都配有支架。我推荐使用温度控制的焊锡枪。此外，还需要一块黄铜羊毛清洁器和一些焊锡。我们将使用无铅焊锡芯焊丝。'
- en: 10-20-mm hook and loop self-adhesive disks.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10-20毫米的钩子和粘扣自粘圆盘。
- en: A drill with 2-mm and 3-mm bits. This should be a small drill, preferably cordless.
    These are small parts, so precision is required more than power.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有2毫米和3毫米钻头的电钻。这应该是一个小型的电钻，最好是无线式的。这些是小零件，所以精度比功率更重要。
- en: You’ll need a pencil to make draft lines with. Personally, I like mechanical
    pencils.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要一个铅笔来绘制草图线。我个人喜欢机械铅笔。
- en: I recommend safety goggles when you drill or cut. Get a good comfortable pair—cheap
    uncomfortable ones might end up on your head instead of covering your eyes and
    won’t be protecting you.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你钻孔或切割时，我建议使用安全眼镜。购买一副舒适的好眼镜——便宜的不舒适的眼镜可能会戴在头上而不是覆盖你的眼睛，而且不会保护你。
- en: For drilling and cutting, a hobby vise or clamp keeps the part still and your
    hands safe. A small bench vise is suitable.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于钻孔和切割，一个爱好者的台虎钳或夹具可以保持零件静止并保护你的手。一个小型台虎钳是合适的。
- en: You need a flat work area with good lighting.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要一个平坦的工作区域，并且光线充足。
- en: '**Screwdrivers**: You will want a screwdriver set. It should have Phillips
    (PH0 and PH1) and flat-bladed (2 mm and 3 mm) screwdrivers.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**螺丝刀**：您需要一个螺丝刀套装。它应该包括菲利普斯（PH0 和 PH1）和平口（2 毫米和 3 毫米）螺丝刀。'
- en: Spanner or wrenches in metric. Precision sets will be useful.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用公制单位的扳手或扳手。精度套装将很有用。
- en: You can purchase these items and tools from electronics, hobby, DIY, and tool
    stores. AliExpress, Alibaba, eBay, and Amazon will also have them. However, if
    you do not have all of these tools, it feels like a lot of stuff.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从电子产品、爱好、DIY 和工具店购买这些物品和工具。AliExpress、Alibaba、eBay 和 Amazon 也会提供这些。然而，如果您没有所有这些工具，感觉像是有很多东西。
- en: An alternative to buying all these tools is to find a makerspace or hackerspace
    near you. They will have most, if not all, of these tools. Makerspaces are community-run
    spaces, have collections of tools, and might even have scrap material of just
    the right kind of styrene. Additionally, they have other makers, who can lend
    you a hand and assist you if you run into difficulty with a robot project.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 购买所有这些工具的替代方案是找到你附近的创客空间或黑客空间。它们将拥有大多数，如果不是所有这些工具。创客空间是由社区运营的空间，拥有工具收藏，甚至可能拥有正好类型的聚苯乙烯废料。此外，它们还有其他创客，他们可以在你遇到机器人项目困难时帮助你。
- en: There are makerspaces in most cities globally. They can be easily found on search
    engines and social media. If there is no makerspace in your area, reaching out
    via social media to other makers might help you to find a similar community project.
    There is a global makerspace directory at [https://makerspaces.make.co/](https://makerspaces.make.co/).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 全球大多数城市都有创客空间。它们可以在搜索引擎和社交媒体上轻松找到。如果你的地区没有创客空间，通过社交媒体联系其他创客可能会帮助你找到一个类似的项目社区。全球创客空间目录在
    [https://makerspaces.make.co/](https://makerspaces.make.co/)。
- en: Summary
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about Raspberry Pi Pico, why it’s a good controller
    to build a robot around, and why we will be using CircuitPython to program it.
    You discovered the planning process of a robot, choosing parts for it, and then
    test-fitting them to ensure our plan is likely to work. You had a view of datasheets
    and discovered a little about the size and electrical characteristics of parts.
    You also had a tour of the parts you’ll need to buy and the tools you’ll need
    to work with them. Finally, you were introduced to makerspaces as places to find
    tools and other makers.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了 Raspberry Pi Pico，为什么它是一个围绕机器人构建的好控制器，以及为什么我们将使用 CircuitPython 来编程它。你发现了机器人的规划过程，为其选择部件，然后测试装配以确保我们的计划可能成功。你对数据表有了了解，并发现了一些关于部件尺寸和电气特性的信息。你还参观了你需要购买的部件和与之一起工作的工具。最后，你了解了创客空间作为寻找工具和其他创客的场所。
- en: We have a rough robot plan. However, to start building something, we need to
    take some practical steps to prepare Raspberry Pi Pico for use in one. We’ll discover
    how to do this in the next chapter.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个粗略的机器人计划。然而，要开始构建东西，我们需要采取一些实际步骤来为 Raspberry Pi Pico 准备用于机器人。我们将在下一章中了解如何做到这一点。
- en: Exercises
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'To get you familiar with the content of this chapter, these additional exercises
    will attempt to test you on what you’ve learned, and prepare you for later sections:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你熟悉本章的内容，以下附加练习将尝试测试你所学的知识，并为你后面的章节做准备：
- en: Find a datasheet for the Bluefruit LE UART Friend. Find the electrical current
    used by the device, along with its width and height for fitting it.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到 Bluefruit LE UART Friend 的数据表。找到设备使用的电流，以及它的宽度和高度以便安装。
- en: We are going to add such a Bluetooth board to our robot. Use the dimensions
    from the datasheet to make a part in your test-fit diagram.
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们打算在我们的机器人上添加一块蓝牙板。使用数据表中的尺寸在你的测试装配图中制作一个部件。
- en: Find a space on the robot for this part that does not overlap with other parts.
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在机器人上找到一个空间，这个空间不与其他部件重叠。
- en: Look on the websites of the previously mentioned stores. See if you can find
    out where you’d be able to buy this part.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看之前提到的商店的网站。看看你是否能找到可以购买这个部件的地方。
- en: Further reading
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Please refer to the following resources for more information:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下资源以获取更多信息：
- en: To learn more about CircuitPython, the [https://circuitpython.readthedocs.io/](https://circuitpython.readthedocs.io/)
    website is a great resource.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于 CircuitPython 的信息，[https://circuitpython.readthedocs.io/](https://circuitpython.readthedocs.io/)
    网站是一个极好的资源。
- en: For a detailed look at Python on microcontrollers, please refer to *MicroPython
    Cookbook*, by *Marwan Alsabbagh*, *Packt Publishing*. This book has sections on
    CircuitPython and MicroPython in general.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要详细了解微控制器上的Python，请参阅由*Marwan Alsabbagh*和*Packt Publishing*出版的*MicroPython Cookbook*。这本书包含了关于CircuitPython和MicroPython的一般章节。
- en: '*Embedded Systems Architecture*, by *Daniele Lacamera*, *Packt Publishing*,
    offers an extensive dive into the I2C and SPI bus interfaces.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*嵌入式系统架构*，由*Daniele Lacamera*和*Packt Publishing*出版，深入探讨了I2C和SPI总线接口。'
- en: Another perspective on makerspaces comes from *Progression of a Maker*, which
    can be found at [https://hub.packtpub.com/progression-maker/](https://hub.packtpub.com/progression-maker/).
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种关于创客空间的观点来自*Progression of a Maker*，可以在[https://hub.packtpub.com/progression-maker/](https://hub.packtpub.com/progression-maker/)找到。
