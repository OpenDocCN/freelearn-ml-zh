- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Time-Series Analysis with Python
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行时间序列分析
- en: Time-Series analysis revolves around getting familiar with a dataset and coming
    up with ideas and hypotheses. It can be thought of as "storytelling for data scientists"
    and is a critical step in machine learning, because it can inform and help shape
    tentative conclusions to test while training a machine learning model. Roughly
    speaking, the main difference between time-series analysis and machine learning
    is that time-series analysis does not include formal statistical modeling and
    inference.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列分析围绕熟悉数据集并提出想法和假设展开。它可以被看作是“数据科学家的讲故事”，并且是机器学习中的一个关键步骤，因为它可以为在训练机器学习模型时测试的假设和结论提供信息和帮助。大致而言，时间序列分析和机器学习之间的主要区别在于，时间序列分析不包括正式的统计建模和推断。
- en: While it can be daunting and seem complex, it is a generally very structured
    process. In this chapter, we will go through the fundamentals in Python for dealing
    with time-series patterns. In Python, we can do time-series analysis by interactively
    querying our data using a number of tools that we have at our fingertips. This
    starts from creating and loading time-series datasets to identifying trend and
    seasonality. We'll outline both the structure of time-series analysis, and the
    constituents both in terms of theory and practice in Python by going through examples.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这可能让人感到不知所措，似乎很复杂，但它通常是一个非常结构化的过程。在本章中，我们将通过 Python 来处理时间序列模式的基础知识。在 Python
    中，我们可以通过交互式查询数据，使用我们手头的一些工具来进行时间序列分析。这从创建和加载时间序列数据集开始，到识别趋势和季节性。我们将概述时间序列分析的结构，并通过例子展示在
    Python 中的理论和实践组成部分。
- en: The main example will use a dataset of air pollution in London and Delhi. You
    can find this example as a Jupyter notebook in the book's GitHub repository.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的例子将使用伦敦和德里的空气污染数据集。你可以在本书的 GitHub 仓库中找到这个例子，作为 Jupyter notebook。
- en: 'We''re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: What is time-series analysis?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是时间序列分析？
- en: Working with time-series in Python
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 中处理时间序列
- en: Understanding the variables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解变量
- en: Uncovering relationships between variables
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 揭示变量之间的关系
- en: Identifying trend and seasonality
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别趋势和季节性
- en: We'll start with a characterization and an attempt at a definition of time-series
    analysis.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从时间序列分析的特征化和定义开始。
- en: What is time-series analysis?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是时间序列分析？
- en: The term **time-series analysis** (**TSA**) refers to the statistical approach
    to time-series or the analysis of trend and seasonality. It is often an *ad hoc*
    exploration and analysis that usually involves visualizing distributions, trends,
    cyclic patterns, and relationships between features, and between features and
    the target(s).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间序列分析**（**TSA**）一词指的是时间序列的统计方法，或趋势和季节性分析。它通常是一个 *临时的* 探索性分析，通常涉及可视化分布、趋势、周期模式以及特征之间、特征与目标之间的关系。'
- en: More generally, we can say TSA is roughly **exploratory data analysis** (**EDA**)
    that's specific to time-series data. This comparison can be misleading however
    since TSA can include both descriptive and exploratory elements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说，我们可以说 TSA 大致是针对时间序列数据的 **探索性数据分析**（**EDA**）。然而，这种比较可能会误导，因为 TSA 可以同时包含描述性和探索性元素。
- en: 'Let''s see quickly the differences between descriptive and exploratory analysis:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快速来看一下描述性分析和探索性分析之间的区别：
- en: '**Descriptive analysis** summarizes characteristics of a dataset'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述性分析**总结数据集的特征'
- en: '**Exploratory analysis** analyzes for patterns, trends, or relationships between
    variables'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索性分析**分析模式、趋势或变量之间的关系'
- en: Therefore, TSA is the initial investigation of a dataset with the goal of discovering
    patterns, especially trend and seasonality, and obtaining initial insights, testing
    hypotheses, and extracting meaningful summary statistics.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，TSA 是对数据集的初步调查，目的是发现模式，特别是趋势和季节性，并获得初步的见解、检验假设，并提取有意义的总结性统计数据。
- en: 'Definition: Time-Series Analysis (TSA) is the process of extracting a summary
    and other statistical information from time-series, most importantly, the analysis
    of trend and seasonality.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 定义：时间序列分析（TSA）是从时间序列中提取摘要和其他统计信息的过程，最重要的是趋势和季节性的分析。
- en: Since an important part of TSA is gathering statistics and representing your
    dataset graphically through visualization, we'll do a lot of plots in this chapter.
    Many statistics and plots described in this chapter are specific to TSA, so even
    if you are familiar with EDA, you'll find something new.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 TSA 的一个重要部分是通过可视化收集统计数据并以图形方式表示数据集，因此在本章中，我们将进行很多绘图。许多在本章中描述的统计数据和图形是特定于
    TSA 的，因此即使你熟悉 EDA，你也会发现一些新的内容。
- en: A part of TSA is collecting and reviewing data, examining the distribution of
    variables (and variable types), and checking for errors, outliers, and missing
    values. Some errors, variable types, and anomalies can be corrected, therefore
    EDA is often performed hand in hand with preprocessing and feature engineering,
    where columns and fields are selected and transformed. The whole process from
    data loading to machine learning is highly iterative and may involve multiple
    instances of TSA at different points.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TSA 的一部分是收集和审查数据，检查变量的分布（以及变量类型），并检查错误、异常值和缺失值。某些错误、变量类型和异常可以得到修正，因此 EDA 通常与预处理和特征工程一起进行，其中选择和转换列及字段。从数据加载到机器学习的整个过程是高度迭代的，可能会在不同阶段涉及多个
    TSA 实例。
- en: 'Here are a few crucial steps for working with time-series:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是处理时间序列时的几个关键步骤：
- en: Importing the dataset
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入数据集
- en: Data cleaning
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据清理
- en: Understanding variables
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解变量
- en: Uncovering relationships between variables
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 揭示变量之间的关系
- en: Identifying trend and seasonality
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别趋势和季节性
- en: Preprocessing (including feature engineering)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理（包括特征工程）
- en: Training a machine learning model
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练机器学习模型
- en: Importing the data can be considered prior to TSA, and data cleaning, feature
    engineering, and training a machine learning model are not strictly part of TSA.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 导入数据可以看作是 TSA 之前的步骤，而数据清理、特征工程和训练机器学习模型并不严格属于 TSA。
- en: Importing the data includes parsing, for example extracting dates. The three
    steps that are central to TSA are understanding variables, uncovering relationships
    between variables, and identifying trend and seasonality. There's a lot more to
    say about each of them, and in this chapter, we'll talk about them in more detail
    in their dedicated sections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 导入数据包括解析，例如提取日期。TSA 的三个核心步骤是理解变量、揭示变量之间的关系以及识别趋势和季节性。每一个步骤都有很多内容要讲解，在本章中，我们将在专门的章节里更详细地讨论它们。
- en: 'The steps belonging to TSA and leading to preprocessing (feature engineering)
    and machine learning are highly iterative, and can be visually appreciated in
    the following time-series machine learning flywheel:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 属于 TSA 的步骤，导向预处理（特征工程）和机器学习的过程是高度迭代的，可以通过以下时间序列机器学习飞轮清晰地看到：
- en: '![Flywheel%20-%20page%201.png](img/B17577_02_01.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Flywheel%20-%20page%201.png](img/B17577_02_01.png)'
- en: 'Figure 2.1: The time-series machine learning flywheel'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：时间序列机器学习飞轮
- en: This flywheel emphasizes the iterative nature of the work. For example, data
    cleaning comes often after loading the data, but will come up again after we've
    made another discovery about our variables. I've highlighted TSA in dark, while
    steps that are not strictly part of TSA are grayed out.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个飞轮强调了工作的迭代性质。例如，数据清理通常在加载数据后进行，但在我们对变量有了新的发现后，数据清理会再次出现。我已将 TSA 高亮显示为深色，而不是严格属于
    TSA 的步骤则用灰色显示。
- en: Let's go through something practical! We'll start by loading a dataset. Right
    after importing the data, we'd ask questions like what's the size of the dataset
    (the number of observations)? How many features or columns do we have? What are
    the column types?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些实际操作开始吧！我们将从加载数据集开始。在导入数据后，我们会提出一些问题，比如数据集的大小是多少（观察值的数量）？我们有多少个特征或列？这些列的类型是什么？
- en: We'll typically look at histograms or distribution plots. For assessing relationships
    between features and target variables, we'd calculate correlations and visualize
    them as a correlation heatmap, where the correlation strength between variables
    is mapped to colors.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常会查看直方图或分布图。为了评估特征与目标变量之间的关系，我们会计算相关性，并将其可视化为相关性热图，其中变量之间的相关强度会映射为不同的颜色。
- en: We'd look for missing values – in a spreadsheet, these would be empty cells
    – and we'd clean up and correct these irregularities, where possible.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会查找缺失值——在电子表格中，这些通常是空单元格——然后清理并尽可能修正这些不规则之处。
- en: We are going to be analyzing relationships between variables, and in TSA, one
    of its peculiarities is that we need to investigate the relationship of time with
    each variable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分析变量之间的关系，在时间序列分析（TSA）中，它的一个特殊之处是我们需要研究时间与每个变量之间的关系。
- en: Generally, a useful way of distinguishing different types of techniques could
    be between univariate and multivariate analysis, and between graphical and non-graphical
    techniques. **Univariate analysis** means we are looking at a single variable.
    This means we could be inspecting values to get the means and the variance, or
    – for the graphical side – plotting the distribution. We summarize these techniques
    in the *Understanding the variables* section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，区分不同技术的一种有用方式是区分单变量分析和多变量分析，以及图形化技术和非图形化技术。**单变量分析**意味着我们只关注单一变量。这意味着我们可以检查值以获取均值和方差，或者——在图形化方面——绘制分布图。我们将在
    *理解变量* 部分总结这些技术。
- en: On the other hand, **multivariate analysis** means we are calculating correlations
    between variables, or – for the graphical side – drawing a scatter plot, for example.
    We'll delve into these techniques in the *Uncovering relationships between variables*
    section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，**多变量分析**意味着我们在计算变量之间的相关性，或者——在图形化方面——例如绘制散点图。我们将在 *揭示变量之间的关系* 部分深入探讨这些技术。
- en: Before we continue, let's go through a bit of the basics of time-series with
    Python. This will cover the basic operations with time-series data as an introduction.
    After this, we'll go through Python commands with an actual dataset.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们先了解一些 Python 时间序列的基础知识。这将涵盖时间序列数据的基本操作作为介绍。之后，我们将使用实际数据集通过 Python 命令进行操作。
- en: Working with time-series in Python
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中处理时间序列
- en: Python has a lot of libraries and packages for time-series, such as `datetime`,
    `time`, `calendar`, `dateutil`, and `pytz`, which can be highly confusing for
    beginners. At the same time, there are many different data types like `date`,
    `time`, `datetime`, `tzinfo`, `timedelta`, `relativedelta`, and more.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有很多用于时间序列的库和包，比如 `datetime`、`time`、`calendar`、`dateutil` 和 `pytz`，这可能会让初学者感到非常困惑。同时，还有许多不同的数据类型，如
    `date`、`time`、`datetime`、`tzinfo`、`timedelta`、`relativedelta` 等。
- en: 'When it comes to using them, the devil is in the details. Just to name one
    example: many of these types are insensitive to the timezone. You should feel
    reassured, however, knowing that to get started, familiarity with a small subset
    of these libraries and data types is enough.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用它们时，关键在于细节。举个例子：许多这些类型对时区不敏感。然而，你可以放心，入门时，熟悉这些库和数据类型的一个小子集就足够了。
- en: Requirements
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 要求
- en: 'In this chapter, we''ll use several libraries, which we can quickly install
    from the terminal (or similarly from Anaconda Navigator):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用几个库，可以通过终端（或类似的 Anaconda Navigator）快速安装：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll execute the commands from the Python (or IPython) terminal, but equally
    we could execute them from a Jupyter notebook (or a different environment).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Python（或 IPython）终端执行命令，但同样也可以从 Jupyter notebook（或其他环境）中执行它们。
- en: It's a good start if we at least know datetime and pandas, two very prominent
    libraries, which we'll cover in the following two sections. We'll create basic
    objects and do simple manipulations on them.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们至少了解 `datetime` 和 `pandas` 这两个非常重要的库，那是一个不错的开始，接下来我们将在后续两节中介绍它们。我们将创建基本对象并对其进行简单操作。
- en: Datetime
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Datetime
- en: The `date` and `datetime` data types are not primitive types in Python the way
    that numbers (`float` and `int`), `string`, `list`, `dictionary`, `tuple`, or
    `file` are. To work with `date` and `datetime` objects, we have to import datetime,
    a library that is part of the Python Standard Library, and the libraries that
    come by default with CPython and other main Python distributions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`date` 和 `datetime` 数据类型在 Python 中不是原始类型，像数字（`float` 和 `int`）、`string`、`list`、`dictionary`、`tuple`
    或 `file` 那样。要使用 `date` 和 `datetime` 对象，我们必须导入 `datetime`，这是 Python 标准库的一部分，它是
    CPython 和其他主要 Python 发行版默认带有的库。'
- en: datetime comes with objects such as `date`, `datetime`, `time`, and `timedelta`,
    among others. The difference between `datetime` and `date` objects is that the
    `datetime` object includes time information in addition to a date.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` 提供了如 `date`、`datetime`、`time` 和 `timedelta` 等对象。`datetime` 和 `date`
    对象的区别在于，`datetime` 对象除了日期外，还包含了时间信息。'
- en: 'To get a date, we can do this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取一个日期，我们可以这样做：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To get today''s date:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取今天的日期：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To get some other date:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取其他日期：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we want a `datetime` object (a timestamp) instead, we can do this as well:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要一个`datetime`对象（时间戳），我们也可以这样做：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will get the current timestamp. We can create a `datetime` for a specific
    date and time as well:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将获取当前的时间戳。我们也可以为特定的日期和时间创建一个`datetime`：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can get a string output in isoformat:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以得到一个isoformat的字符串输出：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: isoformat, short for the ISO 8601 format, is an international standard for representing
    dates and times.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: isoformat是ISO 8601格式的缩写，是表示日期和时间的国际标准。
- en: 'We can also work with time differences using `timedelta`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`timedelta`处理时间差：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These `timedelta` objects can be added to other objects for calculations. We
    can do calculations with a `timedelta` object, for example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`timedelta`对象可以添加到其他对象进行计算。例如，我们可以使用`timedelta`对象进行计算：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should give us the following output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们以下输出：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The datetime library can parse string inputs to `date` and `datetime` types
    and output these objects as `string`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: datetime库可以将字符串输入解析为`date`或`datetime`类型，并将这些对象输出为`string`：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Or:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can format the output with string format options, for example like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用字符串格式选项格式化输出，例如像这样：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This would give us:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Similarly, we can read in a `date` or `datetime` object from a string, and
    we can use the same format options:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们可以从字符串中读取`date`或`datetime`对象，并且可以使用相同的格式选项：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can find a complete list of formatting options that you can use both for
    parsing strings and printing `datetime` objects here: [https://strftime.org/](https://strftime.org/).'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到完整的格式选项列表，既可以用于解析字符串，也可以用于打印`datetime`对象：[https://strftime.org/](https://strftime.org/)。
- en: 'A few important ones are listed in this table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表中列出了一些重要的内容：
- en: '| Format string | Meaning |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 格式字符串 | 含义 |'
- en: '| %Y | Year as 4 digits |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| %Y | 四位数表示的年份 |'
- en: '| %y | Year as 2 digits |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| %y | 两位数表示的年份 |'
- en: '| %m | Month as a number |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| %m | 月份的数字表示 |'
- en: '| %d | Day |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| %d | 天 |'
- en: '| %H | Hour as 2 digits |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| %H | 两位数表示的小时 |'
- en: '| %M | Minute as 2 digits |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| %M | 两位数表示的分钟 |'
- en: 'Figure 2.2: Format strings for dates'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：日期格式字符串
- en: 'It''s useful to remember these strings with formatting options. For example,
    the format string for a US date separated by slashes would look like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这些带有格式选项的字符串很有用。例如，用斜杠分隔的美国日期的格式字符串看起来像这样：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: pandas
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pandas
- en: We introduced the pandas library in the previous chapter. pandas is one of the
    most important libraries in the Python ecosystem for data science, used for data
    manipulation and analysis. Initially released in 2008, it has been a major driver
    of Python's success.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中我们介绍了pandas库。pandas是Python生态系统中数据科学中最重要的库之一，用于数据处理和分析。最初发布于2008年，它已成为Python成功的重要驱动因素之一。
- en: pandas comes with significant time-series functionality such as date range generation,
    frequency conversion, moving window statistics, date shifting, and lagging.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: pandas具有重要的时间序列功能，如日期范围生成、频率转换、移动窗口统计、日期偏移和滞后。
- en: 'Let''s go through some of these basics. We can create a time-series as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些基础知识来创建一个时间序列，如下所示：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This gives us a `DateTimeIndex` like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们一个像这样的`DateTimeIndex`：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can also create a time-series as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以按如下方式创建一个时间序列：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This would give us a time-series like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个类似这样的时间序列：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, this type is called a `DatetimeIndex`. This means we can use
    this data type for indexing a dataset.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这种类型称为`DatetimeIndex`。这意味着我们可以使用这种数据类型来索引数据集。
- en: 'One of the most important functionalities is parsing to `date` or `datetime`
    objects from either `string` or separate columns:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 其中最重要的功能之一是从`string`或单独的列解析到`date`或`datetime`对象：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We've created two time-series.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个时间序列。
- en: 'You can take a rolling window for calculations like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样进行滚动窗口计算：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Can you guess the result of this? If not, why don't you put this into your Python
    interpreter?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你能猜到这个的结果吗？如果不能，为什么不在你的Python解释器中试试？
- en: 'A time-series would usually be an index with a time object and one or more
    columns with numeric or other types, such as this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个时间序列通常会是一个带有时间对象的索引和一个或多个带有数字或其他类型的列，如下所示：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can have a look at our time-series:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看一下我们的时间序列：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can index these time-series datasets like any other pandas Series or DataFrame.
    `ts[:2].index` would give us:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像处理任何其他pandas Series或DataFrame一样索引这些时间序列数据集。`ts[:2].index`会给我们：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Interestingly, we can index directly with strings or datetime objects. For
    example, `ts[''2021-03-28'':''2021-03-30'']` gives us:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们可以直接使用字符串或datetime对象进行索引。例如，`ts['2021-03-28':'2021-03-30']`会给我们：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can shift or lag the values in a time-series back and forward in time using
    the `shift` method. This changes the alignment of the data:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`shift`方法将时间序列的值向前或向后移动。这会改变数据的对齐方式：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can also change the resolution of time-series objects, for example like
    this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以改变时间序列对象的分辨率，例如这样：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Please note the difference between `datetime` and `pd.DateTimeIndex`. Even though
    they encode the same kind of information, they are different types and they might
    not always play well with each other. Therefore, I'd recommend to always explicitly
    convert types when doing comparisons.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`datetime`与`pd.DateTimeIndex`之间的区别。尽管它们编码的是相同类型的信息，但它们是不同的数据类型，并且可能并不总是能很好地互相配合。因此，我建议在进行比较时总是显式地转换数据类型。
- en: In the next section, let's go through a basic example of importing a time-series
    dataset, getting summary statistics, and plotting some variables.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们通过一个基本的示例来演示如何导入时间序列数据集，获取汇总统计数据，并绘制一些变量。
- en: Understanding the variables
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解变量
- en: We're going to load up a time-series dataset of air pollution, then we are going
    to do some very basic inspection of variables.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载一个空气污染的时间序列数据集，然后对变量进行一些非常基础的检查。
- en: This step is performed on each variable on its own (univariate analysis) and
    can include summary statistics for each of the variables, histograms, finding
    missing values or outliers, and testing stationarity.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是对每个变量单独执行的（单变量分析），可以包括每个变量的汇总统计数据、直方图、查找缺失值或异常值，并检验平稳性。
- en: 'The most important descriptors of continuous variables are the mean and the
    standard deviation. As a reminder, here are the formulas for the mean and the
    standard deviation. We are going to build on these formulas later with more complex
    formulas. The **mean** usually refers to the arithmetic mean, which is the most commonly
    used average and is defined as:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 连续变量最重要的描述量是均值和标准差。提醒一下，均值和标准差的公式如下。我们稍后会基于这些公式构建更复杂的公式。**均值**通常指的是算术平均值，它是最常用的平均数，定义如下：
- en: '![](img/B17577_02_001.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_001.png)'
- en: 'The **standard deviation** is the square root of the average squared difference
    to this mean value:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**标准差**是该均值的平均平方差的平方根：'
- en: '![](img/B17577_02_002.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_002.png)'
- en: 'The **standard error** (**SE**) is an approximation of the standard deviation
    of sampled data. It measures the dispersion of sample means around the population
    mean, but normalized by the root of the sample size. The more data points involved
    in the calculation, the smaller the standard error tends to be. The SE is equal
    to the standard deviation divided by the square root of the sample size:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**标准误差**（**SE**）是样本数据标准差的近似值。它衡量的是样本均值围绕总体均值的离散程度，但通过样本量的平方根进行标准化。参与计算的数据点越多，标准误差通常越小。SE等于标准差除以样本量的平方根：'
- en: '![](img/B17577_02_003.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_003.png)'
- en: 'An important application of the SE is the estimation of confidence intervals
    of the mean. A **confidence interval** gives a range of values for a parameter.
    For example, the 95^(th) percentile upper confidence limit, ![](img/B17577_02_004.png),
    is defined as:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 标准误差（SE）的一个重要应用是估计均值的置信区间。**置信区间**为一个参数提供了一个值的范围。例如，95^(th) 百分位上置信限，![](img/B17577_02_004.png)，定义为：
- en: '![](img/B17577_02_005.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_005.png)'
- en: 'Similarly, replacing the plus with a minus, the lower confidence interval is
    defined as:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，替换加号为减号，下置信区间定义为：
- en: '![](img/B17577_02_006.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_006.png)'
- en: 'The **median** is another average, particularly useful when the data can''t
    be described accurately by the mean and standard deviations. This is the case
    when there''s a long tail, several peaks, or a skew in one or the other direction.
    The median is defined as:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**中位数**是另一种平均数，特别适用于数据不能被均值和标准差准确描述的情况。比如数据有长尾、多个峰值，或者向某一方向偏斜。中位数定义如下：'
- en: '![](img/B17577_02_007.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_007.png)'
- en: This assumes that *X* is ordered by value in ascending or descending direction.
    Then, the value that lies in the middle, just at ![](img/B17577_02_008.png), is
    the median. The median is the 50^(th) **percentile**, which means that it is higher
    than exactly half or 50% of the points in *X*. Other important percentiles are
    the 25^(th) and the 75^(th), which are also the first **quartile** and the third
    quartile. The difference between these two is called the **interquartile range**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设 *X* 按照升序或降序排列。然后，位于中间的值，正好在 ![](img/B17577_02_008.png) 处，是中位数。中位数是第50^(th)
    **百分位数**，意味着它高于 *X* 中恰好一半或 50% 的数据点。其他重要的百分位数是第25^(th) 和第75^(th)，它们也分别是第一个 **四分位数**
    和第三个四分位数。它们之间的差值被称为 **四分位差**。
- en: These are the most common descriptors, but not the only ones even by a long
    stretch. We won't go into much more detail here, but we'll see a few more descriptors
    later.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是最常见的描述符，但即使如此，它们也不是唯一的。我们在这里不会深入讨论，但稍后会看到更多的描述符。
- en: Let's get our hands dirty with some code!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一些代码来动手实践吧！
- en: 'We''ll import datetime, pandas, matplotlib, and seaborn to use them later.
    Matplotlib and seaborn are libraries for plotting. Here it goes:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入 datetime、pandas、matplotlib 和 seaborn 以便稍后使用。Matplotlib 和 seaborn 是绘图的库。代码如下：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Then we'll read in a CSV file. The data is from the **Our World in Data** (**OWID**)
    website, a collection of statistics and articles about the state of the world,
    maintained by Max Roser, research director in economics at the University of Oxford.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将读取一个 CSV 文件。数据来自 **Our World in Data** (**OWID**) 网站，这是一个关于世界状况的统计和文章集合，由牛津大学经济学研究主任
    Max Roser 维护。
- en: 'We can load local files or files on the internet. In this case, we''ll load
    a dataset from GitHub. This is a dataset of air pollutants over time. In pandas
    you can pass the URL directly into the `read_csv()` method:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以加载本地文件或互联网上的文件。在这种情况下，我们将从 GitHub 加载一个数据集。这是一个关于空气污染物随时间变化的数据集。在 pandas
    中，你可以直接将 URL 传递给 `read_csv()` 方法：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If you have problems downloading the file, you can download it manually from
    the book's GitHub repository from the `chapter2` folder.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在下载文件时遇到问题，可以通过手动从书籍的 GitHub 仓库 `chapter2` 文件夹下载。
- en: 'Now we know the size of the dataset (331 rows) and the column names. The column
    names are a bit long, let''s simplify it by renaming them and then carry on:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道数据集的大小（331 行）和列名。列名有点长，让我们通过重命名来简化它们，然后继续：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Here''s the output:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The minimum and the maximum year are these:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最小年份和最大年份如下：
- en: '[PRE38]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: pandas brings lots of methods to explore and discover your dataset – `min()`,
    `max()`, `mean()`, `count()`, and `describe()` can all come in very handy.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 提供了很多方法来探索和发现数据集——`min()`、`max()`、`mean()`、`count()` 和 `describe()` 都非常实用。
- en: City, Smoke, and SPM are much clearer names for the variables. We've learned
    that our dataset covers two cities, London and Delhi, and over a time period between
    1700 and 2016\.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: City、Smoke 和 SPM 是更清晰的变量名称。我们已经知道数据集涵盖了伦敦和德里两座城市，以及1700年至2016年之间的时间段\。
- en: 'We''ll convert our Year column from `int64` to `datetime`. This will help with
    plotting:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把 Year 列从 `int64` 转换为 `datetime`。这将有助于绘图：
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Year is now a `datetime64[ns]` type. It's a `datetime` of 64 bits. Each value
    describes a nanosecond, the default unit.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Year 现在是 `datetime64[ns]` 类型。它是 64 位的 `datetime` 类型。每个值描述一个纳秒，默认单位。
- en: 'Let''s check for missing values and get descriptive summary statistics of columns:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查是否有缺失值，并获取列的描述性统计信息：
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The Smoke variable has 9% missing values. For now, we can just focus on the
    SPM variable, which doesn't have any missing values.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Smoke 变量有 9% 的缺失值。目前，我们可以专注于没有缺失值的 SPM 变量。
- en: The pandas `describe()` method gives us counts of non-null values, mean and
    standard deviation, 25th, 50th, and 75th percentiles, and the range as the minimum
    and maximum.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 的 `describe()` 方法为我们提供了非空值的计数、均值和标准差、第25、第50和第75百分位数，以及范围（最小值和最大值）。
- en: A **histogram**, first introduced by Karl Pearson, is a count of values within
    a series of ranges called bins (or buckets). The variable is first divided into
    a series of intervals, and then all points that fall into each interval are counted
    (bin counts). We can present these counts visually as a barplot.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**直方图**，最早由卡尔·皮尔逊提出，是在一系列范围（称为区间或桶）内的值的计数。变量首先被分为一系列区间，然后统计每个区间内的所有点数（区间计数）。我们可以通过条形图来直观地呈现这些计数。'
- en: 'Let''s plot a histogram of the SPM variable:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制 SPM 变量的直方图：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This is the plot we get:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们得到的图表：
- en: '![pollution_hist.png](img/B17577_02_02.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![pollution_hist.png](img/B17577_02_02.png)'
- en: 'Figure 2.3: Histogram of the SPM variable'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：SPM 变量的直方图
- en: A histogram can help if you have continuous measurements and want to understand
    the distribution of values. Further, a histogram can indicate if there are outliers.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有连续的测量数据并且想要了解数值的分布，直方图可以提供帮助。此外，直方图还可以指示是否存在异常值。
- en: This closes the first part of our TSA. We'll come back to our air pollution
    dataset later.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了我们TSA的第一部分。稍后我们会回到我们的空气污染数据集。
- en: Uncovering relationships between variables
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭示变量之间的关系
- en: If we are not dealing with a univariate time-series where there's only a single
    variable, the relationship between the variables needs to be investigated. This
    includes the direction and rough size of any correlations. This is important to
    avoid feature leakage and collinearity.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不是在处理单变量时间序列（只有一个变量），那么变量之间的关系需要进行调查。这包括任何相关性的方向和大致大小。这一点非常重要，以避免特征泄漏和共线性。
- en: '**Feature leakage** is when a variable unintentionally gives away the target.
    For example, the variable named `amount_paid` would give away the label `has_paid.`
    A more complex example would be if we were analyzing data for an online supermarket,
    and our dataset consisted of customer variables such as age, number of purchases
    in the past, length of visit, and finally the contents of their cart. What we
    want to predict, our target, is the result of their buying decision as either
    abandoned (when they canceled their purchase) or paid. We could find that a purchase
    is highly correlated with bags in their cart due to just the simple fact that
    bags are added at the last step. However, concluding we should offer bags to customers
    when they land on our site would probably miss the point, when it''s the length
    of their stay that could be, in fact, the determining variable, and an intervention
    through a widget or customer service agent might be much more effective.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**特征泄漏**是指一个变量无意中泄露了目标。例如，名为`amount_paid`的变量会泄露标签`has_paid`。一个更复杂的例子是，如果我们正在分析一个在线超市的数据，我们的数据集包括了诸如年龄、过去购买次数、访问时长以及他们购物车中的商品内容等客户变量。我们想要预测的目标是他们的购买决策结果，可能是放弃（取消购买）或已支付。我们可能会发现购买与购物车中的袋子有很高的相关性，仅仅是因为袋子是在最后一步添加的。然而，得出结论认为我们应该向客户提供袋子，当他们进入我们的网站时，可能就会错失重点，实际上决定变量可能是他们的停留时间，而通过小工具或客服干预可能更有效。'
- en: '**Collinearity** means that independent variables (features) are correlated.
    The latter case can be problematic in linear models. Therefore, if we carry out
    linear regression and find two variables that are highly correlated between themselves,
    we should remove one of them or use dimensionality reduction techniques such as
    Principal Component Analysis (PCA).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**共线性**指的是自变量（特征）之间存在相关性。在线性模型中，后一种情况可能会带来问题。因此，如果我们进行线性回归并发现两个变量之间高度相关，我们应该去除其中一个，或使用降维技术，如主成分分析（PCA）。'
- en: 'The **Pearson correlation** coefficient was developed by Karl Pearson, whom
    we''ve discussed in the previous chapter, and named in his honor to distinguish
    it from other correlation coefficients. The Pearson correlation coefficient between
    two variables *X* and *Y* is defined as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**皮尔逊相关系数**由卡尔·皮尔逊（Karl Pearson）开发，我们在前一章中已经讨论过他，并以他命名，以便将其与其他相关系数区分开来。两个变量*X*和*Y*之间的皮尔逊相关系数定义如下：'
- en: '![](img/B17577_02_009.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_009.png)'
- en: '![](img/B17577_02_010.png) is the covariance between the two variables defined
    as the expected value (the mean) between the differences of each point to the
    variable mean:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/B17577_02_010.png) 是两个变量之间的协方差，它定义为每个点与变量均值的差异的期望值（均值）：'
- en: '![](img/B17577_02_011.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_011.png)'
- en: '![](img/B17577_02_012.png) is the standard deviation of the variable *X*.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/B17577_02_012.png) 是变量*X*的标准差。'
- en: 'Expanded, the formula looks like this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 展开后，公式看起来是这样的：
- en: '![](img/B17577_02_013.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_013.png)'
- en: 'There are three types of correlation: positive, negative, and no correlation.
    Positive correlation means that as one variable increases the other does as well.
    In the case of the Pearson correlation coefficient, the increase of one variable
    to the other should be linear.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 相关性有三种类型：正相关、负相关和无相关性。正相关意味着当一个变量增加时，另一个也会增加。在皮尔逊相关系数的情况下，一个变量对另一个变量的增加应该是线性的。
- en: 'If we looked at a plot of global life expectancy from 1800 onward, we''d see
    an increase of years lived with the time axis. You can see the plot of global
    life expectancy based on data on OWID:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看从1800年开始的全球预期寿命图表，我们会看到随着时间轴的推移，预期寿命逐年增加。您可以看到基于OWID数据的全球预期寿命图：
- en: '![life_expectancy.png](img/B17577_02_03.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![life_expectancy.png](img/B17577_02_03.png)'
- en: 'Figure 2.4: Life expectancy from 1800 to today'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：1800年至今的预期寿命
- en: We can see how life expectancy has been increasing steadily since the end of
    the 19^(th) century until today.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，自19世纪末以来，预期寿命一直在稳步上升，直到今天。
- en: This plot is called a **run chart** or temporal **line chart**.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表被称为**运行图**或时间**折线图**。
- en: 'In order to calculate the Pearson correlation, we can use a function from SciPy:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算皮尔逊相关系数，我们可以使用SciPy中的一个函数：
- en: '[PRE46]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Here's the Pearson correlation and the p-value that indicates significance (the
    lower, the more significant)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这是皮尔逊相关系数和表示显著性的p值（越低越显著）
- en: '[PRE47]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We see a very strong positive correlation of time with life expectancy, 0.94,
    at very high significance (the second number in the return). You can find more
    details about the dataset on the OWID website.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到时间与预期寿命之间有一个非常强的正相关，相关系数为0.94，显著性非常高（返回值中的第二个数字）。您可以在OWID网站上找到有关数据集的更多细节。
- en: 'Conversely, we would see a negative correlation of time with child mortality
    – as the year increases, child mortality decreases. This plot shows the child
    mortality per 1,000 children on data taken from OWID:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们会看到时间与儿童死亡率之间的负相关关系——年份增加时，儿童死亡率降低。这个图表显示了每千名儿童的儿童死亡率，数据来自OWID：
- en: '![child_mortality.png](img/B17577_02_04.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![child_mortality.png](img/B17577_02_04.png)'
- en: 'Figure 2.5: Child mortality from 1800 to today in the UK, France, and the USA'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：英国、法国和美国从1800年至今的儿童死亡率
- en: In this plot, we can see that in all three countries child mortality has been
    decreasing since the start of the 19^(th) century until today.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，我们可以看到，自19世纪开始到今天，所有三个国家的儿童死亡率都在不断下降。
- en: In the case of the United States, we'll find a negative correlation of -0.95
    between child mortality and time.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对于美国，我们将发现儿童死亡率与时间之间存在-0.95的负相关。
- en: We can also compare the countries to each other. We can calculate correlations
    between each feature. In this case, each feature contains the values for the three
    countries.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将这些国家相互比较。我们可以计算每个特征之间的相关性。在这种情况下，每个特征包含了三个国家的数值。
- en: 'This gives a **correlation matrix** of 3x3, which we can visualize as a heatmap:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了一个**相关矩阵**，是3x3的，我们可以将其可视化为热图：
- en: '![correlation_heatmap.png](img/B17577_02_05.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![correlation_heatmap.png](img/B17577_02_05.png)'
- en: 'Figure 2.6: Correlation heatmap of child mortality between the UK, France,
    and the USA'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：英国、法国和美国之间儿童死亡率的相关热图
- en: In this correlation heatmap, we can see that countries are highly correlated
    (for example, a correlation of 0.78 between France and the United Kingdom).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张相关热图中，我们可以看到各国之间的高度相关性（例如，法国和英国之间的相关性为0.78）。
- en: The diagonal of the correlation matrix is always 1.0, and the matrix is symmetrical
    across the diagonal. Therefore, sometimes we only show the lower triangle below
    the diagonal (or sometimes the upper triangle). We can see that child mortality
    in the United Kingdom is more similar to that of the United States than that of
    France.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 相关矩阵的对角线总是1.0，并且矩阵沿对角线是对称的。因此，有时我们只显示对角线下方的下三角（或者有时显示上三角）。我们可以看到，英国的儿童死亡率与美国更为相似，而不是与法国。
- en: Does this mean that the UK went through a similar development as the United
    States? These statistics and visualizations can often generate questions to answer,
    or hypotheses that we can test.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否意味着英国经历了与美国相似的发展？这些统计数据和可视化常常会引发问题，或者提出我们可以检验的假设。
- en: 'As mentioned before, the full notebooks for the different datasets are available
    on GitHub, however, here''s the snippet for the heatmap:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，不同数据集的完整笔记本已在GitHub上提供，但这里是热图的代码片段：
- en: '[PRE48]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The correlation coefficient struggles with cases where the increases are non-linear
    or non-continuous, or (because of the squared term) when there are outliers. For
    example, if we looked at air pollution from the 1700s onward, we'd see a steep
    increase in air pollutants from coal and – with the introduction of the steam
    engine – a decrease in pollutants.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 相关系数在增加非线性或不连续，或（由于平方项）出现异常值的情况下难以发挥作用。例如，如果我们从18世纪开始观察空气污染，我们会看到煤炭带来的空气污染急剧增加，而随着蒸汽机的引入，污染物反而有所减少。
- en: A **scatter plot** can be used for showing and comparing numeric values. It
    plots values of two variables against each other. Usually, the variables are numerical
    – otherwise, we'd call this a table. Scatter plots can be crowded in certain areas,
    and therefore are deceptive if this can't be appreciated visually. Adding jitter
    and transparency can help to some degree, however, we can combine a scatter plot
    with the histograms of the variables we are plotting against each other, so we
    can see how many points on one or the other variable are being displayed. Scatter
    plots often have a best-fit line superimposed in order to visualize how one variable
    is the function of another variable.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**散点图**可以用来显示和比较数值。它将两个变量的值相互对比。通常，变量是数值型的——否则我们称之为表格。如果散点图在某些区域过于拥挤，可能会产生误导，因此如果不能在视觉上识别这一点，图表就会具有误导性。通过添加抖动和透明度可以在一定程度上改善这种情况，然而，我们还可以将散点图与我们正在对比的变量的直方图结合，这样我们就可以看到在每个变量上有多少点被显示出来。散点图通常会有一条最佳拟合线，以便可视化一个变量是如何依赖于另一个变量的。'
- en: 'Here''s an example of how to plot a scatter plot with marginal histograms of
    the two variables in the pollution dataset:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何绘制带有边际直方图的散点图的一个示例，数据来自污染数据集：
- en: '[PRE49]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here''s the resulting plot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的图表：
- en: '![Machine-Learning%20for%20Time-Series%20with%20Python/spm_scatter.png](img/B17577_02_06.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![Machine-Learning%20for%20Time-Series%20with%20Python/spm_scatter.png](img/B17577_02_06.png)'
- en: 'Figure 2.7: Scatter plot with marginal histograms of Smoke against SPM'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：带有边际直方图的散点图，显示烟雾与SPM的关系
- en: In the scatter plot, we can see that the two variables are extremely similar
    – the values are all on the diagonal. The correlation between these two variables
    is perfect, 1.0, which means that they are in fact identical.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在散点图中，我们可以看到这两个变量非常相似——所有的数值都位于对角线上。这两个变量之间的相关性完美无缺，达到1.0，这意味着它们实际上是相同的。
- en: 'We''ve seen the dataset of **Suspended Particulate Matter** (**SPM**) before.
    Let''s plot SPM over time:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看过**悬浮颗粒物**（**SPM**）的数据集。现在让我们将SPM随时间变化的情况绘制出来：
- en: '[PRE50]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here''s the plot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该图表：
- en: '![Machine-Learning%20for%20Time-Series%20with%20Python/spm_1700_to_today.png](img/B17577_02_07.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![Machine-Learning%20for%20Time-Series%20with%20Python/spm_1700_to_today.png](img/B17577_02_07.png)'
- en: 'Figure 2.8: Suspended particle matter from the 1700s to today'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：从1700年代到今天的悬浮颗粒物
- en: We can see in the plot that the air quality (measured as suspended particle
    matter) in London was getting worse until around 1880 (presumably because of heating
    materials such as wood and coal), however, has since been improving.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在图中看到，伦敦的空气质量（以悬浮颗粒物为标准）在1880年之前变得越来越差（可能是因为使用了木材和煤等取暖材料），然而，之后开始逐渐改善。
- en: We find a correlation coefficient of -0.36 with high significance. The steep
    decline of pollutants from 1880 onward dominates over the 180 years of slow growth.
    If we looked separately at the time from 1700 to 1880 and from 1880 to the present,
    we'd find 0.97 and -0.97 respectively, examples of very strong correlation and
    very strong anti-correlation.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现相关系数为-0.36，并且具有很高的显著性。从1880年开始，污染物的急剧下降压倒了之前180年缓慢增长的趋势。如果我们分别观察1700年至1880年和1880年至今的时间段，我们会发现相关系数分别为0.97和-0.97，这分别是非常强的正相关和非常强的负相关。
- en: The **Spearman rank correlation** can handle outliers and non-linear relationships
    much better than the Pearson correlation coefficient – although it can't handle
    non-continuous cases like the one above. The Spearman correlation is the Pearson
    correlation, only applied on ranks of variables' values instead of the variables'
    values directly. The Spearman correlation of the time-series for air pollution
    is -0.19, and for the two time periods before and after 1880 we get 0.99 and -0.99,
    respectively.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**斯皮尔曼等级相关**比皮尔逊相关系数更好地处理离群值和非线性关系——尽管它无法处理像上面那种非连续的情况。斯皮尔曼相关系数就是皮尔逊相关系数，只不过它是应用于变量值的等级顺序，而不是变量值本身。对于空气污染的时间序列，斯皮尔曼相关系数为-0.19，而对于1880年之前和之后的两个时间段，我们分别得到0.99和-0.99。'
- en: In the case of the Spearman correlation coefficient, the numerical differences
    are ignored – what counts is the order of the points. In this case, the order
    of the points within the two time periods aligns nearly perfectly.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在斯皮尔曼相关系数的情况下，数值差异被忽略——关键是点的顺序。在这种情况下，两个时间段内的点的顺序几乎完美地对齐。
- en: In the next section, we'll talk about trend and seasonality.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将讨论趋势和季节性。
- en: Identifying trend and seasonality
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别趋势和季节性
- en: Trend, seasonality, and cyclic variations are the most important characteristics
    of time-series. A **trend** is the presence of a long-term increase or decrease
    in the sequence. **Seasonality** is a variation that occurs at specific regular
    intervals of less than a year. Seasonality can occur on different time spans such
    as daily, weekly, monthly, or yearly. Finally, **cyclic variations** are rises
    and falls that are not of a fixed frequency.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 趋势、季节性和周期性变化是时间序列中最重要的特征。**趋势**是指序列中长期的增加或减少。**季节性**是指在特定的规律间隔内发生的变化，通常间隔小于一年。季节性变化可以在不同的时间跨度上发生，比如每天、每周、每月或每年。最后，**周期性变化**是指频率不固定的上升和下降。
- en: An important characteristic of time-series is **stationarity**. This refers
    to a property of time-series not to change distribution over time, or in other
    words, that the process that produces the time-series doesn't change with time.
    Time-Series that don't change over time are called **stationary** (or **stationary
    processes**). Many models or measures assume stationarity and might not work properly
    if the data is not stationary. Therefore, with these algorithms, the time-series
    should be decomposed first into the main signal, and then the seasonal and trend
    components. In this decomposition, we would subtract the trend and seasonal components
    from the original time-series.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列的一个重要特征是**平稳性**。这指的是时间序列在时间推移中分布不变的性质，换句话说，产生该时间序列的过程随着时间的推移并不发生变化。不随时间变化的时间序列被称为**平稳序列**（或**平稳过程**）。许多模型或度量假设时间序列是平稳的，如果数据不是平稳的，这些模型可能无法正常工作。因此，对于这些算法，时间序列应该首先分解成主要信号，然后再分解出季节性和趋势成分。在这个分解过程中，我们会从原始时间序列中减去趋势和季节性成分。
- en: 'In this section, we''ll first go through an example of how to estimate trend
    and seasonality using curve fitting. Then, we''ll look at other tools that can
    help discover trends, seasonality, and cyclic variations. These include statistics
    such as autocorrelation and the augmented Dickey–Fuller test, and visualizations
    such as the autocorrelation plot (also: lag plot) and the periodogram.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将首先通过一个示例来展示如何使用曲线拟合估算趋势和季节性。然后，我们将介绍其他有助于发现趋势、季节性和周期性变化的工具。这些工具包括统计方法，如自相关性和扩展的Dickey–Fuller检验，以及可视化工具，如自相关图（也叫滞后图）和周期图。
- en: Let's start with a hopefully clear example of how seasonality and trend can
    be estimated in just a few lines of Python. For this, we'll come back to the GISS
    Surface Temperature Analysis dataset released by NASA. We'll load the dataset,
    and we'll do curve fitting, which comes straight out of the box in NumPy.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个清晰的例子开始，展示如何在仅仅几行Python代码中估算季节性和趋势。为此，我们将回到NASA发布的GISS地表温度分析数据集。我们将加载该数据集，并进行曲线拟合，NumPy中自带有此功能。
- en: We'll download the dataset from Datahub ([https://datahub.io/core/global-temp](https://datahub.io/core/global-temp))
    or you can find it from the book's GitHub repository (in the `chapter2` folder).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Datahub下载数据集（[https://datahub.io/core/global-temp](https://datahub.io/core/global-temp)），或者你也可以在书本的GitHub仓库中找到它（在`chapter2`文件夹中）。
- en: 'Then, we can load it up and pivot it:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以加载并对其进行透视处理：
- en: '[PRE51]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now we can use NumPy''s polyfit functionality. It fits a polynomial of the
    form:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用NumPy的polyfit功能。它拟合的是如下形式的多项式：
- en: '![](img/B17577_02_014.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_02_014.png)'
- en: In this formula, *k* is the degree of the polynomial and *b* is the coefficients
    we are trying to find.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个公式中，*k*是多项式的次数，*b*是我们要找的系数。
- en: 'It is just a function in NumPy to fit the coefficients. We can use the same
    function to fit seasonal variation and trend. Since trend can dominate over seasonality,
    before estimating seasonality, we remove the trend:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是NumPy中的一个函数，用于拟合系数。我们可以使用相同的函数来拟合季节性变化和趋势。由于趋势可能主导季节性变化，因此在估算季节性之前，我们需要去除趋势：
- en: '[PRE52]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Let's plot seasonality and trend on top of our global temperature increases!
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在全球气温上升的基础上绘制季节性和趋势图！
- en: '[PRE53]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This is the graph that we get:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们得到的图表：
- en: '![temperatures_trend_seasonality.png](img/B17577_02_08.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![temperatures_trend_seasonality.png](img/B17577_02_08.png)'
- en: 'Figure 2.9: Temperature change from the late 19^(th) century to today'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9：从19世纪末到今天的温度变化
- en: This was to show that you can use plug-in functionality in NumPy for curve fitting
    in order to find both trend and seasonality. If you want to experiment further,
    you can play with the degree of the polynomial or with the seasonality component
    to see if you can get a better fit, or find another seasonality component. We
    could have used functionality from other libraries such as `seasonal.seasonal_decompose()`
    in `statsmodels`, or Facebook's Prophet, which decomposes using Fourier coefficients
    for the seasonal components.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了你可以使用NumPy中的插件功能进行曲线拟合，以便找到趋势和季节性。如果你想进一步实验，可以调整多项式的阶数或季节性分量，看看能否得到更好的拟合，或者找到另一个季节性成分。我们本来也可以使用其他库的功能，比如`statsmodels`中的`seasonal.seasonal_decompose()`，或者Facebook的Prophet，它通过傅里叶系数来分解季节性成分。
- en: Now that we've seen how to estimate seasonality and trend, let's move on to
    other statistics and visualizations. Continuing with the pollution dataset, and
    picking up the EEG dataset we saw in *Chapter 1*, we'll show practically in Python
    how to get these statistics and plots, and how to identify trend and seasonality.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何估计季节性和趋势，接下来我们将讨论其他统计量和可视化。继续使用污染数据集，并且拿起我们在*第1章*中看到的EEG数据集，我们将在Python中实际展示如何获取这些统计量和图表，并如何识别趋势和季节性。
- en: '**Autocorrelation** is the correlation of a signal with a lagged version of
    itself. The autocorrelation plot draws the autocorrelation as a function of lag.
    The autocorrelation plot can help find repeating patterns, and is often used in
    signal processing. The autocorrelation can help spot a periodic signal. Let''s
    plot the autocorrelation of the pollution data:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**自相关**是信号与其滞后版本之间的相关性。自相关图绘制了自相关与滞后之间的函数关系。自相关图有助于发现重复的模式，通常用于信号处理。自相关有助于识别周期性信号。让我们绘制污染数据的自相关：'
- en: '[PRE54]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Here''s the plot that we get:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们得到的图：
- en: '![autocorrelation.png](img/B17577_02_09.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![autocorrelation.png](img/B17577_02_09.png)'
- en: 'Figure 2.10: Autocorrelaton plot of pollution in London'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10：伦敦污染的自相关图
- en: We can see high autocorrelations with a lag of only a few years. There is a
    negative autocorrelation at around 100 years, after which point the autocorrelation
    stays around 0.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到高自相关仅在几年的滞后下出现。在大约100年时，有一个负自相关点，之后自相关保持在0附近。
- en: The plot of SPM clearly shows that air pollution is not a stationary process,
    since the autocorrelation is not flat. You can also compare the run of pollution
    that shows there's a **trend**, and therefore the mean also changes – another
    indication that the series is not stationary.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: SPM图清楚地表明，空气污染不是一个平稳过程，因为自相关并没有平坦。你还可以比较污染的走势，显示出有**趋势**，因此均值也发生变化——这是序列非平稳的另一个指示。
- en: 'We can also test this statistically. A test for stationarity is the augmented
    Dickey–Fuller test:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以进行统计检验。检验平稳性的方法是扩展的迪基–富勒检验：
- en: '[PRE55]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The second return value is the p-value that gives the significance or the probability
    of obtaining test results at least as extreme as the observation given the null
    hypothesis. With p-values below 5% or 0.05 we would typically reject the null
    hypothesis, and we could assume that our time-series is stationary. In our case,
    we can't assume that the series is stationary.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个返回值是p值，它表示在给定零假设的情况下，得到至少与观察结果一样极端的测试结果的显著性或概率。当p值小于5%或0.05时，我们通常会拒绝零假设，并且可以假设我们的时间序列是平稳的。在我们的案例中，我们不能假设该序列是平稳的。
- en: We saw the graph of **electroencephalography** (**EEG**) signals in *Chapter
    1*, *Introduction to Time-Series with Python*, and we mentioned that EEG signals
    show brain waves at several frequency ranges.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第1章*《使用Python进行时间序列分析简介》中看到了**脑电图**（**EEG**）信号的图，并提到EEG信号显示了多个频率范围的脑电波。
- en: 'We can visualize this nicely. Let''s go through it step by step in Python.
    We first need to do a few imports:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很漂亮地可视化这个。让我们一步步在Python中实现。首先我们需要进行一些导入：
- en: '[PRE57]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'OpenML is a project that provides benchmark datasets and a website for comparison
    of machine learning algorithms. The scikit-learn library provides an interface
    to OpenML that allows us to fetch data from OpenML. The whole measurement spans
    117 seconds. So we need to set this up correctly as an index in pandas:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: OpenML是一个提供基准数据集并有一个用于比较机器学习算法的网站的项目。scikit-learn库提供了一个与OpenML的接口，允许我们从OpenML中获取数据。整个测量过程持续了117秒。所以我们需要在pandas中正确设置它作为索引：
- en: '[PRE58]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We can slice our dataset directly. Please note that the `DatetimeIndex` is
    anchored in 1970, but we can ignore this safely here:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接切片我们的数据集。请注意，`DatetimeIndex`的基准时间是1970年，但在这里我们可以安全地忽略这一点：
- en: '[PRE59]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Here''s the slice:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这是切片：
- en: '[PRE60]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This slicing avoids an artifact, a strong spike, occurring at around 1:20.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这种切片避免了在大约1:20时发生的伪影，即强烈的峰值。
- en: 'The graph we saw in *Chapter 1*, we can plot as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第一章*中看到的图，可以如下绘制：
- en: '[PRE61]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Here''s the graph again:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这是再次展示的图：
- en: '![Machine-Learning%20for%20Time-Series%20with%20Python/voltage_over_time.png](img/B17577_02_10.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![Machine-Learning%20for%20Time-Series%20with%20Python/voltage_over_time.png](img/B17577_02_10.png)'
- en: 'Figure 2.11: Voltage over time in an EEG signal'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11：EEG信号随时间变化的电压
- en: This is the plot of the EEG signal over time.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 这是EEG信号随时间变化的图。
- en: 'We can also resample the data to look at the series more coarsely, with less
    resolution, for example like this:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以重新采样数据，以更粗略的方式查看该系列，分辨率较低，例如如下所示：
- en: '[PRE62]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This is the graph with three subplots we get from resampling to frequencies
    of 1 second, 2 seconds, and 5 seconds, respectively:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从重新采样得到的三幅子图，分别对应1秒、2秒和5秒的频率：
- en: '![eeg_resampled.png](img/B17577_02_11.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![eeg_resampled.png](img/B17577_02_11.png)'
- en: 'Figure 2.12: Resampled EEG signals'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12：重新采样的EEG信号
- en: Each of the resampled signals in the plot could be more or less useful for analysis
    depending on the application. For high-frequency analysis, we shouldn't resample
    at all, while if we are trying to remove as much noise as possible, we should
    resample to a more coarse time resolution.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图中每个重新采样的信号可能根据应用的不同，分析的效果有所不同。对于高频分析，我们不应该进行重新采样，而如果我们试图去除尽可能多的噪声，则应将时间分辨率采样得更粗一些。
- en: 'We can look at cyclic activity on a plot of spectral density. We can do this
    by applying a Fourier transform. Here, we go with the Welch method, which averages
    over time before applying the discrete Fourier transform:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在谱密度图上查看周期性活动。我们可以通过应用傅里叶变换来实现。这里我们使用了Welch方法，它先对时间进行平均，然后再应用离散傅里叶变换：
- en: '[PRE63]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The spectral density plot, the **periodogram**, looks like this:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 谱密度图，即**周期图**，如下所示：
- en: '![spectral_eeg.png](img/B17577_02_12.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![spectral_eeg.png](img/B17577_02_12.png)'
- en: 'Figure 2.13: Periodogram of the EEG signals'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13：EEG信号的周期图
- en: The information in this plot is like the autocorrelation plot that we drew for
    pollution, however, it gives us information about how prominent certain frequencies
    are. In this case we see that low frequencies are particularly powerful. In other
    words, the signal shows a slow oscillation.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图的信息类似于我们为污染绘制的自相关图，然而，它给了我们关于某些频率的显著性的更多信息。在这种情况下，我们看到低频特别强劲。换句话说，信号显示出缓慢的振荡。
- en: This brings the chapter to an end. Let's summarize what we've covered.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这也标志着本章的结束。让我们总结一下我们所涵盖的内容。
- en: Summary
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced TSA as the process of extracting summary and
    other statistical information from time-series. We broke this process down into
    understanding the variables, uncovering relationships between variables, and identifying
    trend and seasonality.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了TSA（时间序列分析）作为从时间序列中提取摘要和其他统计信息的过程。我们将这一过程分解为理解变量、揭示变量之间的关系以及识别趋势和季节性。
- en: We introduced datetime and pandas, the libraries *sine qua non* in TSA, and
    their functionalities for time-series; for example, resampling. Throughout the
    chapter, we listed and defined many summary statistics including mean, standard
    deviation, median, SE, confidence interval, Pearson correlation, and covariance.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了datetime和pandas，这两个在TSA中*不可或缺*的库及其在时间序列中的功能；例如，重新采样。在本章中，我们列举并定义了许多摘要统计量，包括均值、标准差、中位数、标准误、置信区间、皮尔逊相关系数和协方差。
- en: We also talked about the concepts of seasonality, cyclic variation, and stationarity.
    We discussed why stationarity is important, and how to test for stationarity.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了季节性、周期性变化和平稳性等概念。我们讨论了为什么平稳性很重要，以及如何测试平稳性。
- en: We also showed plotting functionality with Matplotlib and Seaborn, and how to
    generate different plots such as run charts, temporal line charts, correlation
    heatmaps, histograms, scatter plots, autocorrelation plots, and periodograms.
    In the practical example, we used an autocorrelation plot, which shows the correlation
    between different time steps, and the periodogram, which visualizes the power
    spectral density.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还展示了使用 Matplotlib 和 Seaborn 绘图的功能，以及如何生成不同类型的图表，如运行图、时间序列图、相关性热图、直方图、散点图、自相关图和周期图。在实际示例中，我们使用了自相关图，它展示了不同时间步之间的相关性，以及周期图，它可视化了功率谱密度。
