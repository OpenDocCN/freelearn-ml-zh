- en: Chapter 8. Detecting Interest Points
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 检测兴趣点
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Detecting corners in an image
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像中检测角点
- en: Detecting features quickly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速检测特征
- en: Detecting scale-invariant features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测尺度不变特征
- en: Detecting FAST features at multiple scales
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个尺度上检测FAST特征
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In computer vision, the concept of **interest points** also called **keypoints**
    or **feature points** has been largely used to solve many problems in object recognition,
    image registration, visual tracking, 3D reconstruction, and more. This concept
    relies on the idea that instead of looking at the image as a whole (that is, extracting
    global features), it could be advantageous to select some special points in the
    image and perform a local analysis on them (that is, extracting local features).
    This approach works well as long as a sufficient number of such points are detected
    in the images of interest, and these points are distinguishing and stable features,
    that can be accurately localized.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机视觉中，**兴趣点**的概念，也称为**关键点**或**特征点**，已被广泛用于解决物体识别、图像配准、视觉跟踪、3D重建等问题。这个概念基于这样一个想法：与其将图像作为一个整体来观察（即提取全局特征），不如选择图像中的某些特殊点并对它们进行局部分析（即提取局部特征）。只要在感兴趣图像中检测到足够数量的此类点，并且这些点是区分性和稳定的特征，可以精确定位，这种方法就会很有效。这些特征可以准确定位。
- en: Because they are used for analyzing image content, feature points should ideally
    be detected at the same scene or object location, no matter from which viewpoint,
    scale, or orientation the image was taken. View invariance is a very desirable
    property in image analysis and has been the object of numerous studies. As we
    will see, different detectors have different invariance properties. This chapter
    focuses on the keypoint extraction process itself. The following chapters will
    then show you how interest points can be put to work in different contexts, such
    as image matching or image geometry estimation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它们用于分析图像内容，所以理想情况下应该在相同的场景或物体位置检测特征点，无论图像是从哪个视角、尺度或方向拍摄的。在图像分析中，视图不变性是一个非常理想化的特性，一直是众多研究的对象。正如我们将看到的，不同的检测器具有不同的不变性特性。本章主要关注关键点提取过程本身。接下来的章节将展示如何在不同的环境中使用兴趣点，例如图像匹配或图像几何估计。
- en: Detecting corners in an image
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图像中检测角点
- en: When searching for interesting feature points in images, corners come out as
    an interesting solution. They are indeed local features that can be easily localized
    in an image, and in addition, they should abound in scenes of man-made objects
    (where they are produced by walls, doors, windows, tables, and so on). Corners
    are also interesting because they are two-dimensional features that can be accurately
    detected (even at sub-pixel accuracy), as they are at the junction of two edges.
    This is in contrast to points located on a uniform area or on the contour of an
    object; these ones would be difficult to repeatedly localize precisely on other
    images of the same object. The Harris feature detector is a classical approach
    to detecting corners in an image. We will explore this operator in this recipe.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当在图像中搜索有趣的特征点时，角点是一个有趣的解决方案。它们确实是图像中的局部特征，可以轻松定位，而且它们在人造物体场景中应该很丰富（它们是由墙壁、门、窗户、桌子等产生的）。角点之所以有趣，还因为它们是二维特征，可以精确检测（甚至可以达到亚像素精度），因为它们位于两条边的交汇处。这与位于均匀区域或物体轮廓上的点形成对比；这些点在其他相同物体的图像上难以精确重复定位。Harris特征检测器是检测图像角点的经典方法。我们将在这个食谱中探讨这个算子。
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The basic OpenCV function that is used to detect Harris corners is called `cv::cornerHarris`
    and is straightforward to use. You call it on an input image, and the result is
    an image of floats that gives you the corner strength at each pixel location.
    A threshold is then applied on this output image in order to obtain a set of detected
    corners. This is accomplished with the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检测Harris角点的OpenCV基本函数称为`cv::cornerHarris`，使用起来非常简单。你可以在输入图像上调用它，结果是一个浮点图像，它给出了每个像素位置的角点强度。然后对这个输出图像应用一个阈值，以获得一组检测到的角点。这可以通过以下代码实现：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here is the original image:![How to do it...](img/B05388_08_01.jpg)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是原始图像：![如何操作...](img/B05388_08_01.jpg)
- en: 'The result is a binary map image, shown in the following screenshot, which
    is inverted for better viewing (that is, we used `cv::THRESH_BINARY_INV` instead
    of `cv::THRESH_BINARY` to get the detected corners in black):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个二进制映射图像，如下面的截图所示，为了更好的查看，它被反转了（即，我们使用了`cv::THRESH_BINARY_INV`而不是`cv::THRESH_BINARY`来获取检测到的角点为黑色）：
- en: '![How to do it...](img/B05388_08_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B05388_08_02.jpg)'
- en: From the preceding function call, we observe that this interest point detector
    requires several parameters (these will be explained in the next section) that
    might make it difficult to tune. In addition, the corner map that is obtained
    contains many clusters of corner pixels that contradict the fact that we would
    like to detect well-localized points. Therefore, we will try to improve the corner
    detection method by defining our own class to detect Harris corners.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的函数调用中，我们可以观察到这个兴趣点检测器需要几个参数（这些将在下一节中解释），这些参数可能会使其难以调整。此外，获得的角点图包含许多角像素簇，这与我们希望检测到良好定位的点的事实相矛盾。因此，我们将尝试通过定义我们自己的类来检测Harris角点来改进角点检测方法。
- en: 'The class encapsulates the Harris parameters with their default values and
    corresponding getter and setter methods (which are not shown here):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该类封装了Harris参数及其默认值以及相应的getter和setter方法（此处未显示）：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To detect the Harris corners on an image, we proceed in two steps. First, the
    Harris values at each pixel are computed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在图像上检测Harris角点，我们分两步进行。首先，计算每个像素的Harris值：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, the feature points are obtained, based on a specified threshold value.
    Since the range of possible values for Harris depends on the particular choices
    of its parameters, the threshold is specified as a quality level that is defined
    as a fraction of the maximal Harris value computed in the image:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，根据指定的阈值值获取特征点。由于Harris的可能值范围取决于其参数的特定选择，因此阈值被指定为质量级别，该级别定义为图像中计算的最大Harris值的分数：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This method returns a binary corner map of the detected features. The fact
    that the detection of the Harris features has been split into two methods, allows
    us to test the detection with a different threshold (until an appropriate number
    of feature points are obtained) without the need to repeat costly computations.
    It is also possible to obtain the Harris features in the form of a `std::vector`
    of `cv::Point` instances:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回检测到的特征的二进制角点图。由于Harris特征的检测被分为两种方法，这使得我们可以在不重复昂贵计算的情况下，通过不同的阈值（直到获得适当数量的特征点）来测试检测。此外，还可以将Harris特征以`std::vector`的`cv::Point`实例形式获得：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This class also improves the detection of the Harris corners by adding a non-maxima
    suppression step, which will be explained in the next section. The detected points
    can now be drawn on an image using the `cv::circle` function, as demonstrated
    by the following method:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此类还通过添加非极大值抑制步骤来改进Harris角点的检测，这将在下一节中解释。现在可以使用`cv::circle`函数在图像上绘制检测到的点，如下所示的方法：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using this class, the detection of the Harris points is accomplished as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此类，Harris点的检测如下完成：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This results in the following image:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了以下图像：
- en: '![How to do it...](img/B05388_08_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B05388_08_03.jpg)'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To define the notion of corners in images, the Harris feature detector looks
    at the average directional change in intensity in a small window around a putative
    interest point. If we consider a displacement vector, `(u,v)`, the intensity change
    can be measured by a sum of squared difference:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义图像中角点的概念，Harris特征检测器会观察围绕一个假设的兴趣点的小窗口内强度的平均方向变化。如果我们考虑一个位移向量`(u,v)`，则可以通过平方差之和来测量强度变化：
- en: '![How it works...](img/B05388_08_17.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![它的工作原理...](img/B05388_08_17.jpg)'
- en: 'The summation is over a defined neighborhood around the considered pixel (the
    size of this neighborhood corresponds to the third parameter in the `cv::cornerHarris`
    function). This average intensity change can then be computed in all possible
    directions, which leads to the definition of a corner as a point for which the
    average change is high in more than one direction. From this definition, the Harris
    test is performed as follows: We first obtain the direction of the maximal average
    intensity change. Next, we check whether the average intensity change in the orthogonal
    direction is high as well. If this is the case, then we have a corner.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 求和是在考虑的像素周围的定义区域上进行的（这个区域的大小对应于`cv::cornerHarris`函数的第三个参数）。然后可以在所有可能的方向上计算平均强度变化，这导致了一个角点的定义，即在一个以上的方向上平均变化较高的点。从这个定义出发，哈里斯测试如下进行：我们首先获得最大平均强度变化的方向。接下来，我们检查正交方向上的平均强度变化是否也较高。如果是这样，那么我们有一个角点。
- en: 'Mathematically, this condition can be tested by using an approximation of the
    preceding formula using the Taylor expansion:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，这个条件可以通过使用前一个公式的泰勒展开来近似测试：
- en: '![How it works...](img/B05388_08_18-1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B05388_08_18-1.jpg)'
- en: 'This is then rewritten in matrix form:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将它重写为矩阵形式：
- en: '![How it works...](img/B05388_08_19.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B05388_08_19.jpg)'
- en: This matrix is a covariance matrix that characterizes the rate of intensity
    change in all directions. This definition involves the image's first derivatives
    that are often computed using the Sobel operator. This is the case with the OpenCV
    implementation, in which the fourth parameter of the function corresponds to the
    aperture used for the computation of the Sobel filters. It can be shown that the
    two eigenvalues of the covariance matrix give you the maximal average intensity
    change and the average intensity change for the orthogonal direction. Then, if
    these two eigenvalues are low, we are in a relatively homogenous region. If one
    eigenvalue is high and the other is low, we must be on an edge. Finally, if both
    eigenvalues are high, then we are at a corner location. Therefore, the condition
    for a point to be accepted as a corner is to have the smallest eigenvalue of its
    covariance matrix higher than a given threshold.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个矩阵是一个协方差矩阵，它表征了所有方向上强度变化的速度。这个定义涉及到图像的第一导数，这些导数通常使用Sobel算子来计算。在OpenCV实现中，函数的第四个参数对应于用于Sobel滤波器计算的孔径。可以证明，协方差矩阵的两个特征值给出了最大平均强度变化和正交方向上的平均强度变化。然后，如果这两个特征值都较低，我们处于一个相对均匀的区域。如果一个特征值较高而另一个较低，我们必须处于一个边缘上。最后，如果两个特征值都较高，那么我们处于一个角点位置。因此，一个点要被接受为角点，其协方差矩阵的最小特征值必须高于一个给定的阈值。
- en: 'The original definition of the Harris corner algorithm uses some properties
    of the eigen decomposition theory in order to avoid the cost of explicitly computing
    the eigenvalues. These properties are as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 哈里斯角算法的原始定义使用特征分解理论的一些性质来避免显式计算特征值的成本。这些性质如下：
- en: The product of the eigenvalues of a matrix is equal to its determinant
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵的特征值的乘积等于其行列式
- en: The sum of the eigenvalues of a matrix is equal to the sum of the diagonal of
    the matrix (also known as the trace of the matrix)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矩阵的特征值之和等于矩阵对角线之和（也称为矩阵的迹）
- en: 'It then follows that we can verify whether the eigenvalues of a matrix are
    high by computing the following score:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以通过计算以下分数来验证矩阵的特征值是否较高：
- en: '![How it works...](img/B05388_08_20.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B05388_08_20.jpg)'
- en: One can easily verify that this score will indeed be high only if both eigenvalues
    are high too. This is the score that is computed by the `cv::cornerHarris` function
    at each pixel location. The value of `k` is specified as the fifth parameter of
    the function. It could be difficult to determine what value is best for this parameter.
    However, in practice, a value in the range of `0.05` and `0.5` generally gives
    good results.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以很容易地验证，只有当两个特征值都较高时，这个分数才会确实很高。这是`cv::cornerHarris`函数在每个像素位置计算出的分数。`k`的值被指定为函数的第五个参数。确定这个参数的最佳值可能很困难。然而，在实践中，`0.05`到`0.5`范围内的值通常可以得到良好的结果。
- en: 'To improve the result of the detection, the class described in the previous
    section adds an additional non-maxima suppression step. The goal here is to exclude
    Harris corners that are adjacent to others. Therefore, to be accepted, the Harris
    corner must not only have a score higher than the specified threshold, but it
    must also be a local maximum. This condition is tested by using a simple trick
    that consists of dilating the image of the Harris score in our `detect` method:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高检测结果，前一小节中描述的类添加了一个额外的非最大值抑制步骤。这里的目的是排除相邻的其他Harris角。因此，为了被接受，Harris角不仅必须具有高于指定阈值的分数，而且它还必须是局部最大值。这个条件是通过在`detect`方法中使用一个简单的技巧来测试的，即膨胀Harris分数的图像：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Since the dilation replaces each pixel value with the maximum in the defined
    neighborhood, the only points that will not be modified are the local maxima.
    This is what is verified by the following equality test:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于膨胀操作将每个像素值替换为定义的邻域中的最大值，因此唯一不会修改的点就是局部最大值。这正是以下等式测试所验证的：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `localMax` matrix will therefore be true (that is, non-zero) only at local
    maxima locations. We then use it in our `getCornerMap` method to suppress all
    non-maximal features (using the `cv::bitwise` function).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`localMax`矩阵仅在局部最大值位置为真（即非零）。然后我们在`getCornerMap`方法中使用它来抑制所有非最大特征（使用`cv::bitwise`函数）。
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Additional improvements can be made to the original Harris corner algorithm.
    This section describes another corner detector found in OpenCV, which expands
    the Harris detector to make its corners more uniformly distributed across the
    image. As we will see, this operator implements a generic interface defining the
    behavior of all feature detection operators. This interface allows easy testing
    of different interest point detectors within the same application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以对原始的Harris角算法进行额外的改进。本节描述了OpenCV中找到的另一个角检测器，它扩展了Harris检测器，使其角在图像中分布得更均匀。正如我们将看到的，这个算子实现了一个通用接口，定义了所有特征检测算子的行为。此接口允许在同一个应用程序中轻松测试不同的兴趣点检测器。
- en: Good features to track
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 轨迹良好的特征
- en: With the advent of floating-point processors, the mathematical simplification
    introduced to avoid eigenvalue decomposition has become negligible, and consequently,
    the detection of Harris corners can be made based on the explicitly computed eigenvalues.
    In principle, this modification should not significantly affect the result of
    the detection, but it avoids the use of the arbitrary `k` parameter. Note that
    two functions exist that allow you to explicitly get the eigenvalues (and eigenvectors)
    of the Harris covariance matrix; these are `cv::cornerEigenValsAndVecs` and `cv::cornerMinEigenVal`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 随着浮点处理器的出现，为了避免特征值分解而引入的数学简化变得可以忽略不计，因此，基于显式计算的特征值进行Harris角检测成为可能。原则上，这种修改不应显著影响检测结果，但它避免了使用任意的`k`参数。请注意，存在两个函数允许您显式获取Harris协方差矩阵的特征值（和特征向量）；这些是`cv::cornerEigenValsAndVecs`和`cv::cornerMinEigenVal`。
- en: 'A second modification addresses the problem of feature point clustering. Indeed,
    in spite of the introduction of the local maxima condition, interest points tend
    to be unevenly distributed across an image, showing concentrations at highly textured
    locations. A solution to this problem is to impose a minimum distance between
    two interest points. This can be achieved using the following algorithm. Starting
    from the point with the strongest Harris score (that is, with the largest minimum
    eigenvalue), only accept interest points if they are located at, at least, a given
    distance from the already accepted points. This solution is implemented in OpenCV
    by the **good-features-to-track** (**GFTT**) operator, which is thus named because
    the features it detects can be used as a good starting set in visual tracking
    applications. This operator is deployed as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第二次修改解决了特征点聚类的问题。事实上，尽管引入了局部最大值条件，但兴趣点往往在图像中分布不均匀，在高度纹理的位置显示出集中。解决这个问题的方法是在两个兴趣点之间施加最小距离。这可以通过以下算法实现。从具有最强Harris分数的点（即具有最大的最小特征值）开始，只有当它们位于已接受点的至少给定距离处时，才接受兴趣点。这个解决方案在OpenCV中通过**good-features-to-track**（**GFTT**）算子实现，因此得名，因为检测到的特征可以用作视觉跟踪应用中的良好起始集。此算子如下部署：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first step is to create the feature detector using the appropriate static
    function (here, `cv::GFTTDetector::create`) and the initialization parameters.
    In addition to the quality-level threshold value, and the minimum tolerated distance
    between interest points, the function also uses a maximum number of points that
    can be returned (this is possible since points are accepted in the order of strength).
    Calling this function returns a OpenCV smart pointer to the detector instance.
    Once this object constructed, its `detect` method can be called. Note that the
    common interface also includes the definition of a `cv::Keypoint` class that encapsulates
    the properties of each detected feature point. For the Harris corners, only the
    position of the keypoints and its response strength is relevant. The *Detecting
    scale-invariant features* recipe of this chapter will discuss the other properties
    that can be associated with a keypoint.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用适当的静态函数（在此处，`cv::GFTTDetector::create`）和初始化参数来创建特征检测器。除了质量级别阈值值和兴趣点之间可容忍的最小距离之外，该函数还使用可以返回的最大点数（这是可能的，因为点按强度顺序接受）。调用此函数返回一个指向检测器实例的OpenCV智能指针。一旦构建了此对象，就可以调用其`detect`方法。请注意，通用接口还包括`cv::Keypoint`类的定义，该类封装了每个检测到的特征点的属性。对于Harris角点，仅与关键点的位置及其响应强度相关。本章的“检测尺度不变特征”食谱将讨论可以与关键点关联的其他属性。
- en: 'The preceding code produces the following result:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码产生以下结果：
- en: '![Good features to track](img/B05388_08_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Good features to track](img/B05388_08_04.jpg)'
- en: This approach increases the complexity of the detection, since it requires the
    interest points to be sorted by their Harris score, but it also clearly improves
    the distribution of the points across the image. Note that this function also
    includes an optional flag, that requests Harris corners to be detected using the
    classical corner score definition (using the covariance matrix determinant and
    trace).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法增加了检测的复杂性，因为它需要按Harris分数对兴趣点进行排序，但它也明显改善了点在图像中的分布。请注意，此函数还包括一个可选标志，请求使用经典角点分数定义（使用协方差矩阵的行列式和迹）来检测Harris角点。
- en: 'The OpenCV common interface for the feature detector defines an abstract class
    called `cv::Feature2D` that basically imposes, among others, the existence of
    a `detect` operation with the following signatures:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV的特征检测器通用接口定义了一个名为`cv::Feature2D`的抽象类，该类基本上强制执行了以下签名中的`detect`操作：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The second method allows interest points to be detected in a vector of images.
    The class also includes other methods such as the ones to compute feature descriptors
    (to be discussed in the next chapter) and the ones can read and write the detected
    points in a file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法允许在图像向量中检测兴趣点。该类还包括其他方法，例如计算特征描述符的方法（将在下一章讨论）以及可以读取和写入检测到的点的文件的方法。
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The classic article that describes the Harris operator by *C. Harris* and *M.J.
    Stephens,  A combined corner and edge detector, Alvey Vision Conference*, pp.
    147-152, 1988
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述Harris算子的经典文章由C. Harris和M.J. Stephens撰写，《A combined corner and edge detector》，《Alvey
    Vision Conference》，第147-152页，1988年
- en: The article by *J. Shi* and *C. Tomasi*, *Good features to track*, *Int. Conference
    on Computer Vision and Pattern Recognition*, pp. 593-600, 1994, introduces this
    special feature
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: J. Shi和C. Tomasi的文章《Good features to track》，《Int. Conference on Computer Vision
    and Pattern Recognition》，第593-600页，1994年，介绍了这种特殊特征
- en: The article by *K. Mikolajczyk* and *C. Schmid*, *Scale and Affine invariant
    interest point detectors, International Journal of Computer Vision, vol 60*, no
    1, pp. 63-86, 2004, proposes a multi-scale and affine-invariant Harris operator
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: K. Mikolajczyk和C. Schmid的文章《Scale and Affine invariant interest point detectors》，《International
    Journal of Computer Vision》，第60卷，第1期，第63-86页，2004年，提出了一种多尺度且仿射不变性的Harris算子
- en: Detecting features quickly
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速检测特征
- en: The Harris operator proposed a formal mathematical definition for corners (or
    more generally, interest points) based on the rate of intensity changes in two
    perpendicular directions. Although this constitutes a sound definition, it requires
    the computation of the image derivatives, which is a costly operation, especially
    considering the fact that interest point detection is often just the first step
    in a more complex algorithm.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Harris算子为角点（或更一般地说，兴趣点）提出了基于两个垂直方向上强度变化率的正式数学定义。尽管这是一个合理的定义，但它需要计算图像导数，这是一个成本高昂的操作，尤其是考虑到兴趣点检测通常只是更复杂算法的第一步。
- en: In this recipe, we present another feature point operator, called **FAST** (**Features
    from Accelerated Segment Test**). This one has been specifically designed to allow
    quick detection of interest points in an image, the decision to accept or not
    to accept a keypoint being based on only a few pixel comparisons.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们介绍另一个特征点操作符，称为**FAST**（**加速段测试中的特征**）。这个操作符是专门设计用来允许快速检测图像中的兴趣点，接受或拒绝关键点的决定仅基于少数像素比较。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'As seen in the last section of the previous recipe, *Detecting corners in an
    image*, using the OpenCV common interface for feature point detection makes the
    deployment of any feature point detectors easy. The detector presented in this
    recipe is the FAST detector. As the name suggests, it has been designed to quickly
    detect interest points in an image:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个菜谱的最后部分所看到的，在图像中检测角点，使用OpenCV的通用特征点检测接口使得部署任何特征点检测器变得容易。本菜谱中介绍的检测器是FAST检测器。正如其名所示，它被设计用来快速检测图像中的兴趣点：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that OpenCV also proposes a generic function to draw `keypoints` on an
    image:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，OpenCV还提供了一个通用的函数来在图像上绘制`关键点`：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By specifying the chosen drawing flag, the keypoints are drawn over the input
    image, thus producing the following output result:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定选择的绘制标志，关键点被绘制在输入图像上，从而产生以下输出结果：
- en: '![How to do it...](img/B05388_08_05.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B05388_08_05.jpg)'
- en: An interesting option is to specify a negative value for the keypoint color.
    In this case, a different random color will be selected for each drawn circle.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的选择是为关键点颜色指定一个负值。在这种情况下，每个绘制的圆将选择不同的随机颜色。
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As in the case with the Harris point detector, the FAST feature algorithm derives
    from the definition of what constitutes a corner. This time, this definition is
    based on the image intensity around a putative feature point. The decision to
    accept a keypoint is taken by examining a circle of pixels centered at a candidate
    point. If an arc of contiguous points of a length greater than three quarters
    of the circle perimeter in which all pixels significantly differ from the intensity
    of the center point (being all darker or all brighter) is found, then a keypoint
    is declared.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 就像哈里斯点检测器的情况一样，FAST特征算法源自构成角点的定义。这次，这个定义基于假设特征点周围的图像强度。是否接受关键点的决定是通过检查以候选点为中心的像素圆来做出的。如果在圆周上找到一个连续点弧，其长度大于圆周长度的四分之三，并且所有像素与中心点的强度显著不同（要么都是较暗的，要么都是较亮的），则宣布存在一个关键点。
- en: This is a simple test that can be computed quickly. Moreover, in its original
    formulation, the algorithm uses an additional trick to further speed up the process.
    Indeed, if we first test four points separated by 90 degrees on the circle (for
    example, top, bottom, right, and left points), it can be easily shown that in
    order to satisfy the condition expressed previously, at least three of these points
    must all be brighter or darker than the central pixel.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可以快速计算的简单测试。此外，在其原始公式中，该算法使用了一个额外的技巧来进一步加快处理速度。确实，如果我们首先测试圆周上相隔90度的四个点（例如，顶部、底部、右侧和左侧点），可以很容易地证明，为了满足之前表达的条件，至少有三个这些点都必须与中心像素一样亮或一样暗。
- en: If this is not the case, the point can be rejected immediately, without inspecting
    additional points on the circumference. This is a very effective test, since in
    practice, most of the image points will be rejected by this simple 4-comparison
    test.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这种情况，点可以立即被拒绝，无需检查圆周上的其他点。这是一个非常有效的测试，因为在实践中，大多数图像点都会通过这个简单的4比较测试被拒绝。
- en: 'In principle, the radius of the circle of examined pixels could have been a
    parameter of the method. However, it has been found that in practice, a radius
    of `3` gives you both good results and high efficiency. There are, then, `16`
    pixels that need to be considered on the circumference of the circle, shown as
    follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从原则上讲，检查像素的圆的半径可以是该方法的一个参数。然而，在实践中，半径为`3`既能提供良好的结果，又具有高效率。因此，圆周上需要考虑的像素有`16`个，如下所示：
- en: '![How it works...](img/B05388_08_06.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B05388_08_06.jpg)'
- en: The four points used for the pretest are pixels **1**, **5**, **9**, and **13**,
    and the required number of contiguous darker or brighter points is **9**. This
    specific setting is often designated as the FAST-9 corner detector, and this the
    one OpenCV uses by default. You can, in fact, specify which type of FAST detector
    you want to use when you construct the detector instance; there is also a `setType`
    method. The options are `cv::FastFeatureDetector::TYPE_5_8`, `cv::FastFeatureDetector::TYPE_7_12`,
    and `cv::FastFeatureDetector::TYPE_9_16`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 用于预测试的四个点是像素**1**、**5**、**9**和**13**，所需的连续暗或亮点的数量是**9**。这种特定设置通常被称为FAST-9角点检测器，这是OpenCV默认使用的。实际上，您可以在构建检测器实例时指定要使用的FAST检测器类型；还有一个`setType`方法。选项有`cv::FastFeatureDetector::TYPE_5_8`、`cv::FastFeatureDetector::TYPE_7_12`和`cv::FastFeatureDetector::TYPE_9_16`。
- en: To be considered as being significantly darker or brighter, the intensity of
    a point must differ from the intensity of the central pixel by at least a given
    amount; this value corresponds to the threshold parameter specified when creating
    the detector instance. The larger this threshold is, the fewer corner points will
    be detected.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要被视为明显更暗或更亮，点的强度必须至少与中心像素的强度差异给定量；此值对应于创建检测器实例时指定的阈值参数。此阈值越大，检测到的角点就越少。
- en: As for Harris features, it is often better to perform non-maxima suppression
    on the corners that have been found. Therefore, a corner strength measure needs
    to be defined. Several alternative measures to this can considered, and the one
    that has been retained is the following. The strength of a corner is given by
    the sum of the absolute difference between the central pixel and the pixels on
    the identified contiguous arc. You can read the corner strength from the `response`
    attribute of the `cv::KeyPoint` instances.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Harris特征，通常最好对已找到的角点执行非极大值抑制。因此，需要定义一个角点强度度量。可以考虑几种替代度量，而保留的是以下度量。角点的强度由中心像素与识别出的连续弧上的像素之间的绝对差之和给出。您可以从`cv::KeyPoint`实例的`response`属性中读取角点强度。
- en: This algorithm results in very fast interest point detection and is therefore
    the feature of choice when speed is a concern. This is the case, for example,
    in real-time visual tracking or object-recognition applications where several
    points must be tracked or matched in a live video stream.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此算法导致非常快的兴趣点检测，因此在速度是关注点时，这是首选的特征。例如，在实时视觉跟踪或对象识别应用中，必须跟踪或匹配实时视频流中的多个点时，情况就是这样。
- en: There's more...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Different strategies can be used to make feature detection more suitable for
    your application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用不同的策略来使特征检测更适合您的应用程序。
- en: 'For example, it is sometimes desirable to dynamically adapt the feature detection
    such to obtain a predefined number of interest points. A simple strategy to achieve
    this goal consists in using a permissive detection threshold such that a large
    number of interest points is obtained. You then simply have to extract the nth
    strongest points in the set. A standard C++ function allows you to accomplish
    this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有时可能希望动态调整特征检测以获得预定义数量的兴趣点。实现此目标的一个简单策略是使用宽容的检测阈值，以便获得大量兴趣点。然后，您只需从集合中提取第n个最强的点。一个标准的C++函数允许您完成此操作：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, `keypoints` is your `std::vector` of detected interest points and `numberOfPoints`
    is the desirable quantity of interest points. The last parameter in this function
    is the lambda comparator used to extract the best interest points. Note that if
    the number of detected interest points is too low (that is, lower than the seek
    quantity), this means that you should have used a lower threshold for detection.
    However, using a very permissive threshold generally increases the computational
    load; there is therefore a trade-off value that has to be identified.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`keypoints`是您检测到的兴趣点的`std::vector`，而`numberOfPoints`是期望的兴趣点数量。此函数中的最后一个参数是用于提取最佳兴趣点的lambda比较器。请注意，如果检测到的兴趣点数量太低（即低于寻求的数量），这意味着您应该使用较低的阈值进行检测。然而，使用非常宽容的阈值通常会增加计算负载；因此，必须确定一个权衡值。
- en: 'Another issue that often arises when detecting features, is the uneven distribution
    of the interest points over an image. Indeed, the `keypoints` tend to agglomerate
    at highly textured areas of the image. For example, here is the result obtained
    when detecting `100` interest points on our church image:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在检测特征时，经常出现的一个问题是图像中兴趣点的分布不均匀。确实，`关键点`往往聚集在图像的高纹理区域。例如，以下是在我们的教堂图像上检测`100`个兴趣点得到的结果：
- en: '![There''s more...](img/B05388_08_07.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/B05388_08_07.jpg)'
- en: 'As you can see, most feature points are on the upper and bottom parts of the
    building. A common strategy used to obtain a better distribution of the interest
    points in an image consists in dividing this one into a grid of sub-images and
    perform an independent detection of each sub-image. The following code performs
    this grid adapted detection:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，大多数特征点位于建筑的上下部分。为了在图像中获得更好的兴趣点分布，常用的策略是将该图像划分为子图像的网格，并对每个子图像进行独立的检测。以下代码执行了这种网格自适应检测：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The key idea here is to use image ROIs in order to perform keypoint detection
    inside each sub-image of the grid. The resulting detection shows a more uniform
    keypoint distribution:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键思想是使用图像区域（ROI）来在每个子图像中进行关键点检测。结果检测显示出更均匀的关键点分布：
- en: '![There''s more...](img/image_08_012.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/image_08_012.jpg)'
- en: See also
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: OpenCV2 includes specialized adapted feature detection wrapper classes; see,
    for example, `cv::DynamicAdaptedFeatureDetector` or  `GridAdaptedFeatureDetector`
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenCV2 包含了专门的适应特征检测包装类；例如，`cv::DynamicAdaptedFeatureDetector` 或 `GridAdaptedFeatureDetector`
- en: The article by *E. Rosten* and *T. Drummond*, *Machine learning for high-speed
    corner detection*, *International European Conference on Computer Vision, pp.
    430-443*, 2006, describes the FAST feature algorithm and its variants in detail
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: E. Rosten 和 T. Drummond 的文章，*高速角点检测的机器学习*，*国际欧洲计算机视觉会议，第 430-443 页*，2006 年，详细描述了FAST特征算法及其变体。
- en: Detecting scale-invariant features
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测尺度不变特征
- en: The view invariance of feature detection was presented as an important concept
    in the introduction of this chapter. While orientation invariance, which is the
    ability to detect the same points even if an image is rotated, has been relatively
    well handled by the simple feature point detectors that have been presented so
    far, the invariance to scale changes is more difficult to achieve. To address
    this problem, the concept of scale-invariant features has been introduced in computer
    vision. The idea here is to not only have a consistent detection of keypoints
    no matter at which scale an object is pictured, but to also have a scale factor
    associated with each of the detected feature points. Ideally, for the same object
    point featured at two different scales on two different images, the ratio of the
    two computed scale factors should correspond to the ratio of their respective
    scales. In recent years, several scale-invariant features have been proposed,
    and this recipe presents one of them, the **SURF** features. SURF stands for **Speeded
    Up Robust Features**, and as we will see, they are not only scale-invariant features,
    but they also offer the advantage of being computed efficiently.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 特征检测的视域不变性在本章引言中被提出作为一个重要概念。虽然方向不变性，即即使图像旋转也能检测到相同点的能力，已经被迄今为止提出的简单特征点检测器相对较好地处理，但尺度变化的不变性更难实现。为了解决这个问题，计算机视觉中引入了尺度不变特征的概念。这里的想法不仅是在任何尺度下都能一致地检测关键点，而且每个检测到的特征点都与一个尺度因子相关联。理想情况下，对于在两个不同图像的两个不同尺度上具有相同对象点的特征点，两个计算出的尺度因子的比率应该对应于它们各自尺度的比率。近年来，已经提出了几种尺度不变特征，本食谱介绍其中之一，即**SURF**特征。SURF代表**加速鲁棒特征**，正如我们将看到的，它们不仅是尺度不变特征，而且计算效率高。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The SURF feature detector is part of the `opencv_contrib` repository. To use
    it, you must then have built the OpenCV library together with these extra modules,
    as explained in [Chapter 1](ch01.html "Chapter 1. Playing with Images") , *Playing
    with Images*. In particular, we are interested here by the `cv::xfeatures2d` module
    that gives us access to the `cv::xfeatures2d::SurfFeatureDetector` class. As for
    the other detector, interest points are detected by first creating an instance
    of the detector and then calling its `detect` method:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: SURF特征检测器是`opencv_contrib`仓库的一部分。要使用它，你必须已经构建了OpenCV库以及这些额外的模块，如[第1章](ch01.html
    "第1章. 玩转图像")中所述，*玩转图像*。特别是，我们对此处的`cv::xfeatures2d`模块感兴趣，它为我们提供了访问`cv::xfeatures2d::SurfFeatureDetector`类的权限。至于其他检测器，首先创建检测器的一个实例，然后调用其`detect`方法来检测兴趣点：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To draw these features, we again use the `cv::drawKeypoints` OpenCV function
    but now with the `cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS` flag so that we can
    visualize the associated scale factor:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制这些特征，我们再次使用`cv::drawKeypoints` OpenCV函数，但现在使用`cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS`标志，这样我们就可以可视化相关的尺度因子：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The resulting image with the detected features is then as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 检测到特征后的图像如下所示：
- en: '![How to do it...](img/image_08_013.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_013.jpg)'
- en: Here, the size of the keypoint circles resulting from the use of the `cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS`
    flag is proportional to the computed scale of each feature. The SURF algorithm
    also associates an orientation with each feature to make them invariant to rotations.
    This orientation is illustrated by a radial line inside each drawn circle.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，使用`cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS`标志得到的特征点圆的大小与每个特征的计算尺度成正比。SURF算法还与每个特征关联一个方向，使它们对旋转不变。这个方向通过每个绘制圆内的径向线表示。
- en: 'If we take another picture of the same object but at a different scale, the
    feature-detection result is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们用不同尺度的另一张相同物体的照片，特征检测的结果如下：
- en: '![How to do it...](img/image_08_014.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_08_014.jpg)'
- en: By carefully observing the detected keypoints on the two images, it can be seen
    that the change in the size of corresponding circles is often proportional to
    the change in scale. As an example, consider the two windows on the right part
    of the church; in both images, a SURF feature has been detected at that location,
    and the two corresponding circles (of different sizes) contain the same visual
    elements. Of course, this is not the case for all features, but as we will discover
    in the next chapter, the repeatability rate is sufficiently high to allow good
    matching between the two images.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仔细观察两张图像上检测到的关键点，可以看出对应圆的大小变化通常与尺度变化成比例。例如，考虑教堂右侧的两个窗户；在两张图像中，都检测到了该位置的一个SURF特征，并且两个对应的不同大小的圆包含了相同的视觉元素。当然，并非所有特征都如此，但正如我们将在下一章中发现的，重复率足够高，可以允许两张图像之间进行良好的匹配。
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In [Chapter 6](ch06.html "Chapter 6. Filtering the Images") , *Filtering the
    Images*, we learned that the derivatives of an image can be estimated using Gaussian
    filters. These filters make use of a `σ` parameter, which defines the aperture
    (size) of the kernel. As we saw, this `σ` parameter corresponds to the variance
    of the Gaussian function used to construct the filter, and it then implicitly
    defines a scale at which the derivative is evaluated. Indeed, a filter that has
    a larger `σ` value smooths out the finer details of the image. This is why we
    can say that it operates at a coarser scale.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章. 过滤图像")，*过滤图像*中，我们了解到可以使用高斯滤波器估计图像的导数。这些滤波器使用一个`σ`参数，它定义了核的孔径（大小）。正如我们所见，这个`σ`参数对应于构建滤波器所使用的高斯函数的方差，并隐式地定义了评估导数的尺度。确实，具有较大`σ`值的滤波器会平滑掉图像的更细的细节。这就是为什么我们可以说它在更粗的尺度上操作。
- en: Now, if we compute, for instance, the Laplacian of a given image point using
    Gaussian filters at different scales, then different values are obtained. Looking
    at the evolution of the filter response for different scale factors, we obtain
    a curve that eventually reaches a maximum value at a given `σ` value. If we extract
    this maximum value for two images of the same object taken at two different scales,
    the ratio of these two `σ` maxima should correspond to the ratio of the scales
    at which the images were taken. This important observation is at the core of the
    scale-invariant feature extraction process. That is, scale-invariant features
    should be detected as the local maxima in both the spatial space (in the image)
    and the scale space (as obtained from the derivative filters applied at different
    scales).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们使用不同尺度的高斯滤波器计算给定图像点的拉普拉斯算子，那么会得到不同的值。观察不同尺度因子滤波器响应的变化，我们得到一条曲线，最终在给定的`σ`值处达到最大值。如果我们从两个不同尺度拍摄的两个相同物体的图像中提取这个最大值，这两个`σ`最大值之比应该对应于拍摄图像的尺度之比。这个重要的观察结果是尺度不变特征提取过程的核心。也就是说，尺度不变特征应该在空间空间（在图像中）和尺度空间（通过在不同尺度上应用导数滤波器获得）中的局部最大值中被检测到。
- en: 'SURF implements this idea by proceeding as follows. First, to detect the features,
    the Hessian matrix is computed at each pixel. This matrix measures the local curvature
    of a function and is defined as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: SURF通过以下步骤实现这个想法。首先，为了检测特征，计算每个像素处的Hessian矩阵。这个矩阵衡量函数的局部曲率，定义为如下：
- en: '![How it works...](img/B05388_08_21.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05388_08_21.jpg)'
- en: The determinant of this matrix gives you the strength of this curvature. The
    idea, therefore, is to define corners as image points with high local curvature
    (that is, high variation in more than one direction). Since it is composed of
    second-order derivatives, this matrix can be computed using Laplacian of Gaussian
    kernels of a different scale, that is, for different values of `σ`. This Hessian
    then becomes a function of three variables, `H(x,y,σ)`. Therefore, a scale-invariant feature is
    declared when the determinant of this Hessian reaches a local maximum in both
    spatial and scale space (that is, `3x3x3` non-maxima suppression needs to be performed).
    Note that in order to be considered as a valid point, this determinant must have
    a minimum value as specified by the first parameter of the `create` method of
    the `cv::xfeatures2d::SurfFeatureDetector` class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个矩阵的行列式给出了这个曲率的强度。因此，定义角点为具有高局部曲率（即在一个以上方向上的高变化）的图像点。由于它由二阶导数组成，这个矩阵可以使用不同尺度的高斯核的拉普拉斯算子来计算，即对于不同的`σ`值。因此，当这个Hessian的行列式在空间和尺度空间中都达到局部最大值时（即需要进行`3x3x3`非最大值抑制），就声明了一个尺度不变特征。请注意，为了被视为一个有效点，这个行列式必须具有由`cv::xfeatures2d::SurfFeatureDetector`类的`create`方法的第一参数指定的最小值。
- en: 'However, the calculation of all of these derivatives at different scales is
    computationally costly. The objective of the SURF algorithm is to make this process
    as efficient as possible. This is achieved by using approximated Gaussian kernels
    that involve only few integer additions. These have the following structure:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在不同尺度上计算所有这些导数是计算上代价高昂的。SURF算法的目的是使这个过程尽可能高效。这是通过使用仅涉及少量整数加法的近似高斯核来实现的。这些核具有以下结构：
- en: '![How it works...](img/image_08_016.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_08_016.jpg)'
- en: The kernel on the left-hand side is used to estimate the mixed second derivatives,
    while the one on the right-hand side estimates the second derivative in the vertical
    direction. A rotated version of this second kernel estimates the second derivative
    in the horizontal direction. The smallest kernels have a size of `9x9` pixels,
    corresponding to `σ≈1.2`. To obtain a scale-space representation, kernels of increasing
    size are successively applied. The exact number of filters that are applied can
    be specified by additional parameters of the `cv::xfeatures2d::SurfFeatureDetector::create`
    method. By default, `12` different sizes of kernels are used (going up to size
    `99x99`). Note that, as explained in [Chapter 4](ch04.html "Chapter 4. Counting
    the Pixels with Histograms") , *Counting the Pixels with Histograms*, the use
    of integral images guarantees that the sum inside each lobe of each filter can
    be computed by using only three additions independent of the size of the filter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的核用于估计混合的二阶导数，而右侧的核用于估计垂直方向上的二阶导数。这个二阶核的旋转版本用于估计水平方向上的二阶导数。最小的核大小为`9x9`像素，对应于`σ≈1.2`。为了获得尺度空间表示，依次应用不同大小的核。通过`cv::xfeatures2d::SurfFeatureDetector::create`方法的附加参数可以指定应用的滤波器的确切数量。默认情况下，使用`12`种不同大小的核（大小从`99x99`不等）。请注意，正如在[第4章](ch04.html
    "第4章. 使用直方图计数像素")中解释的那样，*使用直方图计数像素*，使用积分图像可以保证每个滤波器每个叶子的内部和可以通过仅使用三个与滤波器大小无关的加法来计算。
- en: Once the local maxima are identified, the precise position of each detected
    interest point is obtained through interpolation in both scale and image space.
    The result is then a set of feature points that are localized at sub-pixel accuracy
    and to which a scale value is associated.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦识别出局部极大值，通过在尺度和图像空间中进行插值，就可以获得每个检测到的兴趣点的精确位置。结果是具有亚像素精度的特征点集，并且与一个尺度值相关联。
- en: There's more...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The SURF algorithm has been developed as an efficient variant of another well-known
    scale-invariant feature detector called **SIFT** (**Scale-Invariant Feature Transform**).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: SURF算法被开发为另一个著名的尺度不变特征检测器SIFT（**尺度不变特征变换**）的高效变体。
- en: The SIFT feature-detection algorithm
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SIFT特征检测算法
- en: SIFT also detects features as local maxima in the image and scale space, but
    uses the Laplacian filter response instead of the Hessian determinant. This Laplacian
    is computed at different scales (that is, increasing values of `σ`) using the
    Difference of Gaussian filters, as explained in [Chapter 6](ch06.html "Chapter 6. Filtering
    the Images") , *Filtering the Images*. To improve efficiency, each time the value
    of `σ` is doubled, the size of the image is reduced by two. Each pyramid level
    corresponds to an octave, and each scale is a *layer*. There are typically three
    layers per octave.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: SIFT也在图像和尺度空间中检测特征作为局部极大值，但使用拉普拉斯滤波器响应而不是Hessian行列式。这个拉普拉斯在不同的尺度（即`σ`的增大值）上使用高斯差分滤波器计算，如[第6章](ch06.html
    "第6章. 图像滤波")中所述，*图像滤波*。为了提高效率，每次`σ`的值加倍时，图像的大小就减少两倍。每个金字塔层对应一个八度，每个尺度是一个*层*。通常每个八度有三个层。
- en: 'The following figure illustrates a pyramid of two octaves in which the four
    Gaussian-filtered images of the first octave produce three DoG layers:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了两个八度的金字塔，其中第一个八度的四个高斯滤波图像产生了三个DoG层：
- en: '![The SIFT feature-detection algorithm](img/image_08_017.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![SIFT特征检测算法](img/image_08_017.jpg)'
- en: 'The detection of the SIFT features proceeds in a way very similar to SURF:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: SIFT特征的检测过程与SURF非常相似：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, we use all the default arguments to construct the detector, but you can
    specify the number of desired SIFT points (the strongest ones are kept), the number
    of layers per octave, and the initial value for `σ`. As you can see in the following
    image, using three octaves for the detection (default value) leads to a quite
    broad range of scales:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用所有默认参数来构建检测器，但你也可以指定所需的SIFT点数（保留最强的点），每八度带的层数，以及`σ`的初始值。如图所示，使用三个八度带进行检测（默认值）会导致相当广泛的尺度范围：
- en: '![The SIFT feature-detection algorithm](img/image_08_018.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![SIFT特征检测算法](img/image_08_018.jpg)'
- en: Since the computation of the feature point is based on floating-point kernels,
    SIFT is generally considered to be more accurate in terms of feature localization
    in regards to space and scale. For the same reason, it is also more computationally
    expensive, although this relative efficiency depends on each particular implementation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于特征点的计算基于浮点核，SIFT通常被认为在空间和尺度方面在特征定位方面更准确。同样，它也更耗费计算资源，尽管这种相对效率取决于每个特定的实现。
- en: Note that in this recipe we used the `cv::xfeatures2d::SurfFeatureDetector`
    and the `cv::xfeatures2d::SiftFeatureDetector` classes to make explicit the fact
    that we are using them as interest point detectors. Equivalently, we could have
    used the `cv::xfeatures2d::SURF` and `cv::xfeatures2d::SIFT` classes (they are
    type equivalent). Indeed, the SURF and SIFT operators cover both the detection
    and the description of interest points. Interest point description is the object
    of the next chapter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这个配方中，我们使用了`cv::xfeatures2d::SurfFeatureDetector`和`cv::xfeatures2d::SiftFeatureDetector`类来明确表示我们正在将它们用作兴趣点检测器。同样，我们也可以使用`cv::xfeatures2d::SURF`和`cv::xfeatures2d::SIFT`类（它们是类型等效的）。实际上，SURF和SIFT算子涵盖了兴趣点的检测和描述。兴趣点描述是下一章的主题。
- en: As a final remark, it is important to mention the SURF and SIFT operators have
    been patented, and as such, their use in commercial applications might be subject
    to licensing agreements. This restriction is one of the reasons why these feature
    detectors are found in the `cv::xfeatures2d` package.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点，重要的是要提到SURF和SIFT算子已被专利，因此它们在商业应用中的使用可能受到许可协议的约束。这种限制是这些特征检测器出现在`cv::xfeatures2d`包中的原因之一。
- en: See also
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Computing the Laplacian of an image* recipe in [Chapter 6](ch06.html "Chapter 6. Filtering
    the Images") , *Filtering the Images*, gives you more details on the Laplacian-of-Gaussian
    operator and the use of the difference of Gaussians
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章. 过滤图像")中的*计算图像的拉普拉斯算子*配方，*过滤图像*，提供了关于高斯拉普拉斯算子和高斯差分的更多细节'
- en: The *Counting pixels with integral images* recipe in [Chapter 4](ch04.html "Chapter 4. Counting
    the Pixels with Histograms") , *Counting the Pixels with Histograms* explains
    how integral images accelerate the computation of sums of pixels
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章. 使用直方图计数像素")中的*使用积分图像计数像素*配方，*使用直方图计数像素*，解释了积分图像如何加速像素和的计算'
- en: The *Describing and matching local intensity patterns* recipe in [Chapter 9](ch09.html
    "Chapter 9. Describing and Matching Interest Points") , *Describing and Matching
    Interest Points*, explains how these scale-invariant features can be described
    for robust image matching
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章. 描述和匹配兴趣点")中的*描述和匹配局部强度模式*配方，*描述和匹配兴趣点*，解释了这些尺度不变特征如何被描述以实现鲁棒的图像匹配'
- en: 'The article *SURF: Speeded Up Robust Features* by *H. Bay*, *A. Ess*, *T. Tuytelaars*
    and *L. Van Gool* in *Computer Vision and Image Understanding, vol. 110*, No.
    3, pp. 346-359, 2008, describes the SURF feature algorithm'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: H. Bay、A. Ess、T. Tuytelaars和L. Van Gool在*计算机视觉与图像理解，第110卷，第3期，2008年，第346-359页*上发表的*SURF：加速鲁棒特征*文章，描述了SURF特征算法
- en: The pioneering work by *D. Lowe*,  *Distinctive Image Features from Scale Invariant
    Features* in *International Journal of Computer Vision, Vol. 60*, No. 2, 2004,
    pp. 91-110, describes the SIFT algorithm
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D. Lowe在*国际计算机视觉杂志，第60卷，第2期，2004年，第91-110页*上发表的*从尺度不变特征中提取独特图像特征*开创性工作，描述了SIFT算法
- en: Detecting FAST features at multiple scales
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多个尺度上检测FAST特征
- en: FAST has been introduced as a quick way to detect keypoints in an image. With
    SURF and SIFT, the emphasis was on designing scale-invariant features. More recently,
    new interest point detectors have been proposed with the objective of achieving
    both fast detection and invariance to scale changes. This recipe presents the
    **Binary Robust Invariant Scalable Keypoints** (**BRISK**) detector. It is based
    on the FAST feature detector that we described in a previous recipe of this chapter.
    Another detector, called **ORB** (**Oriented FAST and Rotated BRIEF**), will also
    be discussed at the end of this recipe. These two feature point detectors constitute
    an excellent solution when fast and reliable image matching is required. They
    are especially efficient when they are used in conjunction with their associated
    binary descriptors, as will be discussed in [Chapter 9](ch09.html "Chapter 9. Describing
    and Matching Interest Points") , *Describing and Matching Interest Points*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: FAST被引入作为一种快速检测图像中关键点的方法。在SURF和SIFT中，重点是设计尺度不变的特征。最近，提出了新的兴趣点检测器，旨在实现快速检测和对尺度变化的鲁棒性。本食谱介绍了**二值鲁棒不变可伸缩关键点**（**BRISK**）检测器。它基于我们在本章先前的食谱中描述的FAST特征检测器。另一种称为**ORB**（**方向性FAST和旋转BRIEF**）的检测器也将在本食谱的末尾讨论。这两个特征点检测器构成了在需要快速且可靠图像匹配时的优秀解决方案。当与它们相关的二进制描述符一起使用时，它们尤其有效，这一点将在[第9章](ch09.html
    "第9章。描述和匹配兴趣点") *描述和匹配兴趣点* 中讨论。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Following what we did in the previous recipes, we first create an instance
    of the detector, and then the `detect` method is called on an image:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照我们在先前的食谱中所做的那样，我们首先创建检测器的一个实例，然后在一个图像上调用`detect`方法：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The image result shows the BRISK `keypoints` detected at multiple scales:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图像结果显示了BRISK在多个尺度上检测到的`关键点`：
- en: '![How to do it...](img/image_08_019.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_08_019.jpg)'
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: BRISK is not only a feature point detector; the method also includes a procedure
    that describes the neighborhood of each detected keypoint. This second aspect
    will be the subject of the next chapter. We describe here how the quick detection
    of keypoints at multiple scales is performed using BRISK.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: BRISK不仅是一个特征点检测器；该方法还包括一个描述每个检测到的关键点邻域的步骤。这一第二个方面将是下一章的主题。在这里，我们描述了如何使用BRISK在多个尺度上快速检测关键点。
- en: In order to detect interest points at different scales, the method first builds
    an image pyramid through two down-sampling processes. The first process starts
    from the original image size and downscales it by half at each layer (or octave).
    Secondly, in-between layers are created by down-sampling the original image by
    a factor of `1.5`, and from this reduced image, additional layers are generated
    through successive half-sampling.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测不同尺度的兴趣点，该方法首先通过两个下采样过程构建一个图像金字塔。第一个过程从原始图像大小开始，并在每一层（或八度）将其缩小一半。其次，通过将原始图像下采样一个因子`1.5`来创建中间层，然后从这个缩小后的图像中，通过连续的半采样生成额外的层。
- en: '![How it works...](img/image_08_020.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_08_020.jpg)'
- en: The FAST feature detector is then applied on all the images of this pyramid.
    Keypoint extraction is based on a criterion that is similar to the one used by
    SIFT. First, an acceptable interest point must be a local maximum, when comparing
    its strength with one of its eight spatial neighbors. If this is the case, the
    point is then compared with the scores of the neighboring points in the layers
    above and below; if its score is higher in scale as well, then it is accepted
    as an interest point. A key aspect of BRISK resides in the fact that the different
    layers of the pyramid have different resolutions. The method requires interpolation
    in both scale and space in order to locate each keypoint precisely. This interpolation
    is based on the FAST keypoint scores. In space, the interpolation is performed
    on a `3x3` neighborhood. In scale, it is computed by fitting a 1D parabola along
    the scale axis through the current point and its two neighboring local keypoints
    in the layers above and below; this keypoint localization in scale is illustrated
    in the preceding figure. As a result, even if the FAST keypoint detection is performed
    at discrete image scales, the resulting detected scales associated with each keypoint
    are continuous values.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将FAST特征检测器应用于金字塔中的所有图像。关键点提取基于与SIFT使用的类似的标准。首先，一个可接受的兴趣点必须是一个局部最大值，当将其强度与其八个空间邻居之一比较时。如果是这种情况，该点随后将与上下层相邻点的分数进行比较；如果其分数在尺度上更高，则它被接受为兴趣点。BRISK的一个关键方面在于金字塔的不同层具有不同的分辨率。该方法需要在尺度和空间上进行插值，以精确地定位每个关键点。这种插值基于FAST关键点分数。在空间上，插值在`3x3`邻域内进行。在尺度上，它通过沿尺度轴通过当前点及其上下层中的两个相邻局部关键点拟合一维抛物线来计算；这种尺度上的关键点定位在先前的图中进行了说明。因此，即使FAST关键点检测是在离散图像尺度上进行的，与每个关键点相关联的检测尺度也是连续值。
- en: The `cv::BRISK` detector has two main parameters. The first one is a threshold
    value for FAST keypoints to be accepted, and the second parameter is the number
    of octaves that will be generated in the image pyramid; in our example, we used
    `5` octaves, which explains the large number of scales in the detected keypoints.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`cv::BRISK` 检测器有两个主要参数。第一个参数是用于接受FAST关键点的阈值值，第二个参数是将在图像金字塔中生成的八分音数量；在我们的例子中，我们使用了`5`个八分音，这解释了检测到的关键点中存在大量尺度。'
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: BRISK is not the only multiscale, fast detector that is proposed in OpenCV.
    Another one is the ORB feature detector that can also perform efficient keypoint
    detection.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: BRISK并不是OpenCV中提出的唯一的多尺度快速检测器。另一个是ORB特征检测器，它也可以执行高效的关键点检测。
- en: The ORB feature-detection algorithm
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORB特征检测算法
- en: ORB stands for Oriented FAST and Rotated BRIEF. The first part of this acronym
    refers to the keypoint detection part, while the second part refers to the descriptor
    that is proposed by ORB. Here, we focus on the detection method; the descriptor
    will be presented in the next chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: ORB代表定向FAST和旋转BRIEF。这个缩写的第一部分指的是关键点检测部分，而第二部分指的是ORB提出的描述符。在这里，我们关注检测方法；描述符将在下一章中介绍。
- en: As with BRISK, ORB first creates an image pyramid. This one is made of a number
    of layers each of which being a down-sampled version of the previous one by a
    certain scale factor (typically, `8` scales and `1.2` scale factor reduction;
    these are the default parameter values when creating a `cv::ORB` detector). The
    strongest `N` keypoints are then accepted where the keypoint score is defined
    by the Harris cornerness measure, as defined in the first recipe of this chapter
    (the authors of this method found the Harris score to be a more reliable measure
    than the usual FAST corner strength).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 与BRISK一样，ORB首先创建一个图像金字塔。这个金字塔由多个层组成，每一层都是前一层通过一定比例因子（通常是`8`个尺度，`1.2`的比例因子减少；这些是在创建`cv::ORB`检测器时的默认参数值）的下采样版本。然后接受最强的`N`个关键点，其中关键点分数由本章第一道菜中定义的Harris角点度测量，即（该方法的作者发现Harris分数比通常的FAST角点强度更可靠的度量）。
- en: An original aspect of the ORB detector resides in the fact that an orientation
    is associated with each detected interest point. As we will see in the next chapter,
    this information will be useful to align the descriptors of keypoints detected
    in different images. In the *Computing components' shape descriptors* recipe of
    [Chapter 7](ch07.html "Chapter 7. Extracting Lines, Contours, and Components")
    , *Extracting Lines, Contours, and Components*, we introduced the concept of image
    moments and in particular, we showed you how the centroid of a component can be
    computed from its first three moments. ORB proposes to use the orientation of
    the centroid of a circular neighborhood around the keypoint. Since, FAST keypoints,
    by definition, always have a decentered centroid, the angle of the line that joins
    the central point and the centroid will always be well defined.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ORB检测器的原始特点在于每个检测到的兴趣点都与一个方向相关联。正如我们将在下一章中看到的，这些信息将有助于对齐在不同图像中检测到的关键点的描述符。在[第7章](ch07.html
    "第7章。提取线条、轮廓和组件")的“计算组件的形状描述符”配方中，“提取线条、轮廓和组件”，我们介绍了图像矩的概念，特别是我们展示了如何从组件的前三个矩计算其质心。ORB建议使用围绕关键点的圆形邻域的质心的方向。由于，根据定义，FAST关键点总是有一个偏心的质心，因此连接中心点和质心的线的角度总是定义良好的。
- en: 'The ORB features are detected as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: ORB特征检测如下：
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This call produces the following result:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用产生以下结果：
- en: '![The ORB feature-detection algorithm](img/image_08_021.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![ORB特征检测算法](img/image_08_021.jpg)'
- en: As can be seen, since the keypoints are independently detected on each pyramid
    layer, the detector tends to repeatedly detect the same feature point at different
    scales.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，由于关键点在每个金字塔层上独立检测，检测器倾向于在不同尺度上重复检测相同的特征点。
- en: See also
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Matching keypoints with binary descriptors* recipe in [Chapter 9](ch09.html
    "Chapter 9. Describing and Matching Interest Points") , *Describing and Matching
    Interest Points*, explains how simple binary descriptors can be used for efficient
    robust matching of these features
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章。描述和匹配兴趣点")的“匹配二进制描述符”配方中，“描述和匹配兴趣点”，解释了如何使用简单的二进制描述符进行高效鲁棒的匹配这些特征。'
- en: 'The article *BRISK: Binary Robust Invariant Scalable Keypoint* by *S. Leutenegger*,
    *M. Chli* and *R. Y. Siegwart* in *IEEE International Conference on Computer Vision*,
    pp. 2448--2555, 2011, describes the BRISK feature algorithm'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由S. Leutenegger、M. Chli和R. Y. Siegwart在2011年IEEE国际计算机视觉会议上的文章“BRISK：二进制鲁棒可伸缩关键点”描述了BRISK特征算法。
- en: 'The article *ORB: an efficient alternative to SIFT or SURF* by *E. Rublee*,
    *V. Rabaud*, *K. Konolige* and *G. Bradski* in *IEEE International Conference
    on Computer Vision*, pp.2564-2571, 2011, describes the ORB feature algorithm'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由E. Rublee、V. Rabaud、K. Konolige和G. Bradski在2011年IEEE国际计算机视觉会议上的文章“ORB：SIFT或SURF的有效替代方案”，第2564-2571页，描述了ORB特征算法。
