- en: Chapter 10. Connecting the Pieces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。连接各个部分
- en: The previous chapter focused on the last API umbrella, covering Bing Search
    APIs. Throughout this chapter, we will connect the pieces. Our smart-house application
    can currently utilize several APIs, but mostly individually. We will see how to
    connect LUIS, image analysis, Bing News Search, and Bing Speech APIs. We will
    also look at the next steps that you can take after completing this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章重点介绍了最后一个API伞形，涵盖了Bing搜索API。在本章中，我们将连接各个部分。我们的智能家居应用程序目前可以利用几个API，但主要是单独的。我们将了解如何连接LUIS、图像分析、Bing新闻搜索和Bing语音API。我们还将探讨完成本书后您可以采取的下一步行动。
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Making an application smarter, by connecting several APIs
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过连接多个API使应用程序更智能
- en: Real-life applications utilizing Microsoft Cognitive Services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Microsoft认知服务的实际应用
- en: Next steps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一步
- en: Completing our smart-house application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成我们的智能家居应用程序
- en: Until now, we have seen all the different APIs, mostly as individual APIs. The
    whole idea behind the smart-house application is to utilize several APIs at the
    same time.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到了所有不同的API，大多数都是作为单独的API。智能家居应用程序背后的整个想法是同时利用几个API。
- en: Throughout this chapter, we will add a new intent in LUIS. This intent is for
    getting the latest news for different topics.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向LUIS添加一个新的意图。这个意图是用来获取不同主题的最新新闻。
- en: Next, we want to actually search for news, using the Bing News API. We will
    do so by allowing the end user to speak a command, converting spoken audio to
    text, with the Bing Speech API.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要实际使用Bing新闻API来搜索新闻。我们将通过允许最终用户说出一个命令，使用Bing语音API将语音转换为文本来实现这一点。
- en: When we find a news article, we want to get the headline, publishing date, and
    description. If there is a corresponding image to the article, we want to get
    a description of the image. We will do this by adding the Computer Vision API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们找到一篇新闻文章时，我们希望获取标题、发布日期和描述。如果文章有相应的图片，我们希望获取图片的描述。我们将通过添加计算机视觉API来完成这项工作。
- en: With all the news article information in place, we want to get that read back
    to us. We will do this by converting text to spoken audio.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有新闻文章信息就绪后，我们希望将这些信息读回给我们。我们将通过将文本转换为语音来实现这一点。
- en: Creating an intent
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建意图
- en: Let us start by adding our new intent. Head over to [https://www.luis.ai](https://www.luis.ai),
    and log on with the credentials created in [Chapter 4](ch04.html "Chapter 4. Letting
    Applications Understand Commands"), *Letting Applications Understand Commands*.
    From the front page, go into your smart-house application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先添加我们的新意图。转到[https://www.luis.ai](https://www.luis.ai)，并使用在[第4章](ch04.html
    "第4章。让应用程序理解命令")中创建的凭据登录，*让应用程序理解命令*。从首页进入您的智能家居应用程序。
- en: 'Before we start creating the intent, we need to add a new entity. As we want
    the possibility to get updates on news within certain topics, we will add a `NewsCategory`
    entity, as shown in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建意图之前，我们需要添加一个新的实体。由于我们希望能够在特定主题的新闻中获取更新，我们将添加一个`NewsCategory`实体，如下面的截图所示：
- en: '![Creating an intent](img/B12373_10_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![创建意图](img/B12373_10_01.jpg)'
- en: As this entity will work on its own, we do not need any children.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个实体将独立工作，我们不需要任何子实体。
- en: 'Now we can add a new intent. Go to **Intents** on the left-hand side and click
    **Add intent**. This will open the intent creation dialog. Enter a fitting name
    for the intent, such as `GetNews`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加一个新的意图。转到左侧的**意图**，然后点击**添加意图**。这将打开意图创建对话框。为意图输入一个合适的名称，例如`GetNews`：
- en: '![Creating an intent](img/B12373_10_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![创建意图](img/B12373_10_02.jpg)'
- en: 'We also need to add an example command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要添加一个示例命令：
- en: '![Creating an intent](img/B12373_10_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![创建意图](img/B12373_10_03.jpg)'
- en: Add five or six more examples of how you would utter this intent. Make sure
    you train the model before continuing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 添加五个或六个更多如何表达这个意图的示例。确保在继续之前训练模型。
- en: You can verify the model for testing by going to **Test** in the right-hand
    side.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过转到右侧的**测试**来验证测试模型。
- en: Updating the code
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新代码
- en: With the new intent, we can start to update the smart-house application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的意图，我们可以开始更新智能家居应用程序。
- en: Executing actions from intents
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从意图执行操作
- en: 'The first step we need to do is to add an `enum` variable containing the intents.
    Create a new file called `LuisActions.cs`, in the `Model` folder, and add the
    following content to it:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一步是添加一个包含意图的`enum`变量。在`Model`文件夹中创建一个名为`LuisActions.cs`的新文件，并将以下内容添加到其中：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you have any other intents defined, add them as well.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您定义了其他意图，请也添加它们。
- en: This `enum` will be used later, to see which action to execute when triggered.
    For instance, if we ask to get the latest sports news, `GetNews` will be triggered,
    which will go on to retrieve news.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`enum`将在以后使用，以确定触发时执行哪个动作。例如，如果我们要求获取最新的体育新闻，`GetNews`将被触发，然后继续检索新闻。
- en: To make things a bit easier for ourselves, we are going to use the existing
    LUIS example for the rest of the chapter. An alternative would be to add this
    to the `HomeView`, where we could continuously listen to spoken commands from
    the users.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们自己更容易一些，我们将使用本章剩余部分的现有LUIS示例。另一种选择是将此添加到`HomeView`中，我们可以在那里持续监听用户的语音命令。
- en: 'In order to trigger an action, we need to open the `LuisViewModel.cs` file.
    Find the `OnLuisUtteranceResultUpdated` function. Let us update it to the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了触发一个动作，我们需要打开`LuisViewModel.cs`文件。找到`OnLuisUtteranceResultUpdated`函数。让我们将其更新如下：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At this time, we have not added anything new. We have removed the output of
    entities, as we do not need this anymore.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时候，我们没有添加任何新内容。我们已经移除了实体的输出，因为我们不再需要它了。
- en: 'If we find that any actions have been triggered, we want to do something. We
    call a new function, `TriggerActionExecution`, passing on the name of the intent
    as a parameter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发现触发了任何动作，我们想要做些事情。我们调用一个新的函数`TriggerActionExecution`，并将意图名称作为参数传递：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will get back to this function shortly.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快就会回到这个函数。
- en: 'Complete `OnLuisUtteranceResultUpdated` by adding the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加以下代码来完成`OnLuisUtteranceResultUpdated`：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Again, you should see that there are no new features. We have, however, removed
    the last `else` clause. We do not want to have the application speak the summary
    to us anymore.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你应该看到没有新功能。然而，我们确实移除了最后的`else`子句。我们不希望应用程序再对我们说话总结。
- en: 'Create the new `TriggerActionExecution` function. Let it accept a `string`
    as the parameter, and have it return a `Task`. Mark the function as `async`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的`TriggerActionExecution`函数。让它接受一个`string`作为参数，并让它返回一个`Task`。将函数标记为`async`：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, we parse the `actionName` (intent name). If we have not defined the action,
    we will not do anything else.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们解析`actionName`（意图名称）。如果没有定义动作，我们不会做任何其他事情。
- en: 'With an action defined, we go into a `switch` statement to decide what to do.
    As we are only interested in the `GetNews` case, we break out from the other options:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了动作后，我们进入`switch`语句来决定要做什么。因为我们只对`GetNews`情况感兴趣，所以我们从其他选项中跳出：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Make sure that the code compiles before continuing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，确保代码可以编译。
- en: Searching news on command
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令搜索新闻
- en: Next, we will need to modify the `Luis.cs` file. As we have defined an entity
    for the news topic, we want to ensure that we get this value from the LUIS response.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改`Luis.cs`文件。因为我们已经为新闻主题定义了一个实体，我们想要确保我们从LUIS响应中获取这个值。
- en: 'Add a new property to `LuisUtteranceResultEventArgs`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 向`LuisUtteranceResultEventArgs`添加一个新属性：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will allow us to add the news topic value, if received.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们在接收到新闻主题值时添加它。
- en: 'We need to add this value. Locate `ProcessResult` in the `Luis` class. Modify
    the `if` check to look like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加这个值。在`Luis`类中定位`ProcessResult`。修改`if`检查，使其看起来如下：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We make sure that the intent name, of the top-scoring intent, is set, and pass
    it on as an argument to the event. We also check if there is any entities set,
    and if so, pass on the first one. In a real-life application, you would probably
    check other entities as well.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确保设置最高得分的意图名称，并将其作为参数传递给事件。我们还检查是否设置了任何实体，如果是，则传递第一个。在实际应用中，你可能还会检查其他实体。
- en: 'Back into the `LuisViewModel.cs` file, we can now account for this new property.
    Let the `TriggerActionExecution` method accept a second `string` parameter. When
    calling the function, we can add the following parameter:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到`LuisViewModel.cs`文件，我们现在可以处理这个新属性。让`TriggerActionExecution`方法接受第二个`string`参数。在调用函数时，我们可以添加以下参数：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To be able to search for news, we need to add a new member of the `BingSearch`
    type. This is the class we created in the previous chapter:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够搜索新闻，我们需要添加一个`BingSearch`类型的新成员。这是我们在上一章中创建的类：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Create the object in the constructor.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中创建对象。
- en: 'Now we can create a new function, called `GetLatestNews`. This should accept
    a `string` as the parameter, and return `Task`. Mark the function as `async`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个新的函数，称为`GetLatestNews`。这个函数应该接受一个`string`作为参数，并返回`Task`。将函数标记为`async`：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When this function is called, we `SearchNews` on the newly created `_bingSearch`
    object. We pass on the `queryString`, which will be the action parameter, as the
    parameter. We also set the safe search to `Moderate`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个函数被调用时，我们在新创建的`_bingSearch`对象上调用`SearchNews`。我们将`queryString`作为参数传递，这将是动作参数。我们还设置安全搜索为`Moderate`。
- en: A successful API call will result in a `BingNewsResponse` object, which will
    contain an array of news articles. We are not going into more details on this
    class, as we covered it in [Chapter 9](ch09.html "Chapter 9. Adding Specialized
    Searches"), *Adding Specialized Searches*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的API调用将返回一个`BingNewsResponse`对象，该对象将包含一系列新闻文章。我们不会深入讨论这个类，因为我们已经在[第9章](ch09.html
    "第9章。添加专业搜索")中讨论过，*添加专业搜索*。
- en: 'If no news is found, we simply return from the function. If we do find news,
    we do the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有找到新闻，我们直接从函数中返回。如果我们找到了新闻，我们会做以下操作：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We call a function, `ParseNews`, which we will get back to in a bit. We pass
    on the first news article, which will be parsed. Ideally, we would go through
    all the results, but for our case, this is enough to illustrate the point.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用一个函数`ParseNews`，稍后我们会回到这个函数。我们传递第一篇新闻文章，这将被解析。理想情况下，我们会遍历所有结果，但就我们的情况而言，这已经足够说明问题。
- en: 'The `ParseNews` method should be marked as `async`. It should have the return
    type `Task`, and accept a parameter of type `Value`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`ParseNews`方法应该标记为`async`。它的返回类型应该是`Task`，并且接受一个类型为`Value`的参数：'
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We create a string containing the headline, the publishing date, and the news
    description. Using this, we call `SpeakAsync` on the `_ttsClient` to have the
    application read the information back to us.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个包含标题、发布日期和新闻描述的字符串。使用这个字符串，我们在`_ttsClient`上调用`SpeakAsync`，让应用程序将信息读回给我们。
- en: With this function in place, we can execute the action. In `TriggerActionExecuted`,
    call `GetLatestNews` from the `GetNews` case. Make sure to await the call.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数就位后，我们可以执行动作。在`TriggerActionExecuted`中，从`GetNews`情况调用`GetLatestNews`。确保等待调用完成。
- en: 'With the application compiling, we can go for a test run:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序编译完成后，我们可以进行测试运行：
- en: '![Searching news on command](img/B12373_10_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![通过命令搜索新闻](img/B12373_10_04.jpg)'
- en: Naturally, the effects are not as good in an image as in real life. With a microphone
    and speakers or headset connected, we can ask for the latest news, using audio,
    and get the news read back to us with audio.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，图像的效果不如现实生活中好。如果有麦克风和扬声器或耳机连接，我们可以通过音频请求最新的新闻，并得到用音频读回的新闻。
- en: Describing news images
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 描述新闻图像
- en: News articles often come with corresponding images as well. As an addition to
    what we already have, we can add image analysis.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 新闻文章通常还带有相应的图像。作为我们已有的内容的补充，我们可以添加图像分析。
- en: The first step we need to do is to add a new NuGet package. Search for the `Microsoft.ProjectOxford.Vision`
    package, and install this using **NuGet Package Manager**.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一步是添加一个新的NuGet包。搜索`Microsoft.ProjectOxford.Vision`包，并使用**NuGet包管理器**安装此包。
- en: 'In the `LuisViewModel.cs` file, add the following new member:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LuisViewModel.cs`文件中，添加以下新成员：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This can be created in the constructor:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在构造函数中创建：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This member will be our access point to the Computer Vision API.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个成员将是访问计算机视觉API的入口点。
- en: 'We want to get a string describing the image in the `ParseNews` function. We
    can achieve this by adding a new function, called `GetImageDescription`. This
    should accept a `string` parameter, which will be the image URL. The function
    should have return type `Task<string>` and be marked as `async`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在`ParseNews`函数中获取一个描述图像的字符串。我们可以通过添加一个新的函数来实现，这个函数叫做`GetImageDescription`。这个函数应该接受一个`string`类型的参数，它将是图像的URL。该函数的返回类型应该是`Task<string>`，并且应该标记为`async`：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this function, we call `AnalyzeImageAsync` on the `_visionClient`. We want
    the image description, so we specify this in a list of `VisualFeature`. If the
    call succeeds, we expect an object of type `AnalysisResult`. This should contain
    image descriptions, ordered by probability of correctness.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们在`_visionClient`上调用`AnalyzeImageAsync`。我们想要图像描述，所以我们指定在`VisualFeature`列表中。如果调用成功，我们期望得到一个类型为`AnalysisResult`的对象。这个对象应该包含按正确性概率排序的图像描述。
- en: 'If we do not get any descriptions, we return `none`. If we do have any descriptions,
    we return the text of the first one:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有获取到任何描述，我们返回`none`。如果我们有描述，我们返回第一个描述的文本：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If any exceptions occur, we print the exception message to the debug console.
    We also return `none` to the caller:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生任何异常，我们将异常消息打印到调试控制台。我们还向调用者返回`none`：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In `ParseNews`, we can get the image description by adding the following at
    the top of the function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `ParseNews` 中，我们可以在函数顶部添加以下代码来获取图片描述：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With an image description, we can modify the `articleDescription` string to
    the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 获取图片描述后，我们可以将 `articleDescription` 字符串修改为以下内容：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Running the application and asking for news will now also describe any images.
    That concludes our smart-house application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序并请求新闻时，现在也会描述任何图片。这就完成了我们的智能屋应用程序。
- en: Real-life applications using Microsoft Cognitive Services
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Microsoft Cognitive Services 的真实应用案例
- en: There are some examples of applications that currently utilize Microsoft Cognitive
    Services. We will look at some of them here.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有一些应用案例正在使用 Microsoft Cognitive Services。我们将在下面查看其中的一些。
- en: Uber
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Uber
- en: Uber is an app that was created to match drivers with people looking for rides.
    People can open the app, and request a ride. Drivers (registered Uber drivers,
    that is) located nearby can then pick up the person requesting a ride. After a
    ride, the driver is paid through the app.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Uber 是一个创建用来匹配司机和寻找乘车人的应用程序。人们可以打开应用程序，请求乘车。附近的注册 Uber 司机可以接载请求乘车的人。乘车后，司机将通过应用程序获得报酬。
- en: To ensure a more secure experience, a photo of the driver is sent to the passenger.
    This way, passengers can feel safe that the driver is who they say they are. This
    may cause problems, as drivers may not always look like their photo. They may
    have grown a beard, or shaved off a beard, or similar changes may have occurred.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保更安全的体验，司机的照片将被发送给乘客。这样，乘客可以放心，司机就是他们所说的那个人。这可能会引起问题，因为司机可能不会总是看起来像他们的照片。他们可能长出了胡须，或者剃掉了胡须，或者发生了类似的变化。
- en: To account for this, Uber decided to add a new feature. Each driver needs to
    sign in when they are using the app. Doing so will periodically request them to
    take a selfie. This image is then sent to the Face API for verification. If the
    verification fails, due to glare from glasses, or something similar, the driver
    is requested to remove such items.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Uber 决定添加一个新功能。每位司机在使用应用程序时都需要登录。这样做将定期要求他们拍照。然后，这张照片将被发送到面部 API 进行验证。如果验证失败，由于眼镜反光或其他类似原因，将要求司机移除此类物品。
- en: According to Uber, they spent around 3 weeks implementing the Face API into
    their systems.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Uber的说法，他们大约花费了 3 周时间将面部 API 集成到他们的系统中。
- en: DutchCrafters
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DutchCrafters
- en: '**DutchCrafters** is an American company that sells handmade furniture. They
    do have a physical store, but more importantly, they have an e-commerce website.
    This site contains more than 10,000 products, where each product can be customized.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**DutchCrafters** 是一家美国公司，销售手工家具。他们确实有一个实体店，但更重要的是，他们有一个电子商务网站。该网站包含超过 10,000
    种产品，每种产品都可以定制。'
- en: They had a low conversion rate on their site, and as an attempt to improve this,
    they used manual recommendations. Manually adding recommended products on each
    product is rather time-consuming. Looking into their options, they discovered
    the Recommendations API from Microsoft Cognitive Services.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 他们的网站转化率较低，为了尝试提高这一比率，他们使用了手动推荐。在每种产品上手动添加推荐产品相当耗时。在考虑他们的选项时，他们发现了来自 Microsoft
    Cognitive Services 的推荐 API。
- en: They were already relying on REST APIs, and as such implementing the Recommendations
    API was quick. `DutchCrafters` have stated that they spent 5 days in total implementing
    the functionality needed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 他们已经依赖 REST API，因此实现推荐 API 很快。DutchCrafters 表示，他们总共花费了 5 天时间来实现所需的功能。
- en: As their site was already built with ASP.NET and running on IIS, they decided
    to move everything to the cloud. Doing so has improved their site, and with the
    addition of the Recommendations API, their foundation has improved.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于他们的网站已经使用 ASP.NET 构建，并在 IIS 上运行，他们决定将所有内容迁移到云端。这样做提高了他们的网站性能，并且随着推荐 API 的加入，他们的基础也得到了加强。
- en: At the time of writing, they are utilizing the *You might like this* feature,
    recommending 10 items per product. They are also looking into adding real-time
    recommendations, based on users' history, which we have seen is possible using
    the Recommendations API.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，他们正在使用 *你可能喜欢这个* 功能，为每种产品推荐 10 件商品。他们还在考虑添加基于用户历史数据的实时推荐功能，我们已看到这是使用推荐
    API 可行的。
- en: A direct result of implementing the Recommendations API is an improvement of
    the conversion rate. They have seen a three times increase in the conversion rate,
    with about 15% of the sales coming from recommended products.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 实施推荐 API 的直接结果是转化率的提高。他们看到转化率提高了三倍，大约 15% 的销售额来自推荐产品。
- en: CelebsLike.me
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CelebsLike.me
- en: '**CelebsLike.me** is a web application from Microsoft. It was primarily created
    to show off some of the features of Microsoft Cognitive Services.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**CelebsLike.me** 是微软的一个网络应用程序。它主要是为了展示微软认知服务的一些功能。'
- en: The purpose of the application is to find your celebrity doppelganger. You can
    upload a photo, or use one found online, and the app will match faces found with
    similar celebrities.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的目的是找到你的名人双胞胎。你可以上传照片，或者使用在线找到的，应用程序将匹配与类似名人相似的面孔。
- en: The app takes advantage of the Bing Image Search API, the Computer Vision API,
    and the Face API. It recognizes celebrity faces in web images. When someone uploads
    a photo of themselves, facial features will be used to find matching celebrities.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序利用了 Bing 图像搜索 API、计算机视觉 API 和面部 API。它识别网络图像中的名人面孔。当有人上传自己的照片时，将使用面部特征来找到匹配的名人。
- en: Pivothead
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pivothead
- en: '**Pivothead** is a company working with wearable technology. They have combined
    eyeglasses with high-quality cameras, providing still images and videos. These
    glasses allow people to capture vivid point-of-view content of what they see.
    Pivothead currently has customers in the consumer market, but also in the business
    market.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pivothead** 是一家与可穿戴技术合作的公司。他们将眼镜与高质量的摄像头结合，提供静态图像和视频。这些眼镜允许人们捕捉他们所看到的生动视角内容。Pivothead
    目前在消费市场有客户，同时也在商业市场。'
- en: Over time, Pivothead had seen growing success, but could not seem to create
    a device to help visually impaired and/or blind people. They struggled with the
    technology, as machine learning itself can be quite complex. When they learned
    of Microsoft Cognitive Services, they were able to reach a breakthrough.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，Pivothead 看到了不断增长的成功，但似乎无法创建一个帮助视障和/或盲人的设备。他们在技术上遇到了困难，因为机器学习本身可能相当复杂。当他们了解到微软认知服务时，他们能够实现突破。
- en: If a person is wearing the glasses, they can slide a finger along an earpiece.
    This will capture an image of what is in front of the person. The glasses utilize
    five APIs from Microsoft Cognitive Services. These are Computer Vision, Emotion,
    Face, Speech, and LUIS.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人戴着眼镜，他们可以沿着耳塞滑动手指。这将捕捉到人面前的东西的图像。眼镜利用了微软认知服务的五个 API。这些是计算机视觉、情感、面部、语音和 LUIS。
- en: With the image of whatever is in front of a person, the image is analyzed. The
    person wearing the glasses will then get the image described through an earpiece.
    If a person is detected, the gender, how they look, what they are doing, their
    age, and their emotion is detected and described. If text is detected, it will
    be read back to the person.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分析人面前的一切图像，眼镜佩戴者将通过耳塞接收到的图像描述。如果检测到有人，将检测并描述他们的性别、外貌、所做的事情、年龄和情绪。如果检测到文本，将会读给这个人听。
- en: According to Pivothead, they spent around three months months developing prototypes
    of these glasses. They also stated that they could have done it in three weeks,
    had they been working with it full-time.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Pivothead 的说法，他们花了大约三个月的时间开发这些眼镜的原型。他们也表示，如果他们全职工作，可以在三周内完成。
- en: Zero Keyboard
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zero Keyboard
- en: The **Zero Keyboard** app was created by a Finnish company called **Blucup**.
    The company had discovered a common problem for salespeople. They wanted a way
    for salespeople to capture customer data and generate leads while on the go.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zero Keyboard** 应用程序是由一家名为 **Blucup** 的芬兰公司创建的。该公司发现销售人员存在一个共同问题。他们希望销售人员能够在路上捕捉客户数据并生成潜在客户。'
- en: They started developing an app for iOS, Android, and Windows Phone to help solve
    this problem. The idea behind the app is to record customer information, which
    is then automatically stored in the **Customer Relationship Management** (**CRM**)
    system.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 他们开始开发适用于 iOS、Android 和 Windows Phone 的应用程序来解决这个问题。该应用程序背后的想法是记录客户信息，然后自动存储在
    **客户关系管理** (**CRM**) 系统中。
- en: At the time of development, Microsoft Cognitive Services emerged, and Blucup
    decided to give it a go. Earlier, they had tried a few types of open source speech
    recognition software and image analysis software. None provided the quality and
    features needed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发时，Microsoft Cognitive Services出现了，Blucup决定尝试一下。之前，他们尝试了几种开源的语音识别软件和图像分析软件。没有一种提供了所需的质量和功能。
- en: Using the Computer Vision API, the app can take pictures of business cards or
    identification badges, and identify text. This data is directly uploaded to their
    CRM system. By using the Speech API, sales representatives can also record voice
    memos for each contact.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用计算机视觉API，应用程序可以拍摄名片或身份徽章，并识别文本。这些数据直接上传到他们的CRM系统。通过使用语音API，销售人员还可以为每个联系人录制语音备忘录。
- en: Blucup states that Microsoft Cognitive Services delivers very accurate data.
    In addition, they have been able to implement the needed APIs rapidly, as the
    APIs are a good match from a developer standpoint.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Blucup表示，Microsoft Cognitive Services提供非常准确的数据。此外，他们能够快速实现所需的API，因为从开发者的角度来看，API是一个很好的匹配。
- en: The common theme
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: As you can see from all these examples, Microsoft Cognitive Services provides
    good quality. It is also quick to implement, which is important when considering
    new APIs.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从所有这些例子中，你可以看到，Microsoft Cognitive Services提供了高质量的服务。它也易于实现，这在考虑新的API时很重要。
- en: Another great thing about the APIs is that you do not need to be a data scientist
    to use them. Even though the technology powering the APIs is complex, we, as developers,
    do not need to think about it. We can focus on what we do best.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 关于API的另一个优点是，你不需要是数据科学家就能使用它们。尽管API背后的技术很复杂，但我们作为开发者，不需要考虑它。我们可以专注于我们最擅长的事情。
- en: Where to go from here
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从这里去哪里
- en: By now, you should know the basics of Microsoft Cognitive Services, enough to
    get started with building your own applications.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经了解了Microsoft Cognitive Services的基础知识，足以开始构建你自己的应用程序。
- en: A natural way forward is to play around with the different APIs. The APIs are
    continuously improved and worked upon. It is worth going through the API documentation,
    to keep up with changes and to learn more. In addition, Microsoft keeps adding
    new APIs to the services. Through the writing process of this book, I have seen
    three new APIs added. Those might be interesting to look into.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自然的下一步是尝试不同的API。APIs持续改进和优化。查看API文档，跟上变化并了解更多是值得的。此外，Microsoft还在不断向服务中添加新的API。在撰写这本书的过程中，我看到了三个新的API被添加。这些可能值得深入研究。
- en: Another possibility is to build upon the smart-house application that we have
    started on. We have put down some groundwork, but there are still a lot of opportunities.
    Perhaps you can work on improving what we have already got. Maybe you can see
    some opportunities to mix in other APIs, which we have covered.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能性是建立在我们在智能家居应用上开始的基础上。我们已经打下了一些基础，但还有很多机会。也许你可以改进我们已经拥有的东西。也许你能看到混合其他API的机会，我们之前已经介绍过。
- en: Reading through this book might have given you some ideas of your own. A great
    way forward would be to implement them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这本书可能会给你一些自己的想法。一个很好的前进方式是实施它们。
- en: As we have seen, there are many possible areas to use the APIs for. Only the
    imagination limits the usage.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，有许多可能的应用API的区域。只有想象力限制了使用。
- en: Perhaps this book has triggered a deeper interest in machine learning. Everything
    we have seen so far is machine learning. Even though it is more complex than just
    using APIs, it is certainly worth exploring further.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这本书激发了你对机器学习的更深层兴趣。我们迄今为止看到的一切都是机器学习。尽管它比仅仅使用API更复杂，但确实值得进一步探索。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With this chapter, we have completed our journey. We created a new intent for
    news retrieval. We learned how to deal with an action, triggered from this intent.
    Based on voice commands, we managed to fetch the latest news, for one topic, and
    have the smart-house application read it back to us. Next, we went on to see what
    kind of real-life applications are utilizing Microsoft Cognitive Services today.
    Finally, we concluded this chapter by looking at some natural next steps that
    you can take after completing this book.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一章，我们完成了我们的旅程。我们为新闻检索创建了一个新的意图。我们学习了如何处理从这个意图触发的动作。基于语音命令，我们成功地获取了一个主题的最新新闻，并让智能家居应用程序读给我们听。接下来，我们继续了解今天有哪些现实生活中的应用正在使用Microsoft
    Cognitive Services。最后，我们通过查看完成这本书后你可以采取的一些自然下一步来结束这一章。
