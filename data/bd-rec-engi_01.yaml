- en: Chapter 1. Introduction to Recommendation Engines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。推荐引擎简介
- en: How do we buy things? How do we make decisions in our day-to-day lives? We ask
    our friends or relatives for suggestions before making decisions. When it comes
    to making decisions online about buying products, we read reviews about the products
    from anonymous users, compare the products' specifications with other similar
    products and then we make our decisions to buy or not. In an online world, where
    information is growing at an exponential rate, looking for valid information will
    be a challenge. Buying the confidence of the user for the search results will
    be a much more challenging task. Recommender systems come to our rescue to provide
    relevant and required information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何购买东西？我们在日常生活中如何做出决策？在做出决策之前，我们会向朋友或亲戚寻求建议。当涉及到在线购买产品的决策时，我们会阅读匿名用户对产品的评论，比较产品的规格与其他类似产品，然后我们决定是否购买。在信息呈指数级增长的网络世界中，寻找有效信息将是一个挑战。赢得用户对搜索结果的信心将是一个更具挑战性的任务。推荐系统来帮助我们提供相关和所需的信息。
- en: The popularity of implementing recommendation engines comes as a result of their
    successful implementation by big players on the Internet. Some real-world examples
    include suggestions for products on Amazon, friends' suggestions on social applications
    such as Facebook, Twitter, and LinkedIn, video recommendations on YouTube, news
    recommendations on Google News, and so on. These successful implementations of
    recommendation engines have shown the way for other areas such as the travel,
    healthcare, and banking domains.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐引擎的实施流行起来，是由于互联网大玩家成功实施的结果。一些现实世界的例子包括亚马逊上的产品推荐、社交应用（如Facebook、Twitter和LinkedIn）上的朋友推荐、YouTube上的视频推荐、Google新闻上的新闻推荐等。这些推荐引擎的成功实施为其他领域如旅游、医疗保健和银行领域指明了道路。
- en: Recommendation engine definition
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐引擎定义
- en: Recommendation engines, a branch of information retrieval and artificial intelligence,
    are powerful tools and techniques to analyze huge volumes of data, especially
    product information and user information, and then provide relevant suggestions
    based on data-mining approaches.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐引擎，作为信息检索和人工智能的一个分支，是分析大量数据（尤其是产品信息和用户信息）的强大工具和技术，然后基于数据挖掘方法提供相关建议。
- en: In technical terms, a recommendation engine problem is *to develop a mathematical
    model or objective function which can predict how much a user will like an item*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术术语中，推荐引擎问题是要开发一个数学模型或目标函数，可以预测用户将喜欢某个物品的程度。
- en: 'If *U = {users}*, *I = {items}* then *F = Objective function* and measures
    the usefulness of item *I* to user *U*, given by:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *U = {用户}*，*I = {物品}*，则 *F = 目标函数*，它衡量物品 *I* 对用户 *U* 的有用性，由以下公式给出：
- en: '![Recommendation engine definition](img/image00202.jpeg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![推荐引擎定义](img/image00202.jpeg)'
- en: Where *R = {recommended items}*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *R = {推荐物品}*。
- en: 'For each user *u*, we want to choose the item *i* that maximizes the objective
    function:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个用户 *u*，我们希望选择能够最大化目标函数的物品 *i*：
- en: '![Recommendation engine definition](img/image00203.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![推荐引擎定义](img/image00203.jpeg)'
- en: 'The main goal of recommender systems is to provide relevant suggestions to
    online users to make better decisions from many alternatives available over the
    Web. A better recommender system is directed more toward personalized recommendations
    by taking into consideration the available digital footprint of the user, such
    as user-demographic information, transaction details, interaction logs, and information
    about a product, such as specifications, feedback from users, comparison with
    other products, and so on, before making recommendations:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统的主要目标是向在线用户提供相关建议，以便从网络上的众多替代方案中做出更好的决策。更好的推荐系统更倾向于个性化推荐，在做出推荐之前会考虑用户可用的数字足迹，例如用户人口统计信息、交易细节、交互日志以及有关产品的信息，如规格、用户反馈、与其他产品的比较等：
- en: '![Recommendation engine definition](img/image00204.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![推荐引擎定义](img/image00204.jpeg)'
- en: 'Pic credits: toptal'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：toptal
- en: 'Building a good recommendation engine poses challenges to both the actors of
    the system, namely, the consumers and sellers. From a consumer perspective, receiving
    relevant suggestions from a trusted source is critical for decision making. So
    the recommendation engine needs to build in such a way that it buys the confidence
    of the consumers. From a seller perspective, generating relevant recommendations
    to consumers at a personalized level is more important. With the rise of online
    sales, the big players are now collecting large volumes of transactional interaction
    logs of users to analyze the user behaviors more deeply than ever. Also, the need
    to recommend in real time is adding to the challenge. With advancements in technology
    and research, recommendation engines are evolving to overcome these challenges
    based on big-data analysis and artificial intelligence. The following diagram
    illustrates how organizations employ recommendation engines:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个好的推荐引擎对系统中的参与者，即消费者和卖家，都提出了挑战。从消费者的角度来看，从可信来源获得相关建议对于决策至关重要。因此，推荐引擎需要以这种方式构建，以便赢得消费者的信任。从卖家的角度来看，在个性化层面上向消费者生成相关推荐更为重要。随着在线销售的兴起，大玩家现在正在收集大量用户的交易交互日志，以比以往任何时候都更深入地分析用户行为。此外，实时推荐的需求也在增加挑战。随着技术和研究的进步，推荐引擎正在基于大数据分析和人工智能克服这些挑战。以下图表说明了组织如何使用推荐引擎：
- en: '![Recommendation engine definition](img/image00205.jpeg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![推荐引擎定义](img/image00205.jpeg)'
- en: Need for recommender systems
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对推荐系统的需求
- en: 'Given the complexity and challenges in building recommendation engines, a considerable
    amount of thought, skill, investment, and technology goes into building recommender
    systems. Are they worth such an investment? Let us look at some facts:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于构建推荐引擎的复杂性和挑战，构建推荐系统需要大量的思考、技能、投资和技术。这样的投资是否值得？让我们看看一些事实：
- en: Two-thirds of movies watched by Netflix customers are recommended movies
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix用户观看的电影中有三分之二是由推荐系统推荐的
- en: 38% of click-through rates on Google News are recommended links
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Google新闻上的点击率中有38%是推荐链接
- en: 35% of sales at Amazon arise from recommended products
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊35%的销售额来自推荐产品
- en: ChoiceStream claims that 28% of people would like to buy more music, if they
    find what they like
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ChoiceStream声称，如果人们找到他们喜欢的东西，28%的人愿意购买更多音乐
- en: Big data driving the recommender systems
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大数据推动推荐系统的发展
- en: Of late, recommender systems are successful in impacting our lives in many ways.
    One such obvious example of this impact is how our online shopping experience
    has been redefined. As we browse through e-commerce sites and purchase products,
    the underlying recommendation engines respond immediately, in real time, with
    various relevant suggestions to consumers. Regardless of the perspective, from
    business player or consumer, recommendation engines have been immensely beneficial.
    Without a doubt, big data is the driving force behind recommender systems. A good
    recommendation engine should be reliable, scalable, highly available, and be able
    to provide personalized recommendations, in real time, to the large user base
    it contains.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 近来，推荐系统在许多方面成功影响了我们的生活。这种影响的明显例子之一就是我们的在线购物体验被重新定义了。当我们浏览电子商务网站并购买产品时，底层的推荐引擎会立即、实时地向消费者提供各种相关的建议。无论从商业参与者还是消费者的角度来看，推荐引擎都带来了巨大的益处。毫无疑问，大数据是推荐系统背后的驱动力。一个好的推荐引擎应该是可靠的、可扩展的、高度可用的，并且能够为包含的大量用户提供实时、个性化的推荐。
- en: A typical recommendation system cannot do its job efficiently without sufficient
    data. The introduction of big data technology enabled companies to capture plenty
    of user data, such as past purchases, browsing history, and feedback information,
    and feed it to the recommendation engines to generate relevant and effective recommendations
    in real time. In short, even the most advanced recommender system cannot be effective
    without the supply of big data. The role of big data and improvements in technology,
    both on the software and hardware front, goes beyond just supplying massive data.
    It also provides meaningful, actionable data fast, and provides the necessary
    setup to quickly process the data in real time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的推荐系统如果没有足够的数据就无法高效地完成其工作。大数据技术的引入使得公司能够捕捉到大量的用户数据，例如过去的购买记录、浏览历史和反馈信息，并将这些数据输入到推荐引擎中，以实时生成相关和有效的推荐。简而言之，即使是最先进的推荐系统，如果没有大数据的供应也无法有效。大数据和技术改进的作用，无论是在软件还是硬件方面，都不仅仅是提供大量数据。它还快速提供有意义的、可操作的数据，并提供了快速处理实时数据的必要设置。
- en: 'Source: [http://www.kdnuggets.com/2015/10/big-data-recommendation-systems-change-lives.html](http://www.kdnuggets.com/2015/10/big-data-recommendation-systems-change-lives.html).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[http://www.kdnuggets.com/2015/10/big-data-recommendation-systems-change-lives.html](http://www.kdnuggets.com/2015/10/big-data-recommendation-systems-change-lives.html)。
- en: Types of recommender systems
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐系统类型
- en: Now that we have defined recommender systems, their objective, usefulness, and
    the driving force behind recommender systems, in this section, we introduce different
    types of popular recommender systems in use.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经定义了推荐系统，它们的客观性、有用性和推动推荐系统发展的动力，在本节中，我们将介绍不同类型的流行推荐系统。
- en: Collaborative filtering recommender systems
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协同过滤推荐系统
- en: Collaborative filtering recommender systems are basic forms of recommendation
    engines. In this type of recommendation engine, filtering items from a large set
    of alternatives is done collaboratively by users' preferences.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤推荐系统是推荐引擎的基本形式。在这种类型的推荐引擎中，通过用户的偏好协同地从大量替代品中过滤物品。
- en: The basic assumption in a collaborative filtering recommender system is that
    if two users shared the same interests as each other in the past, they will also
    have similar tastes in the future. If, for example, user A and user B have similar
    movie preferences, and user A recently watched *Titanic,* which user B has not
    yet seen, then the idea is to recommend this unseen new movie to user B. The movie
    recommendations on Netflix are one good example of this type of recommender system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在协同过滤推荐系统中，基本假设是：如果两个用户在过去有相同的兴趣，那么他们将来也会有相似品味。例如，如果用户A和用户B有相似的影片偏好，而用户A最近观看了用户B尚未看过的电影《泰坦尼克号》，那么推荐的思路就是向用户B推荐这部未见的新电影。Netflix上的电影推荐就是一个很好的这种推荐系统的例子。
- en: 'There are two types of collaborative filtering recommender systems:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤推荐系统有两种类型：
- en: '**User-based collaborative filtering**: In user-based collaborative filtering,
    recommendations are generated by considering the preferences in the user''s neighborhood.
    User-based collaborative filtering is done in two steps:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于用户的协同过滤**：在基于用户的协同过滤中，推荐是通过考虑用户邻域中的偏好来生成的。基于用户的协同过滤分为两个步骤：'
- en: Identify similar users based on similar user preferences
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据相似的用户偏好识别相似用户
- en: Recommend new items to an active user based on the rating given by similar users
    on the items not rated by the active user.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据相似用户对活跃用户未评价物品的评价，向活跃用户推荐新物品。
- en: '**Item-based collaborative filtering**: In item-based collaborative filtering,
    the recommendations are generated using the neighbourhood of items. Unlike user-based
    collaborative filtering, we first find similarities between items and then recommend
    non-rated items which are similar to the items the active user has rated in past.
    Item-based recommender systems are constructed in two steps:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于物品的协同过滤**：在基于物品的协同过滤中，推荐是通过使用物品的邻域来生成的。与基于用户的协同过滤不同，我们首先找到物品之间的相似性，然后推荐那些与活跃用户过去评价过的物品相似的未评价物品。基于物品的推荐系统分为两个步骤：'
- en: Calculate the item similarity based on the item preferences
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据物品偏好计算物品相似度
- en: Find the top similar items to the non-rated items by active user and recommend
    them
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过找到活跃用户未评价物品的最相似物品，并推荐它们
- en: We will learn in depth about these two forms of recommendations in [Chapter
    3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation Engines Explained"), *Recommendation
    Engines Explained*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第3章](part0022.xhtml#aid-KVCC1 "第3章。推荐引擎解释")*推荐引擎解释*中深入了解这两种推荐形式。
- en: 'While building collaborative filtering recommender systems, we will learn about
    the following aspects:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建协同过滤推荐系统时，我们将了解以下方面：
- en: How to calculate the similarity between users?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何计算用户之间的相似性？
- en: How to calculate the similarity between items?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何计算项目之间的相似性？
- en: How recommendations are generated?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐是如何生成的？
- en: How to deal with new items and new users whose data is not known?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理未知数据的新项目和用户？
- en: 'The advantage of collaborative filtering systems is that they are simple to
    implement and very accurate. However, they have their own set of limitations,
    such as the *Cold Start* problem, which means, collaborative filtering systems
    fails to recommend to the first-time users whose information is not available
    in the system:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤系统的优点是它们易于实现且非常准确。然而，它们也有自己的局限性，例如*冷启动*问题，这意味着协同过滤系统无法向系统内没有信息的首次用户推荐：
- en: '![Collaborative filtering recommender systems](img/image00206.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![协同过滤推荐系统](img/image00206.jpeg)'
- en: Content-based recommender systems
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于内容的推荐系统
- en: In collaborative filtering, we consider only user-item-preferences and build
    the recommender systems. Though this approach is accurate, it makes more sense
    if we consider user properties and item properties while building recommendation
    engines. Unlike in collaborative filtering, we use item properties and user preferences
    to the item properties while building content-based recommendation engines.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在协同过滤中，我们只考虑用户-项目-偏好，并构建推荐系统。尽管这种方法是准确的，但如果我们在构建推荐引擎时考虑用户属性和项目属性，则更有意义。与协同过滤不同，我们在构建基于内容的推荐引擎时使用项目属性和用户偏好来考虑项目属性。
- en: As the name indicates, a content-based recommender system uses the content information
    of the items for building the recommendation model. A content recommender system
    typically contains a user-profile-generation step, item-profile-generation step-
    and model-building step to generate recommendations for an active user. The content-based
    recommender system recommends items to users by taking the content or features
    of items and user profiles. As an example, if you have searched for videos of
    Lionel Messi on YouTube, then the content-based recommender system will learn
    your preference and recommend other videos related to Lionel Messi and other videos
    related to football.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，基于内容的推荐系统使用项目的相关内容信息来构建推荐模型。基于内容的推荐系统通常包含一个用户档案生成步骤、项目档案生成步骤和模型构建步骤，以生成活跃用户的推荐。基于内容的推荐系统通过考虑项目的相关内容或特征以及用户档案来向用户推荐项目。例如，如果你在YouTube上搜索过莱昂内尔·梅西的视频，那么基于内容的推荐系统将学习你的偏好，并推荐其他与莱昂内尔·梅西相关的视频以及其他与足球相关的视频。
- en: In simpler terms, the system recommends items similar to those that the user
    has liked in the past. The similarity of items is calculated based on the features
    associated with the other compared items and is matched with the user's historical
    preferences.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，系统推荐与用户过去喜欢的项目相似的项目。项目的相似性是基于与其他比较项目的相关特征计算的，并与用户的历史偏好相匹配。
- en: 'While building a content-based recommendation system, we take into consideration
    the following questions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建基于内容的推荐系统时，我们考虑以下问题：
- en: How do we choose content or features of the products?
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何选择产品的内容或特征？
- en: How do we create user profiles with preferences similar to that of the product
    content?
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何创建与产品内容偏好相似的用户档案？
- en: How do we create similarity between items based on their features?
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何根据其特征在项目之间创建相似性？
- en: How do we create and update user profiles continuously?
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何持续创建和更新用户档案？
- en: 'The preceding considerations will be explained in [Chapter 3](part0022.xhtml#aid-KVCC1
    "Chapter 3. Recommendation Engines Explained"), *Recommendation Engines Explained*.
    This technique doesn''t take into consideration the user''s neighborhood preferences.
    Hence, it doesn''t require a large user group''s preference for items for better
    recommendation accuracy. It only considers the user''s past preferences and the
    properties/features of the items. In [Chapter 3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation
    Engines Explained"), *Recommendation Engines Explained*, we will learn about this
    system in detail, and also its pros and cons:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的考虑将在[第3章](part0022.xhtml#aid-KVCC1 "第3章。推荐引擎解析")中解释，即*推荐引擎解析*。这种技术不考虑用户的邻域偏好。因此，它不需要大量用户对物品的偏好来提高推荐准确性。它只考虑用户的过去偏好和物品的属性/特征。在第3章中，即*推荐引擎解析*，我们将详细了解这个系统，以及它的优缺点：
- en: '![Content-based recommender systems](img/image00207.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![基于内容的推荐系统](img/image00207.jpeg)'
- en: Hybrid recommender systems
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合推荐系统
- en: This type of recommendation engine is built by combining various recommender
    systems to build a more robust system. By combining various recommender systems,
    we can replace the disadvantages of one system with the advantages of another
    system and thus build a more robust system. For example, by combining collaborative
    filtering methods, where the model fails when new items don't have ratings, with
    content-based systems, where feature information about the items is available,
    new items can be recommended more accurately and efficiently.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的推荐引擎是通过结合各种推荐系统来构建一个更健壮的系统。通过结合各种推荐系统，我们可以用另一个系统的优点来弥补一个系统的缺点，从而构建一个更健壮的系统。例如，通过结合协同过滤方法（当新物品没有评分时模型会失败）和基于内容的系统（其中包含有关物品的特征信息），可以更准确、更有效地推荐新物品。
- en: For example, if you are a frequent reader of news on Google News, the underlying
    recommendation engine recommends news articles to you by combining popular news
    articles read by people similar to you and using your personal preferences, calculated
    using your previous click information. With this type of recommendation system,
    collaborative filtering recommendations are combined with content-based recommendations
    before pushing recommendations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你是Google新闻的常读新闻读者，底层的推荐引擎会通过结合与你相似的人阅读的流行新闻文章以及使用你的个人偏好（通过你的先前点击信息计算得出）来向你推荐新闻文章。在这种类型的推荐系统中，在推送推荐之前，会结合协同过滤推荐和基于内容的推荐。
- en: 'Before building a hybrid model, we should consider the following questions:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建混合模型之前，我们应该考虑以下问题：
- en: What recommender techniques should be combined to achieve the business solution?
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该结合哪些推荐技术来实现业务解决方案？
- en: How should we combine various techniques and their results for better predictions?
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该如何结合各种技术和它们的结果以获得更好的预测？
- en: 'The advantage of hybrid recommendation engines is that this approach will increase
    the efficiency of recommendations compared to the individual recommendation techniques.
    This approach also suggests a good mix of recommendations to the users, both at
    the personalized level and at the neighborhood level. In [Chapter 3](part0022.xhtml#aid-KVCC1
    "Chapter 3. Recommendation Engines Explained"), *Recommendation Engines Explained*,
    we will learn more about hybrid recommendations:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 混合推荐引擎的优势在于，与单个推荐技术相比，这种方法将提高推荐的效率。这种方法还向用户推荐了良好的推荐组合，无论是在个性化层面还是在邻域层面。在第3章中，即*推荐引擎解析*，我们将了解更多关于混合推荐的内容：
- en: '![Hybrid recommender systems](img/image00208.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![混合推荐系统](img/image00208.jpeg)'
- en: Context-aware recommender systems
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文感知推荐系统
- en: 'Personalized recommender systems, such as content-based recommender systems,
    are inefficient; they fail to suggest recommendations with respect to context.
    For example, assume a lady is very fond of ice-cream. Also assume that this lady
    goes to a cold place. Now there is high chance that a personalized recommender
    system suggests a popular ice-cream brand. Now let us ask our self a question:
    is it the right thing to suggest an ice-cream to a person in a cold place? Rather,
    it makes sense to suggest a coffee. This type of recommendation, which is personalized
    and context-aware is called a context-aware recommender systems. In the preceding
    example, place is the context.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 个性化推荐系统，如基于内容的推荐系统，效率低下；它们未能根据上下文提出推荐。例如，假设一位女士非常喜欢冰淇淋。也假设这位女士去了一个寒冷的地方。现在有很大可能性，一个个性化的推荐系统会建议一个流行的冰淇淋品牌。现在让我们问自己一个问题：向一个在寒冷地方的人推荐冰淇淋是正确的事情吗？相反，建议一杯咖啡更有意义。这种既个性化又上下文感知的推荐称为上下文感知推荐系统。在上面的例子中，地点就是上下文。
- en: User preferences may differ with the context, such as time of day, season, mood,
    place, location, options offered by the system, and so on. A person at a different
    location at a different time with different people may need different things.
    A context-aware recommender system takes the context into account before computing
    or serving recommendations. This recommender system caters for the different needs
    of people differently in different contexts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用户偏好可能因上下文而异，例如一天中的时间、季节、心情、地点、系统提供的选项等等。在不同的地点、不同时间与不同的人在一起的人可能需要不同的东西。上下文感知推荐系统在计算或提供推荐之前会考虑上下文。这个推荐系统在不同的上下文中以不同的方式满足人们的不同需求。
- en: 'Before building a context-aware model, we should consider the following questions:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建上下文感知模型之前，我们应该考虑以下问题：
- en: How should we define the contexts to be used in the recommender system?
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该如何定义推荐系统中使用的上下文？
- en: What techniques should be used to build recommendations to achieve the business
    solution?
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该使用哪些技术来构建推荐以实现商业解决方案？
- en: How do we extract context the preferences of the users with respect to the products?
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何提取用户对产品的偏好上下文？
- en: What techniques should we use to combine the context preferences with user-profile
    preferences to generate recommendations?![Context-aware recommender systems](img/image00209.jpeg)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该使用哪些技术来结合上下文偏好与用户配置文件偏好以生成推荐？![上下文感知推荐系统](img/image00209.jpeg)
- en: The preceding image shows how different people, at different times and places,
    and with different company, need different dress recommendations.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图片展示了不同的人、在不同的时间和地点，以及与不同的公司，需要不同的着装推荐。
- en: Evolution of recommender systems with technology
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随着技术的进步，推荐系统的发展演变
- en: With the advancements in technology, research, and infrastructure, recommender
    systems have been evolving rapidly. Recommender systems are moving away from simple
    similarity-measure-based approaches, to machine-learning approaches, to very advanced
    approaches such as deep learning. From a business angle, both customers and organizations
    are looking toward more personalized recommendations to be catered for immediately.
    Building personalized recommenders to cater to the large user base and products,
    we need sophisticated systems, which can scale easily and respond fast. The following
    are the types of recommendations that can help solve this challenge.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术、研究和基础设施的进步，推荐系统正在迅速发展。推荐系统正从基于简单相似度测量的方法，转向机器学习方法，再到非常先进的深度学习等高级方法。从商业角度来看，客户和组织都在寻求更个性化的推荐，以满足即时需求。为了满足大量用户和产品，我们需要复杂的系统，这些系统能够轻松扩展并快速响应。以下是可以帮助解决这一挑战的推荐类型。
- en: Mahout for scalable recommender systems
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mahout用于可扩展的推荐系统
- en: As stated earlier, big data primarily drives recommender systems. The big-data
    platforms enabled researchers to access large datasets and analyze data at the
    individual level, paving paths for building personalized recommender systems.
    With increase in Internet usage and a constant supply of data, efficient recommenders
    not only require huge data, but also need infrastructure which can scale and have
    minimum downtime. To realize this, big-data technology such as the Apache Hadoop
    ecosystem provided the infrastructure and platform to supply large data. To build
    recommendation systems on this huge supply of data, **Mahout**, a machine-learning
    library built on the Hadoop platform enables us to build scalable recommender
    systems. Mahout provides infrastructure to build, evaluate, and tune the different
    types of recommendation-engine algorithms. Since Hadoop is designed for offline
    batch processing, we can build offline recommender systems, which are scalable.
    In [Chapter 9](part0063.xhtml#aid-1S2JE1 "Chapter 9. Building Scalable Recommendation
    Engines with Mahout"), *Building Scalable Recommendation Engines with Mahout*, we
    further see how to build scalable recommendation engines using Mahout.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，大数据主要推动推荐系统的发展。大数据平台使研究人员能够访问大量数据集并在个体层面进行分析，为构建个性化推荐系统铺平了道路。随着互联网使用的增加和数据的不间断供应，高效的推荐系统不仅需要大量数据，还需要能够扩展且具有最小停机时间的基础设施。为了实现这一点，像
    Apache Hadoop 生态系统这样的大数据技术提供了基础设施和平台，以提供大量数据。为了在这庞大的数据供应上构建推荐系统，**Mahout**，一个基于
    Hadoop 平台构建的机器学习库，使我们能够构建可扩展的推荐系统。Mahout 提供了构建、评估和调整不同类型的推荐算法的基础设施。由于 Hadoop 是为离线批处理设计的，我们可以构建可扩展的离线推荐系统。在[第
    9 章](part0063.xhtml#aid-1S2JE1 "第 9 章。使用 Mahout 构建可扩展的推荐引擎")《使用 Mahout 构建可扩展的推荐引擎》中，我们进一步了解了如何使用
    Mahout 构建可扩展的推荐引擎。
- en: 'The following figure displays how a scalable recommender system can be designed
    using Mahout:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了如何使用 Mahout 设计一个可扩展的推荐系统：
- en: '![Mahout for scalable recommender systems](img/image00210.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Mahout for scalable recommender systems](img/image00210.jpeg)'
- en: Apache Spark for scalable real-time recommender systems
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache Spark for scalable real-time recommender systems
- en: We have seen many times, on any of the e-commerce sites, the *You may also like*
    feature. This is a deceptively simple phrase that encapsulates a new era in customer
    relationship management delivered in real time. Business organizations started
    investing in such systems, which can generate recommendations personalized to
    the customers and can deliver them in real time. Building such a system will not
    only give good returns on investment but also, efficient systems will buy the
    confidence of the users. Building a scalable real-time recommender system will
    not only capture users' purchase history, product information, user preferences,
    and extract patterns and recommend products, but will also respond instantly based
    on user online interactions and multi-criteria search preferences.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在很多电商网站上多次看到，“你可能也喜欢”这一功能。这是一个表面上简单却蕴含着客户关系管理新时代的实时服务的新时代。商业组织开始投资这样的系统，这些系统能够根据客户个性化生成推荐，并能实时交付。构建这样的系统不仅能带来良好的投资回报，而且高效的系统还能赢得用户的信心。构建一个可扩展的实时推荐系统不仅需要捕捉用户的购买历史、产品信息、用户偏好，并提取模式和推荐产品，还需要根据用户的在线互动和多标准搜索偏好即时响应。
- en: This ability makes compelling suggestions requiring a new generation of technology.
    This technology has to consider large databases of users' previous purchasing
    history, their preferences, and online interaction information such as in-page
    navigation data and multi-criteria searches, and then analyzes all this information
    in real time and responds accurately according to the current and long-term needs
    of the users. In this book, we have considered in-memory and graph-based systems,
    which are capable of handling large-scale, real-time recommender systems.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这种能力使得提出令人信服的建议需要新一代的技术。这种技术必须考虑用户之前的购买历史、他们的偏好以及在线互动信息，如页面导航数据和多标准搜索，然后实时分析所有这些信息，并根据用户的当前和长期需求准确响应。在这本书中，我们考虑了内存和基于图系统，这些系统能够处理大规模、实时的推荐系统。
- en: 'Most popular recommendation engine collaborative filtering requires considering
    the entirety of users and product information while generating recommendations.
    Assume a scenario where we have 1 million user ratings on 10,000 products. In
    order to build a system to handle such heavy computations and respond online,
    we require a system that is big-data compatible and processes data in-memory.
    The key technology in enabling scalable, real-time recommendations is Apache Spark
    Streaming, a technology that leverages scalability of big data and generates recommendations
    in real time, and processes data in-memory:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的推荐引擎协同过滤在生成推荐时需要考虑用户和产品信息的全部。假设我们有一个场景，其中我们对10,000个产品有100万条用户评分。为了构建一个能够处理这种大量计算并在线响应的系统，我们需要一个与大数据兼容的系统，并在内存中处理数据。实现可扩展、实时推荐的关键技术是Apache
    Spark Streaming，这是一种利用大数据可扩展性的技术，可以实时生成推荐，并在内存中处理数据：
- en: '![Apache Spark for scalable real-time recommender systems](img/image00211.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Apache Spark用于可扩展的实时推荐系统](img/image00211.jpeg)'
- en: Neo4j for real-time graph-based recommender systems
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Neo4j用于实时基于图的推荐系统
- en: Graph databases have revolutionized the way people discover new products, information,
    and so on. In the human mind, we remember people, things, places, and so on, as
    graphs, relations, and networks. When we try to fetch information from these networks,
    we directly go to a required connection or graph and fetch information accurately.
    In a similar fashion, graph databases allow us to store user and product information
    in graphs as nodes and edges (relations). Searching in a graph database is fast.
    In recent times, recommender systems powered by graph databases have allowed organizations
    to build suggestions which are personalized and accurate in real time.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据库已经彻底改变了人们发现新产品、信息等方式。在人类大脑中，我们以图、关系和网络的形式记住人、事物、地点等。当我们尝试从这些网络中获取信息时，我们会直接前往所需的连接或图，并准确获取信息。以类似的方式，图数据库允许我们将用户和产品信息以节点和边（关系）的形式存储在图中。在图数据库中进行搜索速度快。近年来，由图数据库驱动的推荐系统使组织能够构建实时且个性化的建议。
- en: One of the key technologies enabling real-time recommendations using graph databases
    is Neo4j, a kind of NoSQL graph database that can easily outperform any other
    relational and NoSQL system in providing customer insights and product trends.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使使用图数据库进行实时推荐的关键技术之一是Neo4j，这是一种NoSQL图数据库，在提供客户洞察和产品趋势方面可以轻松超越任何其他关系型和非关系型系统。
- en: A NoSQL database, popularly known as *not only SQL*, provides a new way of storing
    and managing data other than in relational format that is row and columns such
    as columnar, graph, key-value pair store of data. This new way of storing and
    managing data enables us to build scalable and real-time systems.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一种名为“不仅SQL”的NoSQL数据库，提供了一种不同于关系格式（如行和列）的新方式来存储和管理数据，例如列式、图、键值对存储的数据。这种新的存储和管理数据方式使我们能够构建可扩展的实时系统。
- en: A graph database mainly consists of nodes and edges, wherein nodes represent
    the entities and edges the relations between them. The edges are directed lines
    or arrows that connect the nodes. In the preceding image, the circles are the
    nodes, which represent the entities, and the lines connecting the nodes are called
    edges, which represent relationships. The orientation of arrows follows the flow
    of information. By presenting all nodes and links of the graph, it helps users
    to have a global view of the structure.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据库主要由节点和边组成，其中节点代表实体，边代表它们之间的关系。边是连接节点的有向线或箭头。在前面的图像中，圆圈是节点，代表实体，连接节点的线条称为边，代表关系。箭头的方向遵循信息流。通过展示图中的所有节点和链接，它帮助用户对结构有一个全局的视角。
- en: The following image shows user-movie-rating information representation in graph
    form. Green and red circles indicate nodes representing users and movies, respectively.
    The ratings given by users to movies are represented as edges showing the relationship
    between users and movies. Each node and relation may contain properties to store
    further details of the data.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像展示了用户电影评分信息的图形表示。绿色和红色圆圈分别表示代表用户和电影的节点。用户对电影的评分以显示用户和电影之间关系的边来表示。每个节点和关系都可能包含属性以存储数据的更多详细信息。
- en: 'On this graph representation, we apply concepts of graph theory to generate
    recommendations in real time, as the retrieval and searching is very fast. In
    [Chapter 8](part0057.xhtml#aid-1MBG21 "Chapter 8.  Building Real-Time Recommendations
    with Neo4j"), *Building Real Time Recommendation Engines with Neo4j*, we deal
    with building real-time recommendation engines using Neo4j:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表示中，我们应用图论的概念来实时生成推荐，因为检索和搜索非常快。在[第8章](part0057.xhtml#aid-1MBG21 "第8章。使用Neo4j构建实时推荐引擎")，《使用Neo4j构建实时推荐引擎》中，我们处理了使用Neo4j构建实时推荐引擎的问题：
- en: '![Neo4j for real-time graph-based recommender systems](img/image00212.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![Neo4j用于实时基于图的推荐系统](img/image00212.jpeg)'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we got introduced to various types of popular recommendation
    engines such as collaborative filtering, content-based recommendation engines,
    hybrid recommenders, context-aware systems, scalable recommenders, and graph-based,
    real-time recommenders.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了各种流行的推荐引擎类型，如协同过滤、基于内容的推荐引擎、混合推荐器、上下文感知系统、可扩展推荐器和基于图、实时推荐器。
- en: We also learned how big data is fuelling the rise of recommendation engines
    and some real-world use-cases employed by major IT giants. In [Chapter 3](part0022.xhtml#aid-KVCC1
    "Chapter 3. Recommendation Engines Explained"), *Recommendation Engines Explained*,
    we will learn more about these recommendations in detail. In [Chapter 2](part0020.xhtml#aid-J2B82
    "Chapter 2. Build Your First Recommendation Engine"), *Build Your First Recommendation
    Engine*, we learn how to build a basic recommendation engine using R.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了大数据如何推动推荐引擎的兴起以及一些主要IT巨头所采用的某些真实世界用例。在[第3章](part0022.xhtml#aid-KVCC1 "第3章。推荐引擎详解")，《推荐引擎详解》中，我们将更详细地了解这些推荐。在[第2章](part0020.xhtml#aid-J2B82
    "第2章。构建你的第一个推荐引擎")，《构建你的第一个推荐引擎》中，我们学习了如何使用R构建基本的推荐引擎。
