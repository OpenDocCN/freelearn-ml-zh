- en: Hybrid Recommenders
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合推荐系统
- en: In this final chapter, we will discuss recommender systems in the context of
    practicality and industrial use. Until now, we have learned about various types
    of recommender, including knowledge, content, and collaborative filtering-based
    engines. However, when used in practice, each recommender usually suffers from
    one shortcoming or another.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将讨论推荐系统在实践和工业使用中的应用。到目前为止，我们已经学习了各种类型的推荐系统，包括基于知识、基于内容和基于协作过滤的引擎。然而，在实际应用中，每个推荐系统通常都会遇到一种或另一种缺点。
- en: 'We''ve discussed these shortcomings in the very first chapter (for instance,
    the novelty problem of content-based engines and the cold start problem of collaborative
    filters). We also briefly introduced the concept of the hybrid recommender: a
    robust system that combines various models to combat the disadvantage of one model
    with the advantage of another. In this chapter, we will build a simple hybrid
    recommender that combines the content and the collaborative filters that we''ve
    built thus far.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一章中讨论了这些缺点（例如，基于内容的引擎的创新性问题和协作过滤的冷启动问题）。我们还简要介绍了混合推荐系统的概念：一种强大的系统，通过结合不同的模型来利用一个模型的优势，弥补另一个模型的不足。在这一章中，我们将构建一个简单的混合推荐系统，结合我们至今构建的基于内容和协作过滤的模型。
- en: Technical requirements
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have Python installed on a system. Finally, to use the
    Git repository of this book, the user needs to install Git.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在系统上安装Python。最后，为了使用本书的Git代码库，用户需要安装Git。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)。'
- en: 'Check out the following video to see the code in action:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下视频，查看代码如何运行：
- en: '[http://bit.ly/2uOHwcd](http://bit.ly/2uOHwcd)[.](http://bit.ly/2uOHwcd)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2uOHwcd](http://bit.ly/2uOHwcd)[.](http://bit.ly/2uOHwcd)'
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: As already mentioned a couple of times, hybrid recommenders are extremely powerful,
    robust systems that combine various simpler models to give us predictions. There
    is no single way in which a hybrid model could do this; some hybrids predict using
    content and collaborative filtering techniques separately to produce results.
    Some others introduce content-based techniques into collaborative filters and
    vice versa.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，混合推荐系统是非常强大、稳健的系统，它通过结合各种简单模型来给出预测。没有一种单一的方式能让混合模型做到这一点；有些混合推荐系统通过分别使用内容和协作过滤技术来产生结果。另一些则是将基于内容的技术引入协作过滤器，反之亦然。
- en: 'Netflix is a very good example of a hybrid recommender. Netflix employs content-based
    techniques when it shows you similar movies to a movie you''re watching (the MORE
    LIKE THIS section), as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix是一个非常好的混合推荐系统的例子。Netflix在向你推荐与正在观看的电影相似的电影时，采用基于内容的技术（例如“MORE LIKE THIS”部分），如下图所示：
- en: '![](img/04d435e9-dd63-48ba-ad20-a9897c2d2cb8.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04d435e9-dd63-48ba-ad20-a9897c2d2cb8.png)'
- en: Here, we can see that while watching *Ratatouille, *Netflix recommends movies
    to me that are very similar to *Ratatouille*. All the top five recommended movies
    are all animated and produced by Disney Pixar*.*
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到，当我观看*料理鼠王*时，Netflix会向我推荐与*料理鼠王*非常相似的电影。所有推荐的前五部电影都是动画片，并且由*迪士尼皮克斯*制作。
- en: 'However, animated movies are not the only genre I watch on Netflix. I also
    like watching drama and comedy. Netflix has a separate row of recommendations
    for me entitled Top Picks for Rounak*, *where it uses collaborative filtering
    to identify users similar to me and recommend movies that they have liked, but
    that I haven''t watched:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，动画电影并不是我在Netflix上观看的唯一类型。我也喜欢观看剧情片和喜剧片。Netflix为我提供了一列名为*Rounak的精选推荐*的独立推荐行，在这里它使用协作过滤来识别与我相似的用户，并推荐他们喜欢的我还没看过的电影：
- en: '![](img/230d060c-e096-41bd-9f01-26053402507b.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/230d060c-e096-41bd-9f01-26053402507b.png)'
- en: In this way, Netflix employs both content- and collaborative-based techniques
    separately to produce results that are extremely satisfactory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，Netflix分别采用基于内容和基于协作的技术，取得了非常令人满意的结果。
- en: Case study – Building a hybrid model
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究 – 构建混合模型
- en: In this section, let's build a content-based model that incorporates some collaborative
    filtering techniques into it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们构建一个基于内容的模型，并将一些协作过滤技术融入其中。
- en: Imagine that you have built a website like Netflix. Every time a user watches
    a movie, you want to display a list of recommendations in the side pane (like
    YouTube). At first glance, a content-based recommender seems appropriate for this
    task. This is because, if the person is currently watching something they find
    interesting, they will be more inclined to watch something similar to it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经建立了一个像 Netflix 这样的电影网站。每次用户观看电影时，你希望在侧边栏显示一份推荐列表（就像 YouTube 一样）。乍一看，基于内容的推荐系统似乎适合这个任务。这是因为，如果用户当前观看的是他们觉得有趣的内容，他们会更倾向于观看类似的电影。
- en: Let's say our user is watching *The Dark Knight. *Since this is a Batman movie,
    our content-based recommender is likely to recommend other Batman (or superhero)
    movies regardless of quality. This may not always lead to the best recommendations.
    For instance, most people who like *The Dark Knight *do not rate *Batman and Robin *very
    highly, although they feature the same lead character. Therefore, we will introduce
    a collaborative filter here that predicts the ratings of the movies recommended
    by our content-based model and return the top few movies with the highest predictions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的用户正在观看 *黑暗骑士*。由于这是一部蝙蝠侠电影，我们的基于内容的推荐系统很可能会推荐其他蝙蝠侠（或超级英雄）电影，不考虑其质量。然而，这并不总是能带来最佳的推荐。例如，大多数喜欢
    *黑暗骑士* 的人并不会给 *蝙蝠侠与罗宾* 评分很高，尽管这两部电影有相同的主角。因此，我们将在此引入协同过滤，它将预测我们基于内容的推荐模型推荐的电影的评分，并返回评分预测最高的几部电影。
- en: 'In other words, the workflow of our hybrid model will be as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们的混合模型的工作流程将如下：
- en: Take in a movie title and user as input
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入电影标题和用户信息
- en: Use a content-based model to compute the 25 most similar movies
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用基于内容的模型计算 25 部最相似的电影
- en: Compute the predicted ratings that the user might give these 25 movies using
    a collaborative filter
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用协同过滤计算用户可能给这 25 部电影的预测评分
- en: Return the top 10 movies with the highest predicted rating
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回预测评分最高的前 10 部电影
- en: We will be using different datasets for this task. Go ahead and download the
    datasets from the following links.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用不同的数据集来完成这个任务。请继续从以下链接下载数据集。
- en: 'Download the following datasets from Kaggle and Google Drive:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Kaggle 和 Google Drive 下载以下数据集：
- en: '`ratings_small.csv`: [https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/ratings_small.csv/7](https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/ratings_small.csv/7).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ratings_small.csv`：[https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/ratings_small.csv/7](https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/ratings_small.csv/7)。'
- en: '`movie_ids.csv`: [https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing](https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`movie_ids.csv`：[https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing](https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing)。'
- en: The `ratings_small.csv` file contains 100,000 ratings for 9,000 movies from
    700 users. We use this file since it contains ratings for more recent movies (the
    dataset we used for collaborative filtering only contained movies released before
    1998).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`ratings_small.csv` 文件包含来自 700 名用户对 9,000 部电影的 100,000 条评分。我们使用这个文件，因为它包含了对更新电影的评分（而我们用于协同过滤的数据集只包含
    1998 年之前上映的电影）。'
- en: The` links_small.csv`file contains the movie IDs of all the movies rated in
    the` ratings_small.csv`file and their corresponding titles. We can use these IDs
    to extract relevant metadata from the `movies_metadata.csv`file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`links_small.csv` 文件包含了 `ratings_small.csv` 文件中所有电影的电影 ID 和对应的标题。我们可以使用这些 ID
    从 `movies_metadata.csv` 文件中提取相关的元数据。'
- en: With these files in hand, let's proceed to build our model. The first step is
    to compute the `cosine_sim`matrix for our movies. In addition, we also need to
    map every movie to the indices in the `cosine_sim`matrix. We've already learned
    how to do this in [Chapter 3](336e10ee-05f9-46e4-9b65-26b0a9cff2dc.xhtml), *Building
    an IMDB Top 250 Clone with Pandas*. Computing this matrix and the mapping, therefore,
    is left as an exercise for the reader.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 拿到这些文件后，接下来我们将构建我们的模型。第一步是计算我们电影的 `cosine_sim` 矩阵。此外，我们还需要将每部电影映射到 `cosine_sim`
    矩阵中的索引。我们已经在 [第 3 章](336e10ee-05f9-46e4-9b65-26b0a9cff2dc.xhtml)《使用 Pandas 构建
    IMDB Top 250 克隆》中学习了如何做到这一点。因此，计算这个矩阵和映射的任务留给读者完成。
- en: 'You can download my `cosine_sim `and` cosine_sim_map`files from the following
    link:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从以下链接下载我的`cosine_sim`和`cosine_sim_map`文件：
- en: '[https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing](https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing).
    However, be aware that the `cosine_sim`file is over 1 GB in size, and therefore
    might take some time to download.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing](https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing)。不过，请注意，`cosine_sim`文件大小超过1GB，因此下载可能需要一些时间。'
- en: 'Next, let''s use the `ratings.csv`file to build a collaborative filtering model.
    We will use the SVD model from the last chapter for this purpose:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用`ratings.csv`文件构建一个协同过滤模型。我们将使用上一章中的SVD模型来实现：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, let''s load the `movie_ids.cs``v` file into a DataFrame and construct
    two mappings: one that returns the movie title for a given movie ID, and the other
    vice versa:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将`movie_ids.csv`文件加载到DataFrame中，并构建两个映射：一个根据电影ID返回电影标题，另一个则相反：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, let's import the metadata for our movies so that our recommender can display
    useful information, such as the IMDB rating and the year of release. This information
    can be extracted from the main `movies_metadata.csv `file, and is again left as
    an exercise for the reader.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们导入电影的元数据，以便推荐系统能够显示有用的信息，例如IMDB评分和上映年份。这些信息可以从主`movies_metadata.csv`文件中提取，具体操作留给读者自行完成。
- en: 'You can download the required metadata file from the following link: [https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing](https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从以下链接下载所需的元数据文件：[https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing](https://drive.google.com/drive/folders/1H9pnfVTzP46s7VwOTcC5ZY_VahRTr5Zv?usp=sharing)
- en: 'We''re finally in a position to build the hybrid recommender function according
    to the workflow described previously:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于可以根据之前描述的工作流程构建混合推荐函数了：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's put our hybrid model to the test. Let's imagine that users with the IDs
    1 and 2 are both watching the movie *Avatar:*
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下混合模型。假设ID为1和2的两个用户都在观看*Avatar*：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/b514f6a5-92ae-4cf5-96eb-2eb95cb05659.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b514f6a5-92ae-4cf5-96eb-2eb95cb05659.png)'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/339539a5-61d0-43a8-8009-c42bdae49308.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/339539a5-61d0-43a8-8009-c42bdae49308.png)'
- en: We can see that although both users are currently watching *Avatar, *the recommendations
    differ in the content as well as the order. This is influenced by the collaborative
    filter. However, all the movies listed are similarto  *Avatar. *This is because
    of the content-based filtering carried out by the model.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，尽管两个用户当前都在观看*Avatar*，但推荐内容和顺序有所不同。这是由协同过滤算法影响的。然而，所有列出的电影都与*Avatar*相似。这是因为模型进行了基于内容的过滤。
- en: Following this section may have been a little hard, especially if you do not
    recall the material covered in [Chapter 3](https://cdp.packtpub.com/hands_on_recommendation_systems_with_python/wp-admin/post.php?post=30&action=edit#post_26), *Building
    an IMDB Top 250 Clone with Pandas*. I strongly recommend going back and rereading
    the chapter if something doesn't make sense. For reference, the entire code for
    this model can be found in the `Chapter7 `folder of the `RecoSys`repository.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随这一部分可能有点困难，特别是如果你记不清[第3章](https://cdp.packtpub.com/hands_on_recommendation_systems_with_python/wp-admin/post.php?post=30&action=edit#post_26)的内容——*使用Pandas构建IMDB前250名克隆*。如果某些部分不太理解，我强烈建议你回头重读这一章。作为参考，该模型的完整代码可以在`RecoSys`库的`Chapter7`文件夹中找到。
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'With this, we come to the end of this chapter, as well as the main part of
    the book. In this book, we learned the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们完成了本章的内容，也是本书的主要部分。在本书中，我们学习了以下内容：
- en: We were introduced to the world of recommender systems. We defined the recommendation
    problem mathematically and discussed the various types of recommendation engines
    that exist, as well as their advantages and disadvantages.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们进入了推荐系统的世界。我们从数学上定义了推荐问题，并讨论了现有的各种推荐引擎类型，以及它们的优缺点。
- en: 'We then learned to perform data wrangling with the pandas library and familiarized
    ourselves with two of pandas, most powerful data structures: the series and the
    DataFrame.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随后，我们学习了如何使用pandas库进行数据整理，并熟悉了pandas中最强大的两种数据结构：系列（Series）和数据框（DataFrame）。
- en: With our newly found data wrangling techniques, we proceeded to build an IMDB
    Top 250 clone. We then improved on this model to build a knowledge-based recommender
    that took into account the recommended movies' genre, duration, and year of release.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在掌握了数据清理技术后，我们开始构建 IMDB Top 250 克隆版。接着，我们在此基础上进行了改进，构建了一个基于知识的推荐系统，该系统考虑了推荐电影的类型、时长和上映年份。
- en: Next, we learned how to build content-based recommenders using plot lines and
    subsequently more sophisticated metadata, such as the genre, cast, crew, and keywords.
    In the process, we familiarized ourselves with vectorizers and the cosine similarity
    metric.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们学习了如何使用情节线来构建基于内容的推荐系统，并随后使用更复杂的元数据（如类型、演员、制作团队和关键词）。在这个过程中，我们熟悉了向量化工具和余弦相似度度量。
- en: In the chapter on data mining, we were introduced to the various techniques
    used in building and improving recommendation systems. We learned about similarity
    metrics other than the cosine score. We then proceeded to study clustering, with
    an emphasis on k-means clustering techniques. This was followed by discussions
    on dimensionality reduction (with an emphasis on PCA) and the various supervised
    learning techniques. The chapter concluded with a tour of evaluation metrics that
    are used to gauge the performance of recommender systems.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据挖掘章节中，我们介绍了构建和改进推荐系统的各种技术。我们学习了除余弦相似度外的其他相似度度量。接着我们研究了聚类，重点介绍了 k-means 聚类技术。随后，我们讨论了降维（重点讲解了
    PCA）以及各种监督学习技术。最后，章节以评估指标的介绍结束，这些指标用于衡量推荐系统的性能。
- en: The chapter on collaborative filtering had us experimenting with a variety of
    models that used rating data, and also leveraged data mining techniques introduced
    in the previous chapter. We were also introduced to the `surprise` library, which
    made building recommender systems a breeze.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在协同过滤章节中，我们实验了多种基于评分数据的模型，并借用了上一章介绍的数据挖掘技术。我们还了解了`surprise`库，它使得构建推荐系统变得轻松愉快。
- en: In this final chapter, we briefly discussed the various kinds of hybrid recommender
    used in the industry today and built a model that incorporated collaborative filtering
    into a content-based engine to offer personalized recommendations to a user, while
    keeping the current movie being watched in mind.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章的最后，我们简要讨论了如今行业中使用的各种混合推荐系统，并构建了一个将协同过滤技术融入内容引擎的模型，为用户提供个性化推荐，同时考虑到当前正在观看的电影。
- en: What we have covered, of course, only touches the surface of the world of recommender
    systems. However, I am positive that readers will now be in a very good place
    to tackle advanced topics in the field. I have listed a few resources in the `Appendix`
    that could serve as a next stop on your journey to becoming a recommendations
    master.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们所讲解的内容仅仅触及了推荐系统领域的表面。然而，我相信读者们现在已经掌握了足够的知识，能够应对该领域的高级话题。我在`附录`中列出了一些资源，作为你成为推荐系统大师之路的下一站。
- en: As mentioned earlier, all the code written as part of this book is available
    as a GitHub repository to enable you to effortlessly tinker and experiment with
    the code as you journey through this book. I'd like to thank you all for having
    come this far. If you have any comments, corrections, criticism, or suggestions,
    feel free to contact me at `rounakbanik@gmail.com`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本书中的所有代码都作为 GitHub 仓库提供，方便你在阅读过程中轻松地修改和实验代码。感谢大家一路走到这里。如果你有任何意见、修正、批评或建议，请随时通过`rounakbanik@gmail.com`与我联系。
