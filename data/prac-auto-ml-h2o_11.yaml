- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Working with Model Object, Optimized (MOJO)
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与模型对象，优化（MOJO）一起工作
- en: As we learned in [*Chapter 10*](B17298_10.xhtml#_idTextAnchor196), *Working
    with Plain Old Java Objects (POJOs)*, when working with production systems, we
    need portable software that we can easily deploy to our production servers. It
    is especially important in **Machine Learning** (**ML**) services that ML models
    be portable and self-sufficient. This helps engineers deploy new models regularly
    without worrying about breaking their systems in production because of any dependency
    issues.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[*第10章*](B17298_10.xhtml#_idTextAnchor196)中学习的，*与普通Java对象（POJOs）一起工作*，当与生产系统一起工作时，我们需要易于部署到我们生产服务器的可移植软件。在**机器学习**（**ML**）服务中，ML模型的可移植性和自给自足性尤为重要。这有助于工程师定期部署新模型，而无需担心由于任何依赖性问题而破坏他们的生产系统。
- en: H2O’s model POJOs were a good solution to this problem. Model POJOs are H2O
    models that can be extracted in the form of Java POJOs that you can directly run
    using `h2o-genmodel.jar`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: H2O的模型POJOs是解决这个问题的良好方案。模型POJOs是H2O模型，可以以Java POJOs的形式提取，您可以直接使用`h2o-genmodel.jar`运行它们。
- en: However, model POJOs have certain drawbacks that prevent them from being the
    best solution to all these problems. When it comes to the portability of software
    packages, including POJOs, the smaller the object, the faster it is to deploy
    it. POJOs have an inherent limit on the size of the source files, which is up
    to 1 GB. Thus, models larger than 1 GB cannot be extracted as POJOs and at the
    same time, large models can be slow to deploy and perform.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，模型POJOs存在一些缺点，这阻碍了它们成为解决所有这些问题的最佳方案。当涉及到包括POJOs在内的软件包的可移植性时，对象越小，部署它就越快。POJOs在源文件大小上有一个固有的限制，最大为1
    GB。因此，大于1 GB的大型模型不能被提取为POJOs，同时，大型模型的部署和性能可能会较慢。
- en: That is why the team at H2O.ai created an alternative to POJOs called **Model
    Object, Optimized** (**MOJO**). MOJOs are low-latency, self-sufficient, and standalone
    objects that can be easily deployed in production. They are smaller and faster
    counterparts to POJOs and are as easy to extract and use as POJOs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，H2O.ai团队创建了一个名为**模型对象，优化**（**MOJO**）的POJOs的替代方案。MOJOs是低延迟、自给自足且独立的对象，可以轻松部署到生产环境中。它们是比POJOs更小、更快的替代品，并且与POJOs一样易于提取和使用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding what a MOJO is
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解什么是MOJO
- en: Extracting H2O models as MOJOs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将H2O模型提取为MOJOs
- en: Viewing model MOJOs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看模型MOJOs
- en: Using H2O AutoML model MOJOs to make predictions
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用H2O AutoML模型MOJOs进行预测
- en: By the end of this chapter, you will be able to understand the difference between
    POJOs and MOJOs, extract trained models in the form of MOJOs using Python, R,
    or H2O Flow, and then use those MOJO models to load your ML program to make predictions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够理解POJOs和MOJOs之间的区别，使用Python、R或H2O Flow以MOJOs的形式提取训练模型，然后使用这些MOJO模型将您的ML程序加载以进行预测。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you will need the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要以下内容：
- en: The latest version of your preferred web browser
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您首选网络浏览器的最新版本
- en: An **Integrated Development Environment** (**IDE**) of your choice
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您选择的**集成开发环境**（**IDE**）
- en: (Optional) Jupyter Notebook by Project Jupyter ([https://jupyter.org/](https://jupyter.org/))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）Project Jupyter的Jupyter Notebook ([https://jupyter.org/](https://jupyter.org/))
- en: All the experiments conducted in this chapter are performed on a Terminal. You
    are free to follow along using the same setup or perform the same experiments
    using any IDE of your choice. All code examples for this chapter can be found
    on GitHub at [https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%2011](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%2011).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中进行的所有实验都是在终端上进行的。您可以选择使用相同的设置来跟进，或者使用您选择的任何IDE执行相同的实验。本章的所有代码示例都可以在GitHub上找到：[https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%2011](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%2011)。
- en: Understanding what a MOJO is
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解什么是MOJO
- en: '**MOJOs** are counterparts to H2O model POJOs and technically work in the same
    way. H2O can build and extract models trained in the form of MOJOs, and you can
    use the extracted MOJOs to deploy and make predictions on inbound data.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**MOJOs**是H2O模型POJOs的对立面，在技术上以相同的方式工作。H2O可以构建和提取以MOJOs形式训练的模型，您可以使用提取的MOJOs来部署并对传入数据进行预测。'
- en: So, what makes MOJOs different from POJOs?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，是什么让MOJOs与POJOs不同？
- en: 'POJOs have certain drawbacks that make them slightly less than ideal to use
    in a production environment, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: POJOs 存在某些缺点，使得它们在生产环境中使用略逊于理想，如下所示：
- en: POJOs are not supported for source files larger than 1 GB, so any models with
    a size larger than 1 GB cannot be compiled to POJOs.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大于 1 GB 的源文件，不支持 POJOs，因此任何大于 1 GB 的模型都不能编译为 POJOs。
- en: POJOs do not support stacked ensemble models or Word2Vec models.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POJOs 不支持堆叠集成模型或 Word2Vec 模型。
- en: 'MOJOs, on the other hand, have the following additional benefits:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，MOJOs 具有以下额外的好处：
- en: MOJOs have no size restrictions
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MOJOs 没有尺寸限制
- en: MOJOs solve the large size issue by removing the ML tree and using a generic
    tree walking algorithm to navigate the model computationally
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MOJOs 通过移除 ML 树并使用通用的树遍历算法来导航模型，从而解决了大型尺寸问题。
- en: MOJOs are smaller in size and faster than POJOs
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MOJOs 的尺寸比 POJOs 小，且速度更快
- en: MOJOs support all types of models trained using H2O AutoML
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MOJOs 支持使用 H2O AutoML 训练的所有类型的模型
- en: As per H2O’s in-house experiments and testing, as stated at https://docs.h2o.ai/h2o/latest-stable/h2o-docs/productionizing.xhtml#benefits-of-mojos-over-pojos,
    it was noticed that MOJO models are roughly 20-25 times smaller in disk space
    than the respective POJO models. MOJOs were also twice as fast as POJOs when **hot
    scoring**, which is when scoring is done after the JVM has been able to optimize
    the execution paths. During **cold scoring**, which is when scoring is done before
    the JVM has optimized the execution path, MOJOs showed around 10-40 times faster
    execution compared to POJOs. MOJOs are more efficient compared to POJOs as the
    size of the model increases.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 H2O 的内部实验和测试，如 https://docs.h2o.ai/h2o/latest-stable/h2o-docs/productionizing.xhtml#benefits-of-mojos-over-pojos
    中所述，注意到 MOJO 模型在磁盘空间上大约比相应的 POJO 模型小 20-25 倍。在**热评分**时，即 JVM 能够优化执行路径之后进行评分时，MOJOs
    比 POJOs 快两倍。在**冷评分**时，即 JVM 优化执行路径之前进行评分时，MOJOs 比 POJOs 快约 10-40 倍。随着模型尺寸的增加，MOJOs
    比POJOs更高效。
- en: H2O’s in-house testing also showed that when tested with 5,000 trees with a
    depth of 25, POJOs performed better when running binomial classification on very
    small trees of around 50 with 5 depths, but MOJOs performed better for multinomial
    classification.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: H2O 的内部测试也显示，当使用 5,000 个深度为 25 的树进行测试时，在运行深度约为 50 且深度为 5 的小树上的二项式分类时，POJOs 的表现更好，但
    MOJOs 在多项式分类中表现更佳。
- en: Now that we know what MOJOs are, as well as their benefits, let’s see how we
    can extract models trained using H2O’s AutoML as MOJOs using simple examples.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 MOJOs 以及它们的优点，让我们看看如何使用简单的示例提取使用 H2O 的 AutoML 训练的模型作为 MOJOs。
- en: Extracting H2O models as MOJOs
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 H2O 模型提取为 MOJOs
- en: Just like POJOs, you can extract models trained using H2O’s AutoML using any
    of the H2O-supported languages.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 POJOs 一样，您可以使用任何 H2O 支持的语言提取使用 H2O 的 AutoML 训练的模型。
- en: In the following sub-sections, we shall learn how to extract the model MOJOs
    using the Python and R programming languages, as well as see how we can extract
    model MOJOs using H2O Flow.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下子节中，我们将学习如何使用 Python 和 R 编程语言提取模型 MOJOs，以及如何使用 H2O Flow 提取模型 MOJOs。
- en: Extracting H2O models as MOJOs in Python
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Python 中将 H2O 模型提取为 MOJOs
- en: Let’s see how we can extract models as MOJOs using Python. We shall use the
    same **Iris flower dataset** for running AutoML.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 Python 提取模型为 MOJOs。我们将使用相同的**鸢尾花数据集**来运行 AutoML。
- en: 'Follow these steps to train models using H2O AutoML. Then, we shall extract
    the leader model and download it as a MOJO:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 H2O AutoML 训练模型。然后，我们将提取领先模型并将其作为 MOJO 下载：
- en: 'Import the `h2o` module and spin up your H2O server:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `h2o` 模块并启动 H2O 服务器：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Import the Iris dataset by passing the appropriate location of the dataset
    in your system. Execute the following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在系统中传递数据集的适当位置导入 Iris 数据集。执行以下命令：
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Set the feature and label names by executing the following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令设置特征和标签名称：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Initialize the H2O AutoML object by setting the value of the `max_model` parameter
    to `10` and the `seed` value to `5` by executing the following commands:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令，通过将 `max_model` 参数的值设置为 `10` 和将 `seed` 值设置为 `5` 来初始化 H2O AutoML 对象：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Start the AutoML process by passing the training dataset, the feature columns,
    and the label column as parameters, as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递训练数据集、特征列和标签列作为参数来启动 AutoML 过程，如下所示：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once training has finished, you can view the AutoML leaderboard by executing
    the following command:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦训练完成，您可以通过执行以下命令来查看 AutoML 排行榜：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You should get the following leaderboard:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下排行榜：
- en: '![Figure 11.1 – AutoML leaderboard for extracting MOJOs ](img/B17298_11_001.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 提取 MOJO 的 AutoML 排行榜](img/B17298_11_001.jpg)'
- en: Figure 11.1 – AutoML leaderboard for extracting MOJOs
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 提取 MOJO 的 AutoML 排行榜
- en: 'You can use `aml.leader` to get the leader model of the AutoML training. All
    models have an inbuilt function, `download_mojo()`, that extracts and downloads
    the model MOJO file:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用 `aml.leader` 获取 AutoML 训练的领先模型。所有模型都有一个内置函数，`download_mojo()`，用于提取和下载模型
    MOJO 文件：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This should download the model MOJO to your device. You can also download a
    specific model from the leaderboard using `model_id`. Let’s download the DRF model,
    which is ranked fourth on the leaderboard. Execute the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该将模型 MOJO 下载到你的设备。你也可以使用 `model_id` 从排行榜下载特定的模型。让我们下载排名第四的 DRF 模型。执行以下命令：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can also specify the path where you want the MOJO file to be downloaded
    by passing the `path` parameter, along with the location, to the `download_mojo()`
    function. You can also download `h2o-genmodel.jar`, along with the MOJO file,
    by passing `get_genmodel_jar` as `True` in the `download_mojo()` function.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过将 `path` 参数与位置一起传递给 `download_mojo()` 函数来指定你想要 MOJO 文件下载的路径。你还可以通过在 `download_mojo()`
    函数中将 `get_genmodel_jar` 设置为 `True` 来下载 `h2o-genmodel.jar` 文件，以及 MOJO 文件。
- en: Let’s see how we can do the same in the R programming language.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在 R 编程语言中做同样的事情。
- en: Extracting H2O models as MOJOs in R
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 R 中提取 H2O 模型作为 MOJO
- en: 'Similar to how we can extract a model from the AutoML leaderboard in Python,
    we can do the same in the R programming language. We shall use the same Iris flower
    dataset again to train models using H2O AutoML and then extract the leader model
    to download it as a POJO. Follow these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们可以在 Python 中的 AutoML 排行榜中提取模型，我们也可以在 R 编程语言中做同样的事情。我们将再次使用相同的 Iris 花数据集来训练模型，使用
    H2O AutoML 并提取排行榜中的领先模型以下载为 POJO。按照以下步骤操作：
- en: 'Import the `h2o` module and spin up your H2O server:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `h2o` 模块并启动你的 H2O 服务器：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Import the dataset by passing the location of the dataset in your system. Execute
    the following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递数据集在系统中的位置来导入数据集。执行以下命令：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Set the feature and label names by executing the following commands:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令设置特征和标签名称：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Trigger AutoML by passing the training dataset, the feature columns, and the
    label columns as parameters. Also, set `max_models` to `10` and the `seed` value
    to `5`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递训练数据集、特征列和标签列作为参数来触发 AutoML。同时，将 `max_models` 设置为 `10` 和 `seed` 值设置为 `5`：
- en: '[PRE11]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once training has finished and you have the leaderboard, you can access the
    leader model using `aml@leaderboard`. Using the same command, we can download
    the leader model as a MOJO, like so:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦训练完成并且你有了排行榜，你可以使用 `aml@leaderboard` 访问排行榜模型。使用相同的命令，我们可以下载排行榜模型作为 MOJO，如下所示：
- en: '[PRE12]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will start downloading the model MOJO ZIP file to your device. Similar
    to Python, in R, you can specify the download path as well as set the `get_genmodel_jar`
    parameter to *True* to download the `h2o-genmodel.jar` file, along with the MOJO
    ZIP file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将开始将模型 MOJO ZIP 文件下载到你的设备。类似于 Python，在 R 中，你也可以指定下载路径，并将 `get_genmodel_jar`
    参数设置为 *True* 以下载 `h2o-genmodel.jar` 文件，以及 MOJO ZIP 文件。
- en: Now that we know how to extract a model MOJO in the R programming language,
    let’s learn how to do the same in H2O Flow.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何在 R 编程语言中提取模型 MOJO，让我们学习如何在 H2O 流中做同样的事情。
- en: Extracting H2O models as MOJOs in H2O Flow
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 H2O 流中提取 H2O 模型作为 MOJO
- en: Downloading model MOJOs in H2O Flow is just as easy as it was with POJOs. Right
    beside the **Download POJO** button, you have another button to download MOJO
    models.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H2O 流中下载模型 MOJO 与使用 POJO 一样简单。在 **下载 POJO** 按钮旁边，你还有一个按钮用于下载 MOJO 模型。
- en: As you learned in [*Chapter 2*](B17298_02.xhtml#_idTextAnchor038), *Working
    with H2O Flow (H2O’s Web UI)*, in the *Working with Model Training Functions in
    H2O Flow* section, you can access specific model information.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 [*第 2 章*](B17298_02.xhtml#_idTextAnchor038) 中所学的，在 *使用 H2O 流（H2O 的 Web UI）*
    部分，在 *使用 H2O 流中的模型训练函数* 部分，你可以访问特定模型的信息。
- en: 'In the **Actions** subsection, you have an interactive button titled **Model
    Deployment Package (MOJO)**, as shown in the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **操作** 子部分中，你有一个名为 **模型部署包（MOJO）** 的交互式按钮，如下面的截图所示：
- en: '![Figure 11.2 – The Download Model Deployment Package (MOJO) button ](img/B17298_11_002.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 下载模型部署包（MOJO）按钮](img/B17298_11_002.jpg)'
- en: Figure 11.2 – The Download Model Deployment Package (MOJO) button
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 下载模型部署包（MOJO）按钮
- en: Simply clicking on this button will download the model as a MOJO. All models
    can be downloaded this way by using this interactive button in H2O Flow.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地点击此按钮即可将模型下载为MOJO。所有模型都可以通过使用H2O Flow中的此交互式按钮以这种方式下载。
- en: Unlike POJOs, where you have a single Java file, MOJOs can be downloaded as
    **ZIP files** that contain a collection of certain **configuration settings**,
    among other files. You can extract and explore these files if you wish, but from
    an implementation perspective, we will be using the whole ZIP file and using it
    in our services.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与POJOs不同，您只有一个Java文件，MOJOs可以下载为**ZIP文件**，其中包含一组特定的**配置设置**以及其他文件。如果您愿意，可以提取并探索这些文件，但从实现的角度来看，我们将使用整个ZIP文件，并在我们的服务中使用它。
- en: But regardless of the difference between the type of file, whether it is a Java
    file or a ZIP file, `h2o-genmodel.jar` has interpreters and readers for both types
    of files that you can use to read the models and make predictions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但无论文件类型如何不同，无论是Java文件还是ZIP文件，`h2o-genmodel.jar`都提供了对这两种文件类型的解释器和读取器，您可以使用它们来读取模型并做出预测。
- en: Now that we have extracted the model MOJO, let’s explore a special feature in
    MOJOs where we can graphically view the contents of a trained model.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经提取了模型MOJO，让我们探索MOJO中的一个特殊功能，我们可以通过图形化查看训练模型的内部内容。
- en: Viewing model MOJOs
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看模型MOJO
- en: You can view MOJO models as simple human-readable graphs by using a Java tool
    called **Graphviz**. Graphviz is a piece of visualization software that is used
    for graphically visualizing structural information in the form of diagrams or
    graphs. It is a handy tool that is often used to show technical details in networks,
    web designs, and ML as simple images.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用名为**Graphviz**的Java工具将MOJO模型视为简单的人类可读图。Graphviz是一款用于以图表或图形的形式图形化展示结构信息的可视化软件。这是一个方便的工具，常用于以简单图像的形式展示网络、网页设计和机器学习中的技术细节。
- en: 'You can install the Graphviz library in different operating systems, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在不同的操作系统上安装Graphviz库，如下所示：
- en: '**Linux**: You can download the library by just running the following command
    in your Terminal:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**：您只需在您的终端中运行以下命令即可下载库：'
- en: '[PRE13]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`brew` to install this library in your Mac system. Execute the following command
    in your Mac Terminal:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`brew`在您的Mac系统中安装此库。在Mac终端中执行以下命令：
- en: '[PRE14]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Windows**: Graphviz has a Windows installer that you can download from http://www.graphviz.org/download/.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：Graphviz有一个Windows安装程序，您可以从http://www.graphviz.org/download/下载。'
- en: Once you have installed Graphviz, you can view the model graphically by using
    the `PrintMojo` function from the Terminal to make a **PNG file**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了Graphviz，您可以使用终端中的`PrintMojo`函数来图形化查看模型。
- en: 'Let’s try it out. Execute the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试。执行以下步骤：
- en: Once you have downloaded your model MOJO file and installed Graphviz, you will
    need the `h2o.jar` file to be in the same path to access the `printMojo()` function
    in the `hex` class. You can download the `h2o.jar` file from http://h2o-release.s3.amazonaws.com/h2o/rel-zumbo/2/index.xhtml.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您下载了模型MOJO文件并安装了Graphviz，您需要将`h2o.jar`文件放在同一路径下，以便在`hex`类中访问`printMojo()`函数。您可以从http://h2o-release.s3.amazonaws.com/h2o/rel-zumbo/2/index.xhtml下载`h2o.jar`文件。
- en: 'Once your files are ready, open your Terminal in the same directory and execute
    the following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的文件准备就绪，在相同目录下打开您的终端并执行以下命令：
- en: '[PRE15]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We are using the DRF model we downloaded from the experiment we did in the *Extracting
    H2O model as MOJO in Python* section. This command generates a `model.gv` file
    that the Graphviz visualization tool can use to visualize the model.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用我们从*提取H2O模型作为Python中的MOJO*部分进行的实验中下载的DRF模型。此命令生成一个`model.gv`文件，Graphviz可视化工具可以使用它来可视化模型。
- en: 'Now, use the Graphviz tool to build a PNG file using the `model.gv` file. Execute
    the following code:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用Graphviz工具通过`model.gv`文件构建一个PNG文件。执行以下代码：
- en: '[PRE16]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This generates the `model.png` file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成`model.png`文件。
- en: 'Now, open the `model.png` file; you should see an image of the model. The model
    should look as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`model.png`文件；您应该看到一个模型的图像。模型应该看起来如下：
- en: '![Figure 11.3 – Model image generated from MOJO using Graphviz ](img/B17298_11_003.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – 使用Graphviz从MOJO生成的模型图像](img/B17298_11_003.jpg)'
- en: Figure 11.3 – Model image generated from MOJO using Graphviz
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – 使用Graphviz从MOJO生成的模型图像
- en: The preceding diagram is a nice graphical representation of how the decision
    tree of the `PrintMojo` function without needing the Graphviz library. However,
    this option is only available in Java 8 and higher versions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表是`PrintMojo`函数决策树的一个很好的图形表示，无需Graphviz库。然而，此选项仅在Java 8及以上版本中可用。
- en: Let’s try using the `PrintMojo` function to generate the model image. Execute
    the steps in sequence to generate an image of the model without using Graphviz.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试使用`PrintMojo`函数生成模型图像。按照顺序执行以下步骤以生成不使用Graphviz的模型图像。
- en: 'Similar to the previous experiment, where we printed the model MOJO using Graphviz,
    make sure that you have downloaded the model MOJO and copied it into a directory,
    along with your `h2o.jar` file. Now, open a Terminal in the same folder and execute
    the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与之前使用Graphviz打印模型MOJO的实验类似，请确保您已下载模型MOJO并将其复制到目录中，包括您的`h2o.jar`文件。现在，在同一文件夹中打开一个终端并执行以下命令：
- en: '[PRE17]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output of this command should generate a `tree.png` folder with images
    of the decision tree inside it. The diagram should look as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出应生成一个包含决策树图像的`tree.png`文件夹。图表应如下所示：
- en: '![Figure 11.4 – Graphical images for class Iris-setosa using PrintMojo without
    Graphviz ](img/B17298_11_004.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4 – 使用PrintMojo和Graphviz生成Iris-setosa类图形图像](img/B17298_11_004.jpg)'
- en: Figure 11.4 – Graphical images for class Iris-setosa using PrintMojo without
    Graphviz
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 – 使用PrintMojo和Graphviz生成Iris-setosa类的图形图像
- en: Since we were using an ML model that has been trained on the Iris dataset, we
    have a multinomial classification model. Thus, inside the `tree.png` file, you
    will have individual images for every class – one for `Iris-setosa`, one for `Iris-virginica`,
    and one for `Iris-versicolor`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是在Iris数据集上训练的ML模型，因此我们有一个多项式分类模型。因此，在`tree.png`文件中，您将为每个类别有单独的图像 – 一个用于`Iris-setosa`，一个用于`Iris-virginica`，一个用于`Iris-versicolor`。
- en: Note that this feature is only available for tree-based algorithms such as DRF,
    GBM, and XGBoost. Linear models such as GLM and deep learning models are not supported
    for viewing.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此功能仅适用于基于树的算法，如DRF、GBM和XGBoost。GLM等线性模型和深度学习模型不支持查看。
- en: Now that we know how to view the models from model MOJOs, let’s learn how to
    use MOJOs to make predictions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道如何从模型MOJO中查看模型，让我们学习如何使用MOJO进行预测。
- en: Using H2O AutoML model MOJOs to make predictions
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用H2O AutoML模型MOJO进行预测
- en: Making predictions using MOJOs is the same as how we make predictions using
    model POJOS, albeit with some minor changes. Similar to POJOs, there is a dependency
    on the `h2o-genmodel.jar` file to compile and run the model MOJO to make predictions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MOJO进行预测与使用模型POJO进行预测的方法相同，尽管有一些小的变化。类似于POJOs，编译和运行模型MOJO进行预测依赖于`h2o-genmodel.jar`文件。
- en: So, let’s go ahead and quickly run an experiment where we can use the model
    MOJO with the `h2o-genmodel.jar` file to make predictions. We shall write a Java
    program that imports the `h2o-genmodel.jar` file and uses its classes to load
    and use our model MOJO to make predictions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们快速运行一个实验，在这个实验中，我们可以使用`h2o-genmodel.jar`文件与模型MOJO进行预测。我们将编写一个Java程序，导入`h2o-genmodel.jar`文件并使用其类来加载和使用我们的模型MOJO进行预测。
- en: So, let’s start by creating a folder where we can keep the H2O MOJO file needed
    for the experiment and then write some code that uses it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先创建一个文件夹，用于存放实验所需的H2O MOJO文件，然后编写一些使用它的代码。
- en: 'Follow these steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Open your Terminal and create an empty folder by executing the following command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并执行以下命令创建一个空文件夹：
- en: '[PRE18]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, copy your model MOJO file to the folder by executing the following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过执行以下命令将您的模型MOJO文件复制到文件夹中：
- en: '[PRE19]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Make sure that you change the name of the model MOJO, `DRF_1_AutoML_7_20220622_170835.zip`,
    to the model MOJO you are using.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将模型MOJO的名称`DRF_1_AutoML_7_20220622_170835.zip`更改为您正在使用的模型MOJO。
- en: 'Then, you need to download the `h2o-genmodel.jar` file. As you learned in [*Chapter
    10*](B17298_10.xhtml#_idTextAnchor196), *Working with Plain Old Java Objects (POJOs)*,
    there are two ways that you can do this. Either you can download the `h2o-genmodel.jar`
    file from your currently running local H2O server or, if you are working on a
    `h2o-genmodel`, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要下载`h2o-genmodel.jar`文件。正如您在[*第10章*](B17298_10.xhtml#_idTextAnchor196)中学习的，*与Plain
    Old Java Objects (POJOs)一起工作*，您有两种方法可以这样做。您可以从当前运行的本地H2O服务器下载`h2o-genmodel.jar`文件，或者如果您正在使用`h2o-genmodel`，如下所示：
- en: '[PRE20]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The Maven repository for this can be found here: https://mvnrepository.com/artifact/ai.h2o/h2o-genmodel.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Maven仓库可以在以下位置找到：https://mvnrepository.com/artifact/ai.h2o/h2o-genmodel。
- en: 'Now, let’s create the Java program that will be making predictions using the
    model MOJO. Create a Java program called `main.java` by executing the following
    command in your Terminal:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个Java程序，该程序将使用模型MOJO进行预测。通过在终端执行以下命令创建一个名为`main.java`的Java程序：
- en: '[PRE21]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This should open the `vim` editor, where you can write your code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会打开`vim`编辑器，你可以在其中编写代码。
- en: 'Let’s start writing our Java program:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始编写我们的Java程序：
- en: 'First, import the necessary dependencies, as follows:'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入必要的依赖项，如下所示：
- en: '[PRE22]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, create the `main` class, as follows:'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建`main`类，如下所示：
- en: '[PRE23]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, inside the `main` class, create a `main` function, as follows:'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`main`类中，创建一个`main`函数，如下所示：
- en: '[PRE24]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Inside this `main` function, create the `EasyPredictModelWrapper` object by
    loading the MOJO model using the `MojoModel.load()` function and passing the location
    of your model MOJO. The code for this is as follows:'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`main`函数内部，通过使用`MojoModel.load()`函数并传递你的模型MOJO的位置来创建`EasyPredictModelWrapper`对象。相应的代码如下：
- en: '[PRE25]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that we have our model MOJO loaded and wrapped in `EasyPredictModelWrapper`,
    let’s create the sample data that we will use for making predictions. Add the
    following code to your file:'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经加载并包装了我们的模型MOJO，让我们创建我们将用于进行预测的样本数据。将以下代码添加到你的文件中：
- en: '[PRE26]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Similar to how we did when making predictions using model POJOs, we need a
    prediction handler to store the prediction results from the model MOJOs. The prediction
    handler that’s used for POJOs also works with MOJOs. So, let’s create an appropriate
    multinomial prediction handler object, as follows:'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与我们使用模型POJO进行预测时的方式相似，我们需要一个预测处理程序来存储模型MOJOs的预测结果。用于POJOs的预测处理程序也可以与MOJOs一起使用。因此，让我们创建一个适当的多元预测处理程序对象，如下所示：
- en: '[PRE27]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let’s add the necessary `print` statements so that we have a clean and
    easy way to understand the output. Add the following `print` statements:'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加必要的`print`语句，以便我们有干净且易于理解输出的方式。添加以下`print`语句：
- en: '[PRE28]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`predictionResultHandler.label` will contain the predicted label value.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`predictionResultHandler.label`将包含预测的标签值。'
- en: 'Let’s also print out the different class probabilities. Add the following code:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也打印出不同的类别概率。添加以下代码：
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Make sure all your braces are closed correctly and save the file.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有大括号都已正确关闭，并保存文件。
- en: 'Once your file is ready, just compile the file by executing the following command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你的文件准备就绪，只需通过执行以下命令来编译文件：
- en: '[PRE30]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Once the compilation is successful, execute the compiled file by running the
    following command in your Terminal:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦编译成功，通过在终端运行以下命令来执行编译后的文件：
- en: '[PRE31]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You should get the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 11.5 – Prediction results from the H2O model MOJO implementation ](img/B17298_11_005.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5 – H2O模型MOJO实现的预测结果](img/B17298_11_005.jpg)'
- en: Figure 11.5 – Prediction results from the H2O model MOJO implementation
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – H2O模型MOJO实现的预测结果
- en: As you can see, using the model MOJO is just as easy as using POJOs. Both are
    easy to extract and use in production. However, MOJOs benefit from being smaller
    and faster for large-sized models, which gives them a slight edge compared to
    POJOs.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用模型MOJO和POJO一样简单。两者都易于提取并在生产中使用。然而，MOJOs由于模型尺寸较大且运行更快而具有优势，这使得它们相对于POJOs略胜一筹。
- en: Congratulations! You now know how to build, extract, and deploy model MOJOs
    to make predictions.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在知道如何构建、提取和部署模型MOJOs进行预测。
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started by understanding what the drawbacks of POJOs are.
    Then, we learned that H2O created a counterpart to POJOs called MOJOs, which do
    not have the same issues that POJOs have. Then, we learned what MOJOs are and
    the benefits of using them over POJOs. We learned that MOJOs are smaller and faster
    than POJOs. In H2O’s internal experimentation, it was found that MOJOs performed
    better when working with large ML models.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先了解了POJOs的缺点。然后，我们学习了H2O为POJOs创建了一个对应物，称为MOJOs，它们没有POJOs所具有的问题。然后，我们学习了MOJOs是什么以及与POJOs相比使用它们的优点。我们了解到MOJOs比POJOs更小、更快。在H2O的内部实验中，发现MOJOs在处理大型机器学习模型时表现更好。
- en: After that, we learned how to practically extract ML models trained using AutoML
    as MOJOs. We understood how MOJOs can be downloaded in Python, R, and H2O Flow.
    Another benefit that we came across with MOJOs was that there is a special function
    called `PrintMojo` that can be used to create graphical pictures of ML models
    that can be read by humans. This also makes understanding the contents of the
    ML model easy.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们学习了如何实际地将使用AutoML训练的机器学习模型提取为MOJOs。我们了解了如何在Python、R和H2O Flow中下载MOJOs。我们还发现MOJOs的一个好处是存在一个名为`PrintMojo`的特殊函数，它可以用来创建人类可读的机器学习模型的图形化图片。这也使得理解机器学习模型的内容变得容易。
- en: Building on top of this knowledge, we implemented an experiment where we used
    the `h2o-genmodel.jar` file, along with the model MOJO, to make predictions on
    sample data, thus helping us get a better understanding of how we can use MOJOs
    in production.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个知识的基础上，我们实施了一个实验，在该实验中，我们使用了`h2o-genmodel.jar`文件以及模型MOJO，对样本数据进行预测，从而帮助我们更好地理解如何在生产环境中使用MOJOs。
- en: In the next chapter, we shall explore the various design patterns that we can
    use to implement H2O AutoML. This will help us understand how to implement ideal
    ML solutions using H2O AutoML.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨我们可以用来实现H2O AutoML的各种设计模式。这将帮助我们理解如何使用H2O AutoML实现理想的机器学习解决方案。
