- en: 3\. Linear Regression
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 线性回归
- en: 'Activity 3.01: Plotting Data with a Moving Average'
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 3.01：使用移动平均绘制数据
- en: 'Load the two required packages:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 加载所需的两个包：
- en: import pandas as pd
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import matplotlib.pyplot as plt
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: 'Load the dataset into a pandas DataFrame from the CSV file:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从 CSV 文件将数据集加载到 pandas 数据框中：
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: df = pd.read_csv('../Datasets/austin_weather.csv')
- en: df.head()
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: df.head()
- en: 'The output will show the initial five rows of the austin_weather.csv file:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示 austin_weather.csv 文件的前五行：
- en: '![Figure 3.61: The first five rows of the Austin weather data (note that additional
    columns to the right are not shown)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.61：奥斯丁天气数据的前五行（请注意右侧的附加列未显示）'
- en: '](img/image-2E71SJK6.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-2E71SJK6.jpg)'
- en: 'Figure 3.61: The first five rows of the Austin weather data (note that additional
    columns to the right are not shown)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.61：奥斯丁天气数据的前五行（请注意右侧的附加列未显示）
- en: 'Since we only need the Date and TempAvgF columns, we''ll remove all the other
    columns from the dataset:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只需要日期和温度列，我们将从数据集中删除所有其他列：
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: df = df.loc[:, ['Date', 'TempAvgF']]
- en: df.head()
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: df.head()
- en: 'The output will be as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.62: Date and TempAvgF columns of the Austin weather data'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.62：奥斯丁天气数据的日期和温度列'
- en: '](img/image-TIPMXHMW.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-TIPMXHMW.jpg)'
- en: 'Figure 3.62: Date and TempAvgF columns of the Austin weather data'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.62：奥斯丁天气数据的日期和温度列
- en: 'Initially, we are only interested in the first year''s data, so we need to
    extract that information only. Create a column in the DataFrame for the year value,
    extract the year value as an integer from the strings in the Date column, and
    assign these values to the Year column (note that temperatures are recorded daily).
    Repeat the process to create the Month and Day columns, and then extract the first
    year''s worth of data:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们只关心第一年的数据，因此我们需要仅提取该信息。在数据框中为年份创建一列，从日期列中的字符串提取年份值作为整数，并将这些值赋给年份列（请注意，温度是按天记录的）。重复此过程以创建月份和日期列，然后提取第一年的数据：
- en: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
- en: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
- en: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
- en: df = df.loc[df.index < 365]
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: df = df.loc[df.index < 365]
- en: print(df.head())
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.head())
- en: print(df.tail())
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.tail())
- en: 'The output will be as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.63: New DataFrame with one year''s worth of data'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.63：包含一年数据的新数据框'
- en: '](img/image-NKHKLFEF.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-NKHKLFEF.jpg)'
- en: 'Figure 3.63: New DataFrame with one year''s worth of data'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.63：包含一年数据的新数据框
- en: 'Compute a 20-day moving average using the rolling() method:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 rolling() 方法计算 20 天移动平均：
- en: window = 20
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: window = 20
- en: rolling = df.TempAvgF.rolling(window).mean()
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: rolling = df.TempAvgF.rolling(window).mean()
- en: print(rolling.head())
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: print(rolling.head())
- en: print(rolling.tail())
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: print(rolling.tail())
- en: 'The output will be as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.64: DataFrame with moving average data'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.64：带有移动平均数据的数据框'
- en: '](img/image-EXGYSL7Q.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-EXGYSL7Q.jpg)'
- en: 'Figure 3.64: DataFrame with moving average data'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.64：带有移动平均数据的数据框
- en: 'Plot the raw data and the moving averages, with the x axis as the day number
    in the year:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制原始数据和移动平均数据，x 轴为年份中的天数：
- en: fig = plt.figure(figsize=(10, 7))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: fig = plt.figure(figsize=(10, 7))
- en: ax = fig.add_axes([1, 1, 1, 1]);
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ax = fig.add_axes([1, 1, 1, 1]);
- en: Raw data
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据
- en: ax.scatter(df.index, df.TempAvgF, \
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ax.scatter(df.index, df.TempAvgF, \
- en: label = 'Raw Data', c = 'k')
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: label = '原始数据', c = 'k')
- en: Moving averages
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动平均
- en: ax.plot(rolling.index, rolling, c = 'r', \
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(rolling.index, rolling, c = 'r', \
- en: linestyle = '--', label = f'{window} day moving average')
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: linestyle = '--', label = f'{window} 天移动平均')
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_title('空气温度测量', fontsize = 16)
- en: ax.set_xlabel('Day', fontsize = 14)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xlabel('天数', fontsize = 14)
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_ylabel('温度 ($^\circ$F)', fontsize = 14)
- en: ax.set_xticks(range(df.index.min(), df.index.max(), 30))
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xticks(range(df.index.min(), df.index.max(), 30))
- en: ax.tick_params(labelsize = 12)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ax.tick_params(labelsize = 12)
- en: ax.legend(fontsize = 12)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ax.legend(fontsize = 12)
- en: plt.show()
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.65: Temperature data with the 20-day moving average overlaid'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.65：带有 20 天移动平均线的数据'
- en: '](img/image-8UW6PKOO.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-8UW6PKOO.jpg)'
- en: 'Figure 3.65: Temperature data with the 20-day moving average overlaid'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.65：带有 20 天移动平均线的数据
- en: Note
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/2Nl5m85.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考 https://packt.live/2Nl5m85。
- en: You can also run this example online at https://packt.live/3epJvs6\. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 https://packt.live/3epJvs6 上在线运行这个例子。你必须执行整个笔记本才能得到期望的结果。
- en: 'Activity 3.02: Linear Regression Using the Least Squares Method'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 3.02：使用最小二乘法的线性回归
- en: 'Import the required packages and classes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的包和类：
- en: import pandas as pd
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import matplotlib.pyplot as plt
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: from sklearn.linear_model import LinearRegression
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.linear_model import LinearRegression
- en: 'Load the data from the CSV (austin_weather.csv) and inspect the data (using
    the head() and tail() methods):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从 CSV 文件（austin_weather.csv）加载数据并检查数据（使用 head() 和 tail() 方法）：
- en: load data and inspect
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据并检查
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: df = pd.read_csv('../Datasets/austin_weather.csv')
- en: print(df.head())
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.head())
- en: print(df.tail())
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.tail())
- en: 'The output for df.head() will be as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: df.head() 的输出将如下所示：
- en: '![Figure 3.66: Output for df.head()'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.66：df.head() 的输出'
- en: '](img/image-BFFQ5FTD.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-BFFQ5FTD.jpg)'
- en: 'Figure 3.66: Output for df.head()'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.66：df.head() 的输出
- en: 'The output for df.tail() will be as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: df.tail() 的输出将如下所示：
- en: '![Figure 3.67: Output for df.tail()'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.67：df.tail() 的输出'
- en: '](img/image-8HWYSH8L.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-8HWYSH8L.jpg)'
- en: 'Figure 3.67: Output for df.tail()'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.67：df.tail() 的输出
- en: 'Drop everything except the Date and TempAvgF columns:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 删除除了 Date 和 TempAvgF 列以外的所有列：
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: df = df.loc[:, ['Date', 'TempAvgF']]
- en: df.head()
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: df.head()
- en: 'The output will be as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.68: Two columns used for Activity 3.02'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.68：用于活动 3.02 的两列'
- en: '](img/image-TBONUR9Z.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-TBONUR9Z.jpg)'
- en: 'Figure 3.68: Two columns used for Activity 3.02'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.68：用于活动 3.02 的两列
- en: 'Create new Year, Month, and Day columns and populate them by parsing the Date
    column:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 Year、Month 和 Day 列，并通过解析 Date 列来填充它们：
- en: add some useful columns
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一些有用的列
- en: df.loc[:, 'Year'] = df.loc[:, 'Date']\
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Year'] = df.loc[:, 'Date']\
- en: .str.slice(0, 4).astype('int')
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: .str.slice(0, 4).astype('int')
- en: df.loc[:, 'Month'] = df.loc[:, 'Date']\
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Month'] = df.loc[:, 'Date']\
- en: .str.slice(5, 7).astype('int')
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: .str.slice(5, 7).astype('int')
- en: df.loc[:, 'Day'] = df.loc[:, 'Date']\
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Day'] = df.loc[:, 'Date']\
- en: .str.slice(8, 10).astype('int')
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: .str.slice(8, 10).astype('int')
- en: print(df.head())
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.head())
- en: print(df.tail())
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.tail())
- en: 'The output will be as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.69: Augmented data'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.69：增强数据'
- en: '](img/image-HRXD8ELZ.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-HRXD8ELZ.jpg)'
- en: 'Figure 3.69: Augmented data'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.69：增强数据
- en: 'Create a new column for a moving average and populate it with a 20-day moving
    average of the TempAvgF column:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的列用于移动平均，并用 TempAvgF 列的 20 天移动平均填充它：
- en: '"""'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: set a 20 day window then use that to smooth temperature in a new column
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 20 天窗口，然后使用它来平滑温度并填充到新列中
- en: '"""'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: window = 20
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: window = 20
- en: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
- en: print(df.head())
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.head())
- en: print(df.tail())
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.tail())
- en: 'The output will be as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.70: Addition of the 20-day moving average'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.70：添加 20 天移动平均线'
- en: '](img/image-W20OBT4B.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-W20OBT4B.jpg)'
- en: 'Figure 3.70: Addition of the 20-day moving average'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.70：添加 20 天移动平均线
- en: 'Slice one complete year of data to use in a model. Ensure the year doesn''t
    have missing data due to the moving average. Also create a column for Day_of_Year
    (it should start at 1):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 切割出一整年的数据用于模型。确保该年份没有因移动平均而缺失数据。同时创建一个 Day_of_Year 列（它应该从 1 开始）：
- en: '"""'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: now let's slice exactly one year on the
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们精确切割出一年时间的数据
- en: calendar start and end dates
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 日历的开始和结束日期
- en: we see from the previous output that
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的输出中我们可以看到
- en: 2014 is the first year with complete data,
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 2014 年是第一个拥有完整数据的年份，
- en: however it will still have NaN values for
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它仍然会有 NaN 值
- en: the moving average, so we'll use 2015
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平均，所以我们将使用 2015 年
- en: '"""'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: df_one_year = df.loc[df.Year == 2015, :].reset_index()
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year = df.loc[df.Year == 2015, :].reset_index()
- en: df_one_year['Day_of_Year'] = df_one_year.index + 1
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['Day_of_Year'] = df_one_year.index + 1
- en: print(df_one_year.head())
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: print(df_one_year.head())
- en: print(df_one_year.tail())
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: print(df_one_year.tail())
- en: 'The output will be as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.71: One year''s worth of data'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.71：一年的数据'
- en: '](img/image-3PS8EM65.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-3PS8EM65.jpg)'
- en: 'Figure 3.71: One year''s worth of data'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.71：一年的数据
- en: 'Create a scatterplot of the raw data (the original TempAvgF column) and overlay
    it with a line for the 20-day moving average:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建原始数据（原始 TempAvgF 列）的散点图，并叠加 20 天移动平均线：
- en: fig = plt.figure(figsize=(10, 7))
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: fig = plt.figure(figsize=(10, 7))
- en: ax = fig.add_axes([1, 1, 1, 1]);
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ax = fig.add_axes([1, 1, 1, 1]);
- en: Raw data
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
- en: label = 'Raw Data', c = 'k')
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: label = '原始数据', c = 'k')
- en: Moving averages
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动平均
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
- en: c = 'r', linestyle = '--', \
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: c = 'r', linestyle = '--', \
- en: label = f'{window} day moving average')
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: label = f'{window}天移动平均')
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_title('空气温度测量', fontsize = 16)
- en: ax.set_xlabel('Day', fontsize = 14)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xlabel('天数', fontsize = 14)
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_ylabel('温度 ($^\circ$F)', fontsize = 14)
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
- en: df_one_year.Day_of_Year.max(), 30))
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.Day_of_Year.max(), 30))
- en: ax.tick_params(labelsize = 12)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ax.tick_params(labelsize = 12)
- en: ax.legend(fontsize = 12)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: ax.legend(fontsize = 12)
- en: plt.show()
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.72: Raw data with the 20-day moving average overlaid'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.72：叠加了20天移动平均的原始数据'
- en: '](img/image-7IRREJQI.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-7IRREJQI.jpg)'
- en: 'Figure 3.72: Raw data with the 20-day moving average overlaid'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.72：叠加了20天移动平均的原始数据
- en: 'Create a linear regression model using the default parameters, that is, calculate
    a y intercept for the model and do not normalize the data. The day numbers for
    the year (1 to 365) constitute the input data and the average temperatures constitute
    the output data. Print the parameters of the model and the r2 value:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认参数创建一个线性回归模型，即为模型计算一个y截距，并且不对数据进行归一化。年份的天数（1到365）构成输入数据，平均温度构成输出数据。打印模型的参数和r²值：
- en: fit a linear model
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拟合线性模型
- en: linear_model = LinearRegression(fit_intercept = True)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model = LinearRegression(fit_intercept = True)
- en: linear_model.fit(df_one_year['Day_of_Year']\
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model.fit(df_one_year['Day_of_Year']\
- en: .values.reshape((-1, 1)), \
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: .values.reshape((-1, 1)), \
- en: df_one_year.TempAvgF)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.TempAvgF)
- en: 'print(''model slope: '', linear_model.coef_)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型斜率：', linear_model.coef_)
- en: 'print(''model intercept: '', linear_model.intercept_)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型截距：', linear_model.intercept_)
- en: 'print(''model r squared: '', \'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型r²值：', \
- en: linear_model.score(df_one_year['Day_of_Year']\
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model.score(df_one_year['Day_of_Year']\
- en: .values.reshape((-1, 1)), \
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: .values.reshape((-1, 1)), \
- en: df_one_year.TempAvgF))
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.TempAvgF))
- en: 'The results should be as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应如下所示：
- en: 'model slope: [0.04304568]'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 模型斜率：[0.04304568]
- en: 'model intercept: 62.23496914044859'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 模型截距：62.23496914044859
- en: 'model r squared: 0.09549593659736466'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 模型r²值：0.09549593659736466
- en: Note that the r2 value is very low, which is not surprising given that the data
    has a significant variation in the slope over time, and we are fitting a single
    linear model with a constant slope.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，r²值非常低，这并不令人惊讶，因为数据的斜率随时间有显著变化，而我们拟合的是一个具有常数斜率的单一线性模型。
- en: 'Generate predictions from the model using the same x data:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的x数据从模型生成预测值：
- en: make predictions using the training data
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用训练数据进行预测
- en: y_pred = linear_model.predict(df_one_year['Day_of_Year']\
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = linear_model.predict(df_one_year['Day_of_Year']\
- en: .values.reshape((-1, 1)))
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: .values.reshape((-1, 1)))
- en: x_pred = df_one_year.Day_of_Year
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: x_pred = df_one_year.Day_of_Year
- en: 'Create a new scatterplot, as before, adding an overlay of the predictions of
    the model:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如之前一样，创建一个新的散点图，并叠加模型的预测结果：
- en: fig = plt.figure(figsize=(10, 7))
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: fig = plt.figure(figsize=(10, 7))
- en: ax = fig.add_axes([1, 1, 1, 1]);
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ax = fig.add_axes([1, 1, 1, 1]);
- en: Raw data
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
- en: label = 'Raw Data', c = 'k')
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: label = '原始数据', c = 'k')
- en: Moving averages
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动平均
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
- en: c = 'r', linestyle = '--', \
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: c = 'r', linestyle = '--', \
- en: label = f'{window} day moving average')
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: label = f'{window}天移动平均')
- en: linear model
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性模型
- en: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
- en: label = 'linear model')
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: label = '线性模型')
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_title('空气温度测量', fontsize = 16)
- en: ax.set_xlabel('Day', fontsize = 14)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xlabel('天数', fontsize = 14)
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_ylabel('温度 ($^\circ$F)', fontsize = 14)
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
- en: df_one_year.Day_of_Year.max(), 30))
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.Day_of_Year.max(), 30))
- en: ax.tick_params(labelsize = 12)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: ax.tick_params(labelsize = 12)
- en: ax.legend(fontsize = 12)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: ax.legend(fontsize = 12)
- en: plt.show()
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 3.73: Raw data, 20-day moving average, and linear fit'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.73：原始数据、20天移动平均和线性拟合'
- en: '](img/image-S2PMM96W.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-S2PMM96W.jpg)'
- en: 'Figure 3.73: Raw data, 20-day moving average, and linear fit'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.73：原始数据，20天滑动平均和线性拟合
- en: Note
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/2CwEKyT.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问本节的源代码，请参阅 https://packt.live/2CwEKyT.
- en: You can also run this example online at https://packt.live/3hKJSzD. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在https://packt.live/3hKJSzD在线运行这个示例。你必须执行整个Notebook才能得到预期的结果。
- en: 'Activity 3.03: Dummy Variables'
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动3.03：虚拟变量
- en: 'Import the required packages and classes:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的包和类：
- en: import pandas as pd
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import matplotlib.pyplot as plt
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: from sklearn.linear_model import LinearRegression
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.linear_model import LinearRegression
- en: 'Load and inspect the data:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 加载并检查数据：
- en: load data and inspect
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据并检查
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: df = pd.read_csv('../Datasets/austin_weather.csv')
- en: print(df.head())
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.head())
- en: print(df.tail())
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: print(df.tail())
- en: 'The output for df.head() should appear as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: df.head()的输出应如下所示：
- en: '![Figure 3.74: Output for the df.head() function'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.74：df.head()函数的输出'
- en: '](img/image-XIIHGZ3P.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-XIIHGZ3P.jpg)'
- en: 'Figure 3.74: Output for the df.head() function'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.74：df.head()函数的输出
- en: 'The output for df.tail() should appear as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: df.tail()的输出应如下所示：
- en: '![Figure 3.75: Output for the df.tail() function'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.75：df.tail()函数的输出'
- en: '](img/image-2UIYD0ID.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-2UIYD0ID.jpg)'
- en: 'Figure 3.75: Output for the df.tail() function'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.75：df.tail()函数的输出
- en: 'Carry out the preprocessing as before. Drop all but the Date and TempAvgF columns.
    Add columns for Year, Month, and Day. Create a new column with a 20-day moving
    average. Slice out the first complete year (2015):'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 执行与之前相同的预处理。去除除Date和TempAvgF列外的所有列。添加Year、Month和Day列。创建一个包含20天滑动平均的新列。切出第一个完整年份（2015年）：
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: df = df.loc[:, ['Date', 'TempAvgF']]
- en: add some useful columns
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一些有用的列
- en: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
- en: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
- en: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
- en: '"""'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: set a 20 day window then use that to smooth
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个20天的滑动窗口，然后用它来平滑数据
- en: temperature in a new column
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在新列中存储温度
- en: '"""'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: window = 20
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: window = 20
- en: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
- en: '"""'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: now let's slice exactly one year on the
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们切片出完整的一年
- en: calendar start and end dates
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 日历的开始和结束日期
- en: we see from the previous output that
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从之前的输出中看到
- en: 2014 is the first year with complete data,
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年是第一个完整的数据年份，
- en: however it will still have NaN values for
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它仍然会有NaN值
- en: the moving average, so we'll use 2015
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动平均，因此我们将使用2015年数据
- en: '"""'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: df_one_year = df.loc[df.Year == 2015, :].reset_index()
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year = df.loc[df.Year == 2015, :].reset_index()
- en: df_one_year['Day_of_Year'] = df_one_year.index + 1
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['Day_of_Year'] = df_one_year.index + 1
- en: print(df_one_year.head())
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: print(df_one_year.head())
- en: print(df_one_year.tail())
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: print(df_one_year.tail())
- en: 'The data should appear as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 数据应该如下所示：
- en: '![Figure 3.76: Preprocessed data'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.76：预处理数据'
- en: '](img/image-XGAKT751.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-XGAKT751.jpg)'
- en: 'Figure 3.76: Preprocessed data'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.76：预处理数据
- en: 'Visualize the results:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化结果：
- en: fig = plt.figure(figsize=(10, 7))
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: fig = plt.figure(figsize=(10, 7))
- en: ax = fig.add_axes([1, 1, 1, 1]);
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: ax = fig.add_axes([1, 1, 1, 1]);
- en: Raw data
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
- en: label = 'Raw Data', c = 'k')
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: label = '原始数据', c = 'k')
- en: Moving averages
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滑动平均
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
- en: c = 'r', linestyle = '--', \
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: c = 'r', linestyle = '--', \
- en: label = f'{window} day moving average')
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: label = f'{window}天滑动平均')
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_title('空气温度测量', fontsize = 16)
- en: ax.set_xlabel('Day', fontsize = 14)
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xlabel('天数', fontsize = 14)
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_ylabel('温度 ($^\circ$F)', fontsize = 14)
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
- en: df_one_year.Day_of_Year.max(), 30))
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.Day_of_Year.max(), 30))
- en: ax.tick_params(labelsize = 12)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: ax.tick_params(labelsize = 12)
- en: ax.legend(fontsize = 12)
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: ax.legend(fontsize = 12)
- en: plt.show()
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The plot should appear as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图表应该如下所示：
- en: '![Figure 3.77: Austin temperatures and moving average'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.77：奥斯丁温度及其滑动平均'
- en: '](img/image-3G0548EA.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-3G0548EA.jpg)'
- en: 'Figure 3.77: Austin temperatures and moving average'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.77：奥斯丁温度及其滑动平均
- en: 'We can see that the temperature rises from January to around September, and
    then falls again. This is a clear seasonal cycle. As a first improvement, we can
    include the month in the model. As described in the introduction to dummy variables,
    if we just encoded the months as integers 1 to 12, the model might interpret that
    December (12) was more important than January (1). So, we encode the month as
    dummy variables to avoid this:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到温度从一月开始上升，直到九月左右，然后再次下降。这是一个明显的季节性循环。作为第一次改进，我们可以在模型中加入月份。如同在虚拟变量介绍中所述，如果我们仅将月份编码为1到12的整数，模型可能会认为12月（12）比1月（1）更重要。所以，我们将月份编码为虚拟变量来避免这一问题：
- en: use the month as a dummy variable
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用月份作为虚拟变量
- en: dummy_vars = pd.get_dummies(df_one_year['Month'], drop_first = True)
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: dummy_vars = pd.get_dummies(df_one_year['Month'], drop_first = True)
- en: dummy_vars.columns = ['Feb', 'Mar', 'Apr', 'May', 'Jun', \
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: dummy_vars.columns = ['Feb', 'Mar', 'Apr', 'May', 'Jun', \
- en: '''Jul'', ''Aug'', ''Sep'', ''Oct'', ''Nov'', ''Dec'']'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '''Jul'', ''Aug'', ''Sep'', ''Oct'', ''Nov'', ''Dec'']'
- en: df_one_year = pd.concat([df_one_year, dummy_vars], \
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year = pd.concat([df_one_year, dummy_vars], \
- en: axis = 1).drop('Month', axis = 1)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: axis = 1).drop('Month', axis = 1)
- en: df_one_year
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year
- en: 'The data should appear as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 数据应如下所示：
- en: '![Figure 3.78: Data augmented with dummy variables for the month'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.78：使用虚拟变量增强的月份数据'
- en: '](img/image-XN7VJ280.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-XN7VJ280.jpg)'
- en: 'Figure 3.78: Data augmented with dummy variables for the month'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.78：使用虚拟变量增强的月份数据
- en: 'Now, fit a linear model using Day_of_Year and the dummy variables, and print
    the model coefficients and the r2 value:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 Day_of_Year 和虚拟变量拟合一个线性模型，并打印模型系数和 R² 值：
- en: fit model using the month dummy vars
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用月份虚拟变量拟合模型
- en: linear_model = LinearRegression(fit_intercept = True)
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model = LinearRegression(fit_intercept = True)
- en: linear_model.fit(pd.concat([df_one_year.Day_of_Year, \
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model.fit(pd.concat([df_one_year.Day_of_Year, \
- en: df_one_year.loc[:, 'Feb':'Dec']], \
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.loc[:, 'Feb':'Dec']], \
- en: axis = 1),
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: axis = 1),
- en: df_one_year['TempAvgF'])
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['TempAvgF'])
- en: 'print(''model coefficients: '', linear_model.coef_)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型系数：', linear_model.coef_)
- en: 'print(''model intercept: '', linear_model.intercept_)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型截距：', linear_model.intercept_)
- en: 'print(''model r squared: '', \'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型 R 平方：', \
- en: linear_model.score(pd.concat([df_one_year.Day_of_Year, \
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model.score(pd.concat([df_one_year.Day_of_Year, \
- en: df_one_year.loc[:, 'Feb':'Dec']], \
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.loc[:, 'Feb':'Dec']], \
- en: axis = 1),
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: axis = 1),
- en: df_one_year['TempAvgF']))
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['TempAvgF']))
- en: 'The results should be as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应如下所示：
- en: 'model coefficients: [ 0.03719346 1.57445204 9.35397321 19.16903518 22.02065629
    26.80023439'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 模型系数：[ 0.03719346 1.57445204 9.35397321 19.16903518 22.02065629 26.80023439
- en: 30.17121033 30.82466482 25.6117698 15.71715435 1.542969 -4.06777548]
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 30.17121033 30.82466482 25.6117698 15.71715435 1.542969 -4.06777548]
- en: 'model intercept: 48.34038858048261'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 模型截距：48.34038858048261
- en: 'model r squared: 0.7834805472165678'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 模型 R 平方：0.7834805472165678
- en: Note the signs on the coefficients—the first value associated with Day_of_Year,
    and then the values for January through December follow. The coefficients for
    January, February, March, November, and December are negative, while those for
    June through September are positive. This makes sense for the seasons in Texas.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 注意系数的符号——第一个值与 Day_of_Year 相关，接下来是1月到12月的值。1月、2月、3月、11月和12月的系数为负，而6月到9月的系数为正。这对德州的季节来说是合理的。
- en: 'Now, make predictions using the single-year data, and visualize the results:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用单年数据进行预测，并可视化结果：
- en: make predictions using the data
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据进行预测
- en: y_pred = \
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = \
- en: linear_model.predict(pd.concat([df_one_year.Day_of_Year, \
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model.predict(pd.concat([df_one_year.Day_of_Year, \
- en: df_one_year.loc[:, 'Feb':'Dec']], \
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.loc[:, 'Feb':'Dec']], \
- en: axis = 1))
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: axis = 1))
- en: x_pred = df_one_year.Day_of_Year
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: x_pred = df_one_year.Day_of_Year
- en: fig = plt.figure(figsize=(10, 7))
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: fig = plt.figure(figsize=(10, 7))
- en: ax = fig.add_axes([1, 1, 1, 1]);
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: ax = fig.add_axes([1, 1, 1, 1]);
- en: Raw data
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
- en: label = 'Raw Data', c = 'k')
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 标签 = '原始数据', c = 'k')
- en: Moving averages
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动平均
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
- en: c = 'r', linestyle = '--', \
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: c = 'r', linestyle = '--', \
- en: label = f'{window} day moving average')
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 标签 = f'{window}天移动平均')
- en: regression predictions
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归预测
- en: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
- en: label = 'linear model w/dummy vars')
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 标签 = '线性模型 w/虚拟变量'
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_title('空气温度测量', fontsize = 16)
- en: ax.set_xlabel('Day', fontsize = 14)
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xlabel('天数', fontsize = 14)
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_ylabel('温度 ($^\circ$F)', fontsize = 14)
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
- en: df_one_year.Day_of_Year.max(), 30))
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.Day_of_Year.max(), 30))
- en: ax.tick_params(labelsize = 12)
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: ax.tick_params(labelsize = 12)
- en: ax.legend(fontsize = 12, loc = 'upper left')
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: ax.legend(fontsize = 12, loc = 'upper left')
- en: plt.show()
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output should appear as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 3.79: Linear regression results with month dummy variables'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.79：带有月份虚拟变量的线性回归结果'
- en: '](img/image-KI6KH1EE.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-KI6KH1EE.jpg)'
- en: 'Figure 3.79: Linear regression results with month dummy variables'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.79：带有月份虚拟变量的线性回归结果
- en: Note
  id: totrans-333
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/3enegOg.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问该特定部分的源代码，请参阅 https://packt.live/3enegOg。
- en: You can also run this example online at https://packt.live/2V4VgMM. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 https://packt.live/2V4VgMM 在线运行这个例子。你必须执行整个 Notebook 才能得到期望的结果。
- en: 'Activity 3.04: Feature Engineering with Linear Regression'
  id: totrans-336
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 3.04：线性回归特征工程
- en: 'Load the required packages and classes:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 加载所需的包和类：
- en: import pandas as pd
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import numpy as np
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import matplotlib.pyplot as plt
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: from sklearn.linear_model import LinearRegression
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.linear_model import LinearRegression
- en: 'Load the data and carry out preprocessing through to the point where Day_of_Year
    is added:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 加载数据并进行预处理，直到添加 Day_of_Year 为止：
- en: load data
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: df = pd.read_csv('../Datasets/austin_weather.csv')
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: df = df.loc[:, ['Date', 'TempAvgF']]
- en: add some useful columns
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一些有用的列
- en: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
- en: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
- en: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
- en: '"""'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: set a 20 day window then use that to smooth
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个 20 天窗口，然后使用它进行平滑处理
- en: temperature in a new column
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 新列中的温度
- en: '"""'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: window = 20
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: window = 20
- en: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
- en: '"""'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: now let's slice exactly one year on the
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们准确地切割出一年
- en: calendar start and end dates
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 日历的开始和结束日期
- en: we see from the previous output that
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从之前的输出中可以看到
- en: 2014 is the first year with complete data,
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 2014 年是第一个有完整数据的年份，
- en: however it will still have NaN values for
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它仍然会有 NaN 值
- en: the moving average, so we'll use 2015
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平均值，因此我们将使用 2015 年的数据
- en: '"""'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: df_one_year = df.loc[df.Year == 2015, :].reset_index()
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year = df.loc[df.Year == 2015, :].reset_index()
- en: df_one_year['Day_of_Year'] = df_one_year.index + 1
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['Day_of_Year'] = df_one_year.index + 1
- en: 'Now, for the feature engineering, we construct the sine and cosine of Day_of_Year
    with a period of 365 days:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进行特征工程，我们构建 Day_of_Year 的正弦和余弦，周期为 365 天：
- en: add two columns for sine and cosine of the Day_of_Year
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Day_of_Year 添加两个列，分别表示其正弦和余弦值
- en: df_one_year['sine_Day'] = np.sin(2 * np.pi \
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['sine_Day'] = np.sin(2 * np.pi \
- en: '* df_one_year[''Day_of_Year''] / 365)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '* df_one_year[''Day_of_Year''] / 365)'
- en: df_one_year['cosine_Day'] = np.cos(2 * np.pi \
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['cosine_Day'] = np.cos(2 * np.pi \
- en: '* df_one_year[''Day_of_Year''] / 365)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '* df_one_year[''Day_of_Year''] / 365)'
- en: df_one_year
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year
- en: 'The data should appear as follows:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 数据应如下所示：
- en: '![Figure 3.80: Austin weather data with the new features, sine_Day and cosine_Day'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.80：包含新特征 sine_Day 和 cosine_Day 的奥斯丁天气数据'
- en: '](img/image-N39ZI5CT.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-N39ZI5CT.jpg)'
- en: 'Figure 3.80: Austin weather data with the new features, sine_Day and cosine_Day'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.80：包含新特征 sine_Day 和 cosine_Day 的奥斯丁天气数据
- en: 'We can now fit the model using the LinearRegression class from scikit-learn,
    and print the coefficients and the r2 score:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用 scikit-learn 的 LinearRegression 类拟合模型，并打印系数和 R² 值：
- en: fit model using the Day_of_Year and sin/cos
  id: totrans-378
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Day_of_Year 和 sin/cos 拟合模型
- en: linear_model = LinearRegression(fit_intercept = True)
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model = LinearRegression(fit_intercept = True)
- en: linear_model.fit(df_one_year[['Day_of_Year', 'sine_Day', \
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model.fit(df_one_year[['Day_of_Year', 'sine_Day', \
- en: '''cosine_Day'']], \'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '''cosine_Day'']]，\'
- en: df_one_year['TempAvgF'])
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['TempAvgF'])
- en: 'print(''model coefficients: '', linear_model.coef_)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型系数：', linear_model.coef_)
- en: 'print(''model intercept: '', linear_model.intercept_)'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型截距：', linear_model.intercept_)
- en: 'print(''model r squared: '', \'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: print('模型 R 平方值：', \
- en: linear_model.score(df_one_year[['Day_of_Year', 'sine_Day', \
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model.score(df_one_year[['Day_of_Year', 'sine_Day', \
- en: '''cosine_Day'']], \'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '''cosine_Day'']]，\'
- en: df_one_year['TempAvgF']))
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['TempAvgF']))
- en: 'The output should be as follows:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: 'model coefficients: [ 1.46396364e-02 -5.57332499e+00 -1.67824174e+01]'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 模型系数： [ 1.46396364e-02 -5.57332499e+00 -1.67824174e+01]
- en: 'model intercept: 67.43327530313064'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 模型截距：67.43327530313064
- en: 'model r squared: 0.779745650129063'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 模型 R 平方值：0.779745650129063
- en: Note that the r2 value is about the same as we achieved with the dummy variables.
    However, let's look at the predictions and see whether this model might be more
    or less suitable than before.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，r2 值与我们通过虚拟变量得到的结果差不多。然而，我们来看看预测结果，看看这个模型是否比以前更合适或更不合适。
- en: 'Generate predictions using the augmented data:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 使用增强数据生成预测：
- en: make predictions using the data
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据进行预测
- en: y_pred = \
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = \
- en: linear_model.predict(df_one_year[['Day_of_Year', 'sine_Day', \
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: linear_model.predict(df_one_year[['Day_of_Year', 'sine_Day', \
- en: '''cosine_Day'']])'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '''cosine_Day'']])'
- en: x_pred = df_one_year.Day_of_Year
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: x_pred = df_one_year.Day_of_Year
- en: 'Now, visualize the results:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，查看结果：
- en: fig = plt.figure(figsize=(10, 7))
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: fig = plt.figure(figsize=(10, 7))
- en: ax = fig.add_axes([1, 1, 1, 1])
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: ax = fig.add_axes([1, 1, 1, 1])
- en: Raw data
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
- en: label = 'Raw Data', c = 'k')
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: label = '原始数据', c = 'k')
- en: Moving averages
  id: totrans-406
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动平均
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
- en: c = 'r', linestyle = '--', \
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: c = 'r', linestyle = '--', \
- en: label = f'{window} day moving average')
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: label = f'{window} 天移动平均')
- en: regression predictions
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归预测
- en: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
- en: label = 'linear model w/sin-cos fit')
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: label = '线性模型带正余弦拟合')
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_title('空气温度测量', fontsize = 16)
- en: ax.set_xlabel('Day', fontsize = 14)
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xlabel('天', fontsize = 14)
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_ylabel('温度 ($^\circ$F)', fontsize = 14)
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
- en: df_one_year.Day_of_Year.max(), 30))
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.Day_of_Year.max(), 30))
- en: ax.tick_params(labelsize = 12)
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: ax.tick_params(labelsize = 12)
- en: ax.legend(fontsize = 12, loc = 'upper left')
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: ax.legend(fontsize = 12, loc = 'upper left')
- en: 'The output will be as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 3.81: Austin temperature data with moving average overlay and periodic
    feature fit overlay'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.81：奥斯丁温度数据，带有移动平均叠加和周期性特征拟合叠加'
- en: '](img/image-G4DBEE5E.jpg)'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-G4DBEE5E.jpg)'
- en: 'Figure 3.81: Austin temperature data with moving average overlay and periodic
    feature fit overlay'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.81：奥斯丁温度数据，带有移动平均叠加和周期性特征拟合叠加
- en: Note
  id: totrans-424
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/3dvkmet.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参见 https://packt.live/3dvkmet.
- en: You can also run this example online at https://packt.live/3epnOIJ. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在线运行此示例，网址：https://packt.live/3epnOIJ。您必须执行整个笔记本才能获得预期的结果。
- en: 'Activity 3.05: Gradient Descent'
  id: totrans-427
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 'Activity 3.05: 梯度下降'
- en: 'Import the modules and classes:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 导入模块和类：
- en: import pandas as pd
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import numpy as np
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import matplotlib.pyplot as plt
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: from sklearn.metrics import r2_score
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.metrics import r2_score
- en: from sklearn.linear_model import SGDRegressor
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.linear_model import SGDRegressor
- en: 'Load the data (austin_weather.csv) and preprocess it up to the point of creating
    the Day_of_Year column and slicing one full year (2015):'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 加载数据（austin_weather.csv）并进行预处理，直到创建 Day_of_Year 列并切割出完整的一年数据（2015年）：
- en: load data and inspect
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据并检查
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: df = pd.read_csv('../Datasets/austin_weather.csv')
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: df = df.loc[:, ['Date', 'TempAvgF']]
- en: add time-based columns
  id: totrans-438
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加基于时间的列
- en: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
- en: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
- en: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
- en: '"""'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: set a 20 day window then use that to smooth
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个20天窗口，然后使用该窗口进行平滑
- en: temperature in a new column
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 温度放在一个新的列中
- en: '"""'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: window = 20
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: window = 20
- en: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
- en: '"""'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: now let's slice exactly one year on the
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们精确切割出一年的数据
- en: calendar start and end dates
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 日历开始和结束日期
- en: we see from the previous output that
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的输出可以看到
- en: 2014 is the first year with complete data,
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年是第一个完整数据的年份，
- en: however it will still have NaN values for
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，它仍然会对某些值产生 NaN
- en: the moving average, so we'll use 2015
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平均，因此我们将使用2015年数据
- en: '"""'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: df_one_year = df.loc[df.Year == 2015, :].reset_index()
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year = df.loc[df.Year == 2015, :].reset_index()
- en: df_one_year['Day_of_Year'] = df_one_year.index + 1
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year['Day_of_Year'] = df_one_year.index + 1
- en: print(df_one_year.head())
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: print(df_one_year.head())
- en: print(df_one_year.tail())
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: print(df_one_year.tail())
- en: 'The output will be as follows:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 3.82: Preprocessed data before scaling'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.82：缩放前的预处理数据'
- en: '](img/image-WYG31OSL.jpg)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-WYG31OSL.jpg)'
- en: 'Figure 3.82: Preprocessed data before scaling'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.82：缩放前的预处理数据
- en: 'Scale the data for training:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放数据以进行训练：
- en: scale the data
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩放数据
- en: X_min = df_one_year.Day_of_Year.min()
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: X_min = df_one_year.Day_of_Year.min()
- en: X_range = df_one_year.Day_of_Year.max() \
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: X_range = df_one_year.Day_of_Year.max() \
- en: '- df_one_year.Day_of_Year.min()'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '- df_one_year.Day_of_Year.min()'
- en: Y_min = df_one_year.TempAvgF.min()
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: Y_min = df_one_year.TempAvgF.min()
- en: Y_range = df_one_year.TempAvgF.max() \
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: Y_range = df_one_year.TempAvgF.max() \
- en: '- df_one_year.TempAvgF.min()'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '- df_one_year.TempAvgF.min()'
- en: scale_X = (df_one_year.Day_of_Year - X_min) / X_range
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: scale_X = (df_one_year.Day_of_Year - X_min) / X_range
- en: train_X = scale_X.ravel()
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: train_X = scale_X.ravel()
- en: train_Y = ((df_one_year.TempAvgF - Y_min) / Y_range).ravel()
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: train_Y = ((df_one_year.TempAvgF - Y_min) / Y_range).ravel()
- en: 'Set random.seed, instantiate the model object with SGDRegressor, and fit the
    model to the training data:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 设置随机种子，实例化 SGDRegressor 模型对象，并拟合模型到训练数据：
- en: create the model object
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型对象
- en: np.random.seed(42)
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: np.random.seed(42)
- en: model = SGDRegressor(loss = 'squared_loss', max_iter = 100, \
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: model = SGDRegressor(loss = 'squared_loss', max_iter = 100, \
- en: learning_rate = 'constant', eta0 = 0.0005, \
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: learning_rate = 'constant', eta0 = 0.0005, \
- en: tol = 0.00009, penalty = 'none')
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: tol = 0.00009, penalty = 'none')
- en: fit the model
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拟合模型
- en: model.fit(train_X.reshape((-1, 1)), train_Y)
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: model.fit(train_X.reshape((-1, 1)), train_Y)
- en: 'The output should be as follows:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 3.83: Model object using SGDRegressor'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.83：使用 SGDRegressor 的模型对象'
- en: '](img/image-837LOO8W.jpg)'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-837LOO8W.jpg)'
- en: 'Figure 3.83: Model object using SGDRegressor'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.83：使用 SGDRegressor 的模型对象
- en: 'Extract the model coefficients and rescale:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 提取模型系数并重新缩放：
- en: Beta0 = (Y_min + Y_range * model.intercept_[0] \
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: Beta0 = (Y_min + Y_range * model.intercept_[0] \
- en: '- Y_range * model.coef_[0] * X_min / X_range)'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '- Y_range * model.coef_[0] * X_min / X_range)'
- en: Beta1 = Y_range * model.coef_[0] / X_range
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: Beta1 = Y_range * model.coef_[0] / X_range
- en: print(Beta0)
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: print(Beta0)
- en: print(Beta1)
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: print(Beta1)
- en: 'The output should be similar to the following:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '61.45512325422412'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '61.45512325422412'
- en: '0.04533603293003107'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '0.04533603293003107'
- en: 'Generate predictions using the scaled data, and then get the r2 value:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 使用缩放后的数据生成预测值，然后获取 r2 值：
- en: generate predictions
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成预测
- en: pred_X = df_one_year['Day_of_Year']
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: pred_X = df_one_year['Day_of_Year']
- en: pred_Y = model.predict(train_X.reshape((-1, 1)))
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: pred_Y = model.predict(train_X.reshape((-1, 1)))
- en: calculate the r squared value
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算 r 平方值
- en: r2 = r2_score(train_Y, pred_Y)
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: r2 = r2_score(train_Y, pred_Y)
- en: print('r squared = ', r2)
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: print('r 平方 = ', r2)
- en: 'The result should be similar to the following:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应类似于以下内容：
- en: r squared = 0.09462157379706759
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: r 平方 = 0.09462157379706759
- en: 'Scale the predictions back to real values and then visualize the results:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 将预测结果缩放回实际值并可视化结果：
- en: scale predictions back to real values
  id: totrans-506
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将预测值缩放回实际值
- en: pred_Y = (pred_Y * Y_range) + Y_min
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: pred_Y = (pred_Y * Y_range) + Y_min
- en: fig = plt.figure(figsize = (10, 7))
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: fig = plt.figure(figsize = (10, 7))
- en: ax = fig.add_axes([1, 1, 1, 1])
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: ax = fig.add_axes([1, 1, 1, 1])
- en: Raw data
  id: totrans-510
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
- en: label = 'Raw Data', c = 'k')
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: label = '原始数据', c = 'k')
- en: Moving averages
  id: totrans-513
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动平均
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
- en: c = 'r', linestyle = '--', \
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: c = 'r', linestyle = '--', \
- en: label = f'{window} day moving average')
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: label = f'{window} 日移动平均')
- en: Regression predictions
  id: totrans-517
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归预测
- en: ax.plot(pred_X, pred_Y, c = "blue", linestyle = '-.', \
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: ax.plot(pred_X, pred_Y, c = "blue", linestyle = '-.', \
- en: linewidth = 4, label = 'linear fit (from SGD)')
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: linewidth = 4, label = '线性拟合（来自 SGD）')
- en: put the model on the plot
  id: totrans-520
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型添加到图表上
- en: ax.text(1, 85, 'Temp = ' + str(round(Beta0, 2)) + ' + ' \
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: ax.text(1, 85, 'Temp = ' + str(round(Beta0, 2)) + ' + ' \
- en: + str(round(Beta1, 4)) + ' * Day', fontsize = 16)#
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: + str(round(Beta1, 4)) + ' * 日期', fontsize = 16)#
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_title('空气温度测量', fontsize = 16)
- en: ax.set_xlabel('Day', fontsize = 16)
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xlabel('日期', fontsize = 16)
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_ylabel('温度 ($^\circ$F)', fontsize = 14)
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
- en: df_one_year.Day_of_Year.max(), 30))
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: df_one_year.Day_of_Year.max(), 30))
- en: ax.tick_params(labelsize = 12)
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: ax.tick_params(labelsize = 12)
- en: ax.legend(fontsize = 12)
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: ax.legend(fontsize = 12)
- en: plt.show()
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 3.84: Results of linear regression using SGDRegressor'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.84：使用 SGDRegressor 进行线性回归的结果'
- en: '](img/image-9X6YLZSP.jpg)'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-9X6YLZSP.jpg)'
- en: 'Figure 3.84: Results of linear regression using SGDRegressor'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.84：使用 SGDRegressor 进行线性回归的结果
- en: Note
  id: totrans-535
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/2AY1bMZ.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 若要访问此特定部分的源代码，请参阅 https://packt.live/2AY1bMZ。
- en: You can also run this example online at https://packt.live/2NgCI86\. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 https://packt.live/2NgCI86 上在线运行这个示例。你必须执行整个 Notebook 才能得到预期的结果。
