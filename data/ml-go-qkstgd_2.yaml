- en: Setting Up the Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: Just like traditional software development, ML application development requires
    the mastery of specialist boilerplate code and a development environment that
    allows the developer to proceed at a pace that has the lowest amount of friction
    and distraction. Software developers typically waste a lot of time with basic
    setup and data wrangling tasks. Being a productive and professional ML developer
    requires the ability to quickly prototype solutions; this means expending as little
    effort as possible on trivial tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 就像传统的软件开发一样，机器学习应用开发需要掌握专业的样板代码和一个允许开发者以最低的摩擦和干扰速度进行工作的开发环境。软件开发者通常会在基本设置和数据整理任务上浪费大量时间。成为一个高效和专业的机器学习开发者需要能够快速原型化解决方案；这意味着在琐碎的任务上尽可能少地付出努力。
- en: In the previous chapter, we outlined the main ML problems and a development
    process that you can follow to obtain a commercial solution. We also explained
    the advantages offered by Go as a programming language when creating ML applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们概述了主要的机器学习问题和你可以遵循以获得商业解决方案的开发流程。我们还解释了Go作为编程语言在创建机器学习应用时所提供的优势。
- en: 'In this chapter, we will guide you through the steps that are required to set
    up a development environment for Go that is optimized for ML applications. Specifically,
    we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将指导你完成设置Go开发环境的步骤，该环境针对机器学习应用进行了优化。具体来说，我们将涵盖以下主题：
- en: How to install Go
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装Go
- en: Running Go interactively using Jupyter and gophernotes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jupyter和gophernotes交互式运行Go
- en: Data wrangling with Gota
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gota进行数据处理
- en: Data visualization with gonum/plot and gophernotes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用gonum/plot和gophernotes进行数据可视化
- en: Data preprocessing (formatting, cleaning, and sampling)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据预处理（格式化、清洗和采样）
- en: Data transformation (normalization and encoding of categorical variables)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据转换（归一化和分类变量的编码）
- en: The code examples that accompany this book are optimized for Debian-based Linux
    distributions. However, they can be adapted for other distributions (for example,
    by changing `apt` to `yum`) and Windows with Cygwin.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书附带的代码示例针对基于Debian的Linux发行版进行了优化。然而，它们可以被适应其他发行版（例如，将`apt`改为`yum`）和Windows的Cygwin。
- en: Once you have completed this chapter, you will be able to quickly explore, visualize,
    and process any dataset for subsequent use by an ML algorithm.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了这一章，你将能够快速探索、可视化和处理任何数据集，以便后续由机器学习算法使用。
- en: Installing Go
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Go
- en: Development environments are personal. Most developers will prefer one code
    editor or toolset over another. While we recommend the use of interactive tools
    such as Jupyter via gophernotes, the only prerequisite to running the code examples
    in this book is a working installation of Go 1.10 or higher. That is, the `go`
    command should be available and the `GOPATH` environment variable should be set
    up correctly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境是个人化的。大多数开发者会更倾向于选择一个代码编辑器或工具集，而不是另一个。虽然我们推荐使用gophernotes通过交互式工具如Jupyter，但运行本书中的代码示例的唯一先决条件是Go
    1.10或更高版本的正常安装。也就是说，`go`命令应该是可用的，并且`GOPATH`环境变量应该设置正确。
- en: To install Go, download a binary release for your system from [https://golang.org/dl/](https://golang.org/dl/).
    Then, refer to the one of the following subsections that matches your operating
    system^([2]).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Go，从[https://golang.org/dl/](https://golang.org/dl/)下载适用于你系统的二进制发布版。然后，参考以下与你的操作系统匹配的子节之一^([2])。
- en: If you only want to use gophernotes to run Go code and you intend to use Docker
    as the installation method, then you can skip this section and go straight to
    the *Running Go interactively with gophernotes* section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想使用gophernotes来运行Go代码，并且打算使用Docker作为安装方法，那么你可以跳过这一部分，直接进入*使用gophernotes交互式运行Go*部分。
- en: Linux, macOS, and FreeBSD
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux、macOS和FreeBSD
- en: 'The binary releases are packaged as tarballs. Extract the binaries and add
    them to your `PATH`. Here''s an example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制发布版被打包成tar包。提取二进制文件并将它们添加到你的`PATH`中。以下是一个示例：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To configure your `GOPATH` environment variable, you will need to decide where
    you will want your Go files, including any personal repositories, to live. One
    possible location is `$HOME/go`. Once you have decided on this, set the environment
    variable, for example as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置`GOPATH`环境变量，你需要决定你的Go文件（包括任何个人仓库）将存放在哪里。一个可能的位置是`$HOME/go`。一旦你决定了这一点，设置环境变量，例如如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To make this instruction permanent, you will need to add this line to `.bashrc`.
    For instructions if you're using other shells (such as `.zsh`), please refer to
    the official Go installation instructions at [https://github.com/golang/go/wiki/SettingGOPATH](https://github.com/golang/go/wiki/SettingGOPATH).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此说明永久生效，您需要将此行添加到 `.bashrc`。如果您使用其他外壳（例如 `.zsh`），请参阅官方 Go 安装说明，网址为 [https://github.com/golang/go/wiki/SettingGOPATH](https://github.com/golang/go/wiki/SettingGOPATH)。
- en: Make sure that your `GOPATH` is not in the same directory as your Go installation,
    otherwise this can cause issues.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 `GOPATH` 不与您的 Go 安装在同一目录中，否则这可能会引起问题。
- en: Windows
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: The binary releases are packaged either as a ZIP file or an MSI installer that
    automatically configures your environment variables. We recommend using the MSI
    installer. However, if you do not, then after extracting the contents of the ZIP
    file to a suitable location (such as `C:\Program Files\Go`), make sure that you
    add the `subdirectory` bin to your `PATH` environment variable using the control
    panel.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制发布版本打包为 ZIP 文件或 MSI 安装程序，该安装程序会自动配置您的环境变量。我们建议使用 MSI 安装程序。但是，如果您不这样做，那么在将
    ZIP 文件的内容提取到合适的位置（例如 `C:\Program Files\Go`）后，请确保您使用控制面板将 `subdirectory` bin 添加到您的
    `PATH` 环境变量中。
- en: Once the binaries have been installed to a suitable location, you will need
    to configure your `GOPATH`. First, decide where you want your Go files, including
    any personal repositories, to live. One possible location is `C:\go`. Once you
    have decided, set the `GOPATH` environment variable to the path of this directory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将二进制文件安装到合适的位置，您需要配置您的 `GOPATH`。首先，决定您想要您的 Go 文件（包括任何个人仓库）存放的位置。一个可能的位置是 `C:\go`。一旦您决定，将
    `GOPATH` 环境变量设置为该目录的路径。
- en: If you are unsure how to set environment variables, refer to the official Go
    installation instructions at [https://github.com/golang/go/wiki/SettingGOPATH](https://github.com/golang/go/wiki/SettingGOPATH).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定如何设置环境变量，请参阅官方 Go 安装说明，网址为 [https://github.com/golang/go/wiki/SettingGOPATH](https://github.com/golang/go/wiki/SettingGOPATH)。
- en: Make sure that your `GOPATH` is not in the same directory as your Go installation,
    otherwise this can cause issues.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的 `GOPATH` 不与您的 Go 安装在同一目录中，否则这可能会引起问题。
- en: Running Go interactively with gophernotes
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 gophernotes 运行 Go 的交互式操作
- en: Project Jupyter is a not-for-profit organization that was created to develop
    language-agnostic interactive computing for data science^([3]). The result is
    a mature, well-supported environment to explore, visualize, and process data that
    can significantly accelerate development by providing immediate feedback and integrations
    with plotting libraries such as `gonum`/`plot`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Project Jupyter 是一个非营利组织，旨在开发面向数据科学的语言无关交互式计算^([3])。结果是成熟、支持良好的环境，可以探索、可视化和处理数据，通过提供即时反馈和与绘图库（如
    `gonum`/`plot`）的集成，可以显著加速开发。
- en: While its first iteration, called iPython, only supported Python-based handlers
    (called *kernels*) at first, the latest version of Jupyter has over 50 kernels
    that support dozens of languages, including three kernels for the Go language^([4]).
    GitHub has support for rendering Jupyter files (called *notebooks*)^([5]), and
    there are various specialized hubs for sharing notebooks online, including Google
    Research Colabs^([6]), Jupyter's community hub called NBViewer^([7]), and its
    enterprise offering, JupyterHub^([8]). Notebooks for presentation purposes can
    be converted into other file formats such as HTML using the nbconvert utility^([9]).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它的第一个迭代版本，称为 iPython，最初只支持基于 Python 的处理器（称为 *kernels*），但 Jupyter 的最新版本已超过
    50 个内核，支持包括 Go 语言在内的数十种语言，其中包含三个 Go 语言的内核^([4])。GitHub 支持渲染 Jupyter 文件（称为 *notebooks*）^([5])，并且有各种专门的在线共享笔记本的枢纽，包括
    Google Research Colabs^([6])、Jupyter 的社区枢纽 NBViewer^([7]) 和其企业产品 JupyterHub^([8])。用于演示目的的笔记本可以使用
    nbconvert 工具转换为其他文件格式，如 HTML^([9])。
- en: In this book, we will be using Jupyter together with the gophernotes kernel
    for Go. The simplest way to get started with gophernotes on Linux and Windows
    is to use its Docker^([10]) image.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用 Jupyter 和 Go 的 gophernotes 内核。在 Linux 和 Windows 上开始使用 gophernotes
    的最简单方法是使用其 Docker^([10]) 镜像。
- en: 'For alternative installation methods, we recommend checking the README page
    of the gophernotes GitHub repository at:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他安装方法，我们建议检查 gophernotes GitHub 存储库的 README 页面：
- en: '[https://github.com/gopherdata/gophernotes](https://github.com/gopherdata/gophernotes).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/gopherdata/gophernotes](https://github.com/gopherdata/gophernotes)。'
- en: 'The steps to begin a new gophernotes-based project are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个基于gophernotes的新项目步骤如下：
- en: Create a new directory to hold the project files (this does not need to be in
    your `GOPATH`).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新目录来存放项目文件（这个目录不需要在您的`GOPATH`中）。
- en: (Optional) Initialize a new git repository by running `git init` in the new
    directory.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）在新目录中运行`git init`来初始化一个新的git仓库。
- en: 'Run the following command from the new directory (you may need to prefix it
    with `sudo`, depending on how you installed Docker):'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从新目录中运行以下命令（根据您如何安装Docker，您可能需要在其前面加上`sudo`）：
- en: '`docker run -it -p 8888:8888 -v $(pwd):/usr/share/notebooks gopherdata/gophernotes:latest-ds`'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`docker run -it -p 8888:8888 -v $(pwd):/usr/share/notebooks gopherdata/gophernotes:latest-ds`'
- en: In the terminal, there will be a URL ending in `?token=[some combination of
    letters and numbers]`. Navigate to this URL in a modern web browser. The new directory
    you created will be mapped to `/usr/share/notebooks`, so navigate to this directory
    in the tree that presents itself.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，将有一个以`?token=[一些字母和数字的组合]`结尾的URL。在现代网络浏览器中导航到这个URL。您创建的新目录将被映射到`/usr/share/notebooks`，因此请导航到树形结构中显示的这个目录。
- en: On Windows, you may need to modify the preceding command by replacing `$(pwd)`
    with `%CD%`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，您可能需要修改前面的命令，将`$(pwd)`替换为`%CD%`。
- en: Now that we have learned how to install Go and set up a basic development environment
    with gophernotes, it's time to learn about data preprocessing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学习了如何安装Go以及如何使用gophernotes设置基本开发环境，现在是时候学习数据预处理了。
- en: Example – the most common phrases in positive and negative reviews
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 - 正面和负面评论中最常见的短语
- en: In our first code example, we will use the multi-domain sentiment dataset (version
    2.0)^([11]). This dataset contains Amazon reviews from four different product
    categories. We will download it, preprocess it, and load it into Gota, a data
    wrangling library, to find the most common phrases in positive and negative reviews
    that do not co-occur in both. This is a basic example that involves no ML algorithms,
    but will serve as a hands-on introduction to Go, gophernotes, and Gota.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个代码示例中，我们将使用多领域情感数据集（版本2.0）^([11]）。这个数据集包含了来自四个不同产品类别的亚马逊评论。我们将下载它，预处理它，并将其加载到Gota数据整理库中，以找到正面和负面评论中最常见的短语，这些短语在两者中不会同时出现。这是一个不涉及ML算法的基本示例，但将作为Go、gophernotes和Gota的实战介绍。
- en: You can find the full code example in the companion repository to this book
    at [https://github.com/PacktPublishing/Machine-Learning-with-Go-Quick-Start-Guide](https://github.com/PacktPublishing/Machine-Learning-with-Go-Quick-Start-Guide).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的配套仓库中找到完整的代码示例，该仓库位于[https://github.com/PacktPublishing/Machine-Learning-with-Go-Quick-Start-Guide](https://github.com/PacktPublishing/Machine-Learning-with-Go-Quick-Start-Guide)。
- en: Initializing the example directory and downloading the dataset
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化示例目录和下载数据集
- en: 'Following the process we implemented previously, create an empty directory
    to hold the code files. Before opening gophernotes, download the dataset from [http://www.cs.jhu.edu/~mdredze/datasets/sentiment/processed_acl.tar.gz](http://www.cs.jhu.edu/~mdredze/datasets/sentiment/processed_acl.tar.gz)
    and extract it to `datasets/words`. On most Linux distributions, you can do this
    with the following script:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 按照我们之前实施的过程，创建一个空目录来存放代码文件。在打开gophernotes之前，从[http://www.cs.jhu.edu/~mdredze/datasets/sentiment/processed_acl.tar.gz](http://www.cs.jhu.edu/~mdredze/datasets/sentiment/processed_acl.tar.gz)下载数据集并将其解压到`datasets/words`目录下。在大多数Linux发行版中，您可以使用以下脚本完成此操作：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, start gophernotes and navigate the tree to `/usr/share/notebooks`. Create
    a new Notebook by clicking on *New* | *Go*. You will see a blank Jupyter Notebook:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，启动gophernotes并导航到`/usr/share/notebooks`。通过点击*New* | *Go*创建一个新的Notebook。您将看到一个空白的Jupyter
    Notebook：
- en: '![](img/d688d626-95d1-4552-a14b-8d7287e0f1df.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d688d626-95d1-4552-a14b-8d7287e0f1df.png)'
- en: Input cells in Jupyter are marked with the `In` label. When you run the code
    in an input cell (*Shift* + *Enter*), a new output cell will be created with the
    result, marked as `Out`. Each cell is numbered with its execution order. For example,
    the `In [1]` cell is the first cell you ran within a given session.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter中的输入单元格带有`In`标签。当您在一个输入单元格中运行代码（*Shift* + *Enter*）时，将创建一个新的输出单元格，其中包含结果，并标记为`Out`。每个单元格都按其执行顺序编号。例如，`In
    [1]`单元格是在给定会话中运行的第一个单元格。
- en: 'Try running some Go statements, like the following snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行一些Go语句，如下面的代码片段：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In particular, note that the `a` variable is displayed in the output cell, even
    though there was no call to `fmt.Println()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意，即使没有调用`fmt.Println()`，`a`变量也会在输出单元格中显示。
- en: All the imports, variables, and funcs you define within a session remain in
    memory, even if you delete the input cells. To clear the current scope, go to
    Kernel | Restart.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个会话中定义的所有导入、变量和函数都将保留在内存中，即使你删除了输入单元格。要清除当前作用域，请转到内核 | 重新启动。
- en: Loading the dataset files
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据集文件
- en: 'One of the basic tasks of data processing is to read the input file and load
    its contents. A simple way to do this is to use the `io/ioutil` utility func `ReadFile`.
    Unlike in a `.go` file, where you would need to place this code inside your `main` func,
    with gophernotes, you can run the following code without declaring any func at
    all:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数据处理的基本任务之一是读取输入文件并加载其内容。完成此任务的一种简单方法是使用 `io/ioutil` 工具函数 `ReadFile`。与 `.go`
    文件不同，在 `.go` 文件中你需要将此代码放在你的 `main` 函数内部，使用 gophernotes，你可以运行以下代码而不需要声明任何函数：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code will load the contents of reviews of kitchen products with
    positive sentiments into a byte slice called `positives` and the ones with negative
    sentiments into the byte slice called `negatives`. If you have correctly downloaded
    the datasets and you run this code, it should not output anything because there
    are no errors. If any errors appear, check that the dataset files have been extracted
    to the correct folder.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将把具有积极情感的厨房产品评论内容加载到名为 `positives` 的字节切片中，将具有消极情感的评论内容加载到名为 `negatives`
    的字节切片中。如果你已正确下载数据集并运行此代码，它不应该输出任何内容，因为没有错误。如果有任何错误出现，请检查数据集文件是否已提取到正确的文件夹。
- en: 'If you have opened the `positive.review` or `negative.review` file in a text
    editor, you may have noticed that they are formatted as a space or newline separated
    list of pairs, that is, `phrase:frequency`. For example, the start of the positive
    review is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在文本编辑器中打开了 `positive.review` 或 `negative.review` 文件，你可能已经注意到它们是以空格或换行符分隔的对列表，即
    `phrase:frequency`。例如，积极评论的开始如下：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the next subsection, we will parse these pairs into a Go struct.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，我们将解析这些对到 Go 结构体中。
- en: Parsing contents into a Struct
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将内容解析到结构体中
- en: 'We will use the `strings` package to parse the contents of the data files into
    slices of pairs. Each item in the slice of strings will contain a single pair,
    such as `them_it:1`. We will then further split this pair by the colon symbol
    and use the `strconv` package to parse the integer frequency into an `int`. Each
    `Pair` will be of the following type:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `strings` 包将数据文件的 内容解析成对数组的切片。字符串切片中的每个项目将包含一个对，例如 `them_it:1`。然后我们将进一步通过冒号符号分割这个对，并使用
    `strconv` 包将整数频率解析为 `int`。每个 `Pair` 将是以下类型：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will do this as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按以下方式操作：
- en: 'First, observe that the separation between the pairs can be either a new line
    (`\n`) or a space. We will use the `strings.Fields` func of the strings package,
    which will split the string by any consecutive whitespace characters:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，观察这些对之间的分隔可以是换行符 (`\n`) 或空格。我们将使用字符串包中的 `strings.Fields` 函数，该函数将字符串按任何连续的空白字符分割：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we will iterate each pair, splitting by the colon separator and using
    the `strconv` package to parse the frequency to an integer:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将迭代每个对，通过冒号分隔符分割，并使用 `strconv` 包将频率解析为整数：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will also return a map of phrases so that we can later exclude phrases that
    are in the intersection between positive and negative reviews. The reason for
    doing this is that words that are common to both positive and negative reviews
    are less likely to be indicative of the positive or negative sentiment. This is
    done with the following function:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将返回一个短语映射，以便我们可以在以后排除正负评论交集中的短语。这样做的原因是，正负评论中共同出现的单词不太可能是积极或消极情感的特征。这是通过以下函数完成的：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we will apply this to our slices of pairs:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将此应用于我们的对数组切片：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The next step is to load the parsed pairs into Gota, the data wrangling library
    for Go.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将解析好的对加载到 Gota 中，这是 Go 的数据处理库。
- en: Loading the data into a Gota dataframe
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据加载到 Gota 数据框中
- en: The Gota library contains implementation of dataframes, series, and some general
    data wrangling algorithms^([12]). The concept of a dataframe is integral to a
    number of popular data science libraries and languages such as Python's pandas,
    R, and Julia. In a nutshell, a **dataframe** is a list of lists (called a **column**
    or **series**) that each have the same length. Every list has a name—the column
    name or series name, depending on the nomenclature favored by the library. This
    abstraction mimics a database table and makes an easy fundamental building block
    for mathematical and statistical tools.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Gota 库包含数据框、系列和一些通用数据处理算法的实现^([12])。数据框的概念对于许多流行的数据科学库和语言（如 Python 的 pandas、R
    和 Julia）至关重要。简而言之，**数据框**是一系列列表（称为**列**或**系列**），每个列表的长度都相同。每个列表都有一个名称——列名或系列名，具体取决于库所采用的命名法。这种抽象模仿了数据库表，并成为数学和统计工具的简单基本构建块。
- en: 'The Gota library has two packages: the `dataframe` and the `series` packages.
    The series package contains functions and structures to represent individual lists,
    whereas the `dataframe` package deals with the entire dataframe—that is, the table—as
    a whole. A Go developer may wish to use Gota to quickly sort, filter, aggregate,
    or perform relational operations, such as inner joins between two tables, saving
    on boilerplate code such as implementing a `sort` interface^([13]).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Gota 库包含两个包：`dataframe` 和 `series` 包。`series` 包包含表示单个列表的函数和结构，而 `dataframe`
    包处理整个数据框——即整个表格——作为一个整体。Go 开发者可能希望使用 Gota 来快速排序、过滤、聚合或执行关系操作，例如两个表之间的内连接，从而节省实现
    `sort` 接口等样板代码^([13])。
- en: 'There are several ways to create a new dataframe with Gota:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Gota 创建新的数据框有几种方法：
- en: '`dataframe.New(se ...series.Series)`: Accepts a slice of series (which can
    be created via the `series.New` func).'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataframe.New(se ...series.Series)`: 接受一个系列切片（可以通过 `series.New` 函数创建）。'
- en: '`dataframe.LoadRecords(records [][]string, options ...LoadOption)`: Accepts
    a slice of slices. The first slice will be a slice of strings representing the
    column names.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataframe.LoadRecords(records [][]string, options ...LoadOption)`: 接受一个字符串切片的切片。第一个切片将是一个表示列名的字符串切片。'
- en: '`dataframe.LoadStructs(i interface{}, options ...LoadOption)`: Accepts a slice
    of structs. Gota will use reflection to determine the column names based on the
    struct field names.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataframe.LoadStructs(i interface{}, options ...LoadOption)`: 接受一个结构体的切片。Gota
    将使用反射根据结构体字段名称来确定列名。'
- en: '`dataframe.LoadMaps(maps []map[string][]interface{})`: Accepts a slice of maps
    of column names to slices.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataframe.LoadMaps(maps []map[string][]interface{})`: 接受一个列名到切片映射的切片。'
- en: '`dataframe.LoadMatrix(mat Matrix)`: Accepts a slice that is compatible with
    the mat64 matrix interface.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataframe.LoadMatrix(mat Matrix)`: 接受与 mat64 矩阵接口兼容的切片。'
- en: 'In our case, because we have parsed the data into structs, we will use the
    `LoadStructs` function, making one dataframe for positive reviews and one for
    negative reviews:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，因为我们已经将数据解析到结构体中，我们将使用 `LoadStructs` 函数，为正面评论和负面评论创建一个数据框：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you want to inspect the content of a dataframe, that is, `df`, just use `fmt.Println(df)`.
    This will show you the first 10 rows of the dataframe, along with its column names
    and some useful metadata, such as the total number of rows.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想检查数据框的内容，即 `df`，只需使用 `fmt.Println(df)`。这将显示数据框的前 10 行，包括其列名和一些有用的元数据，例如总行数。
- en: Finding the most common phrases
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找最常见的短语
- en: 'Now that the data has been parsed, the co-occurring phrases have been filtered
    out, and the resulting phrase/frequency pairs have been loaded into dataframes,
    all that is remaining is to find the most common phrases for the positive and
    negative reviews and display them. One way of doing this without dataframes would
    be to create a `type ByFrequency []Pair` type that implements the `sort` interface,
    and then compose `sort.Reverse` and `sort.Sort` to order positive pairs and negative
    pairs by descending frequency. However, by using Gota, we can achieve this with
    one line per dataframe:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据已经被解析，共现短语已经被过滤，结果短语/频率对已经被加载到数据框中，接下来要做的就是找到正面和负面评论中最常见的短语并显示它们。在不使用数据框的情况下，可以通过创建一个实现
    `sort` 接口的 `type ByFrequency []Pair` 类型来完成这项工作，然后使用 `sort.Reverse` 和 `sort.Sort`
    来按频率降序排列正面和负面配对。然而，通过使用 Gota，我们可以每个数据框一行代码就实现这个功能：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Printing the dataframes now gives the top 10 most common phrases for positive
    and negative reviews of kitchen items, respectively. For positive reviews, we
    have the following output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打印数据框会显示厨房用品正面和负面评论中最常见的10个短语。对于正面评论，我们有以下输出：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For negative reviews, we have the following output:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于负面评论，我们有以下输出：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This completes this example. In the following section, we will cover the other
    transformation and processing features of Gota in more detail.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了本例。在下一节中，我们将更详细地介绍 Gota 的其他转换和处理功能。
- en: Example – exploring body mass index data with gonum/plot
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 - 使用 gonum/plot 探索身体质量指数数据
- en: 'In the previous section, we introduced gophernotes and Gota. In this section,
    we will explore a dataset containing 500 samples of gender, height, and BMI index.
    We will do this using the `gonum/plot` library. This library, which was originally
    a fork of the 2012 Plotinum library^([15]), contains several packages that make
    creating data visualizations in Go much easier^([16]):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了 gophernotes 和 Gota。在本节中，我们将探索包含500个性别、身高和BMI指数样本的数据集。我们将使用 `gonum/plot`
    库来完成这项工作。这个库最初是2012年 Plotinum 库的分支^([15])，它包含几个使 Go 中的数据可视化变得更容易的包^([16])：
- en: The `plot` package contains a layout and formatting interface.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot` 包包含布局和格式化接口。'
- en: The `plotter` package abstracts the layout and formatting for common plot types,
    such as bar charts, scatter plots, and so on.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotter` 包抽象了常见图表类型（如柱状图、散点图等）的布局和格式化。'
- en: The `plotutil` package contains utility funcs for common plot types.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plotutil` 包包含常见图表类型的实用函数。'
- en: The `vg` package exposes an API for vector graphics and is particularly useful
    when exporting plots to other software. We will not be covering this package.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vg` 包公开了一个用于矢量图形的API，在将图表导出到其他软件时特别有用。我们不会介绍这个包。'
- en: Installing gonum and gonum/plot
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 gonum 和 gonum/plot
- en: Regardless of whether you are using the Docker image to run gophernotes as suggested
    previously or a different method, you will need to use `gonum/plot`. To do this,
    run the `go get gonum.org/v1/plot/...` command. If you do not have the `gonum`
    library installed, and you are not using the gophernotes Docker image, you will
    need to install this separately using the `go get github.com/gonum/...` command.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是按照之前建议使用 Docker 镜像运行 gophernotes，还是使用其他方法，你都需要使用 `gonum/plot`。为此，运行 `go
    get gonum.org/v1/plot/...` 命令。如果你没有安装 `gonum` 库，并且没有使用 gophernotes Docker 镜像，你需要使用
    `go get github.com/gonum/...` 命令单独安装它。
- en: To open a terminal from Jupyter, open up the web UI to the tree view (the default
    view) and then click on **New** | **Terminal**.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Jupyter 打开终端，打开树视图（默认视图）的 Web UI，然后点击 **新建** | **终端**。
- en: Note that, despite their names, gonum and gonum/plot are not part of the same
    repository, so you need to install both separately.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管它们的名称相似，但 gonum 和 gonum/plot 并不属于同一个仓库，因此你需要分别安装它们。
- en: Loading the data
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据
- en: 'If you have cloned the project repository, it will already contain the 500-person
    BMI dataset in the `datasets/bmi` folder. You can also download the dataset yourself
    from Kaggle^([14]). The dataset is a single CSV file with the following first
    few rows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经克隆了项目仓库，它将已经包含在 `datasets/bmi` 文件夹中的500人BMI数据集。你也可以从 Kaggle^([14]) 下载数据集。数据集是一个包含以下几行数据的单个CSV文件：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Like in the previous section, we will use `io`/`ioutil` to read the file into
    a byte slice, but this time, we will take advantage of Gota''s ReadCSV method
    (which takes an `io.Reader` as an argument) to directly load the data into a dataframe
    with no preprocessing:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一节类似，我们将使用 `io`/`ioutil` 读取文件到字节切片，但这次，我们将利用 Gota 的 ReadCSV 方法（该方法接受一个 `io.Reader`
    作为参数）直接将数据加载到数据框中，无需预处理：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Inspect the dataframe to make sure that the data has been loaded correctly:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据框以确保数据已正确加载：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that the data types of the series have been inferred automatically.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，序列的数据类型已被自动推断。
- en: Understanding the distributions of the data series
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解数据序列的分布
- en: 'A good way to understand each series is to plot a histogram. This will give
    you an impression of how each series is distributed. Using `gonum`/`plot`, we
    will plot histograms for each series. However, before we plot anything, we can
    quickly access some summary statistics via Gota to gain a rudimentary understanding
    of the dataset:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 了解每个序列的一个好方法是绘制直方图。这将给你一个关于每个序列如何分布的印象。使用 `gonum`/`plot`，我们将为每个序列绘制直方图。然而，在我们绘制任何内容之前，我们可以通过
    Gota 快速访问一些摘要统计信息，以获得对数据集的基本了解：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This tells us that the heights of the sampled individuals lie between 140 cm
    and 199 cm, that their mean and median are 169 cm and 170 cm, respectively, and
    the fact that the mean and the median are so close suggests low skewness—that
    is, a symmetric distribution.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，样本个体的身高介于140厘米和199厘米之间，他们的平均身高和中位数分别为169厘米和170厘米，而平均数和中位数如此接近表明偏度较低——也就是说，分布是对称的。
- en: 'An even quicker way to achieve this for all columns simultaneously is to use
    the `dataframe.Describe` function. This produces another dataframe that contains
    summary statistics of each column:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时为所有列实现这一点的更快方法，请使用`dataframe.Describe`函数。这将生成另一个包含每列摘要统计数据的dataframe：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we will visualize the distributions using histograms. First, we will need
    to convert a column of a Gota dataframe into a plot-friendly `plotter.Values` slice.
    This can be accomplished with the following utility function:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用直方图可视化分布。首先，我们需要将Gota dataframe的某一列转换为绘图友好的`plotter.Values`切片。这可以通过以下实用函数完成：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `dataframe.Col` func extracts just the required column from the given dataframe—in
    our case, a single column. You can also use `dataframe.Select`, which takes a
    slice of strings of column names to return a dataframe containing only the required
    columns. This can be useful for discarding unnecessary data.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`dataframe.Col`函数从给定的dataframe中提取所需的列——在我们的例子中是一个单独的列。您还可以使用`dataframe.Select`，它接受字符串切片的列名，以返回只包含所需列的dataframe。这可以用于丢弃不必要的数据。'
- en: 'Now, we can use gonum/plot to create a JPEG image of a histogram of a given
    column with a chosen title:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用gonum/plot创建给定列的直方图的JPEG图像，并选择一个标题：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To display the resulting plot using gophernotes, use the appropriate method
    of the display object. In this case, we are producing a JPEG image, so calling
    `display.JPEG` with the byte slice that was produced by the preceding code will
    display the plot in the output cell. The full code input cell would be as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用gophernotes显示结果绘图，请使用显示对象的适当方法。在这种情况下，我们生成一个JPEG图像，因此调用`display.JPEG`与前面代码生成的字节切片将显示输出单元格中的绘图。完整的代码输入单元格如下：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In general, the steps to create a new plot from one of gonum''s built-in plotters
    are as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，从gonum的内置绘图器创建新绘图的步骤如下：
- en: Create a new plot with `plot.New()` – this is like a canvas that the plot will
    live on.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`plot.New()`创建一个新的绘图——这就像绘图将存在的画布。
- en: Set any plot attributes, such as its title.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置任何绘图属性，例如其标题。
- en: Create a new plotter based on one of the available types (`BarChart`, `BoxPlot`,
    `ColorBar`, `Contour`, `HeatMap`, `Histogram`, `Line`, `QuartPlot`, `Sankey`,
    or `Scatter`).
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的基于可用类型（`BarChart`、`BoxPlot`、`ColorBar`、`Contour`、`HeatMap`、`Histogram`、`Line`、`QuartPlot`、`Sankey`或`Scatter`）的绘图器。
- en: Set any plotter attributes and add the plotter to the plot by calling its `Add` method.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置任何绘图器属性，并通过调用其`Add`方法将绘图器添加到绘图中。
- en: If you wish to display the plot via gophernotes, use the `WriterTo` method and
    a byte buffer to output the plot data as a slice of bytes that can be passed to
    the built-in display object. Otherwise, use `p.Save` to save the image to a file.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想通过gophernotes显示绘图，请使用`WriterTo`方法和一个字节数组缓冲区将绘图数据输出为字节数组的切片，可以传递给内置的显示对象。否则，使用`p.Save`将图像保存到文件。
- en: If, instead of displaying the image in gophernotes, you wish to save it, you
    can do this with the plot's `Save` method. For example, `p.Save(5*vg.Inch, 4*vg.Inch,
    title + ".png")` will save the plot to a 5" x 4" PNG file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在gophernotes中显示图像而不是保存它，可以使用绘图器的`Save`方法。例如，`p.Save(5*vg.Inch, 4*vg.Inch,
    title + ".png")`将绘图保存为5英寸x 4英寸的PNG文件。
- en: 'The resulting histograms for the 500-person weight/height/BMI dataset are as
    follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 500人体重/身高/BMI数据集的结果直方图如下：
- en: '![](img/28d2f746-280a-4d9c-aaa8-c16831aaae93.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/28d2f746-280a-4d9c-aaa8-c16831aaae93.png)'
- en: In the following example, we will not just load and visualize data, but also
    transform it to make it more suitable for use with an ML algorithm.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，我们不仅将加载数据并可视化，还将对其进行转换，使其更适合与机器学习算法一起使用。
- en: Example – preprocessing data with Gota
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 - 使用Gota预处理数据
- en: 'The quality and speed of the ML algorithm training process depends on the quality
    of the input data. While many algorithms are robust to irrelevant columns and
    data that is not normalized, some are not. For example, many models requires data
    inputs to be normalized to lie between 0 and 1\. In this section, we will look
    at some quick and easy ways to preprocess data with Gota. For these examples,
    we will be using a dataset containing 1,035 records of the height (inch) and weight
    (lbs) of major league baseball players^([17]). The dataset, as described on the
    UCLA website, consists of the following features:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习算法训练过程的质量和速度取决于输入数据的质量。虽然许多算法对无关列和非规范化的数据具有鲁棒性，但有些则不是。例如，许多模型需要数据输入规范化，使其位于0到1之间。在本节中，我们将探讨使用Gota进行数据预处理的快速简单方法。对于这些示例，我们将使用包含1,035条记录的身高（英寸）和体重（磅）的主联赛棒球球员数据集^([17])。根据UCLA网站上的描述，数据集包含以下特征：
- en: '`Name`: Player name'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`姓名`: 球员姓名'
- en: '`Team`: The baseball team that the player was a member of'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`队伍`: 球员所属的棒球队'
- en: '`Position`: The player''s position'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`位置`: 球员的位置'
- en: '`Height (inches)`: Player height'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`身高（英寸）`: 球员身高'
- en: '`Weight (pounds)`: Player weight in pounds'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`体重（磅）`: 球员体重，单位为磅'
- en: '`Age`: Player age at the time of recording'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`年龄`: 记录时的球员年龄'
- en: 'For the purposes of this exercise, we will preprocess the data in the following
    manner:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个练习的目的，我们将以以下方式预处理数据：
- en: Remove the name and team column
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除姓名和队伍列
- en: Convert the height and weight columns into the float type
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将身高和体重列转换为浮点类型
- en: Filter out players with a weight greater than or equal to 260 pounds
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤掉体重大于或等于260磅的球员
- en: Normalize the height and weight columns
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准化身高和体重列
- en: Divide the data into training and validation subsets with approximately 70%
    of rows in the training subset and 30% in the validation subset
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据分为训练集和验证集，其中训练集大约包含70%的行，验证集包含30%
- en: Loading the data into Gota
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据加载到Gota中
- en: The dataset is supplied as an HTML table on the UCLA website^([17]). In the
    companion repository to this book, you will find a CSV version. To quickly convert
    the HTML table yourself into CSV format without needing to write any code, first
    highlight the table and copy and paste this into a spreadsheet program such as
    Microsoft Excel. Then, save the spreadsheet as a CSV file. Open this file in a
    text editor to ensure there are no artefacts or extraneous rows in the file.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集以HTML表格的形式提供在UCLA网站上^([17])。在本书的配套仓库中，你可以找到一个CSV版本。要快速将HTML表格转换为CSV格式，而无需编写任何代码，首先选中表格，然后将其复制并粘贴到电子表格程序，如Microsoft
    Excel中。然后，将电子表格保存为CSV文件。在文本编辑器中打开此文件，以确保文件中没有碎片或多余的行。
- en: 'Loading the dataset is done using the `dataframe.ReadCSV` method. Inspecting
    the dataframe produces the following output:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`dataframe.ReadCSV`方法加载数据集。检查dataframe会产生以下输出：
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Removing and renaming columns
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除和重命名列
- en: 'For this exercise, we have decided that we do not need the `Name` or the `Team`
    columns. We can use the dataframe''s `Select` method to specify a slice of strings
    of column names that we wish to keep:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们决定我们不需要`姓名`或`队伍`列。我们可以使用dataframe的`Select`方法来指定我们希望保留的列名字符串的切片：
- en: '[PRE24]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'While we are at it, the `Height` and `Weight` columns should be renamed to
    remove the units from the column names. This can be achieved with the `Rename` method:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在此同时，`身高`和`体重`列应该重命名以去除单位。这可以通过`Rename`方法实现：
- en: '[PRE25]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The resulting dataset is as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 得到的数据集如下：
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Converting a column into a different type
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将列转换为不同的类型
- en: Our dataframe now has the correct columns with more concise names. However,
    the height and weight columns are of the `int` type, whereas we need them to be
    of the `float` type so that we can correctly normalize their values. The easiest
    way to do this is to add this as a `LoadOption` when first loading the data into
    a dataframe. Namely, `func WithTypes(coltypes map[string]series.Type) LoadOption` accepts
    a map of column names to series types, and we can use this to perform the conversion
    at load time.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据框现在具有正确的列，且列名更简洁。然而，身高和体重列的类型为`int`，而我们需要它们为`float`类型，以便正确规范化它们的值。最容易的方法是在首次将数据加载到dataframe时添加此`LoadOption`。即`func
    WithTypes(coltypes map[string]series.Type) LoadOption`接受一个列名到系列类型的映射，我们可以使用它来在加载时执行转换。
- en: 'However, suppose that we have not done this. In that case, we convert the column
    type by replacing the column with a new series that has the correct type. To generate
    this series, we can use the `series.New` method, together with `df.Col` to isolate
    the column of interest. For example, to produce a series of floats from the current
    height series, we can use the following code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，假设我们没有这样做。在这种情况下，我们通过用具有正确类型的新序列替换列来转换列类型。要生成此序列，我们可以使用 `series.New` 方法，以及
    `df.Col` 来隔离感兴趣的列。例如，要从当前高度序列生成浮点数序列，我们可以使用以下代码：
- en: '[PRE27]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To replace the column, we can use the `Mutate` method:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要替换列，我们可以使用 `Mutate` 方法：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Doing this for both the `Height` and the `Weight` columns now produces the
    following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对 `Height` 和 `Weight` 列都这样做会产生以下输出：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Filtering out unwanted data
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤掉不需要的数据
- en: Suppose that, after exploring the data, we do not wish to keep samples where
    the player weight is greater than or equal to 260 pounds. This could be because
    there are not enough samples of heavier players, and so any analysis would not
    be representative of the player population as a whole. Such players could be called
    **outliers** in regards to the current dataset.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在探索数据后，不希望保留玩家体重大于或等于 260 磅的样本。这可能是因为没有足够重的玩家样本，因此任何分析都不会代表整个玩家群体。这样的玩家可以被称为当前数据集的**异常值**。
- en: You can find the reference (Godocs) for the Gota library at [https://godoc.org/github.com/kniren/gota](https://godoc.org/github.com/kniren/gota).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://godoc.org/github.com/kniren/gota](https://godoc.org/github.com/kniren/gota)
    找到 Gota 库的参考（Godocs）。
- en: 'Gota dataframes can be filtered using the `Filter` func. This accepts a `dataframe.F
    struct`, which consists of the target column, a comparator, and a value, such
    as `{"Column", series.Eq, 1}`, which would match only rows where `Column` was
    equal to `1`. The available comparators are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Gota 数据帧可以使用 `Filter` 函数进行过滤。该函数接受一个 `dataframe.F` 结构，它由目标列、比较器和值组成，例如 `{"Column",
    series.Eq, 1}`，这将仅匹配 `Column` 等于 `1` 的行。可用的比较器如下：
- en: '`series.Eq`: Keeps only rows that are equal to the given value'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`series.Eq`: 仅保留等于给定值的行'
- en: '`series.Neq`: Keeps only rows that are not equal to the given value'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`series.Neq`: 仅保留不等于给定值的行'
- en: '`series.Greater`: Keeps only rows that are greater than the given value'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`series.Greater`: 仅保留大于给定值的行'
- en: '`series.GreaterEq`: Keeps only rows that are greater than or equal to the given
    value'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`series.GreaterEq`: 仅保留大于或等于给定值的行'
- en: '`series.Less`: Keeps only rows that are less than the given value'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`series.Less`: 仅保留小于给定值的行'
- en: '`series.LessEq`: Keeps only rows that are less than or equal to the given value'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`series.LessEq`: 仅保留小于或等于给定值的行'
- en: The `series.Comparator` type is an alias for a string. These strings are the
    same as the ones that are used in the Go language itself. For example, `series.Neq`
    is equivalent to `"!="`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`series.Comparator` 类型是字符串的一个别名。这些字符串与 Go 语言本身使用的字符串相同。例如，`series.Neq` 等同于
    `"!="`。'
- en: 'For this exercise, we will apply the series. We will use the `less` filter
    in order to remove rows where the weight is greater than or equal to 260 pounds:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们将应用序列。我们将使用 `less` 过滤器来删除体重大于或等于 260 磅的行：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Normalizing the Height, Weight, and Age columns
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 归一化身高、体重和年龄列
- en: 'Data normalization, also known as feature scaling, is the process of transforming
    a group of independent variables to map them onto the same range. There are several
    methods to achieve this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 数据归一化，也称为特征缩放，是将一组独立变量转换以映射到相同范围的过程。有几种方法可以实现这一点：
- en: '**Rescaling** **(min/max normalization)**: This will linearly map the variable
    range onto the [0,1] range, where the minimum value of the series will map to
    0 and its maximum will map to 1\. This is achieved by applying the following formula:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放** **（最小/最大归一化）**：这将线性地将变量范围映射到 [0,1] 范围，其中序列的最小值映射到 0，最大值映射到 1。这是通过应用以下公式实现的：'
- en: '![](img/f30229f7-b4a4-48b2-b81a-2e4b65e43a02.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f30229f7-b4a4-48b2-b81a-2e4b65e43a02.png)'
- en: '**Mean normalization**: This will map the variable range if we apply the following
    formula:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**均值归一化**：如果应用以下公式，这将映射变量范围：'
- en: '![](img/21ff6a5a-b923-4483-8996-bc613230a6f8.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/21ff6a5a-b923-4483-8996-bc613230a6f8.png)'
- en: '**Standardization** **(z-score normalization)**: This very common method of
    normalization for ML applications uses the mean and standard deviation to transform
    the series of values into their z-scores, that is, how many standard deviations
    from the mean the data point lies. This is done by computing the mean and standard
    deviation of the series and then applying the following formula:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准化** **（z分数归一化）**：这是一种非常常见的用于机器学习应用的归一化方法，它使用均值和标准差将值序列转换为它们的z分数，即数据点相对于均值的多少个标准差。这是通过计算序列的均值和标准差，然后应用以下公式来完成的：'
- en: '![](img/6e6e18c2-e0bd-427e-853a-3a88497825f3.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6e6e18c2-e0bd-427e-853a-3a88497825f3.png)'
- en: Note that this is not guaranteed to map the variable onto a closed range.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这并不保证将变量映射到封闭范围内。
- en: 'Rescaling can be implemented with the following utility func:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下实用函数实现缩放：
- en: '[PRE31]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Mean normalization can be implemented with the following utility function:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下实用函数实现均值归一化：
- en: '[PRE32]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Standardization can be implemented with the following utility func:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下实用函数实现标准化：
- en: '[PRE33]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For this example, we will apply rescaling to the `Height` and `Weight` columns
    with the following code:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将使用以下代码对`Height`和`Weight`列应用缩放：
- en: '[PRE34]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The result is as follows. Note that the values of the `Height` and `Weight`
    columns now lie between 0 and 1, as intended:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下。请注意，`Height`和`Weight`列的值现在位于0到1之间，正如预期的那样：
- en: '[PRE35]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Sampling to obtain training/validation subsets
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于获取训练/验证子集的采样
- en: When training an ML algorithm, it is useful to reserve a portion of the dataset
    for validation. This is used to test the generalization of the model to previously
    unseen data and thus to ensure its usefulness when presented with real-life data
    that isn't part of the training set. Without the validation step, it is not possible
    to say whether a model will have good predictive power.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练机器学习算法时，保留数据集的一部分用于验证是有用的。这用于测试模型对先前未见数据的泛化能力，从而确保当面对不属于训练集的现实生活数据时，其有用性。没有验证步骤，就无法确定模型是否具有好的预测能力。
- en: 'While there are no accepted conventions regarding how much of the dataset to
    reserve for validation, a fraction between 10% and 30% is common. Research that
    has been conducted into how much of the dataset to reserve for validation concluded
    that the more adjustable parameters a model has, the less the fraction of the
    data needs to be reserved for validation^([18]). For this exercise, we will divide
    our MLB dataset into two subsets: a training subset containing approximately 70%
    of samples, and a validation subset containing 30% of samples. There are two ways
    of doing this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管没有关于为验证保留多少数据集的公认惯例，但通常保留10%到30%的比例。关于为验证保留多少数据集的研究表明，模型的可调整参数越多，需要保留的数据集比例就越小^([18])。在这个练习中，我们将把我们的MLB数据集分为两个子集：一个包含大约70%样本的训练子集，一个包含30%样本的验证子集。有两种方法可以做到这一点：
- en: Select the first 70% of rows to form part of the training subset and the second
    30% to form part of the validation subset
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择前70%的行以形成训练子集的一部分，剩下的30%形成验证子集的一部分
- en: Select a random 70% of samples to form part of the training subset and use the
    remainder for the validation subset
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择随机的70%样本形成训练子集，并使用剩余的样本进行验证
- en: 'In general, it is better to avoid deterministic sampling to ensure that both
    subsets are representative of the overall population. To implement random sampling,
    we will use the `math/rand` package to produce random indices and combine this
    with Gota''s `dataframe.Subset` method. The first step is to generate a random
    permutation of the indices of the dataframe:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，为了避免确定性采样以确保两个子集都能代表总体人口，最好是避免确定性采样。为了实现随机采样，我们将使用`math/rand`包生成随机索引，并将其与Gota的`dataframe.Subset`方法结合。第一步是生成数据框索引的随机排列：
- en: '[PRE36]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, we will take the first 70% of this slice for training and the remaining
    elements for validation, resulting in the following utility:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将从这个切片的前70%用于训练，剩余的元素用于验证，结果如下所示：
- en: '[PRE37]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Applying this to our dataframe with `split(df, 0.7)` produces the following
    output. The first dataframe is the training subset, while the second is the validation
    subset:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将此应用于我们的数据框`split(df, 0.7)`产生以下输出。第一个数据框是训练子集，第二个是验证子集：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Encoding data with categorical variables
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分类变量编码数据
- en: In the preceding dataframe, the `Position` column is a string. Suppose we want
    an ML algorithm to use this input, because, say, we are attempting to predict
    the weight of the player and players in certain positions tend to have different
    body composition. In this case, we need to **encode** the string to a numerical
    value that can be used by the algorithm.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的数据框中，`Position`列是字符串。假设我们希望ML算法使用这个输入，因为，比如说，我们正在尝试预测球员的体重，而处于某些位置的球员往往有不同的身体组成。在这种情况下，我们需要**编码**字符串到一个算法可以使用的数值。
- en: The naive solution is to determine the set of all player positions and assign
    an increasing integer to each member of the set. For example, we might end up
    with the `{Relief_Pitcher, Starting_Pitcher, Shortstop, Outfielder,...}` set,
    whereupon we would assign `0` to `Relief_Pitcher`, `1` to `Starting_Pitcher`,
    `2` to `Shortstop`, and so on. However, the flaw of this approach is in how the
    numbers are assigned, because it gives importance to the order of the categories
    where none exist. Suppose that a step of the ML algorithm computes a mean across
    categories. Therefore, it might conclude that `Starting_Pitcher` is the mean of
    `Relief_Pitcher` and `Shortstop`! Other types of algorithms might infer correlations
    where none exist.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单的方法是确定所有球员位置集合，并为集合中的每个成员分配一个递增的整数。例如，我们可能会得到`{Relief_Pitcher, Starting_Pitcher,
    Shortstop, Outfielder,...}`集合，然后我们将`0`分配给`Relief_Pitcher`，`1`分配给`Starting_Pitcher`，`2`分配给`Shortstop`，依此类推。然而，这种方法的问题在于数字的分配方式，因为它赋予了不存在分类的类别顺序以重要性。假设ML算法的一个步骤是计算跨类别的平均值。因此，它可能会得出结论，`Starting_Pitcher`是`Relief_Pitcher`和`Shortstop`的平均值！其他类型的算法可能会推断出不存在的相关性。
- en: To solve this issue, we can use **one-hot encoding**. This type of encoding
    will split a categorical column with N possible values into N columns. Each of
    the columns, which correspond to one of the categories, will have the value `1`,
    where that input belongs to the given column, and `0` otherwise. This also allows
    for the scenario where an input sample may belong to multiple categories.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以使用**独热编码**。这种编码方式会将具有N个可能值的分类列拆分为N列。每一列，对应于一个分类，将具有值`1`，当输入属于该列时，否则为`0`。这也允许存在一个输入样本可能属于多个分类的情况。
- en: 'The steps to generate a one-hot encoding for a given column with Gota are as
    follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Gota生成给定列的独热编码的步骤如下：
- en: Enumerate the unique values of the categorical column
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出分类列的唯一值
- en: Create a new series for each unique value, mapping each row to `1` if it belongs
    to this category and `0` otherwise
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个唯一值创建一个新的序列，如果行属于该类别则映射为`1`，否则为`0`
- en: Mutate the original dataframe by adding the series created in *step 2* and removing
    the original column
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加步骤2中创建的序列并删除原始列来修改原始数据框
- en: 'Enumerating the unique values can be done easily using a map:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 使用映射可以轻松地枚举唯一值：
- en: '[PRE39]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Note that this makes use of the `series.Records` method to return the values
    of a given column as a slice of strings. Also, note that the order in which the
    values are returned will not necessarily be the same every time. Running this
    func on our dataframe with `UniqueValues(df, "Position")` yields the following
    unique values:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这是使用`series.Records`方法来返回给定列的值作为字符串的切片。同时，注意返回值的顺序不一定每次都相同。使用`UniqueValues(df,
    "Position")`在我们的数据框上运行此函数会得到以下唯一值：
- en: '[PRE40]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The second step is to iterate over the dataframe, creating new series as we
    go along:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是遍历数据框，在过程中创建新的序列：
- en: '[PRE41]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This func will return one series for each unique value of the categorical variable.
    These series will have the names of the categories. In our case, we can call it
    with `OneHotSeries(df, "Position", UniqueValues(df, "Position"))`. Now, we will
    mutate our original dataframe and drop the `Position` column:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将为分类变量的每个唯一值返回一个序列。这些序列将具有类别的名称。在我们的例子中，我们可以使用`OneHotSeries(df, "Position",
    UniqueValues(df, "Position"))`来调用它。现在，我们将修改原始数据框并删除`Position`列：
- en: '[PRE42]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Printing `df` yields the following result:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`df`会得到以下结果：
- en: '[PRE43]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: To conclude, just drop the `Position` column using `df = df.Drop("Position")`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，只需使用`df = df.Drop("Position")`删除`Position`列。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we covered how to set up a development environment for Go that
    is optimized for ML applications. We explained how to install an interactive environment,
    Jupyter, to accelerate data exploration and visualization using libraries such
    as Gota and gonum/plot.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何为Go设置一个针对机器学习应用优化的开发环境。我们解释了如何安装交互式环境Jupyter，以使用Gota和gonum/plot等库加速数据探索和可视化。
- en: 'We also introduced some basic data processing steps, such as filtering outliers,
    removing unnecessary columns, and normalization. Finally, we covered sampling.
    This chapter took the first few steps in the ML life cycle: data acquisition,
    exploration, and preparation. Now that you have read this chapter, you have learned
    how to load data into a Gota dataframe, how to use the dataframe and series packages
    to process and prepare the data into a format that is required by your chosen
    algorithm, and how to visualize it with gonum''s plot package. You have also learned
    about different ways of normalizing the data, which is an important step for improving
    the accuracy and speed of many ML algorithms.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了一些基本的数据处理步骤，例如过滤异常值、删除不必要的列和归一化。最后，我们讨论了采样。本章介绍了机器学习生命周期的前几个步骤：数据获取、探索和准备。现在你已经阅读了本章，你已经学会了如何将数据加载到Gota数据框中，如何使用数据框和序列包来处理和准备数据，使其符合所选算法的要求，以及如何使用gonum的plot包进行可视化。你还了解了不同的数据归一化方法，这是提高许多机器学习算法准确性和速度的重要步骤。
- en: In the next chapter, we will introduce supervised learning algorithms and exemplify
    how to choose an ML algorithm, train it, and validate its predictive power on
    previously unseen data.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍监督学习算法，并举例说明如何选择机器学习算法，训练它，并在未见过的数据上验证其预测能力。
- en: Further readings
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Software Development Waste*. Todd Sedano and Paul Ralph. ICSE ''17 Proceedings
    of the 39th International Conference on Software Engineering. Pages 130-140.'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*软件开发浪费*。托德·塞达诺和保罗·拉尔夫。ICSE ''17 第39届国际软件工程会议论文集。第130-140页。'
- en: See the official Go installation instructions at [https://golang.org/doc/install](https://golang.org/doc/install).
    Retrieved February 19th, 2019.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参阅官方Go安装说明[https://golang.org/doc/install](https://golang.org/doc/install)。获取日期：2019年2月19日。
- en: '[https://jupyter.org/about](https://jupyter.org/about). Retrieved February
    19th, 2019.'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://jupyter.org/about](https://jupyter.org/about). 获取日期：2019年2月19日。'
- en: '[https://github.com/jupyter/jupyter/wiki/Jupyter-kernels](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels).
    Retrieved February 19th, 2019.'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/jupyter/jupyter/wiki/Jupyter-kernels](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels).
    获取日期：2019年2月19日。'
- en: For further instructions, see [https://help.github.com/articles/working-with-jupyter-notebook-files-on-github/](https://help.github.com/articles/working-with-jupyter-notebook-files-on-github/).
    Retrieved February 19th, 2019.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看更多说明，请参阅[https://help.github.com/articles/working-with-jupyter-notebook-files-on-github/](https://help.github.com/articles/working-with-jupyter-notebook-files-on-github/)。获取日期：2019年2月19日。
- en: '[https://colab.research.google.com](https://colab.research.google.com). Retrieved
    February 19th, 2019.'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://colab.research.google.com](https://colab.research.google.com). 获取日期：2019年2月19日。'
- en: '[https://nbviewer.jupyter.org/](https://nbviewer.jupyter.org/). Retrieved February
    19th, 2019.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://nbviewer.jupyter.org/](https://nbviewer.jupyter.org/). 获取日期：2019年2月19日。'
- en: '[https://jupyter.org/hub](https://jupyter.org/hub). Retrieved February 19th,
    2019.'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://jupyter.org/hub](https://jupyter.org/hub). 获取日期：2019年2月19日。'
- en: '[https://github.com/jupyter/nbconvert](https://github.com/jupyter/nbconvert).
    Retrieved February 19th, 2019.'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/jupyter/nbconvert](https://github.com/jupyter/nbconvert).
    获取日期：2019年2月19日。'
- en: For Docker installation instructions, see [https://docs.docker.com/install/](https://docs.docker.com/install/)
    for Linux and [https://docs.docker.com/docker-for-windows/install/](https://docs.docker.com/docker-for-windows/install/)
    for Windows. Retrieved February 19th, 2019.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看Docker安装说明，Linux请参阅[https://docs.docker.com/install/](https://docs.docker.com/install/)，Windows请参阅[https://docs.docker.com/docker-for-windows/install/](https://docs.docker.com/docker-for-windows/install/)。获取日期：2019年2月19日。
- en: 'John Blitzer, Mark Dredze, Fernando Pereira. Biographies, Bollywood, *Boom-boxes
    and Blenders: Domain Adaptation for Sentiment Classification.* Association of
    Computational Linguistics (ACL), 2007.'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 约翰·布利策，马克·德雷兹，费尔南多·佩雷拉。传记，宝莱坞，*音响盒和搅拌机：情感分类的领域自适应*。计算语言学协会（ACL），2007年。
- en: '[https://github.com/go-gota/gota](https://github.com/go-gota/gota). Retrieved
    February 19th, 2019.'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/go-gota/gota](https://github.com/go-gota/gota). 获取日期：2019年2月19日。'
- en: '[https://godoc.org/sort#Interface](https://godoc.org/sort#Interface). Retrieved
    February 19th, 2019.'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://godoc.org/sort#Interface](https://godoc.org/sort#Interface). 获取日期：2019年2月19日。'
- en: '[https://www.kaggle.com/yersever/500-person-gender-height-weight-bodymassindex/version/2](https://www.kaggle.com/yersever/500-person-gender-height-weight-bodymassindex/version/2).
    Retrieved February 20th, 2019.'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://www.kaggle.com/yersever/500-person-gender-height-weight-bodymassindex/version/2](https://www.kaggle.com/yersever/500-person-gender-height-weight-bodymassindex/version/2).
    获取日期：2019年2月20日。'
- en: '[https://code.google.com/archive/p/plotinum/](https://code.google.com/archive/p/plotinum/).
    Retrieved February 20th, 2019.'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://code.google.com/archive/p/plotinum/](https://code.google.com/archive/p/plotinum/).
    获取日期：2019年2月20日。'
- en: '[https://github.com/gonum/plot](https://github.com/gonum/plot). Retrieved February
    20th, 2019.'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/gonum/plot](https://github.com/gonum/plot). 获取日期：2019年2月20日。'
- en: '[http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_MLB_HeightsWeights](http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_MLB_HeightsWeights).
    Retrieved February 20th, 2019.'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_MLB_HeightsWeights](http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_MLB_HeightsWeights).
    获取日期：2019年2月20日。'
- en: Guyon, Isabelle. 1996\. *A Scaling Law for the Validation-Set Training-Set Size
    Ratio*. AT&T Bell Lab. 1.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Guyon, Isabelle. 1996\. *A Scaling Law for the Validation-Set Training-Set Size
    Ratio*. AT&T Bell Lab. 1.
