- en: Setting Up a Docker Container
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Docker容器
- en: Docker is a convenient platform that can package an application and its dependencies
    in a replicable virtual environment that can run on different operating systems.
    In particular, it is well integrated with any **Linux system**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个方便的平台，可以将应用程序及其依赖项打包在一个可复制的虚拟环境中，该环境可以在不同的操作系统上运行。特别是，它与任何**Linux系统**很好地集成。
- en: The replicable virtual environment is described in a **Dockerfile**that contains
    instructions that should be executed in order to achieve the desired virtual environment.
    These instructions mainly include the installation procedure, which is pretty
    much similar to the installation procedure with a Linux shell. Once the environment
    has been created, you can be sure that your app will have the same behavior on
    any other machine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可复制的虚拟环境在一个**Dockerfile**中进行了描述，该文件包含了一系列指令，这些指令应该被执行以实现所需的虚拟环境。这些指令主要包括安装过程，这与使用Linux
    shell的安装过程非常相似。一旦环境创建完成，您可以确信您的应用程序将在任何其他机器上具有相同的行为。
- en: In Docker terminology, the resulting virtual environment is called a **Docker
    image**. You can create an instance of the virtual environment, which is called
    a **Docker container**. After the container is created, you can execute your code
    inside the container.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker术语中，生成的虚拟环境被称为**Docker镜像**。您可以创建虚拟环境的实例，这被称为**Docker容器**。容器创建后，您可以在容器内执行您的代码。
- en: Please follow the installation instructions on the official website in order
    to get Docker up and running on the operating system of your choice: [https://docs.docker.com/install/](https://docs.docker.com/install/)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照官方网站上的安装说明操作，以便在您选择的操作系统上安装并运行Docker：[https://docs.docker.com/install/](https://docs.docker.com/install/)
- en: For your convenience, we are including Dockerfiles, which will make it very
    easy to replicate the environment that we have used to run the code in this book,
    regardless of what operating system you have on your computer. First, we describe
    a Dockerfile that uses only the CPU without GPU acceleration.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了您的方便，我们包括了Dockerfile，这将使复制我们在本书中运行代码所使用的环境变得非常容易，无论您的计算机上安装了什么操作系统。首先，我们描述了一个仅使用CPU而不使用GPU加速的Dockerfile。
- en: Defining a Dockerfile
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义Dockerfile
- en: Instructions in the Dockerfile start from a base image, and then desired installations
    and modifications are done on top of that image.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile中的说明从基镜像开始，然后在那个镜像之上执行所需的安装和修改。
- en: At the time of writing, TensorFlow does not support **Python 3.8**. If you plan
    to run [Chapter 7](0e410c47-1679-4125-9614-54ec0adfa160.xhtml), *Learning to Recognize
    Traffic Signs*, or [Chapter 9](8baf5d4c-f1e9-4b76-b957-e19682cb9e68.xhtml), *Learning
    to Classify and Localize Objects*, where TensorFlow is used, you can start with **Python
    3.7** and then install TensorFlow with `pip`, or you can pick `tensorflow/tensorflow:latest-py3` as
    the base image.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，TensorFlow不支持**Python 3.8**。如果您计划运行[第7章](0e410c47-1679-4125-9614-54ec0adfa160.xhtml)，*学习识别交通标志*，或[第9章](8baf5d4c-f1e9-4b76-b957-e19682cb9e68.xhtml)，*学习分类和定位对象*，其中使用了TensorFlow，您可以从**Python
    3.7**开始，然后使用`pip`安装TensorFlow，或者您可以选择`tensorflow/tensorflow:latest-py3`作为基镜像。
- en: 'Let''s go over the steps to create our environment:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下创建我们环境的步骤：
- en: 'We start from a base image, which is the basic Python image that is based on
    **Debian**:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从一个基镜像开始，这是一个基于**Debian**的基本Python镜像：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We install useful packages that will particularly be used during the installation
    process of OpenCV and other dependencies:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们安装了一些有用的包，这些包将在OpenCV和其他依赖项的安装过程中特别使用：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We download **OpenCV 4.2** together with the contributor packages, which are
    required for non-free algorithms such as **scale-invariant feature transform** (**SIFT**)
    and **speeded-up robust features** (**SURF**):'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们一起下载**OpenCV 4.2**以及贡献者包，这些包对于非免费算法，如**尺度不变特征变换**（**SIFT**）和**加速鲁棒特征**（**SURF**）是必需的：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We install a version of NumPy that works with **OpenCV 4.2**:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们安装了一个与**OpenCV 4.2**兼容的NumPy版本：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We compile OpenCV using appropriate flags:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用适当的标志编译OpenCV：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We link the OpenCV Python binary to the appropriate location so that the interpreter
    can find it:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将OpenCV Python二进制文件链接到适当的位置，以便解释器可以找到它：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This linking might be redundant or result in an error if you have used a base
    image that differs from `python:3.8`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的基镜像与`python:3.8`不同，这种链接可能重复或导致错误。
- en: 'We install other Python packages that are used in the book:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们安装了本书中使用的其他Python包：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, now that we have composed the Dockerfile, we can build the corresponding
    Docker image as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们已经组合了 Dockerfile，我们可以按照以下方式构建相应的 Docker 镜像：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have named the image `cv` and we have passed a Dockerfile located at `dockerfiles/Dockerfile` to
    build the image. Of course, you can place your Dockerfile in any other location.
    The last argument is required in Docker and it specifies a context that might
    be used; for example, if the Dockerfile contains directives to copy files from
    a relative path. In our case, we do not have such directives, and it can be, in
    general, any valid path.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将镜像命名为 `cv`，并将位于 `dockerfiles/Dockerfile` 的 Dockerfile 传递给构建镜像。当然，您可以将您的 Dockerfile
    放在任何其他位置。Docker 的最后一个参数是必需的，它指定了一个可能被使用的上下文；例如，如果 Dockerfile 包含从相对路径复制文件的指令。在我们的情况下，我们没有这样的指令，并且它可以是任何有效的路径。
- en: 'Once the image is built, we can start the `docker` container as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了镜像，我们就可以按照以下方式启动 `docker` 容器：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we have passed the `DISPLAY` environment variable, mounted `/tmp/.X11-unix`,
    and specified the `/dev/video0` device in order to allow the container to use
    the desktop environment and connect to the camera, where the container is used
    in most of the chapters of the book.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们传递了 `DISPLAY` 环境变量，挂载了 `/tmp/.X11-unix`，并指定了 `/dev/video0` 设备，以便容器可以使用桌面环境并连接到相机，其中容器在本书的大部分章节中使用。
- en: If the Docker container fails to connect to the *X* server of your system, you
    might need to run **`$ xhost +local:docker` **on your system in order to allow
    the connection.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Docker 容器无法连接到您系统的 *X* 服务器，您可能需要在您的系统上运行 **`$ xhost +local:docker`** 以允许连接。
- en: So, now that we are up and running with the composed Docker image, let's examine
    how to support GPU acceleration with Docker.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们已经启动并运行了组合的 Docker 镜像，让我们来探讨如何使用 Docker 支持GPU加速。
- en: Working with a GPU
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GPU
- en: The environment that we create with Docker has limited access to the devices
    of your machine. In particular, you have seen that we have specified the camera
    device when running a Docker container and have mounted `/tmp/.X11-unix` in order
    to allow the Docker container to connect to the running desktop environment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Docker 创建的环境对机器的设备访问有限。特别是，您已经看到，在运行 Docker 容器时，我们已经指定了相机设备，并且挂载了 `/tmp/.X11-unix`
    以允许 Docker 容器连接到正在运行的桌面环境。
- en: When we have custom devices such as GPUs, the integration process becomes more
    complicated, because the Docker container needs appropriate ways to talk to the
    device. Fortunately, for **NVIDIA GPUs**, this problem is solved with the help
    of **NVIDIA Container Toolkit **([https://github.com/NVIDIA/nvidia-docker](https://github.com/NVIDIA/nvidia-docker)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们拥有自定义设备，如 GPU 时，集成过程变得更加复杂，因为 Docker 容器需要适当的方式与设备通信。幸运的是，对于 **NVIDIA GPU**，这个问题通过
    **NVIDIA Container Toolkit**（[https://github.com/NVIDIA/nvidia-docker](https://github.com/NVIDIA/nvidia-docker)）得到了解决。
- en: Following installation of the toolkit, you can build and run GPU-accelerated
    Docker containers. Nvidia provides a base image so that you can build your image
    on top of it without bothering about appropriate access to the GPU. The requirement
    is that you should have an appropriate Nvidia driver installed on your system
    with an Nvidia GPU.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装工具包之后，您可以构建和运行带有 GPU 加速的 Docker 容器。Nvidia 提供了一个基础镜像，这样您就可以在其上构建您的镜像，而无需担心对
    GPU 的适当访问。要求是在您的系统上安装了适当的 Nvidia 驱动程序，并且有一个 Nvidia GPU。
- en: 'In our case, we mainly use GPUs for accelerating TensorFlow. TensorFlow itself
    provides an image that can be used to run TensorFlow with GPU acceleration. Therefore,
    to have a GPU-accelerated container, we can simply pick the Docker image of TensorFlow
    and make all other installations on top of it, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们主要使用 GPU 来加速 TensorFlow。TensorFlow 本身提供了一个可以用于带有 GPU 加速运行 TensorFlow
    的镜像。因此，为了有一个带有 GPU 加速的容器，我们可以简单地选择 TensorFlow 的 Docker 镜像，并在其上安装所有其他软件，如下所示：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This declaration will pick TensorFlow version `2.1.0` with GPU acceleration
    and Python 3 support. Note that this version of the TensorFlow image uses **Python
    3.6**. Nevertheless, you can use the remaining part of the Dockerfile for the
    CPU that we described in [Appendix A](a4f1f102-9f62-4644-bcde-f478cd28621a.xhtml), *Profiling
    and Accelerating Your Apps*, and you will be up and running with a container that
    can run the code in this book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个声明将选择带有 GPU 加速和 Python 3 支持的 TensorFlow 版本 `2.1.0`。请注意，这个版本的 TensorFlow 镜像使用
    **Python 3.6**。尽管如此，您可以使用 Dockerfile 的剩余部分来构建 [附录 A](a4f1f102-9f62-4644-bcde-f478cd28621a.xhtml)
    中描述的 CPU，*分析和加速您的应用程序*，您将能够运行本书中的代码。
- en: Once you are done with creating the image, the only modification that you have
    to do when starting a container is to pass one additional argument: `--runtime=nvidia`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建完图像，在启动容器时，你唯一需要做的修改就是传递一个额外的参数：`--runtime=nvidia`。
