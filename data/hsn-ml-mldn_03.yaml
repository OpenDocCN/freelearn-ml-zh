- en: Setting Up the ML.NET Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 ML.NET 环境
- en: Now that you have a firm grasp of the basics of machine learning, an understanding
    of what Microsoft's ML.NET is, and what it provides, it is time to train and create
    your first machine learning model! We will be building a simple restaurant sentiment
    analysis model based on reviews and integrating this model into a simple .NET
    Core application. Before we can jump into training and creating our model, we
    will first have to configure the development environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经掌握了机器学习的基础知识，了解了 Microsoft 的 ML.NET 是什么以及它提供了什么，是时候训练并创建您的第一个机器学习模型了！我们将基于评论构建一个简单的餐厅情感分析模型，并将此模型集成到一个简单的
    .NET Core 应用程序中。在我们开始训练和创建模型之前，我们首先需要配置开发环境。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up your development environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: Creating your first model, from start to finish, with ML.NET
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ML.NET 从头到尾创建您的第一个模型
- en: Evaluating the model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估模型
- en: Setting up your development environment
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: Fortunately, configuring your environment for ML.NET is relatively easy. In
    this section, we will be installing Visual Studio 2019 and .NET Core 3\. If you
    are unsure whether you have either installed, please observe the following steps.
    In addition, there are some organizational elements and processes to establish
    early on as we proceed through this book and you begin experimenting on your own.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，为 ML.NET 配置环境相对简单。在本节中，我们将安装 Visual Studio 2019 和 .NET Core 3。如果您不确定是否已安装，请按照以下步骤操作。此外，在本书的后续章节中，您开始自己实验时，我们还需要尽早建立一些组织元素和流程。
- en: Installing Visual Studio
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Visual Studio
- en: At the heart of ML.NET development is Microsoft Visual Studio. For all samples
    and screenshots used throughout this book, Microsoft Visual Studio 2019 Professional
    on Windows 10 19H2 will be used. At the time of writing, 16.3.0 is the latest
    version. Please use the latest version available. If you do not have Visual Studio
    2019, a fully featured Community version is available for free on [www.visualstudio.com](http://www.visualstudio.com).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ML.NET 开发的核心是 Microsoft Visual Studio。本书中使用的所有示例和截图均基于 Windows 10 19H2 上的 Microsoft
    Visual Studio 2019 Professional。在撰写本文时，16.3.0 是最新版本。请使用最新版本。如果您没有 Visual Studio
    2019，可以在 [www.visualstudio.com](http://www.visualstudio.com) 免费获得功能齐全的社区版。
- en: 'For the scope of this book as mentioned in [Chapter 1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml),
    *Getting Started with Machine Learning and ML.NET*,we will be creating a wide
    range of application types to demonstrate ML.NET in various problem areas on specific
    application platforms. Hence, we are going to install several of the available
    workloads upfront to avoid having to return to the installer in later chapters:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [第 1 章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml) 中所述，本书的范围是*开始使用机器学习和 ML.NET*，我们将创建各种应用程序类型，以展示
    ML.NET 在特定应用平台上的各种问题领域。因此，我们将提前安装几个可用的工作负载，以避免在后续章节中需要返回安装程序：
- en: 'Firstly, ensure that **.NET desktop development**, **Universal Windows Platform
    Development**, and **ASP.NET and web development** are checked. These workloads
    will enable you to create UWP, WPF, and ASP.NET applications that we will be using
    in later chapters:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，请确保已选中**.NET 桌面开发**、**通用 Windows 平台开发**和**ASP.NET 和 Web 开发**。这些工作负载将使您能够创建我们将在后续章节中使用的
    UWP、WPF 和 ASP.NET 应用程序：
- en: '![](img/f155b5c9-7175-43c2-b406-ff163fdf625b.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f155b5c9-7175-43c2-b406-ff163fdf625b.png)'
- en: 'In addition, ensure that **.NET Core cross-platform development** is also checked.
    This will enable .NET Core development for both command-line and desktop apps,
    such as the app we will be making later in this chapter:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，请确保已选中**.NET Core 跨平台开发**。这将使 .NET Core 能够为命令行和桌面应用程序进行开发，例如我们将在本章后面制作的程序：
- en: '![](img/b00ccd5b-b95d-450e-be33-a9e28239b89c.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b00ccd5b-b95d-450e-be33-a9e28239b89c.png)'
- en: Installing .NET Core 3
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 .NET Core 3
- en: 'As mentioned in [Chapter 1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml), *Getting
    Started with Machine Learning and ML.NET*, .NET Core 3 is the preferred .NET framework
    at the time of writing when targeting multiple platforms, due to the optimization
    work achieved during the development of .NET Core 3\. At the time of writing .NET
    Core 3 is not bundled with the Visual Studio Installer prior to version 16.3.0
    and needs to be downloaded separately here: [https://dotnet.microsoft.com/download/dotnet-core/3.0](https://dotnet.microsoft.com/download/dotnet-core/3.0).
    The download specifically used through the scope of this book is version 3.0.100,
    but a newer version may be available by the time you are reading this. For those
    readers who are curious, the runtime is bundled with the SDK.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml)“开始使用机器学习和ML.NET”中所述，由于.NET
    Core 3在开发过程中实现了优化工作，因此在针对多个平台时，.NET Core 3是写作时的首选.NET框架。在写作时，.NET Core 3在版本16.3.0之前的Visual
    Studio安装程序中未捆绑，需要在此处单独下载：[https://dotnet.microsoft.com/download/dotnet-core/3.0](https://dotnet.microsoft.com/download/dotnet-core/3.0)。本书中特定使用的下载版本是3.0.100，但您阅读时可能已有更新的版本。对于好奇的读者，运行时与SDK捆绑在一起。
- en: 'You can verify that the installation was successful by opening a PowerShell
    or Command Prompt and executing the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过打开PowerShell或命令提示符并执行以下命令来验证安装是否成功：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output should begin with *3*, as shown here. At the time of writing, 3.0.100
    is the latest production version available.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应从*3*开始，如下所示。在写作时，3.0.100是可用的最新生产版本。
- en: Be sure to install both 32-bit and 64-bit versions to avoid issues when targeting
    32-bit and 64-bit platforms later on in this book and your future experiments.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安装32位和64位版本，以避免在本书后续部分和未来的实验中针对32位和64位平台时出现的问题。
- en: Creating a process
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个流程
- en: 'Over the course of this book and your own explorations, you will gather sample
    data, build models, and try various applications. Establishing a process early
    on to keep these elements organized will make things easier in the long run. Here
    are a few suggestions to keep in mind:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中以及您自己的探索中，您将收集样本数据，构建模型，并尝试各种应用程序。尽早建立一个流程来组织这些元素将使长期工作更加容易。以下是一些建议，供您参考：
- en: Always use source control for all of your code.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是使用源控制来管理所有代码。
- en: Ensure that test and training sets are named properly in their own folders (versioned
    if possible).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保测试集和训练集在其各自的文件夹中命名正确（如果可能的话，进行版本管理）。
- en: Versioning models with both naming and source control.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名和源控制对模型进行版本管理。
- en: Retain evaluation metrics in a spreadsheet along with the parameters used.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将评估指标和使用的参数保存在电子表格中。
- en: As you develop your skillset and create more complex problems, additional tooling
    such as Apache Spark or other clustering platforms will more than likely be required.
    We will discuss this in [Chapter 11](116bbc2d-9659-4d34-9b2b-26593e29f54a.xhtml),*Training
    and Building Production Models*, along with other suggestions on training at scale.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您技能的提升和更复杂问题的创建，可能需要额外的工具，如Apache Spark或其他聚类平台。我们将在[第11章](116bbc2d-9659-4d34-9b2b-26593e29f54a.xhtml)“训练和构建生产模型”中讨论这一点，以及其他关于大规模训练的建议。
- en: Creating your first ML.NET application
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个ML.NET应用程序
- en: The time has come to start creating your first ML.NET application. For this
    first application, we will create a .NET Core console application. This application
    will classify a sentence of words as either a positive statement or a negative
    statement, training on a small sample dataset provided. For this project, we will
    use a binary logistic regression classification model using the **Stochastic Dual
    Coordinate Ascent** (**SDCA**) method. In [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml), *Regression
    Model*, we will go into greater depth on this method.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始创建您的第一个ML.NET应用程序了。对于这个第一个应用程序，我们将创建一个.NET Core控制台应用程序。这个应用程序将根据提供的小样本数据集对单词句子进行分类，判断其为正面陈述还是负面陈述。对于这个项目，我们将使用**随机对偶坐标上升法**（**SDCA**）的二进制逻辑回归分类模型。在[第3章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml)“回归模型”中，我们将更深入地探讨这种方法。
- en: Creating the project in Visual Studio
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中创建项目
- en: 'Upon opening, and depending on your configuration in Visual Studio, it will
    either open directly on to the project creation screen, or will be an empty Visual
    Studio window. If your environment displays the latter, simply click **File**,
    then **New**, and then **Project**:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 打开时，根据你在 Visual Studio 中的配置，它将直接打开到项目创建屏幕，或者将是一个空的 Visual Studio 窗口。如果你的环境显示后者，只需点击
    **文件**，然后 **新建**，然后 **项目**：
- en: 'When the window opens, type `console app` in the search field to find **Console
    App (.NET Core)**. Make sure that the language type is C# (there are Visual Basic
    templates of the same name), highlight this template, and then click **Next**:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当窗口打开时，在搜索字段中输入 `console app` 以找到 **Console App (.NET Core)**。确保语言类型是 C#（有相同名称的
    Visual Basic 模板），突出显示此模板，然后点击 **下一步**：
- en: '![](img/597d9e75-4c16-48cc-bec9-9f2a1b4a6f05.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/597d9e75-4c16-48cc-bec9-9f2a1b4a6f05.png)'
- en: 'I suggest giving the project name something you can refer back to, such as
    `Chapter02`, to help you find the project later:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我建议给项目命名一个你可以回想起来的名字，比如 `Chapter02`，这样你以后就能找到这个项目：
- en: '![](img/4a2a7bc0-6834-49ad-86d8-a1b239db193c.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a2a7bc0-6834-49ad-86d8-a1b239db193c.png)'
- en: 'At this point, you have a .NET Core 3 console application, so now let''s add
    the `ML.NET` NuGet package. Right-click on the project and click **Manage NuGet
    Packages**:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，你有一个 .NET Core 3 控制台应用程序，所以现在让我们添加 `ML.NET` NuGet 包。在项目上右键单击并点击 **管理 NuGet
    包**：
- en: '![](img/23558c59-1a57-46d2-895f-d68fcb12d343.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23558c59-1a57-46d2-895f-d68fcb12d343.png)'
- en: 'Type `microsoft ml` into the search field. You should see the latest `Microsoft.ML`
    version available:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索字段中输入 `microsoft ml`。你应该能看到可用的最新 `Microsoft.ML` 版本：
- en: '![](img/25864161-c542-4cab-a55d-b4085469a101.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25864161-c542-4cab-a55d-b4085469a101.png)'
- en: Once found, click the **Install** button. Simple!
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦找到，点击 **安装** 按钮。很简单！
- en: At the time of writing, 1.3.1 is the latest version available and all examples
    throughout this book will use that version. Prior to 1.0, the syntax was very
    much in flux, but since then has been consistent, so using a newer version should
    function identically.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，1.3.1 是可用的最新版本，本书中的所有示例都将使用该版本。在 1.0 之前，语法变化很大，但自那时起一直保持一致，因此使用较新版本应该功能相同。
- en: At this point, the project is configured for ML.NET—all future projects will
    reference ML.NET in this fashion and refer you back to these steps.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，项目已经配置为使用 ML.NET——所有未来的项目都将以此方式引用 ML.NET，并回指这些步骤。
- en: Project architecture
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目架构
- en: 'The simple project will be split into two primary functions:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的项目将被分为两个主要功能：
- en: Training and evaluation
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练和评估
- en: Model runs
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型运行
- en: This split between functionality models real-world production applications that
    utilize machine learning, as there are often teams dedicated to each.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这种功能上的分割反映了现实世界的生产应用程序，这些应用程序通常使用机器学习，因为通常有专门的团队负责每个部分。
- en: For those who wish to start with a completed project and follow along with the
    rest of this section, you can get the code from here: [https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter02](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter02)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些希望从完成的项目开始并跟随本节其余部分的人来说，你可以从这里获取代码：[https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter02](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter02)
- en: 'The following screenshot shows the project breakdown in Solution Explorer of
    Visual Studio. As mentioned earlier, the project is split into two main classes—`Predictor`
    and `Trainer`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Visual Studio 解决方案资源管理器中的项目分解。如前所述，项目分为两个主要类——`Predictor` 和 `Trainer`：
- en: '![](img/b4131596-ad64-4b3c-b897-e5b8a14cb398.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4131596-ad64-4b3c-b897-e5b8a14cb398.png)'
- en: The `Trainer` class contains all the model building and evaluation code, while
    the `Predictor` class, as the name implies, contains the code to run predictions
    with a trained model.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`Trainer` 类包含所有模型构建和评估的代码，而 `Predictor` 类，正如其名所示，包含使用训练模型进行预测的代码。'
- en: The `BaseML` class is what we will be using in subsequent chapters and expanding
    upon throughout the remainder of the book. The idea behind this class is to cut
    down on the **DRY** (**don't** **repeat** **yourself**) violations and to create
    a cohesive and easy to iterate framework. The `Constants` class further assists
    this idea—to cut down on magic strings as we move into more complex applications;
    this design will be used in all future chapter projects.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`BaseML`类是我们将在后续章节中使用并在本书的其余部分进行扩展的类。这个类的想法是减少**DRY**（**不要** **重复** **自己**）违规，并创建一个统一且易于迭代的框架。《Constants》类进一步帮助这个想法——在进入更复杂的应用时减少魔法字符串；这种设计将在所有未来的章节项目中使用。'
- en: Lastly, the `Program` class is the main entry point for our console application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Program`类是我们控制台应用程序的主要入口点。
- en: Running the code
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行代码
- en: 'We will now deep dive into the various classes used within this project, including the
    following classes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将深入探讨在这个项目中使用的各种类，包括以下类：
- en: '`RestaurantFeedback`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RestaurantFeedback`'
- en: '`RestaurantPrediction`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RestaurantPrediction`'
- en: '`Trainer`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trainer`'
- en: '`Predictor`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Predictor`'
- en: '`BaseML`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BaseML`'
- en: '`Program`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Program`'
- en: The RestaurantFeedback class
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`RestaurantFeedback`类'
- en: The `RestaurantFeedback` class provides the input class for our model. In ML.NET
    (and other frameworks), the traditional approach is to have a structured input
    to feed into your data pipeline, which, in turn, is passed into the training phase
    and eventually your trained model.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestaurantFeedback`类为我们模型提供输入类。在ML.NET（和其他框架）中，传统的做法是有一个结构化输入来馈入您的数据管道，该管道随后被传递到训练阶段，最终传递到您的训练模型。'
- en: 'The following class defines our container class to hold our prediction values.
    This is the approach that we will use throughout the rest of the book:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类定义了我们的容器类，用于存储预测值。这是我们将在本书的其余部分使用的方法：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You might be wondering what the correlation between the `Label` and `Text`
    properties in the `RestarauntFeedback` class and the source data is at first glance.
    Contained within the `Data` folder, there is a file named `sampledata.csv`. This
    file contains the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道`RestarauntFeedback`类中的`Label`和`Text`属性与源数据之间的相关性。在`Data`文件夹中，有一个名为`sampledata.csv`的文件。此文件包含以下内容：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first column maps to the `Label` property. As you might recall in [Chapter
    1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml), *Getting Started with Machine
    Learning and ML.NET*, supervised learning such as that being performed in this
    sample requires labeling. In this project, our label is a Boolean. False (0) in
    the dataset indicates positive feedback, while True (1) indicates negative feedback.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列映射到`Label`属性。如您在[第1章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml)中回忆的那样，*开始使用机器学习和ML.NET*，监督学习（如本示例中执行的那样）需要标记。在这个项目中，我们的标签是一个布尔值。数据集中的False（0）表示正面反馈，而True（1）表示负面反馈。
- en: The second column maps to the `Text` property to propagate the sentiment (which
    is, the sentence to feed into the model).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第二列映射到`Text`属性以传播情感（即要馈入模型的句子）。
- en: The RestaurantPrediction class
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`RestaurantPrediction`类'
- en: 'The `RestaurantPrediction` class contains the output properties that will come
    out of our model runs. Depending on the algorithm used, the output class, as you
    will find in future chapters, will contain many more properties:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestaurantPrediction`类包含模型运行将输出的属性。根据使用的算法，输出类（您将在未来的章节中找到）将包含更多的属性：'
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Akin to the `RestaurantFeedback Label` property, the `Prediction` property contains
    the overall result of positive or negative feedback. The `Probability` property
    contains the confidence of our model of that decision. The `Score` property is
    used for the evaluation of our model.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与`RestaurantFeedback Label`属性类似，`Prediction`属性包含正面或负面反馈的整体结果。`Probability`属性包含我们对该决策的模型置信度。`Score`属性用于评估我们的模型。
- en: The Trainer class
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Trainer`类'
- en: 'In the following, you will find the sole method in the `Trainer` class. The
    `Trainer` method at a high level does the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下内容中，您将找到`Trainer`类中的唯一方法。从高层次来看，`Trainer`方法执行以下操作：
- en: It loads the training data (in this case our CSV) into memory.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将训练数据（在这种情况下是我们的CSV文件）加载到内存中。
- en: It builds a training set and a test set.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它构建了一个训练集和一个测试集。
- en: It creates the pipeline.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它创建了管道。
- en: It trains and saves the model.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它训练并保存模型。
- en: It performs an evaluation on the model.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它对模型进行评估。
- en: 'This is the structure and flow we will follow throughout the rest of this book.
    Now, let''s dive into the code behind the `Train` method:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们将在本书余下部分遵循的结构和流程。现在，让我们深入到`Train`方法的代码背后：
- en: 'First, we check to make sure that the training data filename exists:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们检查确保训练数据文件名存在：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Even though this is a simple test application, it is always a good practice
    to treat it like a production-grade application. In addition, since this is a
    console application, you may incorrectly pass in a path for the training data,
    which then can cause exceptions further on in the method.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一个简单的测试应用程序，但始终将其视为生产级应用程序是一种良好的实践。此外，由于这是一个控制台应用程序，你可能会错误地传递一个训练数据的路径，这可能导致方法中进一步出现异常。
- en: 'Use the `LoadFromTextFile` helper method that ML.NET provides to assist with
    the loading of text files into an `IDataView` object:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ML.NET提供的`LoadFromTextFile`辅助方法来帮助将文本文件加载到`IDataView`对象中：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, we are passing in both the training filename and the type;
    in this case, it is the `RestaurantFeedback` class mentioned earlier. It should
    be noted that this method has several other parameters, including the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们传递了训练文件名和类型；在这种情况下，它是之前提到的`RestaurantFeedback`类。需要注意的是，此方法还有其他几个参数，包括以下内容：
- en: '`separatorChar`: This is the column separator character; it defaults to `\t`
    (in other words, a tab).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`separatorChar`：这是列分隔符字符；默认为`\t`（换句话说，制表符）。'
- en: '`hasHeader`: If set to `true`, the dataset''s first row has the header; it
    defaults to `false`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hasHeader`：如果设置为`true`，数据集的第一行包含标题；默认为`false`。'
- en: '`allowQuoting`: This defines whether the source file can contain columns defined
    by a quoted string; it defaults to false.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowQuoting`：这定义了源文件是否可以包含由引号字符串定义的列；默认为`false`。'
- en: '`trimWhitespace`: This removes trailing whitespace from the rows; it defaults
    to false.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trimWhitespace`：这会从行中移除尾随空格；默认为`false`。'
- en: '`allowSparse`: This defines whether the file can contain numerical vectors
    in sparse format; it defaults to false. The sparse format requires a new column
    to have the number of features.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowSparse`：这定义了文件是否可以包含稀疏格式的数值向量；默认为`false`。稀疏格式需要一个新列来表示特征的数量。'
- en: For most projects used throughout this book, we will use the default settings.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中使用的多数项目，我们将使用默认设置。
- en: 'Given the `IDataView` object we created previously, use the `TrainTestSplit` method
    that ML.NET provides to create a test set from the main training data:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定我们之前创建的`IDataView`对象，使用ML.NET提供的`TrainTestSplit`方法从主要训练数据中创建一个测试集：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As mentioned in [Chapter 1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml), *Getting
    Started with Machine Learning and ML.NET*, sample data is split into two sets—training
    and test. The parameter, `testFraction`, specifies the percentage of the dataset
    to hold back for testing, in our case, 20%. By default, this parameter is set
    to 0.2.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml)，“开始使用机器学习和ML.NET”中提到的，样本数据被分为两个集合——训练集和测试集。参数`testFraction`指定了保留用于测试的数据集百分比，在我们的例子中是20%。默认情况下，此参数设置为0.2。
- en: 'Firstly, we create the pipeline:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建管道：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Future examples will have a much more complex pipeline. In this example, we
    are simply mapping the `Text` property discussed earlier to the `Features` output
    column.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的示例将有一个更复杂的管道。在这个例子中，我们只是将之前讨论的`Text`属性映射到`Features`输出列。
- en: 'Next, we instantiate our `Trainer` class:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们实例化我们的`Trainer`类：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you might remember from [Chapter 1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml),
    *Getting Started with Machine Learning and ML.NET*, the various algorithms found
    in ML.NET are referred to as trainers. In this project, we are using an SCDA trainer.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从[第1章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml)，“开始使用机器学习和ML.NET”，中记得的那样，ML.NET中找到的各种算法被称为训练器。在这个项目中，我们使用SCDA训练器。
- en: 'Then, we complete the pipeline by appending the trainer we instantiated previously:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过附加之前实例化的训练器来完成管道：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we train the model with the dataset we created earlier in the chapter:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们使用本章之前创建的数据集来训练模型：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We save our newly created model to the filename specified, matching the training
    set''s schema:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将新创建的模型保存到指定的文件名中，与训练集的架构相匹配：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we transform our newly created model with the test set we created earlier:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们使用之前创建的测试集来转换新创建的模型：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we will use the `testSetTransform` function created previously and
    pass it into the `BinaryClassification` class''s `Evaluate` method:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将之前创建的`testSetTransform`函数传递给`BinaryClassification`类的`Evaluate`方法：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method allows us to generate model metrics. We then print the main metrics
    using the trained model with the test set. We will dive into these properties
    specifically in the *Evaluating the Model* section of this chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许我们生成模型度量。然后，我们使用训练模型和测试集打印主要度量。我们将在本章的*评估模型*部分具体探讨这些属性。
- en: The Predictor class
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Predictor`类'
- en: 'The `Predictor` class, as noted earlier, is the class that provides prediction
    support in our project. The idea behind this method is to provide a simple interface
    to run the model, given the relatively simple input. In future chapters, we will
    be expanding this method structure to support more complex integrations, such
    as those hosted in a web application:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`Predictor`类是我们项目中提供预测支持的类。此方法背后的想法是提供一个简单的接口来运行模型，考虑到相对简单的输入。在未来的章节中，我们将扩展此方法结构以支持更复杂的集成，例如托管在Web应用程序中的集成：
- en: 'Akin to what was done in the `Trainer` class, we verify that the model exists
    prior to reading it:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与`Trainer`类中执行的操作类似，我们在读取模型之前验证模型是否存在：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, we define the `ITransformer` object:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义`ITransformer`对象：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This object will contain our model once we load via the `Model.Load` method.
    This method can also take a direct file path. However, the stream approach lends
    itself to support non on-disk approaches that we will use in later chapters.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Model.Load`方法加载模型后，此对象将包含我们的模型。此方法也可以直接接受文件路径。然而，流方法更适合支持我们在后续章节中使用的非磁盘方法。
- en: 'Next, create a `PredictionEngine` object given the model we loaded earlier:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据我们之前加载的模型创建一个`PredictionEngine`对象：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We are passing in both TSrc and TDst, in our case for this project, `RestaurantFeedback`
    and `RestaurantPrediction`, respectively.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递了TSrc和TDst，在我们的项目中，分别是`RestaurantFeedback`和`RestaurantPrediction`。
- en: 'Then, call the `Predict` method on the `PredictionEngine` class:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`PredictionEngine`类上调用`Predict`方法：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Because, when we created the object with TSrc, the type was set to `RestaurantFeedback`,
    we have a strongly typed interface to our model. We then create the `RestaurantFeedback`
    object with the `inputData` variable that contains the string with the sentence
    we are going to run our model on.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因为当我们使用TSrc创建对象时，类型被设置为`RestaurantFeedback`，所以我们有一个对模型的强类型接口。然后，我们使用包含将要运行模型的句子的字符串的`inputData`变量创建`RestaurantFeedback`对象。
- en: 'Finally, display the prediction output along with the probability:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，显示预测输出以及概率：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The BaseML class
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`BaseML`类'
- en: 'The `BaseML` class, as discussed earlier, is going to contain the common code
    between our `Trainer` and `Predictor` classes, starting with this chapter. Over
    the remainder of the book, we will build on top of the `BaseML` class defined
    as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`BaseML`类将包含我们的`Trainer`和`Predictor`类之间的公共代码，从本章开始。在本书的剩余部分，我们将在以下定义的`BaseML`类之上构建：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For all ML.NET applications in both training and predictions, an `MLContext`
    object is required. Initializing the object with a specific seed value is needed
    to create more consistent results during the testing component. Once a model is
    loaded, the seed value (or lack thereof) does not affect the output.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有ML.NET应用，无论是训练还是预测，都需要一个`MLContext`对象。初始化对象时需要一个特定的种子值，以便在测试组件期间创建更一致的结果。一旦加载了模型，种子值（或其缺失）不会影响输出。
- en: The Program class
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Program`类'
- en: 'Those of you who have created console applications should be familiar with
    the `Program` class and the `Main` method within. We will follow this structure
    for other console-based applications throughout the remainder of the book. The
    following code block contains the program class from which the application will
    begin execution:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些创建过控制台应用程序的人来说，应该熟悉`Program`类及其内部的`Main`方法。在本书的剩余部分，我们将遵循此结构来处理其他基于控制台的应用程序。以下代码块包含程序类，应用程序将从该类开始执行：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This constitutes a fairly straightforward method implementation for those familiar
    with parsing command-line arguments. A simple two-argument approach is used as
    the help text indicates.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉解析命令行参数的人来说，这是一个相当直接的方法实现。使用简单的两个参数方法，如帮助文本所示。
- en: When executing a more complex command-line application that takes in several
    arguments (optional and required), Microsoft has provided a simple-to-use NuGet
    package, which is available here: [https://github.com/dotnet/command-line-api](https://github.com/dotnet/command-line-api)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行一个更复杂的命令行应用程序，该应用程序接受多个参数（可选和必需）时，微软提供了一个简单易用的NuGet包，可在以下链接找到：[https://github.com/dotnet/command-line-api](https://github.com/dotnet/command-line-api)
- en: Running the example
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行示例
- en: To run both the training and prediction, simply build the project and then pass
    in the appropriate data.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行训练和预测，只需构建项目，然后传入适当的数据。
- en: 'For training, you can use the included `sampledata.csv` file or create your
    own. We will do this by opening a PowerShell window and passing in the relative
    path:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于训练，您可以使用包含的`sampledata.csv`文件或创建自己的。我们将通过打开PowerShell窗口并传入相对路径来完成此操作：
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once the model is built, you can run the prediction as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了模型，您可以按照以下方式运行预测：
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Feel free to try various phrases to test the efficacy of the model, and congratulations
    on training your first model!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 随意尝试各种短语来测试模型的功效，并祝贺您训练出了您的第一个模型！
- en: Evaluating the model
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估模型
- en: As you saw when running the trainer component of the sample project, there are
    various elements of model evaluation. For each model type, there are different
    metrics to look at when analyzing the performance of a model.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在运行示例项目的训练组件时所见，模型评估有多种元素。对于每种模型类型，在分析模型性能时都有不同的指标要考虑。
- en: 'In binary classification models like the one found in the example project,
    the following properties are exposed in `CalibratedBiniaryClassificationMetrics`
    that we set after calling the `Evaluate` method. However, first, we need to define
    the four prediction types in a binary classification:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在例如示例项目中找到的二分类模型中，我们在调用`Evaluate`方法后，在`CalibratedBiniaryClassificationMetrics`中公开了以下属性。然而，首先，我们需要在二分类中定义四种预测类型：
- en: 'True negative: Properly classified as negative'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真阴性：正确分类为负例
- en: 'True positive: Properly classified as positive'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真阳性：正确分类为正例
- en: 'False negative: Improperly classified as negative'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假阴性：错误地分类为负例
- en: 'False positive: Improperly classified as positive'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假阳性：错误地分类为正例
- en: The first metric to understand is **Accuracy**. As the name implies, accuracy
    is one of the most commonly used metrics when evaluating a model. This metric
    is calculated simply as the ratio of correctly classified predictions to total
    classifications.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要了解的指标是**准确度**。正如其名所示，准确度是在评估模型时最常用的指标之一。该指标简单地计算为正确分类预测与总分类的比率。
- en: The next metric to understand is **Precision**. Precision is defined as the
    proportion of true results over all the positive results in a model. For example,
    a precision of 1 means there were no false positives, an ideal scenario. A false
    positive is classifying something as positive when it should be classified as
    negative, as mentioned previously. A common example of a false positive is misclassifying
    a file as malicious when it is actually benign.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要了解的指标是**精确度**。精确度定义为模型中所有正例中真实结果的比率。例如，精确度为1表示没有假阳性，这是理想场景。如前所述，假阳性是指将某物错误地分类为正例，而它应该被分类为负例。一个常见的假阳性例子是将一个文件错误地分类为恶意文件，而实际上它是良性的。
- en: The next metric to understand is **Recall**. Recall is the fraction of all correct
    results returned by the model. For example, a recall of 1 means there were no
    false negatives, another ideal scenario. A false negative is classifying something
    as negative when it should have been classified as positive.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要了解的指标是**召回率**。召回率是模型返回的所有正确结果的比例。例如，召回率为1表示没有假阴性，这是另一个理想场景。假阴性是指将某物错误地分类为负例，而它应该被分类为正例。
- en: The next metric to understand is the **F-score**, which utilizes both precision
    and recall, producing a weighted average based on the false positives and false
    negatives. F-scores give another perspective on the performance of the model compared
    to simply looking at accuracy. The range of values is between 0 and 1, with an
    ideal value of 1.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要了解的指标是**F分数**，它同时利用了精确度和召回率，基于假阳性和假阴性产生一个加权平均值。F分数提供了与仅查看准确度相比对模型性能的另一种视角。值的范围在0到1之间，理想值为1。
- en: '**Area Under the Curve**, also referred to as AUC, is, as the name implies,
    the area under the curve plotted with true positives on the y-axis and false positives
    on the x-axis. For classifiers such as the model that we trained earlier in this
    chapter, as you saw, this returned values of between 0 and 1.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**曲线下面积**，也称为AUC，正如其名所示，是在y轴上绘制真实正例，x轴上绘制假正例的曲线下的面积。对于本章中我们之前训练的模型等分类器，正如你所看到的，这返回了介于0和1之间的值。'
- en: Lastly, **Average Log Loss** and **Training Log Loss** are both used to further
    explain the performance of the model. The average log loss is effectively expressing
    the penalty for wrong results in a single number by taking the difference between
    the true classification and the one the model predicts. Training log loss represents
    the uncertainty of the model using probability versus the known values. As you
    train your model, you will look to have a low number (lower numbers are better).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**平均对数损失**和**训练对数损失**都用于进一步解释模型的性能。平均对数损失通过取真实分类与模型预测之间的差异，以一个数字有效地表达了错误结果的惩罚。训练对数损失表示模型的不确定性，使用概率与已知值进行比较。随着你训练模型，你将希望得到一个低数值（数值越低越好）。
- en: As regards the other model types, we will deep dive into how to evaluate them
    in their respective chapters, where we will cover regression and clustering metrics.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 关于其他模型类型，我们将在各自的章节中深入探讨如何评估它们，其中我们将涵盖回归和聚类指标。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Over the course of this chapter, we have set up our development environment
    and learned about the proper organization of files going forward. We also created
    our first ML.NET application in addition to training, evaluating, and running
    predictions against a new model. Lastly, we explored how to evaluate a model and
    what the various properties mean.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，我们设置了我们的开发环境，并了解了未来文件组织的正确方式。我们还创建了我们的第一个ML.NET应用程序，除了训练、评估和针对新模型运行预测之外。最后，我们探讨了如何评估模型以及各种属性的含义。
- en: In the next chapter, we will deep dive into logistic regression algorithms.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨逻辑回归算法。
