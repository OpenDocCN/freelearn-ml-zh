- en: Fritz
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fritz
- en: 'We have gone through mobile machine learning SDKs offered by Google—TensorFlow
    for mobile—and Apple—Core ML—in the previous chapters and got a good understanding
    of them. We looked at the basic architecture of those products, the key features
    they offer, and also tried a few tasks/programs using those SDKs. Based on what
    we have explored on the mobile machine learning frameworks and tools so far, we
    will be able to identify a few gaps that make it difficult to carry out mobile
    machine learning deployments and subsequent maintenance and support of those deployments. Let
    me list a few for you:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面章节中已经了解了由Google提供的移动机器学习SDK——TensorFlow for mobile和Apple的Core ML，并对它们有了很好的理解。我们研究了这些产品的基本架构，它们提供的关键特性，并且尝试使用这些SDK进行了一些任务/程序的实践。基于我们对移动机器学习框架和工具的探索，我们将能够识别出一些导致移动机器学习部署及其后续维护和支持困难的差距。让我为您列举几个：
- en: Once we create the machine learning model and import it into the Android or
    iOS application, if there is any change that needs to be done to the model that
    was imported into the mobile application, how do you think this change will be
    implemented and upgraded to the application that is deployed and being used in
    the field? How is it possible to update/upgrade the model without redeploying
    the application in mobile application stores—the App Store or Play Store?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦我们创建了机器学习模型并将其导入到Android或iOS应用程序中，如果需要对导入到移动应用程序中的模型进行任何更改，您认为这种更改将如何实施并升级到正在部署和使用的应用程序？如何在不需要在移动应用程序商店（App
    Store或Play Store）重新部署应用程序的情况下更新/升级模型？
- en: Once the machine learning model is in the field and is being used by users in
    the field, how do we monitor the performance and usage of the model in real-time
    user scenarios?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦机器学习模型在野外投入使用，并且被用户在野外使用，我们如何监控模型在实时用户场景中的性能和用法？
- en: Also, you might have experienced that the process and mechanism to use the machine
    learning models in iOS and Android is not the same. Also, the mechanism to make
    the machine learning models created using a variety of machine learning frameworks,
    such as TensorFlow, and scikit-learn and, in order to make it compatible with
    TensorFlow Lite and Core ML is different. There is no common process and usage
    pattern that developers can follow to create and use these models across frameworks.
    We feel that if there was a common approach to use these machine learning models
    from different vendors using the same process and mechanism, it would be a lot
    more simple.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，您可能已经体验过，在iOS和Android中使用机器学习模型的过程和机制并不相同。同样，将使用各种机器学习框架（如TensorFlow和scikit-learn）创建的机器学习模型与TensorFlow
    Lite和Core ML兼容的机制也不同。没有共同的流程和用法模式供开发者遵循，以跨框架创建和使用这些模型。我们觉得，如果有一个通用的方法来使用来自不同供应商的机器学习模型，并且使用相同的过程和机制，那么事情将会简单得多。
- en: An attempt has been made by the Fritz platform to answer all the previously
    mentioned gaps observed in machine learning model usage and deployment. Fritz,
    as a machine learning platform, tries to provide solutions to facilitate machine
    learning model usage and deployment for mobile applications. It is a mobile machine
    learning platform with ready-to-use machine learning features, along with options
    to import and use custom ML models—TensorFlow for mobile and Core ML models.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Fritz平台已经尝试回答在机器学习模型使用和部署中观察到的所有之前提到的差距。作为机器学习平台，Fritz试图提供解决方案，以简化移动应用程序中机器学习模型的使用和部署。它是一个带有现成机器学习功能的移动机器学习平台，并提供导入和使用自定义ML模型（TensorFlow
    for mobile和Core ML模型）的选项。
- en: 'So, in this chapter, we will be going through the following in detail:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将详细探讨以下内容：
- en: Understanding the Fritz mobile machine learning platform, its features, and
    its advantages.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Fritz移动机器学习平台，其特性及其优势。
- en: Exploring Fritz and implementing an iOS mobile application by using the regression
    model we already created using Core ML.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Fritz并使用我们已创建的Core ML回归模型来实现一个iOS移动应用程序。
- en: Exploring Fritz and implementing an Android mobile application by using the
    sample Android model we created in [Chapter 3](10656284-f170-420b-a35c-e11cf1f3d988.xhtml), *Random
    Forest on iOS*, using TensorFlow for mobile.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Fritz并使用我们在[第3章](10656284-f170-420b-a35c-e11cf1f3d988.xhtml)中创建的示例Android模型来实现一个Android移动应用程序，即使用TensorFlow
    for mobile实现的*iOS上的随机森林*。
- en: Introduction to Fritz
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fritz简介
- en: Fritz is a free end-to-end platform that enables us to create machine learning-powered
    mobile applications easily. It is a platform that enables on-device machine learning,
    that is, it helps to create mobile machine learning applications that can completely
    work on mobile devices. It supports both iOS and Android platforms.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Fritz是一个免费的全端平台，使我们能够轻松创建机器学习驱动的移动应用程序。它是一个支持设备端机器学习的平台，即它有助于创建可以在移动设备上完全运行的移动机器学习应用程序。它支持iOS和Android平台。
- en: Prebuilt ML models
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预构建的ML模型
- en: 'Fritz provides built-in ML models that can be directly used in mobile applications.
    Here are the two important models that Fritz supports:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Fritz提供了可以直接在移动应用程序中使用的内置ML模型。以下是Fritz支持的两种重要模型：
- en: '**Object detection**: You can identify objects of interest in an image or each
    frame of a live video. This helps you to know what objects are in an image, and
    where they are within the image. The object-detection feature makes predictions *completely
    on-device* andrequires no internet connection*.*'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标检测**：您可以在图像或实时视频的每一帧中识别感兴趣的对象。这有助于您了解图像中的对象以及它们在图像中的位置。目标检测功能完全在设备上做出预测，并且不需要互联网连接*.*'
- en: '**Image labeling**: You can identify the contents of an image or each frame
    of live video. This also works completely offline and requires no internet connection.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像标注**：您可以在图像或实时视频的每一帧中识别内容。这也完全离线工作，不需要互联网连接。'
- en: Ability to use custom models
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义模型的能力
- en: Fritz provides us with the ability to import models built for Core ML, TensorFlow
    for mobile, and TensorFlow Lite into mobile applications and provides APIs that
    can interact with these models directly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Fritz为我们提供了将用于Core ML、TensorFlow移动和TensorFlow Lite的模型导入移动应用程序的能力，并提供可以直接与这些模型交互的API。
- en: Model management
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型管理
- en: 'The main advantage of Fritz is that it enables in ML model management and upgrades
    in real time:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Fritz的主要优势在于它能够实时进行ML模型管理和升级：
- en: It provides us with the ability to upgrade the deployed machine learning models
    in the field, that is, it allows developers to upgrade or change the ML model
    without doing an application upgrade and redeploying in mobile application stores.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为我们提供了升级部署到现场机器学习模型的能力，即它允许开发者升级或更改ML模型，而无需进行应用程序升级和在移动应用程序商店中重新部署。
- en: It provides us with the facilities to monitor the performance of the machine
    learning models deployed into the field.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为我们提供了监控部署到现场机器学习模型性能的设施。
- en: It helps with deployment, analytics, and machine learning model management.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于部署、分析和机器学习模型管理。
- en: Hand-on samples using Fritz
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Fritz的动手示例
- en: In this section, we will try using Fritz and the models that we've already created
    for iOS and Android using Core ML and TensorFlow for mobile and build iOS and
    Android mobile applications using Fritz. Along with this, we will see how to use
    the Fritz built-in models, such as object detection and image labeling.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将尝试使用Fritz以及我们使用Core ML和TensorFlow移动为iOS和Android创建的模型，并使用Fritz构建iOS和Android移动应用程序。此外，我们还将了解如何使用Fritz内置的模型，例如目标检测和图像标注。
- en: Using the existing TensorFlow for mobile model in an Android application using
    Fritz
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android应用程序中使用Fritz的现有TensorFlow移动模型
- en: In this section, we are going to see how to use a TensorFlow for mobile model
    that we already have created in an Android mobile application using the Fritz
    toolkit. We are going to take the sample model that we created using TensorFlow
    for mobile to do the summation *(a+b)*. We will go through the detailed steps
    required to achieve this objective.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用Fritz工具包在Android移动应用程序中利用我们已创建的TensorFlow移动模型。我们将使用我们用TensorFlow移动创建的示例模型来进行求和操作
    *(a+b)*。我们将详细介绍实现此目标所需的详细步骤。
- en: Registering with Fritz
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Fritz上注册
- en: 'In order to use Fritz, you must sign up for an account at the Fritz web portal:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Fritz，您必须在Fritz网络门户上注册账户：
- en: Go to [https://fritz.ai/](https://fritz.ai/)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://fritz.ai/](https://fritz.ai/)
- en: Click on Login on the top menu
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部菜单中点击登录
- en: Click on Create an account
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建账户
- en: Enter your details and submit
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的详细信息并提交
- en: Create a new project in Fritz
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Fritz中创建一个新的项目
- en: 'Once you have an account, log in using your credentials, and then perform the
    following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有账户，请使用您的凭证登录，然后执行以下步骤：
- en: Click on the ADD A NEW PROJECT button
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加新项目”按钮
- en: Enter the project name and organization
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目名称和组织
- en: Click on Submit
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击提交
- en: Uploading the model file (.pb or .tflite)
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传模型文件 (.pb 或 .tflite)
- en: Click on Custom Models in the left-hand menu
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的自定义模型
- en: Give the model name and a description
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给模型命名并添加描述
- en: Upload the model file
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传模型文件
- en: Click on the Create model file button
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建模型文件按钮
- en: 'Once it gets uploaded, the model page will look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上传，模型页面将看起来像这样：
- en: '![](img/2203fa09-f4ff-4a7e-bcd0-41a9b5f909a7.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2203fa09-f4ff-4a7e-bcd0-41a9b5f909a7.png)'
- en: Here, we are using the same model that was created in [Chapter 3](10656284-f170-420b-a35c-e11cf1f3d988.xhtml),
    *Random Forest on iOS*: TensorFlow for Android. The GitHub URL is [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/blob/master/tensorflow%20simple/tensor/frozen_tfdroid.pb](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/blob/master/tensorflow%20simple/tensor/frozen_tfdroid.pb).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用的是在[第3章](10656284-f170-420b-a35c-e11cf1f3d988.xhtml)中创建的相同模型，*iOS上的随机森林*：TensorFlow
    for Android。GitHub URL是[https://github.com/PacktPublishing/Machine-Learning-for-Mobile/blob/master/tensorflow%20simple/tensor/frozen_tfdroid.pb](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/blob/master/tensorflow%20simple/tensor/frozen_tfdroid.pb)。
- en: Setting up Android and registering the app
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Android并注册应用
- en: We have created a project and added a model to it. Let's see how to use this
    model in the Android project. Now, I am going to show you how to convert the TensorFlow
    simple example that we saw in [Chapter 3](10656284-f170-420b-a35c-e11cf1f3d988.xhtml), *Random
    Forest on iOS*, to the fritz format. To proceed, open that example in Android
    studio.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个项目并向其中添加了一个模型。让我们看看如何在Android项目中使用这个模型。现在，我将向您展示如何将我们在[第3章](10656284-f170-420b-a35c-e11cf1f3d988.xhtml)中看到的TensorFlow简单示例，*iOS上的随机森林*，转换为fritz格式。要继续，请在该示例中打开Android
    studio。
- en: If you don't have it, you can download it from [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple). In
    the given path there TensorFlow sample is the Android project open it in the Android
    studio.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有它，您可以从[https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple)下载。在给定的路径中，TensorFlow示例是Android项目，在Android
    studio中打开它。
- en: Adding Fritz's TFMobile library
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Fritz的TFMobile库
- en: 'In this section, we will convert this project into a Fritz-managed project.
    In the model page, click on the SDK INSTRUCTIONS button. It will open a dialog
    showing the integration information, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把这个项目转换成一个由Fritz管理的项目。在模型页面，点击SDK说明按钮。它将打开一个对话框，显示集成信息，如下所示：
- en: '![](img/2bd78edd-34d0-44f9-994e-18659b6d168c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bd78edd-34d0-44f9-994e-18659b6d168c.png)'
- en: In this, you will find the API Key, which is unique for the project, the Model
    Id, which changes for every model that you have uploaded, and the code to create
    an interpreter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将找到API密钥，它是项目唯一的，模型ID，它对您上传的每个模型都不同，以及创建解释器的代码。
- en: Adding dependencies to the project
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向项目中添加依赖项
- en: 'In order to access the Fritz interpreter, you need to add dependencies to your
    project. To do this, open the `build.gradle` file of your module app. You need
    to add a repository entry pointing to the Fritz Maven repository. To do this,
    add the following lines:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问Fritz解释器，您需要向项目中添加依赖项。为此，打开您的模块app的`build.gradle`文件。您需要添加一个指向Fritz Maven仓库的仓库条目。为此，添加以下行：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now add the Fritz dependencies:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加Fritz依赖项：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the preceding code, we have added the Fritz core libraries and the `tfmobile`
    library. The Fritz core libraries are required to communicate with the fritz cloud
    server to download the model files for version management. The `tfmobile` libraries
    are required as we are using the TensorFlow mobile model and we need the TensorFlow
    libraries for the inference.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码，我们已经添加了Fritz核心库和`tfmobile`库。Fritz核心库是必需的，用于与fritz云服务器通信以下载版本管理的模型文件。`tfmobile`库也是必需的，因为我们正在使用TensorFlow移动模型，并且我们需要TensorFlow库来进行推理。
- en: Registering the FritzJob service in your Android Manifest
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的AndroidManifest中注册FritzJob服务
- en: I already mentioned that your app will download the model files when deployed
    in the fritz cloud server. To do that, Fritz has implemented a service, named
    `FritzJob` service, which will be running in the background. When it finds a new
    model deployed in your web console, it will try to download it when the device
    is connected to the Wi-Fi.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经提到，当您的应用在fritz云服务器上部署时，您的应用将下载模型文件。为此，Fritz实现了一个名为`FritzJob`的服务，它将在后台运行。当它发现您的Web控制台中部署了新的模型时，当设备连接到Wi-Fi时，它将尝试下载。
- en: 'To log into your cloud account, your app requires some credentials. For that,
    fritz supplies an API key. To enable this, we need to add a meta entry in your
    Android manifest XML file, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录你的云账户，你的应用需要一些凭证。为此，fritz提供了一个API密钥。为了启用此功能，我们需要在你的Android清单XML文件中添加一个元条目，如下所示：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The value of the fritz API key you need to replace with yours that you got from
    the previous dialog in the browser when you clicked SDK INSTRUCTIONS.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要替换的fritz API密钥值，应替换为你从浏览器中点击SDK INSTRUCTIONS时获取的你的API密钥。
- en: 'And we need to declare the Fritz job, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要声明Fritz作业，如下所示：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As our app needs to connect to a cloud server through Wi-Fi, we need to mention
    the internet access permission for that:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用需要通过Wi-Fi连接到云服务器，我们需要提及该互联网访问权限：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, my whole manifest file will look like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我的整个清单文件将看起来像这样：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Replacing the TensorFlowInferenceInterface class with Fritz Interpreter
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将TensorFlowInferenceInterface类替换为Fritz解释器
- en: 'Open the main activity of your app and make the following changes:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的应用的主活动并做出以下更改：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding `import` statements, we have added imports for the Fritz core
    library and Fritz custom model library, and we are also using the Google `TensorflowInfereceInterface`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`import`语句中，我们已添加了对Fritz核心库和Fritz自定义模型库的导入，并且我们还在使用Google的`TensorflowInfereceInterface`：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding lines, we have declared the TensorFlow inference interface
    and loaded the `tensorflow_inference` library, which is optional. This can be
    implicitly done by Fritz itself:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的行中，我们已声明了TensorFlow推理接口并加载了`tensorflow_inference`库，这是可选的。这可以通过Fritz本身隐式完成：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding lines, we have configured the fritz service and linked it with
    the app. Here, it will verify whether the app package name is added to your Fritz
    console.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的行中，我们已经配置了fritz服务并将其与你的应用链接。在这里，它将验证应用包名是否已添加到你的Fritz控制台。
- en: To do so, you need to click Project Settings in the left-hand menu of your project
    in the Fritz web console.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，你需要在Fritz网络控制台中项目左侧菜单中点击项目设置。
- en: 'Then, click on Add android app to your project and it will open a dialog, as
    follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击将Android应用添加到你的项目中，它将打开一个对话框，如下所示：
- en: '![](img/18a86293-cbf8-4227-84f3-e8a3d5b44beb.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18a86293-cbf8-4227-84f3-e8a3d5b44beb.png)'
- en: In this, you need to give a name to your app, for identification purposes. And
    then you need to get the package name from your Android manifest file and enter it
    in the Package ID text field.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你需要给你的应用起一个名字，用于识别目的。然后你需要从你的Android清单文件中获取包名，并在`Package ID`文本字段中输入它。
- en: 'This particular one you can get from the manifest tag of your manifest file,
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的信息你可以从你的清单文件中的清单标签中获取，如下所示：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once you register that, come back to our code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦注册，回到我们的代码：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we are creating an object for our Fritz model. The first argument is the
    application context object, and the second argument is the model information object.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们正在为我们的Fritz模型创建一个对象。第一个参数是应用程序上下文对象，第二个参数是模型信息对象。
- en: In the model settings, we will provide the model ID, This can be obtained from
    the dialog shown when you click the SDK instructions in your model page of the
    Fritz web console.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型设置中，我们将提供模型ID，这可以从你点击Fritz网络控制台中模型页面的SDK说明时显示的对话框中获取。
- en: 'The other important thing is the model path. This is your model file name,
    which you placed in the `assets` folder:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事情是模型路径。这是你的模型文件名，你将其放置在`assets`文件夹中：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the preceding line, we are getting the TensorFlow inference interface object
    and assigning it to the globally declared variable:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的行中，我们正在获取TensorFlow推理接口对象并将其分配给全局声明的变量：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding block, we have registered an event listener, which will perform
    the inference whenever a user clicks the Run button.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们已注册了一个事件监听器，它将在用户点击运行按钮时执行推理。
- en: Building and running the application
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和运行应用
- en: 'To view the result, connect a device and run the project. It will show the
    result, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看结果，连接一个设备并运行项目。它将显示如下结果：
- en: '![](img/f857b572-f948-4a07-8668-75b940557d64.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f857b572-f948-4a07-8668-75b940557d64.png)'
- en: Deploying a new version of your model
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署模型的新版本
- en: The real power of Fritz exists in the automatic download of revised model files.
    Here, we will demonstrate this.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Fritz的真实力量在于自动下载修订后的模型文件。在这里，我们将演示这一点。
- en: So far, we have uploaded our old *(a+b)*^(*2* )model and performed the inference.
    Now, we will update it to *(a+b)*^(*3* )and check whether our app automatically
    downloads the revised model.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经上传了我们的旧*(a+b)*^(*2*)模型并执行了推理。现在，我们将将其更新到*(a+b)*^(*3*)并检查我们的应用是否自动下载了修订后的模型。
- en: 'For that, we need to create the *(a+b)*³ model. First, we need to recall our *Creating
    and saving model* section under [Chapter 4](cb30489a-0fda-4d76-bf46-985510e6e7e7.xhtml), *TensorFlow
    Mobile in Android*, where we created the *(a+b)²* model. We are going to make
    a small change that will convert this model:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要创建*(a+b)*³模型。首先，我们需要回顾[第4章](cb30489a-0fda-4d76-bf46-985510e6e7e7.xhtml)下的*创建和保存模型*部分，即*Android中的TensorFlow
    Mobile*，在那里我们创建了*(a+b)²*模型。我们将进行一个小改动，将这个模型转换：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding program, the only change we have made is to the value of the `times`
    variable, which is now `3`. This will result in multiplying (a+b) by three, which
    gives *(a+b)³*. Please refer to [Chapter 4](cb30489a-0fda-4d76-bf46-985510e6e7e7.xhtml), *TensorFlow
    Mobile in Android*, for instructions on how to run and generate the `.pb` extension
    model file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的程序中，我们唯一做的改动是`times`变量的值，现在它是`3`。这将导致(a+b)乘以三，得到*(a+b)³*。请参阅[第4章](cb30489a-0fda-4d76-bf46-985510e6e7e7.xhtml)，*Android中的TensorFlow
    Mobile*，以获取有关如何运行和生成`.pb`扩展模型文件的说明。
- en: 'Once you get the `frozen_tfdroid.pb` file, you can upload this from the Fritz
    web console of your model page, as shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你得到`frozen_tfdroid.pb`文件，你可以从Fritz模型页面的Web控制台中上传此文件，如图所示：
- en: '![](img/57b49ebc-400c-44b1-984e-f6a5caaea24b.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57b49ebc-400c-44b1-984e-f6a5caaea24b.png)'
- en: 'Expand the Add Updated Model pane and upload the generated model. It will add
    as version 2 in the right-hand side table:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 展开添加更新模型面板并上传生成的模型。它将在右侧表格中添加为版本2：
- en: '![](img/0a05636b-2b11-4778-a16d-eea07381a81d.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a05636b-2b11-4778-a16d-eea07381a81d.png)'
- en: Now you have uploaded a revision of the model, but you haven't published it
    yet. To do so, you need to expand the Release New Version pane and release the
    version you need.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经上传了模型的修订版，但尚未发布。要这样做，你需要展开“发布新版本”面板并发布所需的版本。
- en: Once you do that, all the mobile devices that installed your app will download
    the released model when they get an internet connection through a WiFi network.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你这样做，所有安装了你的应用的移动设备在通过WiFi网络获取互联网连接时，都会下载已发布的模型。
- en: 'Here is the result I got when I connected to my WiFi router and restarted the
    app:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我连接到我的WiFi路由器并重新启动应用时得到的结果：
- en: '![](img/65d6ae9a-3c1b-4fcc-ae7e-9a3bfad4a1e2.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65d6ae9a-3c1b-4fcc-ae7e-9a3bfad4a1e2.png)'
- en: Creating an android application using fritz pre-built models
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用fritz预构建模型创建android应用
- en: 'Fritz offers two pre-built models for both iOS and Android:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Fritz为iOS和Android都提供了两个预构建模型：
- en: Image labeling
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像标记
- en: Object detection
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标检测
- en: In this section, we are going to see how to use the image-labeling model in
    your Android app.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何在你的Android应用中使用图像标记模型。
- en: To do this, you need to create a project in Fritz; please refer to the steps
    given in the *Using existing TensorFlow for mobile model in Android application
    using Fritz *section.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，你需要在Fritz中创建一个项目；请参阅*使用Fritz在Android应用程序中使用现有的TensorFlow Mobile模型*部分中给出的步骤。
- en: Now, open Android studio and create an empty project with empty activity and
    layout files.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开Android Studio并创建一个带有空活动文件和布局文件的空项目。
- en: Adding dependencies to the project
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向项目中添加依赖项
- en: In order to access the fritz interpreter shown in the preceding dialog, you
    need to add dependencies to your project. To do this, open the `build.gradle` file
    of your module app.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问前面对话框中显示的fritz解释器，你需要向你的项目中添加依赖项。为此，打开你的模块应用的`build.gradle`文件。
- en: 'You need to add a repository entry pointing to the fritz maven repository.
    To do that, add the following lines:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要添加一个指向fritz Maven仓库的仓库条目。为此，添加以下行：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, add the fritz dependencies:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加fritz依赖项：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With the preceding lines, we have added the fritz core libraries and fritz vision
    library for labeling. Fritz core libraries are required to communicate with the
    fritz cloud server in order to download the model files for version management.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的行中，我们已经添加了fritz核心库和fritz视觉库用于标记。为了与fritz云服务器通信并下载版本管理所需模型文件，fritz核心库是必需的。
- en: The Fritz vision library for labeling will download the required libraries,
    such as TensorFlow mobile and vision dependencies.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Fritz视觉库用于标记将下载所需的库，例如TensorFlow Mobile和视觉依赖项。
- en: Registering the Fritz JobService in your Android Manifest
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的Android清单中注册Fritz JobService
- en: I already mentioned that your app will download the model files when deployed
    in the fritz cloud server. To do that, Fritz has implemented a service named `FritzJob`.
    This service will be running in the background and when it finds a new model deployed
    in your web console, it will try to download it when the device is connected through
    the WiFi network.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经提到，当你的应用在Fritz云服务器上部署时，它将下载模型文件。为此，Fritz实现了一个名为`FritzJob`的服务。此服务将在后台运行，当它在你网络控制台中找到新部署的模型时，当设备通过WiFi网络连接时，它将尝试下载。
- en: 'To log into your cloud account, your app requires some credentials. For that,
    fritz is supplying an API key. To enable this, we need to add a meta-entry to
    your Android manifest XML file, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了登录你的云账户，你的应用需要一些凭证。为此，Fritz提供了一个API密钥。为了启用此功能，我们需要在你的Android清单XML文件中添加一个元条目，如下所示：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The value of the Fritz API key you need to replace with yours that you got from
    the previous dialog in the browser when you clicked `SDK INSTRUCTIONS`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将Fritz API密钥的值替换为你从浏览器中点击`SDK INSTRUCTIONS`时的上一个对话框中获得的你的密钥。
- en: 'We need to declare the Fritz job, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要声明Fritz作业，如下所示：
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As our app needs to connect to a cloud server through WiFi, we need to mention
    the internet access permission for that:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用需要通过WiFi连接到云服务器，因此我们需要提及该互联网访问权限：
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And we need to add the following lines:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要添加以下行：
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In Android, the camera handling mechanism has been changed to the `camera2`
    package, and the preceding line specifies which `camera2` feature to use. To learn
    more about this, check out [https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL](https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL).
    So, to access the camera, we are adding camera permission also.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中，相机处理机制已更改为`camera2`包，上一行指定了要使用哪个`camera2`功能。要了解更多信息，请查看[https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL](https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL)。因此，为了访问相机，我们还需要添加相机权限。
- en: 'Now, my whole manifest file will look like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我的整个清单文件将看起来像这样：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating the app layout and components
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用布局和组件
- en: 'In your `activity_main.xml` file, which resides in your `assets/layouts` folder,
    you need to input the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`activity_main.xml`文件中，该文件位于你的`assets/layouts`文件夹中，你需要输入以下代码：
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding XML tools, the context value needs to change with your main
    activity.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的XML工具中，上下文值需要根据你的主活动进行更改。
- en: In the preceding XML, we have added a button to receive events, and a texture
    view, which serves as a placeholder for the camera stream.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的XML中，我们添加了一个按钮来接收事件，以及一个纹理视图，它作为相机流的占位符。
- en: 'The design view of the preceding layout will look like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 前面布局的设计视图将看起来像这样：
- en: '![](img/a9e46b74-7a2c-4cb9-9cb0-cf93281afb92.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a9e46b74-7a2c-4cb9-9cb0-cf93281afb92.png)'
- en: Coding the application
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写应用代码
- en: The code for this application can be found in your GitHub repository at [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/Fritz/imagelabelling/imagelabelling](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/Fritz/imagelabelling/imagelabelling).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用的代码可以在你的GitHub仓库中找到，地址为[https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/Fritz/imagelabelling/imagelabelling](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/Fritz/imagelabelling/imagelabelling)。
- en: Once you have downloaded the code open it in Android studio here you can find
    the code in the `MainActivity.java`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下载代码后，在Android Studio中打开它，你可以在`MainActivity.java`中找到代码。
- en: 'To explain the whole code, it may deal more with android code. Here, you can
    find the explanation of the important code blocks:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释整个代码，可能更多地涉及Android代码。在这里，你可以找到对重要代码块的解释：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding line in the `oncreate` life cycle method will initialize the
    Fritz framework:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`oncreate`生命周期方法中的上一行将初始化Fritz框架：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding line will create the configuration options for the label predictor:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行将创建标签预测器的配置选项：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Creating the instance of the predictor:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 创建预测器的实例：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Getting the image saved to the file and converting this as a bitmap:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 获取保存到文件中的图像并将其转换为位图：
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Converting the bitmap image to fritz vision image and supplying that image
    object to the predictor''s `predit` method, which, in turn, returns the predicted
    labels as the list:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 将位图图像转换为Fritz视觉图像，并将该图像对象提供给预测器的`predict`方法，该方法反过来返回预测标签列表：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As the predictor returned a list of `Fritzvisionlabel` objects, we need to decode
    that and show it to the user. The preceding code shows the content and the confidence
    percentage to the user in a Toast message.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于预测器返回了一个`Fritzvisionlabel`对象的列表，我们需要对其进行解码并展示给用户。前面的代码在“Toast”消息中向用户展示了内容和置信度百分比。
- en: Once you run the app, the image frames captured from the camera will be shown
    in the texture view that we have created in our layout.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行应用程序，从摄像头捕获的图像帧将在我们布局中创建的纹理视图中显示。
- en: Once you click the start labellingbutton, it will save the image to the disk
    and input the same image to the `Fritzvisionlabel` predictor. Once you revive
    the prediction results, you will be interpreting it and showing it to the user
    in the form of a `Toast` message.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击“开始标注”按钮，它将保存图像到磁盘并将相同的图像输入到`Fritzvisionlabel`预测器。一旦你恢复预测结果，你将对其进行解释并以“Toast”消息的形式展示给用户。
- en: To make the preceding app work, we need to add this app to your Fritz project.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要使前面的应用程序工作，我们需要将此应用程序添加到你的Fritz项目中。
- en: To do so, click Project Settings in the left-hand menu of your project in the
    Fritz web console.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，请点击Fritz网络控制台中左侧菜单中的“项目设置”。
- en: 'Then, click on Add android app to your project and it will open a dialog, as
    follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击“将Android应用程序添加到项目”并会打开一个对话框，如下所示：
- en: '![](img/0b0e95bb-682e-4063-aa3e-c519b9d2fdb7.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0b0e95bb-682e-4063-aa3e-c519b9d2fdb7.png)'
- en: In this, you need to give a name to your app, for identification purposes. Then
    you need to get the package name from your android manifest file and enter it
    in the `Package ID` text field.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你需要给你的应用程序命名，以便于识别。然后你需要从你的Android清单文件中获取包名并将其输入到“包ID”文本字段中。
- en: 'This can be obtained from the manifest tag of your manifest file as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下方式从你的清单文件中的manifest标签获得：
- en: '[PRE28]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Once you register the app, you can run and see the result by connecting an Android
    device to your PC with the USB-debugging option enabled.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦注册了应用程序，你可以通过将Android设备连接到你的PC并启用USB调试选项来运行和查看结果。
- en: Make sure you disable the Instant run option in your android studio. This can
    be done from the settings option in the file menu.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你禁用了Android Studio中的“Instant run”选项。这可以通过文件菜单中的设置选项完成。
- en: 'Once you successfully run the app, the results will look like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序成功运行，结果将如下所示：
- en: '![](img/ad0939bc-9640-4c81-8070-f7a8d81cec0a.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ad0939bc-9640-4c81-8070-f7a8d81cec0a.png)'
- en: Using the existing Core ML model in an iOS application using Fritz
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Fritz在iOS应用程序中使用现有的Core ML模型
- en: In this section, we are going to see how to use a Core ML model that we already
    have created in an iOS mobile application using the Fritz toolkit. We are going
    to take the `HousePricer.mlmodel` that we created using Core ML using the `Boston`
    dataset and perform house price prediction using a linear regression algorithm.
    We will detail the steps required to achieve this objective.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用Fritz工具包在iOS移动应用程序中利用我们已创建的Core ML模型。我们将使用Core ML和`Boston`数据集创建的`HousePricer.mlmodel`，并使用线性回归算法进行房价预测。我们将详细说明实现此目标所需的步骤。
- en: For this, please download the source code of the linear regression example in
    pack GitHub for house price prediction at [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了此目的，请从Packt GitHub上的线性回归示例源代码下载房价预测，链接为[https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample)。
- en: Registering with Fritz
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Fritz中注册
- en: 'In order to use fritz, you must sign up for an account in the fritz web portal:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Fritz，你必须在Fritz网络门户中注册一个账户：
- en: Go to [https://fritz.ai/](https://fritz.ai/).
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://fritz.ai/](https://fritz.ai/)。
- en: Click on Login on the top menu
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部菜单中的“登录”
- en: Click on Create an account
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建账户”
- en: Enter your details and submit
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的详细信息并提交
- en: Creating a new project in Fritz
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Fritz中创建新项目
- en: 'Once you have an account, log in using your credentials and perform the following
    steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了账户，请使用你的凭证登录并执行以下步骤：
- en: Click on the Add new project button
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加新项目”按钮
- en: Enter the project name and organization
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目名称和组织
- en: Click on Submit
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“提交”
- en: Uploading the model file (.pb or .tflite)
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传模型文件 (.pb 或 .tflite)
- en: 'The following are the steps to upload the model file:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将模型文件上传的步骤：
- en: Click on Custom Models in the left-hand menu
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中点击“自定义模型”
- en: Give the model name and a description
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入模型名称和描述
- en: Upload the model file (`HousePricer.mlmodel`) that got generated in the first
    linear regression chapter after you ran the Python program
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传在运行 Python 程序后生成的第一个线性回归章节中的模型文件 (`HousePricer.mlmodel`)
- en: You can find this file in the downloaded directory: [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample/sample](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample/sample).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在下载目录中找到此文件：[https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample/sample](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample/sample)。
- en: Click on the Create model file button
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建模型文件”按钮
- en: 'Once it gets uploaded, the model page will look like this:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦上传，模型页面将看起来像这样：
- en: '![](img/388b2251-0915-4ced-8ee6-de47f84a637f.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/388b2251-0915-4ced-8ee6-de47f84a637f.png)'
- en: Creating an Xcode project
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Xcode 项目
- en: Now, open the project that you have downloaded in Xcode. The project will look
    like this.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开您在 Xcode 中下载的项目。项目将看起来像这样。
- en: '![](img/647952b8-e3c8-4bc7-9095-af0dd11e5392.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/647952b8-e3c8-4bc7-9095-af0dd11e5392.png)'
- en: Installing Fritz dependencies
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Fritz 依赖项
- en: To install Fritz dependencies, download the pod file for your model from Fritz.
    For that, you need to add your iOS project to your fritz project. This you can
    do from the project settings page in the fritz console.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Fritz 依赖项，从 Fritz 下载您的模型 pod 文件。为此，您需要将您的 iOS 项目添加到您的 fritz 项目中。您可以从 fritz
    控制台的项目设置页面这样做。
- en: 'In the project settings page, click on the Add an IOS project button. Then
    fill in the dialog with the app name shown in the Xcode when you open your app.
    Fill this in with the bundle ID that you can get from the build settings, as shown
    in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目设置页面中，点击“添加 iOS 项目”按钮。然后填写对话框，其中包含您在 Xcode 中打开应用程序时显示的应用程序名称。填写此信息时，请使用从构建设置中获取的捆绑
    ID，如图所示：
- en: '![](img/c5bd250b-1d65-40ad-9c93-0d501444391f.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c5bd250b-1d65-40ad-9c93-0d501444391f.png)'
- en: 'You will then be allowed to download the `Fritz-info.plist` file. Add this
    file to your project folder in Xcode, as shown in the following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将被允许下载 `Fritz-info.plist` 文件。将此文件添加到 Xcode 中的项目文件夹中，如图所示：
- en: '![](img/7800ef41-c27c-482b-9d2f-e97b8767b914.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7800ef41-c27c-482b-9d2f-e97b8767b914.png)'
- en: 'After that, you need to close Xcode, navigate to your project folder from a
    terminal, and give the following commands, one by one:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您需要关闭 Xcode，从终端导航到您的项目文件夹，并依次执行以下命令：
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This creates a `.xcworkspace` file for your app. Use this file for all future
    developments on your application.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这为您创建了一个 `.xcworkspace` 文件，用于您的应用程序。使用此文件进行所有未来的应用程序开发。
- en: Now close your Xcode application and re-open the project using this file.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在关闭您的 Xcode 应用程序，并使用此文件重新打开项目。
- en: Adding code
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加代码
- en: 'Open your model console in the fritz console. It will have a button - SDK Instructions
    click on this it will open a dialog as shown in the following screenshot. As shown
    in the dialog box, create a new file with the filename shown and paste/write the
    code in it:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 fritz 控制台中打开您的模型控制台。它将有一个按钮 - SDK 指令，点击此按钮将打开如下截图所示的对话框。如图所示，创建一个具有所示文件名的新的文件，并将代码粘贴/写入其中：
- en: '![](img/5dfa23e8-7f8e-4cec-98ba-2d33f72e5034.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5dfa23e8-7f8e-4cec-98ba-2d33f72e5034.png)'
- en: 'Now, once you have added this file, you need to open `AppDelegate.swift` and
    make the following modifications:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦添加了此文件，您需要打开 `AppDelegate.swift` 并进行以下修改：
- en: First, add a new import as
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，添加一个新的导入语句
- en: Import `Fritz`
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入 `Fritz`
- en: 'Now in app delegate class:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在在应用程序代理类中：
- en: '[PRE30]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Replace the previously method definition as shown here:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 替换之前的方法定义，如图所示：
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Building and running the iOS mobile application
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建、运行 iOS 移动应用程序
- en: 'Similar to how we build the iOS mobile applications, build and run the project
    in an emulator and it will give you the following results:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们构建 iOS 移动应用程序的方式类似，在模拟器中构建和运行项目，它将给出以下结果：
- en: '![](img/e334ddc3-0a45-4f49-b728-82d802c0e191.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e334ddc3-0a45-4f49-b728-82d802c0e191.png)'
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we learned about Fritz, an end-to-end platform that enables
    us to create machine learning applications. We also looked at pre-built ML models
    and how to use custom models in Fritz. Then, we explored how we can implement
    Fritz in Core ML in iOS and Android. Finally, we created two applications using
    the Fritz library: one using a pre-built fritz model, and the other using a Core
    ML model for iOS. In the next chapter, we will learn about neural networks and
    their uses for mobile applications and machine learning.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Fritz，这是一个端到端平台，使我们能够创建机器学习应用。我们还探讨了预构建的ML模型以及如何在Fritz中使用自定义模型。接着，我们研究了如何在iOS和Android中实现Fritz到Core
    ML的迁移。最后，我们使用Fritz库创建了两个应用：一个使用预构建的fritz模型，另一个使用iOS的Core ML模型。在下一章中，我们将学习神经网络及其在移动应用和机器学习中的用途。
