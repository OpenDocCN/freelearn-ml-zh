- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Time-Series with Python
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python介绍时间序列
- en: This book is about machine learning for time-series with Python, and you can
    see this chapter as a 101 class for time-series. In this chapter, we'll introduce
    time-series, the history of research into time-series, and how to use Python for
    time-series.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书讲的是关于Python的时间序列机器学习，你可以将本章看作是时间序列的入门课程。在本章中，我们将介绍时间序列、时间序列研究的历史，以及如何使用Python进行时间序列分析。
- en: We'll start with what a time-series is and its main properties. We'll then look
    at the history of the study of time-series in different scientific disciplines
    foundational to the field, such as demography, astronomy, medicine, and economics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从时间序列的定义及其主要特性开始。接着，我们将探讨不同科学领域中时间序列研究的历史，这些领域为该学科奠定了基础，例如人口学、天文学、医学和经济学。
- en: Then, we'll go over the capabilities of Python for time-series and why Python
    is the go-to language for doing machine learning with time-series. Finally, I
    will describe how to install the most prominent libraries in Python for time-series
    analysis and machine learning, and we'll cover the basics of Python as relevant
    to time-series and machine learning.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将探讨Python在时间序列方面的能力，以及为什么Python是做时间序列机器学习的首选语言。最后，我将介绍如何安装Python中用于时间序列分析和机器学习的主要库，并将涵盖与时间序列和机器学习相关的Python基础知识。
- en: 'We''re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖以下主题：
- en: What Is a Time-Series?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是时间序列？
- en: Characteristics of Time-Series
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间序列的特性
- en: Time-Series and Forecasting – Past and Present
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间序列与预测 – 过去与现在
- en: Demography
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人口学
- en: Genetics
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗传学
- en: Astronomy
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 天文学
- en: Economics
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经济学
- en: Meteorology
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 气象学
- en: Medicine
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 医学
- en: Applied Statistics
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用统计学
- en: Python for Time-Series
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python与时间序列
- en: But what is a time-series? Let's start with a definition!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是时间序列呢？让我们从定义开始！
- en: What Is a Time-Series?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是时间序列？
- en: Since this is a book about time-series data, we should start with a clarification
    of what we are talking about. In this section, we'll introduce time-series and
    their characteristics, and we'll go through different kinds of problems and types
    of analyses relevant to machine learning and statistics.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一本关于时间序列数据的书，我们应该首先澄清我们所讨论的内容。在本节中，我们将介绍时间序列及其特性，并深入探讨与机器学习和统计学相关的不同问题和分析类型。
- en: 'Many disciplines, such as finance, public administration, energy, retail, and
    healthcare, are dominated by time-series data. Large areas of micro- and macro-economics
    rely on applied statistics with an emphasis on time-series analyses and modeling.
    The following are examples of time-series data:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多学科，如金融、公共行政、能源、零售和医疗保健，主要依赖时间序列数据。微观经济学和宏观经济学的很多领域依赖于应用统计学，特别是侧重于时间序列分析和建模。以下是一些时间序列数据的例子：
- en: Daily closing values of a stock index
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 股票指数的每日收盘值
- en: Number of weekly infections of a disease
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每周某疾病的感染人数
- en: Weekly series of train accidents
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每周的火车事故系列
- en: Rainfall per day
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每日降水量
- en: Sensor data such as temperature measurements per hour
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传感器数据，如每小时的温度测量
- en: Population growth per year
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年人口增长
- en: Quarterly earnings of a company over a number of years
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一家公司若干年内的季度盈利
- en: This is only to name but a few. Any data that deals with changes over time is
    a time-series.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅仅是举几个例子。任何涉及时间变化的数据都可以视为时间序列。
- en: It might be worth defining briefly what is considered a time-series.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有必要简要定义一下什么被视为时间序列。
- en: 'Definition: Time-Series are datasets where observations are arranged in chronological
    order.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 定义：时间序列是按时间顺序排列的观测数据集。
- en: This is a very broad definition. Alternatively, we could have said that a time-series
    is a sequence of data points taken sequentially over time, or that a time-series
    is the result of a stochastic process.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常广泛的定义。或者我们也可以说，时间序列是按时间顺序排列的数据点序列，或者说时间序列是一个随机过程的结果。
- en: 'Formally, we can define a time-series in two ways. The first one is as a mapping
    from the time domain to the domain of real numbers:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从形式上讲，我们可以有两种方式定义时间序列。第一种是将其定义为从时间域到实数域的映射：
- en: '![](img/B17577_01_001.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_01_001.png)'
- en: where ![](img/B17577_01_002.png) and ![](img/B17577_01_003.png).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![](img/B17577_01_002.png) 和 ![](img/B17577_01_003.png)。
- en: 'Another way to define a time-series is as a stochastic process:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种定义时间序列的方法是将其视为一个随机过程：
- en: '![](img/B17577_01_004.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_01_004.png)'
- en: Here, ![](img/B17577_01_005.png) or ![](img/B17577_01_006.png) denotes the value
    of the random variable X at time point t.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，![](img/B17577_01_005.png) 或 ![](img/B17577_01_006.png) 表示随机变量X在时间点t的值。
- en: If T is a set of real numbers, it's a continuous-time stochastic process. If
    T is a set of integers, we call it a stochastic process in discrete time. The
    convention in the latter case is to write ![](img/B17577_01_007.png).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果T是实数集，它就是一个连续时间随机过程。如果T是整数集，我们称其为离散时间的随机过程。在后者的情况下，惯例是写作 ![](img/B17577_01_007.png)。
- en: Since time is the primary index of the dataset, by implication, time-series
    datasets describe how the world changes over time. They often deal with the question
    of how the past influences the presence or future.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于时间是数据集的主要索引，因此，时间序列数据集描述了世界如何随时间变化。它们通常涉及如何通过过去影响现在或未来的问题。
- en: The increase of monitoring and data collection brings with it the need for both
    statistical and machine learning techniques applied to time-series to predict
    and characterize the behavior of complex systems or components within a system.
    An important part of working with time-series is the question of how the future
    can be predicted based on the past. This is called forecasting.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和数据收集的增加带来了对统计学和机器学习技术的需求，这些技术应用于时间序列，以预测和描述复杂系统或系统内组件的行为。与时间序列打交道的一个重要部分是如何基于过去预测未来。这就是所谓的预测。
- en: Some methods allow adding business cycles as additional features. These additional
    features are called **exogenous** features - they are time-dependent, explanatory
    variables. We'll go through examples of feature generation in *chapter 3*, *Preprocessing
    Time-Series*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一些方法允许将商业周期作为额外特征添加。这些额外的特征称为**外生**特征——它们是依赖于时间的解释性变量。我们将在*第3章*，*时间序列预处理*中讨论特征生成的示例。
- en: Characteristics of Time-Series
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间序列的特征
- en: 'Here''s an extract of a time-series dataset as an example, exported from Google
    Trends, on searches for Python, R, and Julia:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个从Google趋势导出的时间序列数据集示例，展示了Python、R和Julia的搜索量：
- en: '![/var/folders/80/g9sqgdws2rn0yc3rd5y3nd340000gp/T/TemporaryItems/(A Document
    Being Saved By screencaptureui 2)/Screenshot 2021-03-11 at 17.13.02.png](img/B17577_01_01.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![/var/folders/80/g9sqgdws2rn0yc3rd5y3nd340000gp/T/TemporaryItems/(A Document
    Being Saved By screencaptureui 2)/Screenshot 2021-03-11 at 17.13.02.png](img/B17577_01_01.png)'
- en: 'Figure 1.1: Extract of a time-series dataset'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：时间序列数据集的提取
- en: This is a **multivariate** time-series, with columns for Python, R, and Julia.
    The first column is the index, a date column, and its period is the month. In
    cases, where we have only a single variable, we speak of a **univariate** series.
    This dataset would be univariate if we had only one programming language instead
    of three.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**多变量**时间序列，包含Python、R和Julia的列。第一列是索引列，是一个日期列，周期为每月。如果我们只有一个变量，我们称其为**单变量**序列。如果我们只有一种编程语言而不是三种，那么这个数据集将是单变量的。
- en: 'Time-Series mostly come as discrete-time, where the time difference between
    each point is the same. The most important characteristics of time-series are
    the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列通常以离散时间形式出现，其中每个点之间的时间差是相同的。时间序列的最重要特征如下：
- en: Long-term movements of the values (**trend**)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值的长期变化（**趋势**）
- en: Seasonal variations (**seasonality**)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 季节性变化（**季节性**）
- en: Irregular or cyclic components
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不规则或周期性成分
- en: A trend is the general direction in which something is developing or changing,
    such as a long-term increase or decrease in a sequence. An example of where a
    trend can be observed would be global warming, the process by which the temperatures
    on our planet have been rising over the last half-century.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 趋势是某事物发展或变化的一般方向，例如序列中的长期增加或减少。一个可以观察到趋势的例子是全球变暖，这是过去半个世纪温度持续上升的过程。
- en: 'Here''s a plot of global surface temperature changes over the last 100 years
    from the GISS Surface Temperature Analysis dataset released by NASA:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是来自NASA发布的GISS表面温度分析数据集中的过去100年全球表面温度变化的图表：
- en: '![temperatures.png](img/B17577_01_02.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![temperatures.png](img/B17577_01_02.png)'
- en: 'Figure 1.2: GISS surface temperature analysis from 1880 to 2019'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：1880年至2019年间的GISS表面温度分析
- en: As you can see in *Figure 1.2*, temperature changes have been varying around
    0 until the mid-20^(th) century; however, since then, there's been a clearly visible
    trend of an overall rise in the yearly temperature.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在*图1.2*中所见，温度变化在20世纪中期之前围绕0波动；然而，从那时起，整体温度逐年上升的趋势变得十分明显。
- en: Seasonality is a variation that occurs at specific regular intervals of less
    than a year. Seasonality can occur on different time spans, such as daily, weekly,
    monthly, or yearly. An example of weekly seasonality would be sales of ice cream
    picking up each weekend. Also, depending on where you live, ice cream might only
    be sold in spring and summer. This is a yearly variation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 季节性是指在特定的、不到一年的规律间隔内发生的变化。季节性可以在不同的时间跨度上发生，例如每日、每周、每月或每年。每周季节性的一个例子是冰淇淋的销售量在每个周末都会增加。此外，根据你所居住的地方，冰淇淋可能只在春夏季节出售。这是一种年度变化。
- en: Other than seasonal changes and trends, there is variability that's not of a
    fixed frequency or that rises and falls in a way that's not based on seasonal
    frequency. Some of these we might be able to explain based on the knowledge we
    have.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了季节性变化和趋势外，还有一些变动，它们的频率不固定，或者以非季节性频率的方式波动。我们中的一些人可能能基于现有知识对这些变动进行解释。
- en: As an example of cyclic variability that's irregular, bank holidays can fall
    on different calendar days each year, and promotional campaigns could depend on
    business decisions, such as the introduction of a new product. As an example of
    cyclic changes that are not seasonal, changes at the scale of milliseconds or
    that take place over time periods longer than a year would not be called seasonal
    effects.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个不规则的周期性变化例子，银行假期每年可能会落在不同的日历日期上，而促销活动则可能取决于商业决策，例如推出新产品。作为一个非季节性变化的周期性变化例子，毫秒级别的变化或发生在超过一年时间段的变化，将不被称为季节性效应。
- en: '**Stationarity** is the property of a time-series not to change its distribution
    over time as described by its summary statistics. If a time-series is stationary,
    it means that it has no trend and no deterministic seasonal variability, although
    other cyclical variability is permitted. This is an important feature for the
    algorithms that we''ll discuss in *Chapter 5*, *Forecasting with Moving Averages
    and Autoregressive Models*. To apply them, we''ll need to transform non-stationary
    data into stationary data by removing seasonality and trend.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**平稳性**是指时间序列在时间推移中其分布不会发生变化，如其总结统计量所描述的那样。如果一个时间序列是平稳的，那么它意味着该序列没有趋势，也没有确定性的季节性变化，尽管其他周期性变化是允许的。这是我们将在*第5章*，*使用移动平均和自回归模型进行预测*中讨论的算法中的一个重要特性。为了应用这些方法，我们需要通过去除季节性和趋势，将非平稳数据转换为平稳数据。'
- en: We'll discuss these and other concepts in more detail in *Chapter 2*, *Time-Series
    Analysis with Python*, and *Chapter 3, Preprocessing Time-Series*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第2章*，*使用Python进行时间序列分析*和*第3章*，*时间序列预处理*中更详细地讨论这些以及其他概念。
- en: The task of identifying, quantifying, and decomposing these and other characteristics
    is called **time-series** **analysis**. Exploratory time-series analysis is often
    the first step before any feature transformation and machine learning.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 确定、量化和分解这些以及其他特征的任务被称为**时间序列** **分析**。探索性时间序列分析通常是在进行任何特征转换和机器学习之前的第一步。
- en: Time-Series and Forecasting – Past and Present
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列与预测——过去与现在
- en: Time-Series have been studied since antiquity, and since then, time-series analysis
    and forecasting have come a long way. A variety of disciplines contributed to
    the development of techniques applied to time-series, including mathematics, astronomy,
    demographics, and statistics. Many innovations came initially from mathematics,
    later statistics, and finally machine learning. Many innovations in applied statistics
    had their origins in demography (used in public administration), economics, or
    other fields.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列自古以来就被研究，而从那时起，时间序列分析和预测已经取得了长足的进展。多种学科为应用于时间序列的技术发展做出了贡献，包括数学、天文学、人口统计学和统计学。许多创新最初来自数学，后来是统计学，最终是机器学习。许多应用统计学的创新源于人口统计学（用于公共管理）、经济学或其他领域。
- en: In this section, I'll sketch the development path from simpler methods leading
    up to the machine learning methods available today. I'll try to chart the development
    of concepts relevant to time-series from the time of the Industrial Revolution
    to modernity. We'll deal with the more technical and up-to-date side of things
    in *Chapter 4*, *Introduction to Machine Learning with Time-Series*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将概述从简单方法到今天可用的机器学习方法的发展路径。我将尝试绘制自工业革命以来到现代，与时间序列相关的概念发展图谱。我们将在*第4章*，*基于时间序列的机器学习导论*中处理更技术性和最新的内容。
- en: There's still much more to come for time-series. The development of wearable
    sensors and the Internet of Things means that big data is available to be analyzed
    and used for forecasting. The availability of large datasets for benchmarks and
    competitions has been helping create new methods in recent years as we'll discuss
    in later chapters.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列的研究仍有很多进展可期。可穿戴传感器和物联网的发展意味着大数据可以用来进行分析和预测。近几年，随着大量数据集的可用性用于基准测试和竞赛，已经帮助创造出新的方法，正如我们将在后续章节中讨论的那样。
- en: Demography
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人口学
- en: Much of the early work that went into establishing the theory and practice of
    time-series analysis came from demography as used in public administration. Many
    of the people mentioned in this section either worked as public servants or contributed
    in a private capacity out of interest in abstract problems.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分早期用于建立时间序列分析理论和实践的工作来源于公共管理中应用的人口学。本节中提到的许多人要么是公共服务人员，要么出于对抽象问题的兴趣在私人领域作出了贡献。
- en: John Graunt, originally a haberdasher by profession, became interested in death
    records as recorded by London parishes. In 1662, he published public health statistics
    in his book "*Natural and Political Observations Made upon the Bills of Mortality.*"
    Among statistics about epidemiology, it included the first life table. A **life
    table** (also called a mortality table or actuarial table) is a table that shows,
    for each age, what the probability is that a person of that age will die before
    their next birthday. Graunt made his inferences from bills of mortality, generated
    by parish clerks who recorded burials in Church of England churchyards in the
    City of London and areas outside the city.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 约翰·格朗特，最初是一名帽商，后来对伦敦教区记录的死亡记录产生了兴趣。在1662年，他在《*自然与政治观察：关于死亡账单的研究*》一书中发布了公共卫生统计数据。该书除了包含有关流行病学的统计数据外，还包含了第一张生命表。**生命表**（也叫死亡表或精算表）是一种表格，显示了每个年龄段的人在其下一次生日之前死亡的概率。格朗特通过死亡账单得出结论，这些账单由教区书记员生成，记录了伦敦市及其周边地区英格兰教会墓地的埋葬情况。
- en: Graunt's book was highly influential, and he is widely regarded as the founder
    of demography. Graunt was elected as a fellow of the Royal Society; however, he
    suffered bankruptcy after his house burned down during the Great Fire of London
    in 1666, and he died of jaundice and liver disease at the age of 53.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 格朗特的书籍具有深远的影响，他被广泛认为是人口学的奠基人。格朗特被选为皇家学会会员；然而，在1666年伦敦大火中，他的房屋被烧毁，导致破产，最终他在53岁时死于黄疸和肝病。
- en: Among other things, he inspired the work of Swiss mathematician Jakob Bernoulli,
    "*Ars Conjectandi*," written between 1684 and 1689 and published posthumously
    in 1713, a landmark publication in combinatorics and probability theory that included
    – among many other things – a first version of the law of large numbers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，他启发了瑞士数学家雅各布·伯努利的著作《*猜想艺术*》，该书写于1684年至1689年之间，并于1713年死后出版，是组合数学和概率论中的一部里程碑式著作，其中包括了——在众多内容中——大数法则的第一个版本。
- en: The law of large numbers describes what happens when an experiment is repeated
    a large number of times. Bernoulli proved that in a game of chance with two outcomes
    (such as a coin toss), a win or a loss, if it's repeated many times, the fraction
    of times that the game would be won approaches the true, expected probability.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 大数法则描述了当实验重复进行多次时会发生什么。伯努利证明，在一个有两个结果的机会游戏中（比如抛硬币），无论是胜利还是失败，如果重复很多次，游戏的胜利次数比例会趋近于真实的、预期的概率。
- en: 'Another major milestone in the history of demography, the statistical study
    of human populations, came in 1689 as an article written by Caspar Neumann, a
    German professor and clergyman – "*Reflexionen über Leben und Tod bei denen in
    Breslau Geborenen und Gestorbenen*" (translated: Reflections about the Life and
    Death of People Who Were Born and Died in Breslau). Neumann sent this treatise
    to Gottfried Leibniz, the eminent philosopher and mathematician, and later made
    his data available to the Royal Society in London.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 人口学历史上的另一个重大里程碑出现在1689年，由德国教授和神职人员卡斯帕·诺伊曼（Caspar Neumann）撰写的文章《*关于布雷斯劳出生与死亡的生与死的反思*》中（译名：Reflections
    about the Life and Death of People Who Were Born and Died in Breslau）。诺伊曼将这篇论文发送给了著名哲学家和数学家戈特弗里德·莱布尼茨，并将他的数据提供给了伦敦皇家学会。
- en: Many subsequent works were based on the data and statistics in this article.
    In 1693, in an article on life annuities ("*An Estimate of the Degrees of the
    Mortality of Mankind*") published in the *Philosophical Transactions of the Royal
    Society*, Edmond Halley prepared mortality tables based on Neumann's data. **Annuities**
    are payments made at equal intervals, such as mortgage, insurance, and pension
    payments. Halley's article guided the development of actuarial science and informed
    the British government when it came to selling retirement income insurance at
    an appropriate price based on the age of the purchaser. We'll encounter Halley
    again in the astronomy section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 许多后续的研究工作都基于本文中的数据和统计资料。1693年，埃德蒙·哈雷在《皇家学会哲学汇刊》上发表了一篇关于生命年金的文章（《*人类死亡率的估算*》），他基于诺伊曼的数据编制了死亡率表。**年金**是定期支付的款项，例如抵押贷款、保险和养老金支付。哈雷的文章为精算科学的发展提供了指导，并帮助英国政府根据购买者的年龄，确定出售退休收入保险的适当价格。稍后我们将在天文学部分再次提到哈雷。
- en: Abraham de Moivre was a Frenchman who moved to England at a young age due to
    the religious persecution of the Huguenots in France. Today, he is best known
    for his work on the normal distribution and probability theory. In 1724, he published
    a book called "*Annuities upon Lives*," the cover of which you can see below,
    about mortality statistics and the foundation of the theory of annuities.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 亚伯拉罕·德·莫伊夫是一位法国人，由于法国胡格诺派的宗教迫害，他年轻时移居英格兰。今天，他最为人知的是他在正态分布和概率论方面的贡献。1724年，他出版了一本名为《*基于生命的年金*》的书，书封面如下面所示，内容涉及死亡率统计和年金理论的基础。
- en: '![../../Desktop/Screenshot%202021-04-15%20at%2022.55.21.pn](img/B17577_01_03.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![../../Desktop/Screenshot%202021-04-15%20at%2022.55.21.pn](img/B17577_01_03.png)'
- en: 'Figure 1.3: Annuities upon Lives'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：基于生命的年金
- en: De Moivre is also remembered for an approximation to the binomial distribution
    and for his work on the Poisson distribution (later named after Siméon Denis Poisson).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 德·莫伊夫还因提出二项分布的近似方法和研究泊松分布（后来以西蒙·丹尼斯·泊松的名字命名）而被铭记。
- en: With some statistics foundations in place, we are now getting into projections
    into the future, and this is where time-series forecasts come in. In 1751, Benjamin
    Franklin examined population growth and its limits in his essay "*Observations
    Concerning the Increase of Mankind, Peopling of Countries, etc.*," projecting
    exponential growth in the British colonies. He projected a doubling of the population
    in the British Crown Colonies every 25 years, with the potential, he argued, to
    spread liberal political tradition and increase the power of England. His projection
    proved correct, and the exponential growth held up until the 1850s when the population
    of the United States surpassed England's.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在具备了一些统计学基础后，我们现在开始进入对未来的预测，这时时间序列预测就派上用场了。1751年，本杰明·富兰克林在他的文章《*关于人口增长、人类繁衍等的观察*》中研究了人口增长及其极限，预测了英国殖民地的指数增长。他预测英国王室殖民地的人口每25年翻一番，并认为这一增长有潜力传播自由政治传统，增强英格兰的力量。他的预测被证明是正确的，指数增长一直持续到19世纪50年代，当时美国人口超过了英格兰。
- en: Influenced by Franklin was the English cleric Thomas Robert Malthus, who feared
    that population growth would outstrip growth in food production. In his scenario,
    while population growth is exponential, the growth of food supply and other resources
    is linear, which would eventually lead to a collapse of society and massive population
    death. Writing at the end of the 18th century, he described ever-increasing famine
    and poverty (referred to after him as the "*Malthusian catastrophe*").
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 受富兰克林的影响，英格兰牧师托马斯·罗伯特·马尔萨斯提出了人口增长将超出粮食生产增长的担忧。在他的假设中，虽然人口增长是指数型的，但粮食供应和其他资源的增长是线性的，这最终将导致社会崩溃和大规模人口死亡。18世纪末，他描述了日益加剧的饥荒和贫困（后来被称为“*马尔萨斯陷阱*”）。
- en: Many other statistical and mathematical concepts were worked out based on demographics
    data. Adolphe Quetelet, an astronomer, mathematician, and sociologist from Ghent,
    in today's Belgium, introduced statistical methods to social sciences to describe
    relationships underlying crime rates, marriage rates, and suicide rates. He called
    for a "social physics" that would find the laws underlying social phenomena, thus
    revealing the work of God. Among other things, he developed the body mass index,
    originally called the Quetelet index. In his 1835 book, called "*Treatise on Man*"
    in the English translation, he describes the concept of the average man based
    on normal distribution. One of Quetelet's students, Pierre Verhulst, developed
    the logistic function as a model of population growth.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他统计学和数学概念是基于人口数据发展出来的。阿道夫·凯特莱（Adolphe Quetelet），一位来自今天比利时根特的天文学家、数学家和社会学家，将统计方法引入社会科学，用来描述犯罪率、婚姻率和自杀率等背后的关系。他呼吁建立一种“社会物理学”，揭示社会现象背后的规律，从而显示上帝的工作。除了其他成就外，他还发展了身体质量指数，最初被称为凯特莱指数。在他1835年的书《*论人类*》（英译名：Treatise
    on Man）中，他根据正态分布描述了“平均人”的概念。凯特莱的学生皮埃尔·费尔霍斯特（Pierre Verhulst）发展了逻辑斯蒂函数，作为人口增长模型。
- en: 'Siméon Denis Poisson published "*Recherches sur la probabilité des jugements
    en matière criminelle et en matière civile*" (translated: Studies on the Probability
    of Judgments in Criminal and Civil Matters) in 1837, where he elaborated on probability
    theory for discrete occurrences that take place within a given interval. The Poisson
    distribution was named after him.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 西蒙·丹尼斯·泊松（Siméon Denis Poisson）于1837年发表了《*论刑事和民事案件判断的概率*》（法文原名：《Recherches sur
    la probabilité des jugements en matière criminelle et en matière civile》），在其中阐述了关于在给定区间内发生的离散事件的概率理论。泊松分布就是以他的名字命名的。
- en: Wilhelm Lexis, a pioneer of the analysis of demographic time-series, published
    a paper called "*On the Theory of the Stability of Statistical Series*" (1879),
    which introduced the quantity now called the Lexis ratio. The ratio distinguishes
    between stable series, where underlying probability distributions giving rise
    to the observed rates remain constant, and non-stable series. These stable time-series
    would not be influenced by forces other than random noise. In today's terminology,
    a stable time-series would be referred to as a white noise process or a zero-order
    moving average.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 威廉·莱克西斯（Wilhelm Lexis），人口统计学时间序列分析的先驱，发表了名为《*统计系列稳定性理论*》的论文（1879），介绍了如今被称为莱克西斯比率的量度。该比率区分了稳定系列，其中引发观察到的比率的潜在概率分布保持不变，和非稳定系列。这些稳定的时间序列不会受到除了随机噪声以外的任何力量的影响。用今天的术语来说，稳定的时间序列将被称为白噪声过程或零阶移动平均。
- en: In order to distinguish between stable and non-stable time-series, Lexis created
    a test statistic equal to the ratio between the dispersion of the observed rates
    and the dispersion that would be expected if the underlying probabilities for
    each of the observed rates were all equal across all of the observations. If this
    ratio, Q, was more than 1.41, he argued, this means the time-series is non-stable
    or – in his words – influenced by physical forces. Lexis later became a member
    of the Insurance Advisory Council for Germany's Federal Insurance Supervisory
    Office.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了区分稳定与非稳定的时间序列，莱克西斯创建了一个检验统计量，该统计量等于观察到的比率的离散度与如果每个观察到的比率的潜在概率在所有观察中相等时应有的离散度之比。如果这个比率Q大于1.41，他认为这意味着该时间序列是不稳定的，或者用他的话说，受物理力量的影响。莱克西斯后来成为德国联邦保险监管局保险咨询委员会的成员。
- en: Genetics
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遗传学
- en: Francis Galton, a Victorian-era English scientist, was born into an illustrious
    family of bankers and gun manufacturers that included several members of the Royal
    Society. Galton was a highly prolific writer and researcher. Today, he is mostly
    remembered for coining the word eugenics, the study of changes to the racial quality
    of future generations with a focus on desirable human qualities. Eugenics is associated
    with racism and white supremacy.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 弗朗西斯·高尔顿（Francis Galton），一位维多利亚时代的英国科学家，出生在一个著名的银行家和枪械制造商家族中，家族中有多位皇家学会成员。高尔顿是一位高产的作家和研究者。今天，他主要因创造了“优生学”一词而被人们记住，优生学是研究未来世代种族质量变化的学科，重点关注人类的理想品质。优生学与种族主义和白人至上主义有着密切的联系。
- en: Galton was interested in many scientific disciplines, such as psychology, statistics,
    psychophysics, photography, and others, and for his contributions, he was knighted
    in 1909\. Among other things, he contributed to anthropometry, the systematic
    measurement and description of human bodies. For this work, he rediscovered the
    concept of correlation (first developed by French physicist Auguste Bravais in
    1846) and described correlations between forearm length and height, head width
    and head breadth, and head length and height (1888).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 加尔顿对许多科学学科感兴趣，如心理学、统计学、心理物理学、摄影等。凭借他的贡献，他在1909年被封为爵士。除此之外，他还为人体测量学做出了贡献，这是一种对人体进行系统测量和描述的方法。为此，他重新发现了相关性的概念（该概念最早由法国物理学家奥古斯特·布雷维斯于1846年提出），并描述了前臂长度与身高、头宽与头深、头长与身高之间的相关性（1888年）。
- en: One of his protégés (and biographers) was Karl Pearson, born in Islington, London,
    into a Quaker family to a father who was Queen's Counsel (a lawyer). After studying
    mathematics at King's College, Cambridge, physics and philosophy at the University
    of Heidelberg, and physiology at the University of Berlin, he returned to London
    to study law. In London, he was introduced to Galton, and the two stayed in contact.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 他的一个门徒（兼传记作者）是卡尔·皮尔逊，皮尔逊出生于伦敦伊斯灵顿的贵格会家庭，父亲是皇室律师（Queen's Counsel）。他在剑桥大学学习数学，在海德堡大学学习物理学与哲学，在柏林大学学习生理学，之后回到伦敦学习法律。在伦敦，他结识了加尔顿，两人保持了联系。
- en: After Galton's death, Pearson was the first to hold the Chair in Eugenics endowed
    by Galton in his will. Pearson's main interest was in applying biometrics in the
    context of inheritance. He is credited with the invention of the standard deviation,
    a measure of the variability of the normal distribution, which replaced Carl Friedrich
    Gauss' concept of the mean error. He also developed contributions to statistics,
    including the chi-squared test, the p-value for statistical significance, correlation
    as it's used today, principal component analysis, and the histogram.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 加尔顿去世后，皮尔逊成为首位担任加尔顿在遗嘱中捐赠的优生学讲座教授的人。皮尔逊主要的兴趣在于将生物统计学应用于遗传背景中。他被认为是标准差的发明者，标准差是衡量正态分布变异性的一种方法，替代了卡尔·弗里德里希·高斯的平均误差概念。他还对统计学做出了贡献，包括卡方检验、统计显著性的p值、现代相关性、主成分分析和直方图等。
- en: Pearson was succeeded as the Galton Professor of Eugenics (later renamed the
    Galton Chair of Genetics) by Ronald Fisher. Fisher made many innovations in evolutionary
    theory about mimicry, parental investment, and the Fisher principle behind the
    1:1 sex ratio. In statistics, he described the linear discriminant analysis, Fisher
    information, the F-distribution, and the Student's t-distribution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 皮尔逊继费舍尔之后成为了加尔顿优生学教授（后改名为加尔顿遗传学讲座教授）。费舍尔在进化理论方面做出了许多创新，涉及拟态、亲代投资以及1:1性别比例背后的费舍尔原理。在统计学方面，他描述了线性判别分析、费舍尔信息量、F分布以及学生t分布。
- en: His contributions to statistics laid the groundwork for statistical testing
    in time-series analysis and some of the classical models. Fisher was made a Knight
    Bachelor by Queen Elizabeth II in 1952\. However, his connection to racist views
    – for example, he endorsed the German Nazi party's policy of extermination with
    the goal of improving the genetic stock – has led to a recent reappraisal of his
    work.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 他在统计学方面的贡献为时间序列分析中的统计检验和一些经典模型奠定了基础。费舍尔于1952年被伊丽莎白二世女王封为骑士。然而，他与种族主义观点的关联——例如，他支持德国纳粹党提出的灭绝政策，目的是改善遗传基因——导致了近期对他工作的重新评估。
- en: As a consequence, the Ronald Fisher Centre at **University College London**
    (**UCL**) was renamed to the Centre for Computational Biology, and UCL released
    a public apology for its role in propagating eugenics.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，**伦敦大学学院**（**UCL**）的罗纳德·费舍尔中心被更名为计算生物学中心，UCL也就其在传播优生学中的作用公开道歉。
- en: Astronomy
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 天文学
- en: Observations of comets and asteroids, and the and the movements of the sun and
    the planets have been recorded for a long time, and people have been studying
    these records to understand the regularities and relationships of these movements
    and our place in the universe. Edmond Halley, English astronomer and geophysicist,
    who we mentioned in the section on demography, applied Isaac Newton's laws of
    motion (from 1687) to comet sightings throughout history. A comet visible to the
    naked eye from Earth, it has been seen around the world and inscribed by astronomers
    and philosophers for at least about 2,000 years, appearing in Ancient Greek writings
    and Babylonian tables.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 彗星、小行星的观测以及太阳和行星的运动已被记录了很长时间，人们通过研究这些记录来理解这些运动的规律性、相互关系以及我们在宇宙中的位置。我们在前面提到的人口学部分中提到的英国天文学家和地球物理学家埃德蒙·哈雷，应用了艾萨克·牛顿在1687年提出的运动定律，研究历史上的彗星现象。哈雷彗星是一颗肉眼可见的彗星，几乎在全球范围内都有目击记录，且至少已有约2000年的历史，被古希腊的文献和巴比伦的天文表格所记载。
- en: For instance, its appearance in 12 BCE, close to the assigned date of the birth
    of Jesus Christ, has led to suggestions that it might be behind the biblical story
    of the Star of Bethlehem. In 1066, the comet was seen in England and thought to
    be a divine message, a bad omen foretelling Harold II's fate when he died the
    same year at the Battle of Hastings fighting against Norman invaders led by William
    the Conqueror.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在公元前12年，它出现在接近耶稣基督诞生日期的时刻，导致有人猜测这可能是圣经故事中伯利恒之星的来源。1066年，这颗彗星在英格兰出现，被认为是神的讯息，预示着哈罗德二世的命运，哈罗德二世在同年于黑斯廷斯战役中阵亡，战斗对手是由征服者威廉领导的诺曼征服军。
- en: Halley connected many of these sightings and concluded that it was the same
    comet each time and calculated a periodicity of 75-76 years. Today it is named
    after him in his honor, **Halley's Comet**. This was published in the "*Synopsis
    of the Astronomy of Comets* (1705)". Halley's Comet will re-appear in 2061.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 哈雷将多次彗星出现联系在一起，得出结论认为每次看到的是同一颗彗星，并计算出其周期约为75-76年。今天，这颗彗星以他的名字命名，以示敬意，称为**哈雷彗星**。这一结论发表于《*彗星天文学概要*》（1705年）。哈雷彗星将于2061年重新出现。
- en: 'This figure shows the orbit of Halley''s Comet (source: Wikimedia Commons):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该图显示了哈雷彗星的轨道（来源：Wikimedia Commons）：
- en: '![ile:Halley''s Comet animation.gif - Wikimedia Commons](img/B17577_01_04.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![ile:Halley''s Comet animation.gif - Wikimedia Commons](img/B17577_01_04.png)'
- en: 'Figure 1.4: Halley''s Comet orbit'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：哈雷彗星轨道
- en: German polymath Carl Friedrich Gauss devised a method for determining the orbit
    of the dwarf planet Ceres in 1801\. Ceres orbits in the asteroid belt between
    Mars and Jupiter. Gauss did this based on observations of a Catholic priest and
    astronomer, Giuseppe Piazzi, who traced an object between January and February
    of the same year, before losing sight of it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 德国博学家卡尔·弗里德里希·高斯于1801年设计了一种确定矮行星谷神星轨道的方法。谷神星位于火星和木星之间的小行星带中。高斯基于一位天主教神父兼天文学家朱塞佩·皮亚奇的观察结果进行推算，皮亚奇在同年1月至2月间追踪了一个天体，后来失去了该天体的踪迹。
- en: Later, line fitting was applied to the movements of celestial bodies, most prominently,
    the **least squares method**. It was first described by Adrien-Marie Legendre
    in 1805 ("*méthode des moindres carrés*"), but today it is co-credited to Gauss.
    Gauss published about the method later, in 1809; however, he expanded significantly
    beyond Legendre's work, among other things inventing the distribution named after
    him, the Gaussian distribution (also called the normal or Bell distribution).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，线性拟合方法被应用于天体的运动，最著名的是**最小二乘法**。这一方法最早由阿德里安-玛丽·勒让德在1805年描述（"*méthode des moindres
    carrés*"），但今天通常将其归功于高斯。高斯在1809年后来发表了关于该方法的研究；然而，他在勒让德的基础上进行了大幅扩展，其中之一就是发明了以他命名的高斯分布（也叫正态分布或钟形曲线）。
- en: The **least squares** method is the underpinning of linear regression methods,
    where the parameters in sets of equations are estimated. It's a statistical procedure
    to find the best fit for a set of data points by minimizing the sum of the squared
    residuals from the plotted curve.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**最小二乘法**是线性回归方法的基础，在该方法中，方程组中的参数被估计出来。这是一种统计程序，通过最小化绘制曲线的平方残差和来找到一组数据点的最佳拟合。'
- en: Only a year later, Pierre-Simon Laplace proved the **central limit theorem**,
    which roughly states that the sum of independent variables, even if they are not
    from the normal distribution, tends toward a normal distribution. This gave an
    important justification for the method of least squares and the normal distribution
    in the case of large datasets. The normal distribution has been highly influential
    in the field of statistics ever since, and measures such as the mean and the standard
    deviation are used to describe it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅一年后，皮埃尔-西蒙·拉普拉斯证明了**中心极限定理**，大致说明独立变量的和，即使它们不来自正态分布，仍会趋向正态分布。这为最小二乘法和正态分布在大数据集中的应用提供了重要的理论支持。从那时起，正态分布在统计学领域产生了深远的影响，均值和标准差等度量方法被广泛用来描述它。
- en: Laplace was highly interested in planetary motion, but he also came up with
    a dynamic systems theory of tidal movements and probability theory. A fun fact
    to know about Laplace is that he was Napoleon Bonapart's examiner in 1784 when
    the latter attended the École Militaire in Paris.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 拉普拉斯对行星运动非常感兴趣，但他也提出了潮汐运动的动态系统理论和概率论。有趣的是，拉普拉斯曾是拿破仑·波拿巴的考试官，在1784年拿破仑在巴黎的军事学校就读时，拉普拉斯担任了他的考官。
- en: 'One of Laplace''s most famous contributions is the rule of succession, which
    describes the probability that an event will occur given past events. The sunrise
    example that he came up with for illustration of the rule of succession is the
    probability of the sun rising tomorrow given the number of days it has risen in
    the past:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 拉普拉斯最著名的贡献之一是继承法则，描述的是给定过去的事件，某个事件发生的概率。他提出的日出例子用来说明继承法则，就是给定太阳过去升起的天数，明天太阳升起的概率：
- en: '![](img/B17577_01_008.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17577_01_008.png)'
- en: Laplace's assumption for the sunrise problem was that we have no knowledge of
    the matter other than the number of days of observations used in the formula.
    He actually cautioned that the application in this context is a misapplication
    of the rule given that we know much more about the movements of the sun and Earth.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 拉普拉斯对日出问题的假设是，我们对这件事的了解仅限于用于公式的观察天数。他实际上警告过，按照这个背景应用规则是错误的，因为我们对太阳和地球的运动了解要远远超过这些。
- en: Motivated by astronomic calculations, Augustin-Louis Cauchy invented the gradient
    descent optimization algorithm in 1847 (in the journal of the French Academy of
    Sciences, *Comptes rendus de l'Académie des Sciences*), where repeated steps in
    the opposite direction of the gradient led to finding a local minimum.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 受天文计算的启发，奥古斯丁-路易·柯西于1847年发明了梯度下降优化算法（发表于法国科学院的期刊《法国科学院公报》），其中通过反向梯度的重复步伐来寻找局部最小值。
- en: Many other optimization and curve-fitting innovations followed. First published
    in 1944 by Kenneth Levenberg and rediscovered in 1963 by Donald Marquardt, the
    Levenberg–Marquardt algorithm (also called the damped least-squares method) can
    be used for curve fitting in problems, where the dependent variables are a non-linear
    combination of the model parameters (non-linear problems). It combines the Gauss-Newton
    algorithm, a variation of the Newton algorithm published by Gauss in 1809, and
    the method of gradient descent invented about a hundred years earlier.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 随后出现了许多其他的优化和曲线拟合创新。1944年，由肯尼斯·莱文伯格首次发布，1963年由唐纳德·马奎特重新发现的莱文伯格-马奎特算法（也称为阻尼最小二乘法）可用于曲线拟合问题，其中因变量是模型参数的非线性组合（非线性问题）。它结合了高斯-牛顿算法，这是高斯在1809年发布的牛顿算法的一种变体，以及大约一百年前发明的梯度下降法。
- en: Economics
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经济学
- en: William Playfair was born in Scotland in 1759, the fourth son of a reverend's
    family. He took an apprenticeship with Andrew Meikle, the inventor of the threshing
    machine, and went on to become the personal assistant to James Watt at the Boulton and
    Watt steam engine manufactory.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 威廉·普雷费尔于1759年出生在苏格兰，来自一个牧师家庭，是家中的第四个儿子。他与安德鲁·梅克尔（打谷机的发明者）成为学徒，之后成为詹姆斯·瓦特在博尔顿与瓦特蒸汽机厂的私人助理。
- en: His life was so eventful that several novels could be written about it. In 1789,
    he took part in the storming of the Bastille in Paris. After that he was involved
    as an agent of William Duer, a speculator, and the Scioto Company, in what could
    have been an embezzlement scheme, selling worthless deeds for land in Ohio to
    Frenchmen willing to emigrate. Back in London, he opened a bank that went bankrupt.
    Later, he was imprisoned for a few years in a debtor's prison, Fleet Prison, for
    being indebted. Then he went on to become a British secret agent, counterfeiting
    the French currency from 1789 to 1796, the assignat, to undermine the French government.
    The assignat soon became worthless, and inflation undermined the French government.
    He also patented several inventions for metalworking machinery and ships.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 他的生活如此多彩，以至于可以写成几本小说。1789年，他参与了巴黎攻占巴士底狱的事件。之后，他作为威廉·杜尔（William Duer）的一名代理人，参与了一个可能是挪用公款的计划，与
    Scioto 公司一起向愿意移民的法国人出售价值无用的俄亥俄州土地契约。回到伦敦后，他开设了一家银行，最终破产。后来，他因欠债被关进了债务人监狱——弗利特监狱，关了几年。之后，他成为了英国的秘密特工，从1789年到1796年，伪造法国货币“指定票”以破坏法国政府。指定票很快变得毫无价值，通货膨胀进一步削弱了法国政府。他还为金属加工机械和船只获得了几项发明专利。
- en: One of Playfair's principal achievements, however, was his popularization of
    several kinds of visualizations, such as the pie chart, the bar chart, and the
    time-series chart. He is sometimes credited with the invention of the bar chart,
    although Nicole Oresme showed a bar chart in a publication several hundred years
    earlier.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，普雷福的主要成就之一，是他推广了几种可视化图表，如饼图、柱状图和时间序列图。虽然尼古拉·奥雷姆（Nicole Oresme）在几百年前的出版物中就展示了柱状图，但普雷福有时被认为是柱状图的发明人。
- en: 'Here are two plots, the bar chart and the time-series plot, both from his "*Commercial
    and Political Atlas*" in 1786 (image source: Wikipedia):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两张图表，分别是柱状图和时间序列图，均来自他于1786年出版的《*商业与政治地图集*》（图片来源：维基百科）：
- en: '![https://upload.wikimedia.org/wikipedia/commons/e/e0/1786_Playfair_-_Exports_and_Imports_of_Scotland_to_and_from_different_parts_for_one_Year_from_Christmas_1780_to_Christmas_1781.jpg](img/B17577_01_05.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![https://upload.wikimedia.org/wikipedia/commons/e/e0/1786_Playfair_-_Exports_and_Imports_of_Scotland_to_and_from_different_parts_for_one_Year_from_Christmas_1780_to_Christmas_1781.jpg](img/B17577_01_05.png)'
- en: 'Figure 1.5: Playfair''s visualizations from Commercial and Political Atlas'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：普雷福的《商业与政治地图集》中的可视化图表
- en: On the left, you can see the bar chart Playfair used for a quantitative comparison
    of import and export data in Scotland. On the right is the time-series chart,
    to show the British trade balance over time.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧是普雷福用来进行苏格兰进出口数据定量比较的柱状图。右侧是时间序列图，用来展示英国的贸易平衡随时间变化的情况。
- en: Meteorology
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 气象学
- en: The Greek philosopher Aristotle was the first to write about weather and its
    measurement; however, it took much longer for the first weather predictions to
    be made. Vice Admiral Robert FitzRoy founded the United Kingdom's national weather
    service, the Meteorological Office, in 1854\. FitzRoy had already reserved his
    place in history as the captain of the HMS Beagle, the ship that carried a recently
    graduated naturalist by the name of Charles Darwin around the world, playing a
    pivotal role in the formation of theories on evolution and natural selection.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 古希腊哲学家亚里士多德是第一个撰写关于天气及其测量的文献的人；然而，直到很久以后，才开始有了第一次的天气预报。副海军上将罗伯特·菲茨罗伊（Robert
    FitzRoy）于1854年创立了英国的国家气象局——气象办公室。菲茨罗伊已经在历史上占据了重要地位，他曾是贝格尔号（HMS Beagle）的舰长，这艘船带着刚刚毕业的博物学家查尔斯·达尔文（Charles
    Darwin）环游世界，且在进化论和自然选择理论的形成过程中起到了关键作用。
- en: Supported by the telegraph and the barograph, a form of barometer, the Met Office
    collected weather data from many different locations in London. In 1859, the steam
    clipper Royal Charter, while returning to Liverpool from Melbourne, Australia,
    shipwrecked on rocks off the Welsh coast in a storm, leading to the loss of about
    450 lives. This disaster led to the development of a storm warning system that
    was later extended to general weather predictions. It was FitzRoy, in fact, who
    coined the word *forecast*, although at the time, many contemporaries referred
    to them as "quack weather prognostications". It is unclear whether his forecasts
    followed any system. He was much ridiculed by the scientific establishments for
    his work. He was prominently criticized by Sir Francis Galton, who had published
    a book called "*Meteorographica*" and later published the first weather maps.
    FitzRoy took his own life by cutting his throat in 1865\. The storm warnings were
    temporarily discontinued, only to be resumed a few years later to continue to
    this day.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在电报和气压计（气压计的一种形式）的支持下，气象局收集了伦敦不同地点的天气数据。1859年，当皇家查尔特号蒸汽快船从澳大利亚墨尔本返回利物浦时，在风暴中在威尔士海岸的岩石上触礁，导致约450人丧生。这场灾难促成了风暴预警系统的发展，后来这一系统被扩展到一般天气预报。事实上，正是FitzRoy创造了*forecast*（预报）这个词，尽管当时许多同代人称其为“庸医般的天气预言”。目前尚不清楚他的预报是否遵循了任何系统。他因这一工作而遭到科学界的广泛嘲笑，特别是由Sir
    Francis Galton批评，他曾出版过一本名为《*Meteorographica*》的书，并后来出版了第一张天气图。FitzRoy在1865年割喉自杀。风暴预警系统暂时中断，几年前才恢复并延续至今。
- en: The first weather models that used atmosphere and oceans were attempted in the
    1920s by Lewis Fry Richardson based on work by Norwegian Vilhelm Bjerknes, lecturer
    at the University of Stockholm on differential equations of fluid dynamics and
    thermodynamics. These models were impractical before the advent of computers,
    however—Richardson worked for about six weeks on a weather forecast of a limited
    area. His forecast turned out to be inaccurate because of numerical instability,
    even though his methodology was essentially correct. He abandoned his work when
    it became clear that his work could be of value to chemical weapons designers.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个使用大气和海洋的天气模型是在1920年代由Lewis Fry Richardson尝试的，他的工作基于挪威人Vilhelm Bjerknes的研究，后者是斯德哥尔摩大学流体动力学和热力学微分方程讲师。然而，在计算机出现之前，这些模型并不实际可行——Richardson花了大约六周的时间进行有限区域的天气预报。尽管他的预测方法基本正确，但由于数值不稳定性，他的预测最终是错误的。当他意识到自己的工作可能会对化学武器设计者有价值时，他放弃了这项工作。
- en: The first computerized weather models were programmed on the **Electronic Numerical
    Integrator and Computer** (**ENIAC**). The ENIAC, designed by John Mauchly and
    J. Presper Eckert, could run arbitrary sequences of operations; however, it didn't
    read the programs from tapes but from plugboard switches. The giant 15x9-meter
    machine is exhibited today at the Smithsonian Institute in Washington, D.C. Consisting
    of 17,500 vacuum tubes, it first produced calculations for the construction of
    a hydrogen bomb and was then exploited to extend forecasting past one or two days
    using new methods of numerical weather prediction. The computer was programmed
    by Klara von Neumann.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个计算机化的天气模型是在**电子数值积分和计算机**（**ENIAC**）上编程的。ENIAC由John Mauchly和J. Presper Eckert设计，能够运行任意的操作序列；然而，它并不是从磁带读取程序，而是通过插线板开关来读取。这个15x9米的巨型机器今天展览于华盛顿特区的史密森学会。ENIAC由17,500个真空管组成，最初用于氢弹的计算，然后被用于采用新的数值天气预测方法将天气预报延伸到一天或两天以上。该计算机由Klara
    von Neumann编程。
- en: 'Here''s a photo of the ENIAC (source: Wikimedia Commons):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是ENIAC的照片（来源：维基共享资源）：
- en: '![https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Eniac.jpg/1024px-Eniac.jpg](img/B17577_01_06.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Eniac.jpg/1024px-Eniac.jpg](img/B17577_01_06.png)'
- en: 'Figure 1.6: Electronic Numerical Integrator and Computer (ENIAC)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：电子数值积分和计算机（ENIAC）
- en: You can see Betty Snyder, one of the earliest programmers of the ENIAC, standing
    in front of the ENIAC.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到Betty Snyder，ENIAC的最早程序员之一，站在ENIAC前面。
- en: Later, Joseph Smagorinsky and Douglas Lilly developed a mathematical model for
    turbulence used in computational fluid dynamics. This model, the Smagorinsky-Lilly
    model, which is still in use today, used data about the wind, cloud cover, precipitation,
    atmospheric pressure, and radiation emanating from the earth and sun as input.
    Smagorinsky continued to lead research on global warming, investigating the climate's
    sensitivity to increasing carbon dioxide levels.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，约瑟夫·斯马戈林斯基（Joseph Smagorinsky）和道格拉斯·利利（Douglas Lilly）开发了一个用于计算流体力学的湍流数学模型。这个模型——斯马戈林斯基-利利模型，至今仍在使用，使用了关于风、云层覆盖、降水、大气压力和地球与太阳辐射的数据作为输入。斯马戈林斯基继续领导关于全球变暖的研究，研究气候对二氧化碳浓度增加的敏感性。
- en: The introduction of mobile sensor arrays and computerized models has greatly
    increased the accuracy of predictions. Valuable temperature and wind data is collected
    by sensors deployed by meteorology offices or other sources, most importantly
    by commercial aircraft as they fly. Today, within a seven-day window, a forecast
    is accurate about 80% of the time. The grounding of commercial flights during
    the COVID pandemic, where there were about 75% fewer flights for some periods,
    has led to less accurate forecasts recently.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 移动传感器阵列和计算机模型的引入大大提高了预测的准确性。气象局或其他来源（最重要的是商业飞机飞行时收集）的传感器收集了有价值的温度和风速数据。今天，在七天的窗口期内，天气预报大约80%的时间是准确的。COVID大流行期间，由于某些时期航班减少了约75%，商业航班的停飞导致近期预测准确性降低。
- en: Medicine
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 医学
- en: In 1901, Willem Einthoven applied the string galvanometer used in the telegraph
    receiver to physiology. Working in Leiden, in the Netherlands, he improved upon
    previous designs, producing the first practical electrocardiogram (ECG). The ECG
    is important for monitoring and screening the function of the heart and can detect
    cardiac rhythm disturbances, inadequate coronary artery blood flow, and electrolyte
    disturbances. For the importance of this innovation, Einthoven was awarded the
    1924 Nobel prize in Physiology or Medicine.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 1901年，威廉·恩特霍芬（Willem Einthoven）将电报接收器中使用的弦式电流计应用于生理学。恩特霍芬在荷兰莱顿工作，他改进了之前的设计，制造了首个实用的心电图（ECG）。心电图对监测和筛查心脏功能至关重要，它可以检测心律失常、冠状动脉血流不足和电解质紊乱。由于这项创新的重要性，恩特霍芬于1924年获得了诺贝尔生理学或医学奖。
- en: Hans Berger recorded the first human electroencephalography (EEG) recording
    in 1924\. EEG measures the electrical activity of the brain with electrodes placed
    on the scalp. An EEG recording shows the brain's spontaneous electrical activity
    over a period of time.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 汉斯·伯格（Hans Berger）在1924年记录了首个人体脑电图（EEG）记录。EEG通过将电极放置在头皮上来测量大脑的电活动。脑电图记录展示了大脑在一段时间内的自发电活动。
- en: 'Here''s a graph of an EEG signal (from the EEG Eye State dataset uploaded by
    Oliver Roesler from DHBW, Germany):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个脑电图（EEG）信号的图表（来自德国DHBW的Oliver Roesler上传的EEG Eye State数据集）：
- en: '![eeg_signal.png](img/B17577_01_07.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![eeg_signal.png](img/B17577_01_07.png)'
- en: 'Figure 1.7: EEG signal'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7：脑电图信号
- en: 'In EEG, the electrical activity of the brain is recorded through electrodes
    placed on the scalp. Its signal typically shows strong oscillations (also referred
    to as brain waves) at a variety of frequency ranges, most prominently these:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在脑电图中，大脑的电活动通过放置在头皮上的电极进行记录。其信号通常表现为强烈的振荡（也称为脑波），覆盖多个频率范围，最显著的有：
- en: Alpha (8-12 Hertz) would occur in a relaxed state, especially when closing the
    eyes
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阿尔法波（8-12赫兹）通常发生在放松状态下，尤其是在闭眼时
- en: Beta (16-31 Hertz) signals more active thinking
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贝塔波（16-31赫兹）信号表示更加活跃的思维
- en: Gamma (more than 32 Hertz) indicates cross-modal sensory processing
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伽玛波（大于32赫兹）表示跨模态的感官处理
- en: The medical uses of EEG are broad – among other things, EEG can be used to diagnose
    epilepsy, sleep disorders, tumors, stroke, depth of anesthesia, coma, and brain
    death.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 脑电图的医学用途非常广泛——除了其他用途外，EEG可用于诊断癫痫、睡眠障碍、肿瘤、中风、麻醉深度、昏迷和脑死亡。
- en: Applied Statistics
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用统计学
- en: Applied statistics and mathematics also provided inspiration and a foundation
    for work with time-series. Reverend Thomas Bayes (pronounced /be![](img/B17577_01_009.png)z/)
    proves a theorem that describes the probability of an event based on prior knowledge.
    Bayes' theorem is considered the foundation of Bayesian inference, a statistical
    inference approach.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 应用统计学和数学也为时间序列的工作提供了灵感和基础。托马斯·贝叶斯（Thomas Bayes）牧师（发音为 /be![](img/B17577_01_009.png)z/）证明了一个定理，该定理描述了基于先验知识的事件发生的概率。贝叶斯定理被认为是贝叶斯推断的基础，这是一种统计推断方法。
- en: We'll come back to this in *Chapter 9*, *Probabilistic Models for Time-Series*.
    Bayes' manuscripts were read to the Royal Society by his friend Richard Price
    within two years of his death (in 1761) in a heavily edited form.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第9章*，*时间序列的概率模型*中进一步讨论这一点。贝叶斯的手稿在他去世后两年（1761年）由他的朋友理查德·普赖斯以大量编辑过的形式呈交给皇家学会。
- en: The Fourier transform, which is important for filtering, converts a signal from
    its time domain to a representation in the frequency domain. The trigonometric
    decomposition of functions was discovered by Joseph Fourier in 1807, but a fast
    algorithm was first invented by Gauss around 1805 (although published only after
    his death and in Latin), and then rediscovered 160 years later by J. W. Cooley
    and John Tukey.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换在滤波中非常重要，它将信号从时间域转换为频域表示。函数的三角分解由约瑟夫·傅里叶于1807年发现，但一个快速算法最早由高斯在1805年左右发明（尽管直到他去世后才发表，且是以拉丁文发表的），然后160年后由J.W.
    Cooley和约翰·图基重新发现。
- en: Classical time-series modeling approaches were introduced by George Box and
    Gwilym Jenkins in 1970 in their book "*Time-Series Analysis Forecasting and Control*."
    Most importantly, they formalized the ARIMA and ARMAX models and described how
    to apply them to time-series forecasting. We'll talk about these types of models
    in *Chapter 5*, *Forecasting with Moving Averages and Autoregressive Models*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的时间序列建模方法由乔治·博克斯和吉威廉·詹金斯于1970年在他们的著作《*时间序列分析、预测与控制*》中提出。最重要的是，他们正式化了ARIMA和ARMAX模型，并描述了如何将其应用于时间序列预测。我们将在*第5章*，*利用移动平均和自回归模型进行预测*中讨论这些模型。
- en: Python for Time-Series
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python在时间序列中的应用
- en: For time-series, there are two main languages, R and Python, and it's worth
    briefly comparing the two and describing what makes Python special. Python is
    one of the top programming languages by popularity. According to the TIOBE from
    February 2021, it is only surpassed in popularity by C and Java.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间序列，主要有两种语言，R和Python，值得简要比较这两者，并描述是什么让Python与众不同。Python是目前最受欢迎的编程语言之一。根据2021年2月的TIOBE数据，它仅次于C和Java。
- en: '| **Rank** | **Language** | **Ratings** |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| **排名** | **语言** | **评分** |'
- en: '| 1 | C | 16.34% |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 1 | C | 16.34% |'
- en: '| 2 | Java | 11.29% |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Java | 11.29% |'
- en: '| 3 | Python | 10.86% |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| 3 | Python | 10.86% |'
- en: '| 4 | C++ | 6.88% |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 4 | C++ | 6.88% |'
- en: '| ... | ... | ... |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... |'
- en: '| 11 | R | 1.56% |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 11 | R | 1.56% |'
- en: '| ... | ... | ... |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... |'
- en: '| 29 | Julia | 0.52% |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 29 | Julia | 0.52% |'
- en: 'Figure 1.8: TIOBE language usage statistics'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：TIOBE语言使用统计数据
- en: I've included R and Julia, two other languages used for data science, in order
    to support the point that Python is the most popular data science language. When
    comparing search volumes for Python, R, and Julia, the three foremost languages
    for data science, we can see that Python is much more popular than R, with Julia
    being the distant third. In fact, Python is ranked similar to languages such as
    C, Java, and C++. R is at a similar level to Assembly language and Groovy, and
    Julia is at the level of specialist languages such as Prolog.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我加入了R和Julia这两种用于数据科学的其他语言，以支持Python是最受欢迎的数据科学语言这一观点。在比较Python、R和Julia的搜索量时，我们可以看到，Python远远超过R，而Julia则排在第三位，遥不可及。实际上，Python的排名类似于C、Java和C++等语言。而R的排名则接近汇编语言和Groovy，Julia则处于Prolog等专业语言的水平。
- en: R's community consists of statisticians and mathematicians, and R's strengths
    lie in statistics and plotting (ggplot). The weakness of R is its tooling and
    the virtual absence of consistent code style conventions.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: R的社区由统计学家和数学家组成，R的优势在于统计学和绘图（ggplot）。R的弱点在于其工具支持以及几乎没有一致的代码风格规范。
- en: On the other side, Python has been catching up in statistics and scientific
    computing with libraries such as NumPy, SciPy, and pandas, and it has overtaken
    R in both usage and usability for data science.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Python在统计学和科学计算方面追赶上了，通过NumPy、SciPy和pandas等库，它在数据科学的使用率和可用性方面已经超越了R。
- en: 'Python stands out in terms of machine learning libraries. The following libraries
    are written entirely or mainly in Python:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Python在机器学习库方面非常突出。以下库完全或主要是用Python编写的：
- en: Scikit-learn is written in Python and Cython (a Python dialect similar to the
    C programming language). It provides implementations of a very large set of algorithms
    for training and evaluating machine learning models.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scikit-learn是用Python和Cython（类似于C编程语言的Python方言）编写的。它提供了一个非常大范围的算法实现，用于训练和评估机器学习模型。
- en: Statsmodels provides statistical tests, and models such as the generalized linear
    model (GLM), ARMA, and many more.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Statsmodels提供了统计测试和模型，如广义线性模型（GLM）、ARMA等。
- en: Keras is an abstraction for training neural networks in Python that interact
    with TensorFlow and other libraries.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keras是一个用于训练神经网络的Python抽象，它与TensorFlow和其他库进行交互。
- en: Some of the most popular machine learning frameworks – ones that see lots of
    use for development and have a large range of scalable algorithms, such as TensorFlow,
    PyTorch, and XGBoost – are also mainly written in Python or provide first-class
    interfaces for Python.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最受欢迎的机器学习框架——那些在开发中得到广泛使用并具有大量可扩展算法的框架，例如TensorFlow、PyTorch和XGBoost——也主要用Python编写，或为Python提供一流的接口。
- en: Furthermore, being a general-purpose language, Python is ideal if you want to
    go beyond just data analysis. With Python, you can implement the full data flow
    necessary for building an end-to-end machine learning system that you can deploy
    and integrate with the backend platforms of your company.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，作为一种通用语言，Python非常适合在你想超越数据分析的情况下使用。借助Python，你可以实现构建端到端机器学习系统所需的完整数据流，并能够将其部署并与公司后端平台集成。
- en: The following time-series plot shows the popularity of Python and R according
    to Google Trends. Julia is omitted because it hardly registered at the bottom
    of the graph.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下时间序列图展示了根据Google Trends的数据显示，Python和R的流行程度。由于Julia几乎没有在图表底部出现，因此被省略。
- en: Recently, COVID has dented the popularity of Python, but other programming languages
    have gone down in terms of search volumes as well.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，COVID疫情影响了Python的流行度，但其他编程语言的搜索量也出现下降。
- en: '![python_timeline.png](img/B17577_01_08.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![python_timeline.png](img/B17577_01_08.png)'
- en: 'Figure 1.9: Python versus R usage over time'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9：Python与R的使用情况随时间变化
- en: 'Python has been clearly winning out over R for the last few years, although
    it has to be admitted that the comparison is not completely fair since Python
    finds much broader application than R. However, Python is also one of the best-supported
    languages for data science in general and time-series in particular. As of February
    2021, if we search GitHub for time-series, we find about five times the number
    of repositories (including repositories with Jupyter notebooks). For Julia, I
    found about 104 repositories. Please see the following table for the exact numbers:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Python在过去几年明显超过了R，尽管必须承认这种比较并不完全公平，因为Python的应用范围远远大于R。然而，Python也是数据科学（尤其是时间序列）中最受支持的语言之一。到2021年2月，如果我们在GitHub上搜索时间序列，发现其库数量大约是R的五倍（包括Jupyter笔记本的库）。对于Julia，我发现大约有104个库。具体数字请见下表：
- en: '| **Language** | **Repositories for time-series** |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| **语言** | **时间序列库** |'
- en: '| Jupyter Notebook | 11,297 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| Jupyter Notebook | 11,297 |'
- en: '| Python | 4,891 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| Python | 4,891 |'
- en: '| R | 3,656 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| R | 3,656 |'
- en: '| Julia | 104 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| Julia | 104 |'
- en: 'Figure 1.10: TIOBE language usage statistics'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10：TIOBE语言使用统计数据
- en: 'In order to just give a flavor of Python machine learning projects specializing
    in time-series, here''s a short list of prominent libraries on GitHub:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简要展示专注于时间序列的Python机器学习项目，以下是GitHub上一些著名库的简短列表：
- en: prophet
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: prophet
- en: sktime
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sktime
- en: gluon-ts
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: gluon-ts
- en: tslearn
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: tslearn
- en: pyts
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pyts
- en: seglearn
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: seglearn
- en: darts
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: darts
- en: cesium
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cesium
- en: pmdarima
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pmdarima
- en: 'These screenshots (taken from gitcompare.com) summarize some of the statistics
    around these libraries, such as the number of stars (how many times someone liked
    the library), forks (how many times someone copied the library in order to study
    it or make changes), age (how long has the repository existed), and others:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这些截图（来自gitcompare.com）总结了这些库的一些统计数据，如星标数（有多少人喜欢该库）、分支数（有多少人复制了该库以便研究或做更改）、库的年龄（库存在了多长时间）以及其他：
- en: '![/Users/ben/Dropbox/vimwiki/_html/assets/time-series-libraries1.png](img/B17577_01_09.png)![/Users/ben/Dropbox/vimwiki/_html/assets/time-series-libraries2.png](img/B17577_01_10.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![/Users/ben/Dropbox/vimwiki/_html/assets/time-series-libraries1.png](img/B17577_01_09.png)![/Users/ben/Dropbox/vimwiki/_html/assets/time-series-libraries2.png](img/B17577_01_10.png)'
- en: 'Figure 1.11: Library statistics for prominent Python libraries'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：著名Python库的库统计数据
- en: We'll go through many of these time-series libraries in this book. We'll deal
    with a few Python data science libraries in the following sections, but if you
    want a full introduction to any of these libraries, you should go through a book
    specific to data science in Python, or even NumPy and pandas.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将介绍许多时间序列库。接下来的章节中，我们会讨论一些 Python 数据科学库，但如果你想全面了解这些库中的任何一个，你应该阅读专门介绍
    Python 数据科学的书籍，甚至是 NumPy 和 pandas 的书籍。
- en: Installing libraries
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装库
- en: The two main tools for maintaining and installing the Python libraries you'll
    need for this book are conda and pip.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，你将需要的用于维护和安装 Python 库的两个主要工具是 conda 和 pip。
- en: Please note that the commands within the next two subsections should be executed
    from the system terminal or – in the case of conda – using the Anaconda navigator.
    For Windows and Mac users, there are graphical user interfaces available, where
    libraries can be searched and installed, instead of relying on the terminal.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，接下来两个小节中的命令应该从系统终端执行，或者 – 在 conda 的情况下 – 使用 Anaconda 导航器。对于 Windows 和 Mac
    用户，有图形用户界面可用，可以搜索并安装库，而不需要依赖终端。
- en: '**conda** works with Python, R, and other languages for the management of dependencies,
    and for environment encapsulation. conda helps with the installation of system
    libraries as well by maintaining lists of libraries associated with Python libraries.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**conda** 与 Python、R 和其他语言一起工作，用于依赖管理和环境封装。conda 还通过维护与 Python 库相关的库列表来帮助安装系统库。'
- en: 'The best way to get started with conda is to install anaconda by following
    the instructions from this link: [https://docs.continuum.io/anaconda/install/](https://docs.continuum.io/anaconda/install/).'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 conda 的最佳方式是按照以下链接中的说明安装 anaconda：[https://docs.continuum.io/anaconda/install/](https://docs.continuum.io/anaconda/install/)。
- en: 'There''s also a graphical interface to conda that comes with a slick design,
    as this screenshot shows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个带有精美设计的 conda 图形界面，如下截图所示：
- en: '![anaconda%20navigator.png](img/B17577_01_11.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![anaconda%20navigator.png](img/B17577_01_11.png)'
- en: 'Figure 1.12: Anaconda navigator'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12：Anaconda 导航器
- en: The Anaconda navigator can be installed on macOS and Microsoft Windows.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 导航器可以在 macOS 和 Microsoft Windows 上安装。
- en: 'Alternatively, you can rely completely on the terminal. For example, here''s
    how to install the NumPy library from your terminal:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以完全依赖终端。例如，下面是如何从终端安装 NumPy 库：
- en: '[PRE0]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As a side note – if you want to work with the R programming language, you can
    use conda, too:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你想使用 R 编程语言，也可以使用 conda：
- en: '[PRE1]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See the conda documentation for an in-depth introduction and tutorials. Conda
    also installs versions of Python and pip, so you can use either pip or conda to
    install Python libraries, while having your environment managed with conda.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 conda 文档，获取详细的介绍和教程。conda 还会安装 Python 和 pip 的版本，所以你可以使用 pip 或 conda 安装 Python
    库，同时通过 conda 管理你的环境。
- en: Terminal commands can be executed either from your system terminal or from within
    the Jupyter environment, the notebook or JupyterLab, by prefixing an exclamation
    mark.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 终端命令可以从系统终端或从 Jupyter 环境中执行，在 notebook 或 JupyterLab 中，通过在命令前加上感叹号。
- en: 'For example, a command from within the terminal:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，来自终端中的一个命令：
- en: '[PRE2]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Can be written within the Jupyter environment as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 Jupyter 环境中按如下方式编写：
- en: '[PRE3]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The exclamation mark from within Jupyter tells the interpreter that this is
    a shell command. In recent versions of Jupyter, the exclamation mark is not necessary
    anymore with the pip command.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中的感叹号告诉解释器这是一个 shell 命令。在 Jupyter 的最新版本中，使用 pip 命令时已不再需要感叹号。
- en: 'Let''s take a quick look at how a simple session of starting Python and installing
    a library could appear on the terminal:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看看如何在终端中启动 Python 并安装库的简单会话：
- en: '![terminal.png](img/B17577_01_12.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![terminal.png](img/B17577_01_12.png)'
- en: 'Figure 1.13: Terminal window'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：终端窗口
- en: 'pip is a package manager for Python libraries. Here are some useful commands
    from your terminal:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: pip 是 Python 库的包管理器。以下是来自终端的一些有用命令：
- en: '[PRE4]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can install different versions of Python and pip and different versions
    of libraries. These can be maintained as environments that you can switch between.
    Virtualenv is a tool to maintain environments:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以安装不同版本的 Python 和 pip 以及不同版本的库。这些可以作为环境进行维护，你可以在它们之间进行切换。Virtualenv 是一个用于维护环境的工具：
- en: '[PRE5]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `activate` command will change your `$PATH` variable to point to the `virtualenv bin/` directory,
    which contains versions of Python and pip executables, among other things. This
    means you have all of those available to use as options. You should usually see
    the prompt reflect this change.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`activate`命令将会修改你的`$PATH`变量，指向`virtualenv bin/`目录，其中包含Python和pip可执行文件等内容。这意味着你可以使用这些作为选项。通常，你应该会看到提示符反映这一变化。'
- en: 'Please note that for the activation of the environment, you can use a complete
    or relative path. In Windows, the activation command is slightly different – you''d
    run a shell script:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于环境的激活，你可以使用完整路径或相对路径。在Windows中，激活命令略有不同——你需要运行一个shell脚本：
- en: '[PRE6]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Jupyter Notebook and JupyterLab
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jupyter笔记本和JupyterLab
- en: Jupyter stands for Julia, Python, R. It's a platform to run scripts in these
    and other supported languages, such as Scala and C, in an interactive environment.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter代表Julia、Python、R。它是一个用于运行这些和其他支持语言（如Scala和C）脚本的交互式平台。
- en: 'You can start up a notebook server on your computer from the terminal like
    this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过终端在电脑上启动一个笔记本服务器，像这样：
- en: '[PRE7]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see your browser opening a new tab with the Jupyter notebook. The
    beginning of my notebook for loading the data science language time-series looks
    like this:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到浏览器打开一个新标签页，显示Jupyter笔记本。我加载数据科学语言时间序列的笔记本开头大概是这样的：
- en: '![/var/folders/80/g9sqgdws2rn0yc3rd5y3nd340000gp/T/TemporaryItems/(A Document
    Being Saved By screencaptureui 3)/Screenshot 2021-03-11 at 17.29.18.png](img/B17577_01_13.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![/var/folders/80/g9sqgdws2rn0yc3rd5y3nd340000gp/T/TemporaryItems/(A Document
    Being Saved By screencaptureui 3)/Screenshot 2021-03-11 at 17.29.18.png](img/B17577_01_13.png)'
- en: 'Figure 1.14: Jupyter notebook'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：Jupyter笔记本
- en: Alternatively, we can also use JupyterLab, the next-generation notebook server
    that brings significant improvements in usability.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们也可以使用JupyterLab，这是下一代笔记本服务器，带来了显著的可用性改进。
- en: 'You can start up a JupyterLab notebook server from the terminal like this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过终端启动一个JupyterLab笔记本服务器，像这样：
- en: '[PRE8]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'JupyerLab looks a bit different from the default Jupyter server, as you can
    see in the screenshot below (from the JupyterLab GitHub repo):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab看起来与默认的Jupyter服务器有些不同，正如下面的截图所示（来自JupyterLab的GitHub仓库）：
- en: '![i_glow_up](img/B17577_01_14.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![i_glow_up](img/B17577_01_14.png)'
- en: 'Figure 1.15: JupyterLab'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：JupyterLab
- en: Either one of these two, the Jupyter notebook or JupyterLab, will give you an
    **integrated development environment** (**IDE**) to work on the code that we'll
    be introducing in this book.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个工具，无论是Jupyter笔记本还是JupyterLab，都将为你提供一个**集成开发环境**（**IDE**），用于编写本书中将介绍的代码。
- en: 'Finally, it''s very handy to know how to get help from within Jupyter. This
    is where the question mark comes in. The question mark, ?, is used to provide
    in-notebook help like so:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，了解如何在Jupyter内部获得帮助是非常实用的。这时，问号就派上用场了。问号（?）用于在笔记本中提供帮助，像这样：
- en: '![/var/folders/80/g9sqgdws2rn0yc3rd5y3nd340000gp/T/TemporaryItems/NSIRD_screencaptureui_jyFfFP/Screenshot
    2021-06-26 at 22.06.11.png](img/B17577_01_15.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![/var/folders/80/g9sqgdws2rn0yc3rd5y3nd340000gp/T/TemporaryItems/NSIRD_screencaptureui_jyFfFP/Screenshot
    2021-06-26 at 22.06.11.png](img/B17577_01_15.png)'
- en: 'Figure 1.16: In-notebook help'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：笔记本内帮助
- en: You can also use single or double question marks at the end of a function if
    you want to access the signature or the complete source code listing of the function.
    This functionality can save a lot of time – instead of searching Google for the
    code or the definition of classes or functions, you can get to the information
    in milliseconds.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想访问函数的签名或完整的源代码列表，也可以在函数名后加一个或两个问号。这项功能可以节省大量时间——你不需要再去Google搜索代码或类、函数的定义，可以在毫秒内直接获取信息。
- en: NumPy
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy
- en: NumPy is a foundational library for scientific computing in Python because so
    many libraries depend on it. Libraries such as PyTorch and TensorFlow provide
    an interface with NumPy so that data import/export is a breeze. pandas is basically
    a high-level interface around NumPy arrays.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy是Python科学计算的基础库，因为许多库都依赖它。像PyTorch和TensorFlow这样的库提供了与NumPy的接口，使得数据的导入/导出变得非常简单。pandas基本上是一个围绕NumPy数组构建的高级接口。
- en: SciPy also builds on top of NumPy. SciPy stands for *scientific Python* and
    contains functionality ranging from mathematical constants to integration, optimization,
    interpolation, signal processing, and more.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy也建立在NumPy之上。SciPy代表*科学Python*，包含从数学常数到积分、优化、插值、信号处理等功能。
- en: NumPy allows you to work with matrices in different dimensions and perform computations
    on them. You might work mainly with pandas or other libraries and never come much
    in contact with NumPy; however, for a deeper understanding and for high performance,
    it's definitely important to know NumPy.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 允许你在不同维度上操作矩阵并对其进行计算。你可能主要使用 pandas 或其他库，并不常接触 NumPy；然而，为了更深入的理解和高性能，了解
    NumPy 无疑是非常重要的。
- en: 'A few basic commands in NumPy are below. This is supposed to be executed in
    the Python interpreter. We''ll create one-dimensional and two-dimensional arrays:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 NumPy 中的一些基本命令。这些命令应该在 Python 解释器中执行。我们将创建一维和二维数组：
- en: '[PRE9]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'NumPy has very handy functions for documentation; for example, to retrieve
    the documentation for the `optimize.fmin` function, use this (I''ve omitted a
    few lines for conciseness):'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 提供了非常方便的文档功能；例如，要检索 `optimize.fmin` 函数的文档，可以使用此命令（为简洁起见，我省略了一些行）：
- en: '[PRE10]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: pandas
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pandas
- en: pandas is a library that allows accessing matrices or arrays as tables, by indexes
    such as column names – this is called a **DataFrame**. A single column or single
    row can be accessed as a series, another datatype in pandas. These series are
    NumPy arrays.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 是一个允许通过列名等索引访问矩阵或数组作为表格的库——这称为 **DataFrame**。单个列或单个行可以作为 Series 访问，Series
    是 pandas 中的另一种数据类型。这些 Series 实际上是 NumPy 数组。
- en: 'The pandas library includes functions and classes for importing and exporting
    data from/to CSV, Excel, and many other formats; for selecting and slicing data;
    and for merge, join, groupby, and aggregation functions reminiscent of Structured
    Query Language (SQL). You can also plot directly from pandas, because pandas is
    integrated with matplotlib, but it also works with other plotting libraries such
    as bokeh:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 库包含用于从 CSV、Excel 和许多其他格式导入和导出数据的函数和类；用于选择和切片数据的函数；以及类似于结构化查询语言（SQL）的合并、连接、分组和聚合函数。你还可以直接从
    pandas 绘制图表，因为 pandas 集成了 matplotlib，但它也与其他绘图库如 bokeh 一起使用：
- en: '[PRE11]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the last command should look like this:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令的输出应该如下所示：
- en: '[PRE12]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Best practice in Python
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 中的最佳实践
- en: In this section, I want to talk about good coding. Whole books have been written
    about this, and this one section cannot do justice to this matter; however, I
    aim to at least give some essentials and pointers. For coding beyond the beginner's
    level and within a corporate environment, or any organization for that matter,
    good practice takes on importance.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我想谈谈良好的编码规范。关于这个话题已经有整本书籍写成，本节内容无法全面涵盖；不过，我的目标是至少提供一些基础要点和提示。对于初学者以上的编码，尤其是在企业环境或任何组织中，良好的实践显得尤为重要。
- en: It's not easy and takes experience to write generalizable code that lends itself
    to maintenance and enhancements. Only code that expresses ideas in a way that
    is readable to other people will be useful for a team. One of the most important
    principles is DRY (don't repeat yourself), where repetition is reduced and each
    functionality finds its unique representation within the system.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 写出通用代码使其便于维护和增强并不容易，这需要经验。只有以其他人能够读懂的方式表达想法的代码，才对团队有用。最重要的原则之一是 DRY（不要重复自己），通过减少重复，使每个功能在系统中找到其独特的表示方式。
- en: 'This is not a full list, but some other principles include the following:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个完整的列表，但其他一些原则包括以下内容：
- en: Documentation
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档
- en: Dependency management
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖管理
- en: Code validation
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码验证
- en: Error handling
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误处理
- en: Testing (in particular, unit testing)
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试（特别是单元测试）
- en: Some of these have entire books written about them, and it's outside our scope
    here to go into detail. Each of these is crucially important once you gear up
    to production so your code can be relied on.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些原则已经有整本书籍来阐述，细节内容超出了本节的范围。每一个原则在你进入生产环境时都至关重要，以确保你的代码可靠。
- en: It still happens to me that I feel like an idiot whenever I return to one of
    my projects, be it in my job or private life, and realize I didn't write enough
    documentation. When that happens, I have to expend energy rebuilding the correct
    mental representation of my code. If done properly, writing documentation can
    help you in your flow. Other people reading your code, and your future self in
    a few months, will be glad you wrote documentation, especially for functions,
    classes, and modules (docstrings).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我回到自己的项目中，无论是工作还是私人生活，我都会觉得自己是个傻瓜，意识到自己没有写足够的文档。发生这种情况时，我不得不花费精力重新构建代码的正确思维表示。如果做得正确，编写文档可以帮助你进入工作状态。其他人阅读你的代码，或者几个月后重新查看的你自己，会很高兴你写了文档，尤其是针对函数、类和模块（文档字符串）。
- en: Encapsulation of dependencies means that your code is isolated, portable, and
    reproducible. Two main tools have emerged during the last few years for the management
    of dependencies and environments in Python, conda and pip, which we've mentioned
    in the previous section.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖封装意味着你的代码是隔离的、可移植的，并且是可重现的。在过去几年中，Python中用于管理依赖关系和环境的两个主要工具是conda和pip，这些我们在前面的章节中已经提到过。
- en: A mishmash of styles and conventions render any project a mess that's not only
    hard to read but hard to maintain. One of the most important coding styles for
    Python is Python Enhancement Proposal 8, or PEP 8 for short. You can find the
    style guide for PEP 8 at [http://bit.ly/3evsgIW](http://bit.ly/3evsgIW).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 风格和约定的混乱会使任何项目变得一团糟，不仅难以阅读，也难以维护。Python最重要的编码风格之一是Python增强提案8，简称PEP 8。你可以在[http://bit.ly/3evsgIW](http://bit.ly/3evsgIW)找到PEP
    8的风格指南。
- en: 'A few tools have been developed to check Python code for adherence to PEP 8
    (and a few additional conventions). These tools can help you make your code more
    legible and maintainable while saving time and mental energy; for example, Flake8,
    Black, mypy, or Pylint. Flake8 and Pylint not only check for coding style but
    also for common coding mistakes and potential bugs. If you want to run a Flake8
    test on a Python script, you can type this, for example:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一些工具已经被开发出来，用于检查Python代码是否遵循PEP 8（以及一些额外的约定）。这些工具可以帮助你使代码更具可读性和可维护性，同时节省时间和脑力；例如，Flake8、Black、mypy或Pylint。Flake8和Pylint不仅检查编码风格，还检查常见的编码错误和潜在的bug。如果你想对Python脚本运行Flake8测试，你可以例如输入：
- en: '[PRE13]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Black can nag you about formatting or automatically fix formats in a file, module,
    or even a whole project. pydocstyle checks for the existence of documentation
    and the compliance of the documentation with documentation style guidelines.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Black可以提醒你格式问题，或自动修复文件、模块甚至整个项目中的格式问题。pydocstyle检查文档的存在以及文档是否符合文档风格指南。
- en: Further, more in-depth development and coding styles have been created by developers
    from several high-level projects and can be very instructive. The guide for the
    scikit-learn project can be found at [http://bitly.com/3etFrtz](http://bitly.com/3etFrtz).
    For pandas, you can compare the styles at [http://bit.ly/2OlpCKZ](http://bit.ly/2OlpCKZ).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由一些高水平项目的开发人员创建了更深入的开发和编码风格，并且这些风格非常具有指导性。scikit-learn项目的指南可以在[http://bitly.com/3etFrtz](http://bitly.com/3etFrtz)找到。对于pandas，你可以在[http://bit.ly/2OlpCKZ](http://bit.ly/2OlpCKZ)比较风格。
- en: 'Unit testing is a method by which you set up tests for modules, classes, and
    other units of code. One of the most popular libraries for unit testing in Python
    is pytest. You can find out more about pytest in the pytest documentation: [https://docs.pytest.org/en/stable/](https://docs.pytest.org/en/stable/)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一种为模块、类和其他代码单元设置测试的方法。Python中最受欢迎的单元测试库之一是pytest。你可以在pytest文档中了解更多关于pytest的信息：[https://docs.pytest.org/en/stable/](https://docs.pytest.org/en/stable/)
- en: Summary
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've introduced time-series, the history of research into
    time-series, and Python for time-series.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了时间序列、时间序列研究的历史以及Python在时间序列中的应用。
- en: We started with a definition of time-series and its main properties. We then
    looked at the history of the study of time-series in different scientific disciplines,
    such as demography and genetics, astronomy, economics, meteorology, medicine,
    and applied statistics.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从时间序列的定义及其主要特性开始。然后，我们回顾了时间序列在不同科学学科中的研究历史，如人口学和遗传学、天文学、经济学、气象学、医学和应用统计学。
- en: Then, we went over the capabilities of Python for time-series and why Python
    is the go-to language for doing machine learning with time-series. Finally, I
    described how to install and use Python for time-series analysis and machine learning,
    and we covered some of the basics of Python as relevant to time-series and machine
    learning.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们介绍了 Python 在时间序列分析方面的功能，并探讨了为什么 Python 是进行时间序列机器学习的首选语言。最后，我描述了如何安装和使用
    Python 进行时间序列分析和机器学习，并介绍了与时间序列和机器学习相关的 Python 基础知识。
- en: In the next chapter, we'll look at time-series analysis with Python.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论使用 Python 进行时间序列分析。
