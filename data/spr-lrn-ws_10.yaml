- en: 2\. Exploratory Data Analysis and Visualization
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 探索性数据分析与可视化
- en: 'Activity 2.01: Summary Statistics and Missing Values'
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 2.01：汇总统计与缺失值
- en: 'The steps to complete this activity are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此活动的步骤如下：
- en: 'Import the required libraries:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的库：
- en: import json
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: import json
- en: import pandas as pd
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import numpy as np
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import missingno as msno
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: import missingno as msno
- en: from sklearn.impute import SimpleImputer
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.impute import SimpleImputer
- en: import matplotlib.pyplot as plt
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: import seaborn as sns
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: import seaborn as sns
- en: 'Read the data. Use pandas'' .read_csv method to read the CSV file into a pandas
    DataFrame:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 读取数据。使用 pandas 的 `.read_csv` 方法将 CSV 文件读取到 pandas DataFrame 中：
- en: data = pd.read_csv('../Datasets/house_prices.csv')
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: data = pd.read_csv('../Datasets/house_prices.csv')
- en: 'Use pandas'' .info() and .describe() methods to view the summary statistics
    of the dataset:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pandas 的 `.info()` 和 `.describe()` 方法查看数据集的汇总统计信息：
- en: data.info()
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: data.info()
- en: data.describe().T
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: data.describe().T
- en: 'The output of info() will be as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: info() 方法的输出将如下所示：
- en: '![Figure 2.50: The output of the info() method (abbreviated)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.50：info() 方法的输出（缩略）'
- en: '](img/image-ZT8SEDKR.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-ZT8SEDKR.jpg)'
- en: 'Figure 2.50: The output of the info() method (abbreviated)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.50：info() 方法的输出（缩略）
- en: 'The output of describe() will be as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: describe() 方法的输出将如下所示：
- en: '![Figure 2.51: The output of the describe() method (abbreviated)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.51：describe() 方法的输出（缩略）'
- en: '](img/image-OOF44R7X.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-OOF44R7X.jpg)'
- en: 'Figure 2.51: The output of the describe() method (abbreviated)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.51：describe() 方法的输出（缩略）
- en: Find the total count and total percentage of missing values in each column of
    the DataFrame and display them for columns having at least one null value, in
    descending order of missing percentages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 查找每列中缺失值的总数和缺失值的总百分比，并按缺失百分比降序显示至少有一个空值的列。
- en: 'As we did in Exercise 2.02: Visualizing Missing Values, we will use the .isnull()
    function on the DataFrame to get a mask, find the count of null values in each
    column by using the .sum() function over the DataFrame mask and the fraction of
    null values by using .mean() over the DataFrame mask, and multiply by 100 to convert
    it to a percentage. Then, we''ll use pd.concat() to combine the total and percentage
    of null values into a single DataFrame and sort the rows according to the percentage
    of missing values:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在练习 2.02：可视化缺失值 中所做的那样，我们将对 DataFrame 使用 `.isnull()` 函数来获取一个掩码，使用 `.sum()`
    函数计算每列中的空值数量，使用 `.mean()` 函数计算空值的比例，并乘以 100 将其转换为百分比。然后，我们将使用 `pd.concat()` 将缺失值的总数和百分比合并到一个
    DataFrame 中，并根据缺失值的百分比对行进行排序：
- en: mask = data.isnull()
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: mask = data.isnull()
- en: total = mask.sum()
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: total = mask.sum()
- en: percent = 100*mask.mean()
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: percent = 100*mask.mean()
- en: '#'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '#'
- en: missing_data = pd.concat([total, percent], axis=1,join='outer', \
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: missing_data = pd.concat([total, percent], axis=1, join='outer', \
- en: keys=['count_missing', 'perc_missing'])
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: keys=['count_missing', 'perc_missing'])
- en: missing_data.sort_values(by='perc_missing', ascending=False, \
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: missing_data.sort_values(by='perc_missing', ascending=False, \
- en: inplace=True)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: inplace=True)
- en: '#'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '#'
- en: missing_data[missing_data.count_missing > 0]
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: missing_data[missing_data.count_missing > 0]
- en: 'The output will be as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.52: Total count and percentage of missing values in each column'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.52：每列缺失值的总数和百分比'
- en: '](img/image-4D9WP7GA.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-4D9WP7GA.jpg)'
- en: 'Figure 2.52: Total count and percentage of missing values in each column'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.52：每列缺失值的总数和百分比
- en: 'Plot the nullity matrix and nullity correlation heatmap. First, we find the
    list of column names for those having at least one null value. Then, we use the
    missingno library to plot the nullity matrix (as we did in Exercise 2.02: Visualizing
    Missing Values) for a sample of 500 points, and the nullity correlation heatmap
    for the data in those columns:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制空值矩阵和空值相关热图。首先，我们找到至少有一个空值的列名列表。然后，使用 missingno 库为这些列中的数据绘制空值矩阵（如同在练习 2.02：可视化缺失值
    中所做的那样），并绘制空值相关热图：
- en: nullable_columns = data.columns[mask.any()].tolist()
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: nullable_columns = data.columns[mask.any()].tolist()
- en: msno.matrix(data[nullable_columns].sample(500))
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: msno.matrix(data[nullable_columns].sample(500))
- en: plt.show()
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: msno.heatmap(data[nullable_columns], vmin = -0.1, \
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: msno.heatmap(data[nullable_columns], vmin = -0.1, \
- en: figsize=(18,18))
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: figsize=(18,18))
- en: plt.show()
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The nullity matrix will look like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 空值矩阵如下所示：
- en: '![Figure 2.53: Nullity matrix'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.53：空值矩阵'
- en: '](img/image-VEDY4A9O.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-VEDY4A9O.jpg)'
- en: 'Figure 2.53: Nullity matrix'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.53：空值矩阵
- en: 'The nullity correlation heatmap will look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 空值相关热图将如下所示：
- en: '![Figure 2.54: Nullity correlation heatmap'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.54：空值相关热图'
- en: '](img/image-S4SOOAAB.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-S4SOOAAB.jpg)'
- en: 'Figure 2.54: Nullity correlation heatmap'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.54：空值相关性热图
- en: 'Delete the columns having more than 80% of values missing. Use the .loc operator
    on the DataFrame we created in Step 2 to select only those columns that had fewer
    than 80% of their values missing:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 删除缺失值超过 80% 的列。使用我们在第 2 步中创建的 DataFrame 的 .loc 操作符，仅选择缺失值少于 80% 的列：
- en: data = data.loc[:,missing_data[missing_data.perc_missing < 80].index]
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: data = data.loc[:,missing_data[missing_data.perc_missing < 80].index]
- en: 'Replace null values in the FireplaceQu column with NA values. Use the .fillna()
    method to replace null values with the NA string:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将 FireplaceQu 列中的空值替换为 NA 值。使用 .fillna() 方法将空值替换为 NA 字符串：
- en: data['FireplaceQu'] = data['FireplaceQu'].fillna('NA')
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: data['FireplaceQu'] = data['FireplaceQu'].fillna('NA')
- en: data['FireplaceQu']
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: data['FireplaceQu']
- en: 'The output should appear as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 2.55: Replacing null values'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.55：替换空值'
- en: '](img/image-1P5WR7JE.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-1P5WR7JE.jpg)'
- en: 'Figure 2.55: Replacing null values'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.55：替换空值
- en: Note
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/316c4a0.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 https://packt.live/316c4a0。
- en: You can also run this example online at https://packt.live/2Z21v5c. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在 https://packt.live/2Z21v5c 上在线运行此示例。您必须执行整个Notebook才能获得所需的结果。
- en: 'Activity 2.02: Representing the Distribution of Values Visually'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 2.02：以可视化方式表示值的分布
- en: 'Plot a histogram using Matplotlib for the target variable, SalePrice. First,
    we initialize the figure using the plt.figure command and set the figure size.
    Then, we use matplotlib''s .hist() function as our primary plotting function,
    to which we pass the SalePrice series object for plotting the histogram. Lastly,
    we specify the axes'' labels and show the plot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 绘制目标变量 SalePrice 的直方图。首先，我们使用 plt.figure 命令初始化图形并设置图形大小。然后，使用
    matplotlib 的 .hist() 函数作为主要绘图函数，将 SalePrice 系列对象传递给它以绘制直方图。最后，我们指定坐标轴标签并显示图形：
- en: plt.figure(figsize=(8,6))
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: plt.figure(figsize=(8,6))
- en: plt.hist(data.SalePrice, bins=range(0,800000,50000))
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: plt.hist(data.SalePrice, bins=range(0,800000,50000))
- en: plt.ylabel('Number of Houses')
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: plt.ylabel('房屋数量')
- en: plt.xlabel('Sale Price')
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: plt.xlabel('销售价格')
- en: plt.show()
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.56: Histogram for the target variable'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.56：目标变量的直方图'
- en: '](img/image-QTG3WQJ1.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-QTG3WQJ1.jpg)'
- en: 'Figure 2.56: Histogram for the target variable'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.56：目标变量的直方图
- en: 'Find the number of unique values within each column having the object type.
    Create a new DataFrame called object_variables by using the .select_dtypes function
    on the original DataFrame to select those columns with the numpy.object data type.
    Then, find the number of unique values for each column in this DataFrame by using
    the .nunique() function, and sort the resultant series:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 查找每个列中具有对象类型的唯一值的数量。通过对原始DataFrame使用 .select_dtypes 函数来选择那些具有 numpy.object 数据类型的列，创建一个名为
    object_variables 的新 DataFrame。然后，使用 .nunique() 函数查找此 DataFrame 中每列的唯一值数量，并对结果进行排序：
- en: object_variables = data.select_dtypes(include=[np.object])
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: object_variables = data.select_dtypes(include=[np.object])
- en: object_variables.nunique().sort_values()
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: object_variables.nunique().sort_values()
- en: 'The output will be as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.57: Number of unique values within each column having the object
    type (truncated)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.57：每个具有对象类型的列中的唯一值数量（已截断）'
- en: '](img/image-KSB6TTSG.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-KSB6TTSG.jpg)'
- en: 'Figure 2.57: Number of unique values within each column having the object type
    (truncated)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.57：每个具有对象类型的列中的唯一值数量（已截断）
- en: 'Create a DataFrame representing the number of occurrences for each categorical
    value in the HouseStyle column. Use the .value_counts() function to calculate
    the frequencies of each value in decreasing order in the form of a pandas series,
    and then reset the index to give us a DataFrame and sort the values according
    to the index:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 DataFrame 来表示 HouseStyle 列中每个类别值的出现次数。使用 .value_counts() 函数按降序计算每个值的频率，以
    pandas 系列的形式，然后重置索引以生成 DataFrame，并根据索引排序值：
- en: counts = data.HouseStyle.value_counts(dropna=False)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: counts = data.HouseStyle.value_counts(dropna=False)
- en: counts.reset_index().sort_values(by='index')
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: counts.reset_index().sort_values(by='index')
- en: 'The output will be as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.58: Number of occurrences of each categorical value in the HouseStyle
    column'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.58：HouseStyle 列中每个类别值的出现次数'
- en: '](img/image-FK26JP04.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-FK26JP04.jpg)'
- en: 'Figure 2.58: Number of occurrences of each categorical value in the HouseStyle
    column'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.58：HouseStyle列中每个类别值的出现次数
- en: 'Plot a pie chart representing these counts. As in Step 1, we initialize the
    plot using plt.figure() and use the plt.title() and plt.show() methods to set
    the figure title and display it, respectively. The primary plotting function used
    is plt.pie(), to which we pass the series we created in the previous step:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制一个饼图表示这些计数。如同第1步中一样，我们使用plt.figure()初始化图形，并分别使用plt.title()和plt.show()方法设置图表标题和显示图形。主要绘图函数是plt.pie()，我们将前一步创建的系列传递给它：
- en: fig, ax = plt.subplots(figsize=(10,10))
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: fig, ax = plt.subplots(figsize=(10,10))
- en: slices = ax.pie(counts, labels = counts.index, \
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: slices = ax.pie(counts, labels = counts.index, \
- en: colors = ['white'], \
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: colors = ['white'], \
- en: 'wedgeprops = {''edgecolor'': ''black''})'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'wedgeprops = {''edgecolor'': ''black''})'
- en: patches = slices[0]
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: patches = slices[0]
- en: hatches =  ['/', '\\', '|', '-', '+', 'x', 'o', 'O', '\.', '*']
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: hatches = ['/', '\\', '|', '-', '+', 'x', 'o', 'O', '\.', '*']
- en: colors = ['white', 'white', 'lightgrey', 'white', \
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: colors = ['white', 'white', 'lightgrey', 'white', \
- en: '''lightgrey'', ''white'', ''lightgrey'', ''white'']'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '''lightgrey'', ''white'', ''lightgrey'', ''white'']'
- en: 'for patch in range(len(patches)):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'for patch in range(len(patches)):'
- en: patches[patch].set_hatch(hatches[patch])
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: patches[patch].set_hatch(hatches[patch])
- en: patches[patch].set_facecolor(colors[patch])
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: patches[patch].set_facecolor(colors[patch])
- en: plt.title('Pie chart showing counts for\nvarious house styles')
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: plt.title('显示不同房屋样式计数的饼图')
- en: plt.show()
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.59: Pie chart representing the counts'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.59：表示计数的饼图'
- en: '](img/image-JTOOX73Y.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-JTOOX73Y.jpg)'
- en: 'Figure 2.59: Pie chart representing the counts'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.59：表示计数的饼图
- en: 'Find the number of unique values within each column having the number type.
    As was executed in Step 2, now select columns having the numpy.number data type
    and find the number of unique values in each column using .nunique(). Sort the
    resultant series in descending order:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 找出每一列中具有数字类型的唯一值数量。如同在第2步中执行的那样，现在选择具有numpy.number数据类型的列，并使用.nunique()查找每列的唯一值数量。将结果序列按降序排序：
- en: numeric_variables = data.select_dtypes(include=[np.number])
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: numeric_variables = data.select_dtypes(include=[np.number])
- en: numeric_variables.nunique().sort_values(ascending=False)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: numeric_variables.nunique().sort_values(ascending=False)
- en: 'The output will be as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.60: Number of unique values within each numeric column (truncated)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.60：每个数值列中唯一值的数量（已截断）'
- en: '](img/image-3RPWU49J.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-3RPWU49J.jpg)'
- en: 'Figure 2.60: Number of unique values within each numeric column (truncated)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.60：每个数值列中唯一值的数量（已截断）
- en: 'Plot a histogram using seaborn for the LotArea variable. Use seaborn''s .distplot()
    function as the primary plotting function, to which the LotArea series in the
    DataFrame needs to be passed (without any null values, use .dropna() on the series
    to remove them). To improve the plot view, also set the bins parameter and specify
    the X-axis limits using plt.xlim():'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用seaborn绘制LotArea变量的直方图。使用seaborn的.distplot()函数作为主要绘图函数，需要传递DataFrame中的LotArea系列（去除任何空值，使用.dropna()方法删除空值）。为了改善图形视图，还可以设置bins参数，并使用plt.xlim()指定X轴范围：
- en: plt.figure(figsize=(10,7))
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: plt.figure(figsize=(10,7))
- en: sns.distplot(data.LotArea.dropna(), bins=range(0,100000,1000))
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: sns.distplot(data.LotArea.dropna(), bins=range(0,100000,1000))
- en: plt.xlim(0,100000)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: plt.xlim(0,100000)
- en: plt.show()
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.61: Histogram for the LotArea variable'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.61：LotArea变量的直方图'
- en: '](img/image-YDX4ZTO7.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-YDX4ZTO7.jpg)'
- en: 'Figure 2.61: Histogram for the LotArea variable'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.61：LotArea变量的直方图
- en: 'Calculate the skew and kurtosis values for the values in each column:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每列值的偏度和峰度值：
- en: data.skew().sort_values()
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: data.skew().sort_values()
- en: data.kurt()
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: data.kurt()
- en: 'The output for skew values will be:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 偏度值的输出将是：
- en: '![Figure 2.62: Skew values for each column (truncated)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.62：每列的偏度值（已截断）'
- en: '](img/image-EDDXHS8I.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-EDDXHS8I.jpg)'
- en: 'Figure 2.62: Skew values for each column (truncated)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.62：每列的偏度值（已截断）
- en: 'The output for kurtosis values will be:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 峰度值的输出将是：
- en: '![Figure 2.63: Kurtosis values for each column (truncated)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.63：每列的峰度值（已截断）'
- en: '](img/image-WMP9BEKX.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-WMP9BEKX.jpg)'
- en: 'Figure 2.63: Kurtosis values for each column (truncated)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.63：每列的峰度值（已截断）
- en: Note
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/3fR91qj.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看此特定部分的源代码，请访问 https://packt.live/3fR91qj。
- en: You can also run this example online at https://packt.live/37PYOI4\. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在 https://packt.live/37PYOI4 上在线运行此示例。你必须执行整个Notebook才能获得期望的结果。
- en: 'Activity 2.03: Relationships within the Data'
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动2.03：数据内的关系
- en: 'Plot the correlation heatmap for the dataset. As we did in Exercise 2.13: Plotting
    a Correlation Heatmap, plot the heatmap using seaborn''s .heatmap() function and
    pass the feature correlation matrix (as determined by using pandas'' .corr() function
    on the DataFrame). Additionally, set the color map to RdBu using the cmap parameter,
    and the minimum and maximum values on the color scale to -1 and 1 using the vmin
    and vmax parameters, respectively:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制数据集的相关性热图。正如我们在练习2.13：绘制相关性热图中所做的那样，使用seaborn的.heatmap()函数绘制热图，并传递通过pandas的.corr()函数计算出的特征相关性矩阵。除此之外，使用cmap参数将颜色映射设置为RdBu，并分别使用vmin和vmax参数将颜色刻度的最小值和最大值设置为-1和1：
- en: plt.figure(figsize = (12,10))
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: plt.figure(figsize = (12,10))
- en: sns.heatmap(data.corr(), square=True, cmap="RdBu", \
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: sns.heatmap(data.corr(), square=True, cmap="RdBu", \
- en: vmin=-1, vmax=1)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: vmin=-1, vmax=1)
- en: plt.show()
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.64: Correlation heatmap for the dataset'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.64：数据集的相关性热图'
- en: '](img/image-VCRY5EOD.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-VCRY5EOD.jpg)'
- en: 'Figure 2.64: Correlation heatmap for the dataset'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.64：数据集的相关性热图
- en: 'Plot a more compact heatmap having annotations for correlation values using
    the following subset of features:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下特征子集绘制更紧凑的热图，并在热图上添加相关性值注释：
- en: feature_subset = ['GarageArea','GarageCars','GarageCond', \
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: feature_subset = ['GarageArea','GarageCars','GarageCond', \
- en: '''GarageFinish'', ''GarageQual'',''GarageType'', \'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '''GarageFinish'', ''GarageQual'',''GarageType'', \'
- en: '''GarageYrBlt'',''GrLivArea'',''LotArea'', \'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '''GarageYrBlt'',''GrLivArea'',''LotArea'', \'
- en: '''MasVnrArea'',''SalePrice'']'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '''MasVnrArea'',''SalePrice'']'
- en: 'Now do the same as in the previous step, this time selecting only the above
    columns in the dataset and adding a parameter, annot, with a True value to the
    primary plotting function, with everything else remaining the same:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在与前一步相同，这次只选择数据集中的上述列，并将参数annot添加到主绘图函数中，值为True，其他内容保持不变：
- en: plt.figure(figsize = (12,10))
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: plt.figure(figsize = (12,10))
- en: sns.heatmap(data[feature_subset].corr(), square=True, \
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: sns.heatmap(data[feature_subset].corr(), square=True, \
- en: annot=True, cmap="RdBu", vmin=-1, vmax=1)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: annot=True, cmap="RdBu", vmin=-1, vmax=1)
- en: plt.show()
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.65: Correlation heatmap for a feature subset with annotations'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.65：带有相关性注释的特征子集相关性热图'
- en: for correlation values
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相关性值
- en: '](img/image-20XN5WXG.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-20XN5WXG.jpg)'
- en: 'Figure 2.65: Correlation heatmap for a feature subset with annotations for
    correlation values'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.65：带有相关性值注释的特征子集相关性热图
- en: 'Display the pairplot for the same subset of features, with the KDE plot on
    the diagonals and the scatter plot elsewhere. Use seaborn''s .pairplot() function
    to plot the pairplot for the non-null values in the selected columns of the DataFrame.
    To render the diagonal KDE plots, pass kde to the diag_kind parameter and, to
    set all other plots as scatter plots, pass scatter to the kind parameter:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 显示相同特征子集的Pairplot，主对角线为KDE图，其他位置为散点图。使用seaborn的.pairplot()函数绘制DataFrame中选定列的非空值的Pairplot。为了渲染对角线的KDE图，将kde传递给diag_kind参数，而将scatter传递给kind参数，以设置所有其他图为散点图：
- en: sns.pairplot(data[feature_subset].dropna(), \
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: sns.pairplot(data[feature_subset].dropna(), \
- en: kind ='scatter', diag_kind='kde')
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: kind ='scatter', diag_kind='kde')
- en: plt.show()
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.66: Pairplot for the same subset of features'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.66：相同特征子集的Pairplot'
- en: '](img/image-NOERLBX6.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-NOERLBX6.jpg)'
- en: 'Figure 2.66: Pairplot for the same subset of features'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.66：相同特征子集的Pairplot
- en: 'Create a boxplot to show the variation in SalePrice for each category of GarageCars.
    The primary plotting function used here will be seaborn''s .boxplot() function,
    to which we pass the DataFrame along with the parameters x and y, the former being
    the categorical variable and the latter the continuous variable over which we
    want to see the variation within each category, that is, GarageCars and SalePrice,
    respectively:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个箱线图，展示每个GarageCars类别下SalePrice的变化。在这里使用的主要绘图函数是seaborn的.boxplot()函数，我们将DataFrame以及x和y参数传递给它，前者是分类变量，后者是我们想要查看每个类别内部变化的连续变量，即GarageCars和SalePrice：
- en: plt.figure(figsize=(10, 10))
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: plt.figure(figsize=(10, 10))
- en: sns.boxplot(x='GarageCars', y="SalePrice", data=data)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: sns.boxplot(x='GarageCars', y="SalePrice", data=data)
- en: plt.show()
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 2.67: Boxplot showing the variation in SalePrice for each category
    of GarageCars'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.67: 箱型图显示每个 GarageCars 类别中销售价格的变化'
- en: '](img/image-IOJJQAGE.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-IOJJQAGE.jpg)'
- en: 'Figure 2.67: Boxplot showing the variation in SalePrice for each category of
    GarageCars'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.67: 箱型图显示每个 GarageCars 类别中销售价格的变化'
- en: 'Plot a line graph using seaborn to show the variation in SalePrice for older
    to more recently built flats. Here, we will plot a line graph using seaborn''s
    .lineplot() function. Since we want to see the variation in SalePrice, we take
    this as the y variable and, since the variation is across a period of time, we
    take YearBuilt as the x variable. Keeping this in mind, we pass the respective
    series as values to the y and x parameters for the primary plotting function.
    We also pass a ci=None parameter to hide the standard deviation indicator around
    the line in the plot:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 seaborn 绘制折线图，显示从较旧到最近建成的公寓销售价格的变化。在这里，我们将使用 seaborn 的 `.lineplot()` 函数绘制折线图。由于我们想查看销售价格的变化，因此我们将销售价格作为
    y 变量，并且由于变化跨越了一段时间，我们将建造年份 (YearBuilt) 作为 x 变量。考虑到这一点，我们将相应的系列数据作为值传递给主要绘图函数的
    y 和 x 参数。同时，我们还传递 `ci=None` 参数，以隐藏图中线条周围的标准偏差指示器：
- en: plt.figure(figsize=(10,7))
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: plt.figure(figsize=(10,7))
- en: sns.lineplot(x=data.YearBuilt, y=data.SalePrice, ci=None)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: sns.lineplot(x=data.YearBuilt, y=data.SalePrice, ci=None)
- en: plt.show()
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 2.68: Line graph showing the variation in SalePrice for older to more
    recently'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.68: 折线图显示从较旧到最近建成的公寓在销售价格上的变化'
- en: built flats
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 建成公寓
- en: '](img/image-GI1DMCQ1.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-GI1DMCQ1.jpg)'
- en: 'Figure 2.68: Line graph showing the variation in SalePrice for older to more
    recently built flats'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2.68: 折线图显示从较旧到最近建成的公寓销售价格的变化'
- en: Figure 2.68 illustrates how to use a line chart to emphasize both overall trends
    and the ups and downs on shorter time cycles. You may want to compare this chart
    to a scatter chart of the same data and consider what sort of information each
    conveys.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.68 展示了如何使用折线图来突出显示整体趋势以及短期时间周期中的波动。你可能想将此图表与相同数据的散点图进行比较，并考虑每种图表传达了什么信息。
- en: Note
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/2Z4bqHM.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此部分的源代码，请参阅 https://packt.live/2Z4bqHM。
- en: You can also run this example online at https://packt.live/2Nl5ggI. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在线运行这个示例，网址是 https://packt.live/2Nl5ggI。你必须执行整个 Notebook 才能得到预期的结果。
