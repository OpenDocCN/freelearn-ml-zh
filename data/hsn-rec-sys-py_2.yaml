- en: Manipulating Data with the Pandas Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pandas 库操作数据
- en: In the next few portions of the book, we are going to get our hands dirty by
    building the various kinds of recommender systems that were introduced in chapter
    one. However, before we do so, it is important that we know how to handle, manipulate,
    and analyze data efficiently in Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将通过构建第一章中介绍的各种推荐系统来动手实践。不过，在此之前，我们需要了解如何高效地在 Python 中处理、操作和分析数据。
- en: The datasets we'll be working with will be several megabytes in size. Historically,
    Python has never been well-known for its speed of execution. Therefore, analyzing
    such huge amounts of data using vanilla Python and the built-in data structures
    it provides us is simply impossible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的数据集将有几兆字节大。历史上，Python 一直以执行速度较慢而闻名。因此，使用原生 Python 及其内置的数据结构来分析如此庞大的数据量几乎是不可能的。
- en: In this chapter, we're going to get ourselves acquainted with the pandas library,
    which aims to overcome the aforementioned limitations, making data analysis in
    Python extremely efficient and user-friendly. We'll also introduce ourselves to
    the *Movies Dataset *that we're going to use to build our recommenders as well
    as use pandas to extract some interesting facts and narrate the history of movies
    using data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将熟悉 pandas 库，它旨在克服前面提到的限制，使得在 Python 中进行数据分析变得极为高效且用户友好。我们还将介绍我们将用来构建推荐系统的*电影数据集*，并利用
    pandas 提取一些有趣的事实，通过数据叙述电影的历史。
- en: '**Disclaimer:** If you are already familiar with the pandas library, you may
    skip this chapter and move on to the next, *Building an IMDB Top 250 Clone with p**andas*.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**免责声明：** 如果你已经熟悉 pandas 库，可以跳过本章，直接进入下一章，*使用 pandas 构建 IMDB Top 250 克隆*。'
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have Python installed on a system. Finally, to use the
    Git repository of this book, the user needs to install Git.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在系统上安装 Python。最后，为了使用本书的 Git 仓库，用户需要安装 Git。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)[.](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)[.](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码如何运行：
- en: '[http://bit.ly/2LoZEUj](http://bit.ly/2LoZEUj)[.](http://bit.ly/2LoZEUj)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2LoZEUj](http://bit.ly/2LoZEUj)[.](http://bit.ly/2LoZEUj)'
- en: Setting up the environment
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: Before we start coding, we should probably set up our development environment.
    For data scientists and analysts using Python, the Jupyter Notebook is, by far,
    the most popular tool for development. Therefore, we strongly advise that you
    use this environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，我们可能需要设置开发环境。对于使用 Python 的数据科学家和分析师来说，Jupyter Notebook 是迄今为止最流行的开发工具。因此，我们强烈建议你使用这个环境。
- en: We will also need to download the pandas library. The easiest way to obtain
    both is to download Anaconda. Anaconda is a distribution that comes with the Jupyter
    software and the SciPy packages (which includes pandas).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要下载 pandas 库。获取这两个库最简单的方式是下载 Anaconda。Anaconda 是一个发行版，包含了 Jupyter 软件和 SciPy
    包（其中包括 pandas）。
- en: You can download the distribution here**: **[https://www.anaconda.com/download/](https://www.anaconda.com/download/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此下载发行版**:** [https://www.anaconda.com/download/](https://www.anaconda.com/download/)。
- en: The next step is to create a new folder (I'm going to name it `RecoSys`) in
    your desired location. This will be the master folder that contains all the code
    we write as part of this book. Within this folder, create another folder named `Chapter2`, which
    will contain all the code we write as part of this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在你希望的位置创建一个新文件夹（我将其命名为 `RecoSys`）。这将是包含我们在本书中编写的所有代码的主文件夹。在这个文件夹内，创建一个名为
    `Chapter2` 的子文件夹，它将包含我们在本章中编写的所有代码。
- en: 'Next, open your Terminal application, navigate to the `Chapter2`folder, and
    run the `jupyter notebook` command. The commands should look something like this
    if you''re on a Mac or Linux (the cdpath will differ in Windows):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开你的终端应用程序，导航到 `Chapter2` 文件夹，并运行 `jupyter notebook` 命令。如果你在 Mac 或 Linux
    上，命令应该如下所示（Windows 中的 cd 路径会有所不同）：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Jupyter Notebooks run on the browser on the localhost. Therefore, they're OS-independent.
    In other words, the experience will be the same regardless of whether you're on
    a Mac, a PC, or a Linux box.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 运行在本地浏览器中。因此，它们与操作系统无关。换句话说，无论你是在 Mac、PC 还是 Linux 系统上，体验都将是一样的。
- en: 'Upon running the `jupyter notebook`command, your default browser should open
    up to the `localhost:8888/tree`URL and a window that looks as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `jupyter notebook` 命令后，你的默认浏览器应该会打开并显示 `localhost:8888/tree` 的 URL，窗口看起来如下所示：
- en: '![](img/c47502be-6824-45a2-a0a1-712a0b5bf4ea.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c47502be-6824-45a2-a0a1-712a0b5bf4ea.png)'
- en: 'To the right of the window, you should be able to see a Newdropdown. Click
    it and create a new Python 3 (or Python 2) Notebook. Doing so will open a new
    tab with an untitled notebook. You''ll also be able to see an input cellwith a
    pointer in it. This is space where we write our code (and markdown). Go ahead
    and type the following lines:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口的右侧，你应该能看到一个 **New** 下拉菜单。点击它并创建一个新的 Python 3（或 Python 2）Notebook。这样做会打开一个新标签页，其中包含一个未命名的
    Notebook。你还可以看到一个带有指针的输入单元格。这是我们编写代码（和 markdown）的空间。接下来，请键入以下几行代码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To execute the code in this cell, press *Shift *+ *Enter. *If all goes well,
    you should see a new output cell, which prints the version of the pandas library
    (for us, it is 0.20.3):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此单元格中的代码，请按 *Shift* + *Enter*。如果一切顺利，你应该会看到一个新的输出单元格，显示 Pandas 库的版本（对于我们来说是
    0.20.3）：
- en: '![](img/e403f392-9129-4d5b-aa26-efa72fa65a3a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e403f392-9129-4d5b-aa26-efa72fa65a3a.png)'
- en: Congratulations!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！
- en: You've now successfully set up your development environment. Of course, there
    is much more to Jupyter Notebooks than running a cell. We will be talking about
    these other features as and when we use them. Since this is not a book on Jupyter,
    we will be redirecting you to the free tutorials online if you're interested in
    learning the fundamentals of the Jupyter Notebook first. DataCamp has a definitive
    article on the subject.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经成功设置了开发环境。当然，Jupyter Notebook 的功能远不止于运行单元格。当我们使用这些其他功能时，我们会进行讲解。由于这不是一本关于
    Jupyter 的书籍，如果你有兴趣首先学习 Jupyter Notebook 的基础知识，我们会将你引导到网上的免费教程。DataCamp 上有一篇关于这个主题的权威文章。
- en: You can find the DataCamp Jupyter Notebook Tutorial here: [https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook](https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到 DataCamp Jupyter Notebook 教程：[https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook](https://www.datacamp.com/community/tutorials/tutorial-jupyter-notebook)。
- en: In case you're having trouble setting up your environment, googling the error
    should direct you to a page suggesting a suitable solution. Websites such as Stack
    Overflow have thousands of questions on Anaconda setup and it is extremely likely
    that the problem you're facing has been faced by someone else before.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在设置环境时遇到问题，Google 错误信息应该能引导你找到提供合适解决方案的页面。像 Stack Overflow 这样的网站上有成千上万的关于
    Anaconda 设置的问题，你遇到的问题极有可能是别人之前也遇到过的。
- en: The Pandas library
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas 库
- en: Pandas is a package that gives us access to high-performance, easy-to-use tools
    and data structures for data analysis in Python.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 是一个让我们能够访问高性能、易于使用的数据分析工具和数据结构的 Python 包。
- en: As we stated in the introduction, Python is a slow language. Pandas overcomes
    this by implementing heavy optimization using the C programming language. It also
    gives us access to Series and DataFrame, two extremely powerful and user-friendly
    data structures imported from the R Statistical Package.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在介绍中所述，Python 是一种较慢的语言。Pandas 通过使用 C 编程语言进行大量优化来克服这一点。它还为我们提供了 Series 和 DataFrame
    这两种极其强大且用户友好的数据结构，它们来自 R 统计包。
- en: Pandas also makes importing data from external files into the Python environment
    a breeze. It supports a wide variety of formats, such as JSON, CSV, HDF5, SQL,
    NPY, and XLSX.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 还使得从外部文件导入数据到 Python 环境变得轻而易举。它支持多种格式，如 JSON、CSV、HDF5、SQL、NPY 和 XLSX。
- en: As a first step toward working with pandas, let's import our movies data into
    our Jupyter Notebook. To do this, we need the path to where our dataset is located.
    This can be a URL on the internet or your local computer. We highly recommend
    downloading the data to your local computer and accessing it from a local path
    instead of from a web URL.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用 Pandas 的第一步，首先让我们将电影数据导入到我们的 Jupyter Notebook 中。为此，我们需要知道数据集所在的位置路径。这个路径可以是互联网上的
    URL，也可以是你本地计算机上的路径。我们强烈建议将数据下载到本地计算机并通过本地路径访问，而不是通过网络 URL。
- en: Go to the following URL to download the required CSV file**:** [https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/movies_metadata.csv/7.](https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/movies_metadata.csv/7.)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下网址下载所需的CSV文件**:** [https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/movies_metadata.csv/7.](https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/movies_metadata.csv/7.)
- en: 'Create a new folder called `data` in the `RecoSys` directory and move the `movies_metadata.csv` file
    that you just downloaded into this folder. Now, let''s witness some pandas magic.
    In the Jupyter Notebook you ran in the previous section, go to the second cell
    and type the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在`RecoSys`目录下创建一个名为`data`的新文件夹，并将刚下载的`movies_metadata.csv`文件移动到该文件夹中。现在，让我们见证一些pandas的魔法。在你之前运行的Jupyter
    Notebook中，转到第二个单元格并输入以下代码：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Et voila! You should be able to see a table-like structure with five rows, each
    row representing a movie. You can also see that the table has 24 columns, although
    the columns were truncated to fit in the display.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Voilà! 你应该能看到一个类似表格的结构，包含五行数据，每行代表一部电影。你还会看到表格有24列，尽管这些列被截断以适应显示。
- en: 'What is this structure though? Let''s find out by running the familiar `type`command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个结构到底是什么呢？让我们通过运行熟悉的`type`命令来了解：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should get an output stating that df is a `pandas.core.frame.DataFrame`*. *In
    other words, our code has read the CSV file into a pandas DataFrame object. But
    what are DataFrames? Let's find that out in the next section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到输出内容显示df是一个`pandas.core.frame.DataFrame`*。* 换句话说，我们的代码已经将CSV文件读取到一个pandas
    DataFrame对象中。但DataFrame到底是什么？让我们在下一节中解答这个问题。
- en: The Pandas DataFrame
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas DataFrame
- en: 'As we saw in the previous section, the `df.head()`code outputted a table-like
    structure. In essence, the DataFrame is just that: a two-dimensional data structure
    with columns of different data types. You can think of it as an SQL Table. Of
    course, just being a table of rows and columns isn''t what makes the DataFrame
    special. The DataFrame gives us access to a wide variety of functionality, some
    of which we''re going to explore in this section.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，`df.head()`代码输出了一个类似表格的结构。本质上，DataFrame就是这样：一个二维数据结构，包含了不同数据类型的列。你可以将它看作一个SQL表格。当然，仅仅是行和列的表格并不是DataFrame特别之处。DataFrame为我们提供了丰富的功能，部分功能我们将在这一节中探讨。
- en: 'Each row in our DataFrame represents a movie. But how many movies are there?
    We can find this out by running the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的DataFrame中的每一行代表一部电影。那么有多少部电影呢？我们可以通过运行以下代码来找出答案：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The result gives us the number of rows and columns present in df. We can see
    that we have data on 45,466 movies.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 结果给出了df中的行数和列数。我们可以看到，数据中包含了45,466部电影的信息。
- en: 'We also see that we have 24 columns. Each column represents a feature or a
    piece of metadata about the movie. When we ran `df.head()`*, *we saw that most
    of the columns were truncated to fit in the display. To view all the columns (henceforth,
    called features) we have, we can run the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到共有24列，每列代表一个特征或关于电影的元数据。当我们运行`df.head()`*时，*我们看到大多数列被截断，以适应显示空间。为了查看所有的列（以下简称为特征），我们可以运行以下代码：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We see that we have a lot of information on these movies, including their title,
    budget, genres, release date, and revenue.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这些电影包含了很多信息，包括它们的标题、预算、类型、发布日期和收入等。
- en: 'Next, let''s find out how to access a particular movie (or row). The first
    way to do this is by using the `.iloc`method. This allows us to select rows based
    on the numeric position, starting from zero. For example, if we wanted to access
    the second movie in the DataFrame, we''d run:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解如何访问特定的电影（或行）。第一种方法是使用`.iloc`方法。通过这种方式，我们可以根据数值位置选择行，从零开始。例如，如果我们想访问DataFrame中的第二部电影，可以运行以下代码：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output will give you information about the movie on each of its 24 features.
    We see that the title of the movie is *Jumanji* and that it was released on December
     15th, 1995, among other things.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将会给你关于电影的24个特征的信息。我们可以看到电影的标题是*Jumanji*，并且它是在1995年12月15日上映的，除此之外还有其他信息。
- en: A cell will always print the output of the last line of code. Therefore, we
    don't need to explicitly write it within a `print`function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单元格都会输出最后一行代码的结果。因此，我们不需要在`print`函数中显式写出它。
- en: 'The second way to do it is by accessing the DataFrame index. Since we didn''t
    explicitly set an index while reading the CSV file, pandas defaulted it to zero-based
    indexing. We can change the index of df quite easily. Let''s change the index
    to the title of the movie and try to access `Jumanji` using this index:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是通过访问DataFrame的索引。由于在读取CSV文件时我们没有显式设置索引，pandas默认将其设置为零基索引。我们可以轻松地更改df的索引。让我们将索引更改为电影标题，并尝试使用该索引访问`Jumanji`：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see an output identical to the previous cell. Let''s revert back
    to our zero-based numeric index:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到与之前单元格完全相同的输出。让我们恢复为零基数字索引：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It is also possible to create a new, smaller DataFrame with fewer columns.
    Let''s create a new DataFrame that only has the following features: `title`, `release_date`,
    `budget`, `revenue`, `runtime`, and `genres`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以创建一个新的、更小的DataFrame，包含更少的列。让我们创建一个只包含以下特征的新DataFrame：`title`、`release_date`、`budget`、`revenue`、`runtime`和`genres`：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You should see a table with five movies and only the features that we've mentioned.
    The `.head()`method simply displays the first five rows of the DataFrame. You
    can display as many rows as you want by passing it as an argument into `.head()`*:*
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一个包含五部电影的表格，并且只有我们提到的特征。`.head()`方法仅显示DataFrame的前五行。你可以通过将行数作为参数传递给`.head()`*来显示任意数量的行*：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, let''s check out the data types of our various features:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们查看各种特征的数据类型：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A curious observation here is that pandas correctly deciphers `revenue`and `runtime`as
    float data, but assigns the generic object data type to `budget`*. *
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的观察是，pandas正确地将`revenue`和`runtime`解读为float类型数据，但将`budget`分配为通用的object数据类型*。*
- en: 'However, pandas allows us to manually convert the data type of a feature. Let''s
    try to convert the `budget`feature to `float`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，pandas允许我们手动转换特征的数据类型。让我们尝试将`budget`特征转换为`float`：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running this cell throws `ValueError`. It is easy to guess that one of the budget
    fields had a `'/zaSf...'` string as its value, and pandas was not able to convert
    this into a floating number.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此单元格会抛出`ValueError`。很容易猜测，某个预算字段的值是`'/zaSf...'`这样的字符串，pandas无法将其转换为浮动数字。
- en: 'To solve this problem, we will use the `apply()`method. This will allow us
    to apply a function to every field in a particular column and convert it into
    the return value. We are going to convert every number field in `budget`to float
    and, if that fails, convert it to `NaN`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们将使用`apply()`方法。这将允许我们对特定列的每个字段应用一个函数，并将其转换为返回值。我们将把`budget`中的每个数字字段转换为float，如果失败，则转换为`NaN`：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This time around, there are no errors thrown. Also, we notice that the `budget`feature
    is now of the `float64` type.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这次没有抛出任何错误。我们还注意到，`budget`特征现在是`float64`类型。
- en: 'Now, let''s try to define a new feature, called `year`, that represents the
    year of release. The recommended way to do this would be by using the `datetime`
    functionality that pandas gives us:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试定义一个新特征，叫做`year`，表示发行年份。推荐的做法是使用pandas提供的`datetime`功能：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'What are the oldest movies available in this dataset? To answer this question,
    we can sort the DataFrame based on the year of release:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集中有哪些最古老的电影？为了回答这个问题，我们可以根据发行年份对DataFrame进行排序：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We see that we have movies from as early as the 1870s, with *Passage of Venus *being
    the oldest movie on record. Next, let''s find out the most successful movies of
    all time. To do this, we''ll use the `sort_values()`method once again, but with
    an additional `ascending=False`parameter to sort `DataFrame` in descending order:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到从1870年代开始就有电影，其中*《金星的通道》*是已记录的最古老电影。接下来，让我们找出史上最成功的电影。为此，我们将再次使用`sort_values()`方法，但加上额外的`ascending=False`参数来按降序排序`DataFrame`：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: From our results, we observe that *Avatar *is the most successful movie of all
    time, with a revenue of over $2.78 billion.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的结果来看，我们观察到*《阿凡达》*是史上最成功的电影，收入超过27.8亿美元。
- en: 'Let''s say we wanted to create a new DataFrame of movies that satisfied a certain
    condition. For instance, we only want movies that earned more than $1 billion.
    Pandas makes this possible using its Boolean Indexing feature. Let''s see this
    in action:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想创建一个符合某个条件的新电影DataFrame。例如，我们只想要那些收入超过10亿美元的电影。pandas通过其布尔索引功能使这成为可能。让我们来看一下操作：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'It is also possible to apply multiple conditions. For instance, let''s say
    we only wanted movies that earned more than $1 billion, but where the outlay less
    than $150 million, we''d do it as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以应用多个条件。例如，假设我们只想要那些收入超过10亿美元但开销少于1.5亿美元的电影，我们可以如下操作：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Only four movies make it into this list.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 只有四部电影进入了这个榜单。
- en: 'There is, of course, much more to what you can do with DataFrames (such as
    handling missing data), but we''ll stop our exploration with it for now. Let''s
    move on to another data structure we have unknowingly used extensively in this
    section: the Pandas Series.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，DataFrame还有很多其他功能（比如处理缺失数据），但我们先暂停对它的探索。接下来，我们将介绍在本节中我们无意间广泛使用的数据结构：Pandas
    Series。
- en: The Pandas Series
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas Series
- en: 'When we accessed the Jumanjimovie using `.loc`and `.iloc`*, *the data structures
    returned to us were Pandas Series objects. You may have also noticed that we were
    accessing entire columns using `df[column_name]`*. *This, too, was a Pandas Series
    object:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`.loc`和`.iloc`访问Jumanji电影时，*返回的数据结构是Pandas Series对象*。你可能还注意到，我们通过`df[column_name]`访问整列数据，*这同样是一个Pandas
    Series对象*：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The Pandas Series is a one-dimensional labelled array capable of holding data
    of any type. You may think of it as a Python list on steroids. When we were using
    the `.apply()`and `.astype()`methods in the previous section, we were actually
    using them on these Series objects.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas Series是一种一维标签数组，可以包含任何类型的数据。你可以把它看作是一个增强版的Python列表。当我们在前一部分使用`.apply()`和`.astype()`方法时，实际上我们是在对这些Series对象进行操作。
- en: Therefore, like the DataFrame, the Series object comes with its own group of
    extremely useful methods that make data analysis a breeze.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，像DataFrame一样，Series对象也具有一组极其有用的方法，使得数据分析变得轻松自如。
- en: 'First, let''s check out the shortest- and longest-running movies of all time.
    We will do this by accessing the `runtime`column of the DataFrame as a Series
    object and applying its methods on it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看史上最短和最长的电影时长。我们将通过访问DataFrame中的`runtime`列，将其作为Series对象，并应用其方法来实现：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We see that the longest movie is more than 1,256 minutes in length and the shortest
    is 0! Of course, such strange results demand a deeper inspection of the data but
    we shall skip that, for now.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，最长的电影长度超过1256分钟，而最短的竟然是0分钟！当然，这样的异常结果需要对数据进行更深入的检查，但我们现在先跳过这一部分。
- en: 'It is also possible to calculate the mean and median of the Series in this
    way. Let''s do so for the movie budgets:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，也可以通过这种方式计算Series的均值和中位数。让我们对电影预算进行计算：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The average budget of a movie is $4.2 million and the median budget is 0! This
    suggests that at least half the movies in our dataset have no budget at all! Like
    in the previous case, such strange results demand closer inspection. In this case,
    it is highly likely that a zero budget indicates that the data is not available.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一部电影的平均预算是420万美元，中位预算是0！这表明我们数据集中的至少一半电影没有预算！和前面的情况一样，这种异常结果需要进一步检查。在这种情况下，很可能是预算为零表明数据不可用。
- en: 'What is the revenue that the 90th-percentile movie generated? We can discover
    this using the `quantile`function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第90百分位电影的收入是多少？我们可以使用`quantile`函数来发现这个值：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We get a result of $8.26 million. What this means is that only 10% of the movies
    in our dataset earned more than $8.26 million in revenue.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的结果是826万美元。这意味着我们数据集中的10%的电影收入超过了826万美元。
- en: 'Finally, let''s find out the number of movies released each year. We do this
    using the `value_counts()`method on the `year`series:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来找出每年上映的电影数量。我们可以使用`year`系列上的`value_counts()`方法来实现：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We have the highest number of movies released in 2014\. There are also six years
    in our dataset (including 2020) that have only one movie on record.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现2014年是电影上映最多的一年。我们的数据集中还有六年（包括2020年）只有一部电影记录。
- en: We'll stop our tour of the pandas library here. As I have already mentioned,
    there is much more to pandas than what we have covered in this chapter. However,
    this should be sufficient to tackle the data-wrangling and analysis tasks that
    we'll encounter while building our recommenders.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的pandas库之旅到此为止。如我之前所提到的，pandas远不止我们在本章中所涵盖的内容。然而，这些内容足以应对我们在构建推荐系统时所遇到的数据整理和分析任务。
- en: You may rename the notebook as `Chapter2`by clicking on Untitled and then close
    it. For the next chapter, we will create a new notebook.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击“Untitled”并将笔记本重命名为`Chapter2`，然后关闭它。下一章我们将创建一个新的笔记本。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we gained an understanding of the limitations of using vanilla
    Python and its built-in data structures. We acquainted ourselves with the Pandas
    library and learned how it overcomes the aforementioned difficulties by giving
    us access to extremely powerful and easy-to-use data structures. We then explored
    the two main data structures, Series and DataFrame, by analyzing our movies-metadata
    dataset.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了使用原生 Python 及其内置数据结构的局限性。我们熟悉了 Pandas 库，并学习了它如何通过提供极其强大且易于使用的数据结构来克服上述困难。然后，我们通过分析我们的电影元数据集，探索了两个主要数据结构——Series
    和 DataFrame。
- en: In the next chapter, we will use our newfound skills to build an IMDB Top 250
    Clone and its variant, a type of knowledge-based recommender.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将运用新学到的技能来构建一个 IMDB Top 250 克隆及其变体，一种基于知识的推荐系统。
