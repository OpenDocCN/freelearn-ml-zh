- en: Getting Started with Recommender Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐系统入门
- en: Almost everything we buy or consume today is influenced by some form of recommendation;
    whether that's from friends, family, external reviews, and, more recently, from
    the sources selling you the product. When you log on to Netflix or Amazon Prime,
    for example, you will see a list of movies and television shows the service thinks
    you will like based on your past watching (and rating) history. Facebook suggests
    people it thinks you may know and would probably like to add. It also curates
    a News Feed for you based on the posts you've liked, the people you've be-friended,
    and the pages you've followed. Amazon recommends items to you as you browse for
    a particular product. It shows you similar products from a competing source and
    suggests auxiliary items *frequently bought together* with the product.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎我们今天购买或消费的每样东西，都受到了某种形式的推荐的影响；无论是来自朋友、家人、外部评论，还是更近期的，来自卖方的推荐。当你登录 Netflix
    或 Amazon Prime 时，例如，你会看到服务根据你过去的观看（和评分）历史，认为你会喜欢的电影和电视节目列表。Facebook 会推荐它认为你可能认识并可能想加为好友的人。它还会根据你喜欢的帖子、你交的朋友以及你关注的页面，为你精选新闻动态。Amazon
    会在你浏览特定产品时推荐商品。它会展示来自竞争商家的类似商品，并建议与该商品 *常一起购买* 的附加商品。
- en: So, it goes without saying that providing a good recommendation is at the core
    of successful business for these companies. It is in Netflix's best interests
    to engage you with content that you love so that you continue to subscribe to
    its service; the more relevant the items Amazon shows you, the greater your chances
    – and volume – of purchases will be, which directly translates to greater profits.
    Equally, establishing *friendship* is key to Facebook's power and influence as
    an almost omnipotent social network, which it then uses to churn money out of
    advertising.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不言而喻，为这些公司提供一个好的推荐系统是其成功商业的核心。Netflix 最希望通过你喜欢的内容吸引你，这样你就会继续订阅其服务；Amazon
    向你展示的项目越相关，你的购买几率和数量就越大，这直接转化为更高的利润。同样，建立 *友谊* 对于 Facebook 作为一个几乎无所不能的社交网络的力量和影响力至关重要，Facebook
    利用这一点从广告中获取大量收入。
- en: 'In this introductory chapter, we will acquaint ourselves with the world of
    recommender systems, covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的介绍中，我们将了解推荐系统的世界，涵盖以下主题：
- en: What is a recommender system? What can it do and not do?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是推荐系统？它能做什么，不能做什么？
- en: The different types of recommender systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐系统的不同类型
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have Python installed on a system. Finally, to use the
    Git repository of this book, the user needs to install Git.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在系统中安装 Python。最后，为了使用本书的 Git 仓库，用户需要安装 Git。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)[.](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)[.](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码如何实际运行：
- en: '[http://bit.ly/2JTtg6t](http://bit.ly/2JTtg6t)[.](http://bit.ly/2JTtg6t)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2JTtg6t](http://bit.ly/2JTtg6t)[.](http://bit.ly/2JTtg6t)'
- en: What is a recommender system?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是推荐系统？
- en: Recommender systems are pretty self-explanatory; as the name suggests, they
    are systems or techniques that recommend or suggest a particular product, service,
    or entity. However, these systems can be classified into the following two categories,
    based on their approach to providing recommendations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统很容易理解；顾名思义，它们是推荐或建议特定产品、服务或实体的系统或技术。然而，这些系统可以根据其提供推荐的方法，分为以下两类。
- en: The prediction problem
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预测问题
- en: In this version of the problem, we are given a matrix of *m* users and *n* items.
    Each row of the matrix represents a user and each column represents an item. The
    value of the cell in the i^(th )row and the j^(th) column denotes the rating given
    by user *i* to item *j*. This value is usually denoted as r[ij].
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题版本中，我们给定了一个 *m* 用户和 *n* 项目的矩阵。矩阵的每一行代表一个用户，每一列代表一个项目。矩阵中第 i^(行) 和 j^(列)
    位置的值表示用户 *i* 给项目 *j* 的评分。这个值通常表示为 r[ij]。
- en: 'For instance, consider the matrix in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑下图中的矩阵：
- en: '![](img/61ad9d1e-fc57-48f6-ad4c-fefab39324c4.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61ad9d1e-fc57-48f6-ad4c-fefab39324c4.png)'
- en: This matrix has seven users rating six items. Therefore, m = 7 and n = 6\. User
    1 has given the item 1 a rating of 4\. Therefore, r[11] = 4.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个矩阵包含了七个用户对六个项目的评分。因此，m = 7 和 n = 6。用户1给项目1的评分是4。因此，r[11] = 4。
- en: Let us now consider a more concrete example. Imagine you are Netflix and you
    have a repository of 20,000 movies and 5,000 users. You have a system in place
    that records every rating that each user gives to a particular movie. In other
    words, you have the rating matrix (of shape 5,000 × 20,000) with you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑一个更具体的例子。假设你是Netflix，拥有一个包含20,000部电影和5,000名用户的库。你有一个系统记录每个用户给特定电影的评分。换句话说，你拥有一个评分矩阵（形状为5,000
    × 20,000）。
- en: However, all your users will have seen only a fraction of the movies you have
    available on your site; therefore, the matrix you have is sparse. In other words,
    most of the entries in your matrix are empty, as most users have not rated most
    of your movies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你的所有用户只能看到你网站上部分电影的内容；因此，你拥有的矩阵是稀疏的。换句话说，你的矩阵中大部分条目是空的，因为大多数用户没有对大部分电影进行评分。
- en: The prediction problem, therefore, aims to predict these missing values using
    all the information it has at its disposal (the ratings recorded, data on movies,
    data on users, and so on). If it is able to predict the missing values accurately,
    it will be able to give great recommendations. For example, if user *i* has not
    used item *j*, but our system predicts a very high rating (denoted by ![](img/57a418b0-5fe0-41be-a202-275bc4162f83.png)[ij]),
    it is highly likely that *i* will love *j* should they discover it through the
    system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，预测问题旨在使用所有可用的信息（已记录的评分、电影数据、用户数据等）来预测这些缺失的值。如果它能够准确地预测缺失的值，就能够提供很好的推荐。例如，如果用户
    *i* 没有使用项目 *j*，但我们的系统预测出一个非常高的评分（表示为 ![](img/57a418b0-5fe0-41be-a202-275bc4162f83.png)[ij]），那么用户
    *i* 很可能会喜欢 *j*，只要他们通过系统发现它。
- en: The ranking problem
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排名问题
- en: Ranking is the more intuitive formulation of the recommendation problem. Given
    a set of *n* items, the ranking problem tries to discern the top *k* items to
    recommend to a particular user, utilizing all of the information at its disposal.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 排名是推荐问题的更直观的表述。给定一组 *n* 个项目，排名问题试图辨别出推荐给特定用户的前 *k* 个项目，利用所有可用的信息。
- en: '![](img/43494356-5ecc-4ae1-9e89-72ca91a248bc.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43494356-5ecc-4ae1-9e89-72ca91a248bc.png)'
- en: Imagine you are Airbnb, much like the preceding example. Your user has input
    the specific things they are looking for in their host and the space (such as
    their location, and budget). You want to display the top 10 results that satisfy
    those aforementioned conditions. This would be an example of the ranking problem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是Airbnb，就像前面的例子一样。你的用户已经输入了他们寻找房东和空间的具体要求（比如位置和预算）。你希望展示符合这些条件的前10个结果。这将是一个排名问题的例子。
- en: It is easy to see that the prediction problem often boils down to the ranking
    problem. If we are able to predict missing values, we can extract the top values
    and display them as our results.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看出，预测问题通常可以简化为排名问题。如果我们能够预测缺失的值，就可以提取出最好的值并将其显示为我们的结果。
- en: In this book, we will look at both formulations and build systems that effectively
    solve them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将探讨这两种方法，并构建能够有效解决这些问题的系统。
- en: Types of recommender systems
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐系统的类型
- en: In recommender systems, as with almost every other machine learning problem,
    the techniques and models you use (and the success you enjoy) are heavily dependent
    on the quantity and quality of the data you possess. In this section, we will
    gain an overview of three of the most popular types of recommender systems in
    decreasing order of data they require to inorder function efficiently.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在推荐系统中，正如几乎所有其他机器学习问题一样，你使用的技术和模型（以及你取得的成功）在很大程度上依赖于你拥有的数据的数量和质量。在本节中，我们将概览三种最受欢迎的推荐系统类型，按照它们所需的数据量递减的顺序来展示。
- en: Collaborative filtering
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 协同过滤
- en: Collaborative filtering leverages the power of community to provide recommendations.
    Collaborative filters are one of the most popular recommender models used in the
    industry and have found huge success for companies such as Amazon. Collaborative
    filtering can be broadly classified into two types.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤利用社区的力量来提供推荐。协同过滤器是业界最受欢迎的推荐模型之一，已经为像亚马逊这样的公司带来了巨大的成功。协同过滤可以大致分为两种类型。
- en: User-based filtering
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于用户的过滤
- en: 'The main idea behind user-based filtering is that if we are able to find users
    that have bought and liked similar items in the past, they are more likely to
    buy similar items in the future too. Therefore, these models recommend items to
    a user that similar users have also liked. Amazon''s *Customers who bought t**his
    item also bought* is an example of this filter, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 用户基于过滤的主要思想是，如果我们能够找到过去购买并喜欢相似物品的用户，那么他们未来也更可能购买相似的物品。因此，这些模型会根据类似用户的喜好推荐物品。亚马逊的*购买此商品的客户还购买了*就是这一过滤器的例子，如下图所示：
- en: '![](img/67526260-a36e-4c9b-9356-8f00000a5085.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67526260-a36e-4c9b-9356-8f00000a5085.png)'
- en: Imagine that Alice and Bob mostly like and dislike the same video games. Now,
    imagine that a new video game has been launched on the market. Let's say Alice
    bought the game and loved it. Since we have discerned that their tastes in video
    games are extremely similar, it's likely that Bob will like the game too; hence,
    the system recommends the new video game to Bob.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设艾丽丝和鲍勃大多数时候喜欢和不喜欢相同的视频游戏。现在，假设市场上推出了一款新的视频游戏。假设艾丽丝购买了这款游戏并且非常喜欢。因为我们已经辨别出他们在视频游戏上的品味极其相似，所以鲍勃也很可能会喜欢这款游戏；因此，系统会将这款新游戏推荐给鲍勃。
- en: Item-based filtering
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于物品的过滤
- en: 'If a group of people have rated two items similarly, then the two items must
    be similar. Therefore, if a person likes one particular item, they''re likely
    to be interested in the other item too. This is the principle on which item-based
    filtering works. Again, Amazon makes good use of this model by recommending products
    to you based on your browsing and purchase history, as shown in the following
    screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一群人对两件物品的评价相似，那么这两件物品必须是相似的。因此，如果一个人喜欢某个特定的物品，他们也很可能对另一个物品感兴趣。这就是基于物品的过滤方法的原理。亚马逊通过根据你的浏览和购买历史推荐产品，很好地利用了这一模型，如下图所示：
- en: '![](img/97e8384b-0e6c-4515-a5dc-900511facc4d.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97e8384b-0e6c-4515-a5dc-900511facc4d.png)'
- en: Item-based filters, therefore, recommend items based on the past ratings of
    users. For example, imagine that Alice, Bob, and Eve have all given *War and Peace *and *The
    Picture of Dorian Gray* a rating of excellent*. *Now, when someone buys *The Brothers
    Karamazov, *the system will recommend *War and Peace *as it has identified that,
    in most cases, if someone likes one of those books, they will like the other,
    too.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基于物品的过滤器因此是根据用户过去的评分来推荐物品。例如，假设艾丽丝、鲍勃和伊芙都给*《战争与和平》*和*《道林·格雷的画像》*打了“极好”的分。那么，当有人购买*《卡拉马佐夫兄弟》*时，系统会推荐*《战争与和平》*，因为它识别到，在大多数情况下，如果有人喜欢其中一本书，他们也会喜欢另一本书。
- en: Shortcomings
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺点
- en: One of the biggest prerequisites of a collaborative filtering system is the
    availability of data of past activity. Amazon is able to leverage collaborative
    filters so well because it has access to data concerning millions of purchases
    from millions of users.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤系统的最大前提之一是过去活动数据的可用性。亚马逊之所以能够如此有效地利用协同过滤，是因为它可以访问数百万用户的购买数据。
- en: Therefore, collaborative filters suffer from what we call the **cold start problem***. *Imagine
    you have started an e-commerce website – to build a good collaborative filtering
    system, you need data on a large number of purchases from a large number of users.
    However, you don't have either, and it's therefore difficult to build such a system
    from the start.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，协同过滤存在我们所说的**冷启动问题**。*假设你刚刚启动了一个电子商务网站——要建立一个好的协同过滤系统，你需要大量用户的购买数据。然而，你没有这些数据，因此很难从零开始构建这样的系统。
- en: Content-based systems
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于内容的系统
- en: Unlike collaborative filters, content-based systems do not require data relating
    to past activity. Instead, they provide recommendations based on a user profile
    and metadata it has on particular items.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与协同过滤不同，基于内容的系统不需要过去活动的数据。相反，它们根据用户的个人资料和对特定物品的元数据提供推荐。
- en: Netflix is an excellent example of the aforementioned system. The first time
    you sign in to Netflix, it doesn't know what your likes and dislikes are, so it
    is not in a position to find users similar to you and recommend the movies and
    shows they have liked.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix 是上述系统的一个优秀例子。你第一次登录 Netflix 时，它并不知道你喜欢或不喜欢什么，因此无法找到与你相似的用户并推荐他们喜欢的电影和节目。
- en: '![](img/272885cb-c998-496d-a642-c9172b282e11.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/272885cb-c998-496d-a642-c9172b282e11.png)'
- en: As shown in the previous screenshot, what Netflix does instead is ask you to
    rate a few movies that you *have* watched before. Based on this information and
    the metadata it already has on movies, it creates a watchlist for you. For instance,
    if you enjoyed the *Harry Potter *and *Narnia *movies, the content-based system
    can identify that you like movies based on fantasy novels and will recommend a
    movie such as *Lord of the Rings *to you.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，Netflix 所做的是要求你评分一些你*曾经*看过的电影。基于这些信息以及它已经拥有的电影元数据，它为你创建了一个观影清单。例如，如果你喜欢*哈利·波特*和*纳尼亚传奇*电影，基于内容的系统可以识别出你喜欢基于奇幻小说的电影，并会推荐像*指环王*这样的电影给你。
- en: However, since content-based systems don't leverage the power of the community,
    they often come up with results that are not as impressive or relevant as the
    ones offered by collaborative filters. In other words, content-based systems usually
    provide recommendations that are *obvious. *There is little novelty in a *Lord
    of the Rings *recommendation if *Harry Potter* is your favorite movie.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于基于内容的系统没有利用社区的力量，它们往往会给出一些不如协同过滤系统所提供的结果那么令人印象深刻或相关。换句话说，基于内容的系统通常会提供*显而易见*的推荐。如果*哈利·波特*是你最喜欢的电影，那么*指环王*的推荐就缺乏新意。
- en: Knowledge-based recommenders
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于知识的推荐系统
- en: '![](img/840de401-e39f-49f8-a2b7-7fc6ddaac6b2.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/840de401-e39f-49f8-a2b7-7fc6ddaac6b2.png)'
- en: Knowledge-based recommenders are used for items that are very rarely bought.
    It is simply impossible to recommend such items based on past purchasing activity
    or by building a user profile. Take real estate, for instance. Real estate is
    usually a once-in-a-lifetime purchase for a family. It is not possible to have
    a history of real estate purchases for existing users to leverage into a collaborative
    filter, nor is it always feasible to ask a user their real estate purchase history.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 基于知识的推荐系统适用于那些极少被购买的商品。仅仅依靠过去的购买活动或通过建立用户档案来推荐此类商品是不可能的。以房地产为例，房地产通常是家庭一次性的大宗购买。现有用户没有足够的房地产购买历史来进行协同过滤，也并不总是可行去询问用户他们的房地产购买历史。
- en: In such cases, you build a system that asks for certain specifics and preferences
    and then provides recommendations that satisfy those aforementioned conditions.
    In the real estate example, for instance, you could ask the user about their requirements
    for a house, such as its locality, their budget, the number of rooms, and the
    number of storeys, and so on. Based on this information, you can then recommend
    properties that will satisfy all of the above conditions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你构建一个系统，询问用户一些具体要求和偏好，然后提供符合这些条件的推荐。例如，在房地产的例子中，你可以询问用户关于房子的需求，比如位置、预算、房间数量、楼层数等。根据这些信息，你可以推荐符合上述条件的房产。
- en: Knowledge-based recommenders also suffer from the problem of low novelty, however.
    Users know full-well what to expect from the results and are seldom taken by surprise.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 基于知识的推荐系统也面临着低新颖性的问题。用户通常知道结果会是什么，因此很少会感到惊讶。
- en: Hybrid recommenders
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合推荐系统
- en: As the name suggests, hybrid recommenders are robust systems that combine various
    types of recommender models, including the ones we've already explained. As we've
    seen in previous sections, each model has its own set of advantages and disadvantages.
    Hybrid systems try to nullify the disadvantage of one model against an advantage
    of another.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，混合推荐系统是强大的系统，它结合了多种推荐模型，包括我们之前已经解释过的那些模型。正如我们在前面几节中看到的，每个模型都有其优缺点。混合系统试图将一个模型的劣势与另一个模型的优势相抵消。
- en: Let's consider the Netflix example again. When you sign in for the first time,
    Netflix overcomes the cold start problem of collaborative filters by using a content-based
    recommender, and, as you gradually start watching and rating movies, it brings
    its collaborative filtering mechanism into play. This is far more successful,
    so most practical recommender systems are hybrid in nature.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 再次考虑 Netflix 的例子。当你第一次登录时，Netflix 通过使用基于内容的推荐系统克服了协同过滤的冷启动问题，并且随着你逐渐开始观看和评分电影，它会启动协同过滤机制。这种方法更为成功，因此大多数实际的推荐系统本质上是混合型的。
- en: In this book, we will build a recommender system of each type and will examine
    all of the advantages and shortcomings described in the previous sections.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将构建每种类型的推荐系统，并将检查前面部分描述的所有优缺点。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we gained an overview of the world of recommender systems.
    We saw two approaches to solving the recommendation problem; namely, prediction
    and ranking. Finally, we examined the various types of recommender systems and
    discussed their advantages and disadvantages.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了推荐系统的世界。我们看到了两种解决推荐问题的方法：即预测和排序。最后，我们考察了各种类型的推荐系统，并讨论了它们的优缺点。
- en: In the next chapter, we will learn to process data with pandas, the data analysis
    library of choice in Python. This, in turn, will aid us in building the various
    recommender systems we've introduced.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用pandas来处理数据，pandas是Python中首选的数据分析库。这将帮助我们构建我们介绍过的各种推荐系统。
