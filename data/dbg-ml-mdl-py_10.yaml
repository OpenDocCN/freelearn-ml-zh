- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Versioning and Reproducible Machine Learning Modeling
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制和可重复性机器学习建模
- en: Reproducibility is an important topic to help machine learning developers go
    back to different stages of the machine learning life cycle and identify opportunities
    for model improvement. Having access to different versions of the data and models
    generated through the machine learning life cycles could help us in improving
    the reproducibility of our projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可重复性是一个重要的主题，有助于机器学习开发者回到机器学习生命周期的不同阶段，并识别模型改进的机会。通过访问通过机器学习生命周期生成的不同版本的数据和模型，可以帮助我们提高项目的可重复性。
- en: In this chapter, you will learn about the meaning and importance of reproducibility
    in machine learning modeling. You will learn about tools for incorporating data
    versioning in machine learning pipelines to help you attain more effective collaboration
    in your projects and achieve reproducibility in your models. You will also learn
    about different aspects of model versioning and tools for incorporating it into
    your pipelines.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解机器学习建模中可重复性的意义和重要性。你将学习如何在机器学习管道中集成数据版本控制，以帮助你在项目中实现更有效的协作，并在模型中实现可重复性。你还将了解模型版本化的不同方面以及将其集成到管道中的工具。
- en: 'We will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Reproducibility in machine learning
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习中的可重复性
- en: Data versioning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据版本控制
- en: Model versioning
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型版本控制
- en: By the end of this chapter, you’ll have learned how to use data and model versioning
    for your modeling projects in Python to achieve reproducibility.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何在Python中利用数据和模型版本控制来为你的建模项目实现可重复性。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the requirements for this chapter and will help you better
    understand the concepts, use them in your projects, and practice with the provided
    code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为本章的要求，将帮助你更好地理解概念，在项目中使用它们，并使用提供的代码进行实践：
- en: 'Python library requirements:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python库要求：
- en: '`pandas` >= 1.4.4'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas` >= 1.4.4'
- en: '`sklearn` >= 1.2.2'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sklearn` >= 1.2.2'
- en: '`DVC` >= 1.10.0'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DVC` >= 1.10.0'
- en: You should also have basic knowledge of the machine learning life cycle
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还应该对机器学习生命周期有基本了解
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Debugging-Machine-Learning-Models-with-Python/tree/main/Chapter10](https://github.com/PacktPublishing/Debugging-Machine-Learning-Models-with-Python/tree/main/Chapter10).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到本章的代码文件，网址为[https://github.com/PacktPublishing/Debugging-Machine-Learning-Models-with-Python/tree/main/Chapter10](https://github.com/PacktPublishing/Debugging-Machine-Learning-Models-with-Python/tree/main/Chapter10)。
- en: Reproducibility in machine learning
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习中的可重复性
- en: 'Lack of *reproducibility* in your machine learning projects could be a waste
    of resources and decrease the credibility of your models and findings in your
    research projects. *Reproducibility* is not the only term used in this context;
    there are also two other key terms: *repeatability* and *replicability*. We don’t
    want to get into the details of these differences. Instead, we want to have a
    definition of reproducibility to use in this book. We define reproducibility in
    machine learning as the ability of different individuals or teams of scientists
    and developers to achieve the same results using the same dataset, methodology,
    and development environment as reported in an original report or study. We can
    ensure reproducibility through the proper sharing of code, data, model parameters
    and hyperparameters, and other relevant information, which allows others to validate
    and build upon our findings. Let’s better understand the importance of reproducibility
    by going through two examples.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习项目中缺乏*可重复性*可能会导致资源浪费，并降低你在研究项目中模型和发现的可信度。*可重复性*在这个上下文中并不是唯一的术语；还有两个其他的关键术语：*可重复性*和*可复制性*。我们不想深入探讨这些差异的细节。相反，我们想要在这个书中使用可重复性的定义。我们将机器学习中的可重复性定义为不同个人或科学家和开发者团队使用与原始报告或研究中报告的相同数据集、方法和开发环境获得相同结果的能力。我们可以通过适当共享代码、数据、模型参数和超参数以及其他相关信息来确保可重复性，这允许其他人验证并基于我们的发现进行构建。让我们通过两个例子来更好地理解可重复性的重要性。
- en: Scientists from a biotechnology company tried to reproduce the findings of 53
    cancer studies (Begley et al., 2012). But they were only able to reproduce the
    results of 6 out of the 53 studies. These were not necessarily in the context
    of reproducibility in machine learning, but it highlights the importance of reproducibility
    in scientific research and the potential consequences of basing decisions or further
    research and development on irreproducible findings.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一家生物技术公司的科学家们试图重现53项癌症研究的发现（Begley et al., 2012）。但他们只能重现其中6项研究的成果。这些研究并不一定是在机器学习可重复性的背景下进行的，但它突出了科学研究中可重复性的重要性以及基于不可重复发现做出决策或进一步研究和开发的潜在后果。
- en: Another example of highlighting the importance of reproducibility in the context
    of data analysis and data-driven discovery is what is known as the *Reinhart-Rogoff
    Excel Error* (Reinhart, C., and Rogoff, K., 2010). In 2010, the economists Carmen
    Reinhart and Kenneth Rogoff published a paper suggesting a negative correlation
    between high public debt and economic growth. This paper influenced economic policies
    worldwide. However, in 2013, other researchers discovered an error in their Excel
    calculations, which significantly impacted the results. But later, it was argued
    that the error was not the driver behind the conclusions (Maziarz, 2017). Here,
    we don’t want to focus on their findings but want to emphasize that the reproducibility
    of the analysis could eliminate any further argument regardless of whether or
    not there was an error or not in the original analysis.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个在数据分析和数据驱动发现背景下强调可重复性重要性的例子是所谓的*Reinhart-Rogoff Excel错误*（Reinhart, C.，and
    Rogoff, K.，2010）。2010年，经济学家Carmen Reinhart和Kenneth Rogoff发表了一篇论文，提出高公共债务与经济增长之间存在负相关关系。这篇论文影响了全球的经济政策。然而，2013年，其他研究人员发现他们在Excel计算中存在错误，这显著影响了结果。但后来，有人认为错误不是结论背后的驱动因素（Maziarz,
    2017）。在这里，我们不想关注他们的发现，而是想强调分析的可重复性可以消除任何进一步的争论，无论原始分析中是否存在错误。
- en: 'The following three concepts can help you achieve reproducibility in your machine
    learning modeling projects:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个概念可以帮助您在机器学习建模项目中实现可重复性：
- en: '**Code versioning**: Having access to the version of the code used in any given
    stage of a machine learning life cycle is fundamentally important to repeat an
    analysis or training and evaluation processes'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码版本控制**：能够访问机器学习生命周期任何阶段的代码版本对于重复分析或训练和评估过程至关重要'
- en: '**Data versioning**: To achieve reproducibility, we need to have access to
    the version of the data that’s used in any given stage of the machine learning
    life cycle, such as training and testing'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据版本控制**：为了实现可重复性，我们需要访问机器学习生命周期任何阶段使用的版本数据，例如训练和测试'
- en: '**Model versioning**: Having a version of your model with frozen parameters
    and no randomness in initializing, evaluating, or other processes in modeling,
    helps you eliminate risks of irreproducibility'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型版本控制**：拥有一个具有冻结参数且在初始化、评估或其他建模过程中的随机性为零的模型版本，有助于您消除不可重复性的风险'
- en: We briefly talked about code versioning in [*Chapter 1*](B16369_01.xhtml#_idTextAnchor015),
    *Beyond Code Debugging*. Here, we will focus on data and model versioning to help
    you in designing reproducible machine learning models.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第一章*](B16369_01.xhtml#_idTextAnchor015)“超越代码调试”中简要介绍了代码版本控制。在这里，我们将专注于数据和模型版本控制，以帮助您设计可重复的机器学习模型。
- en: Data versioning
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据版本控制
- en: We have different stages in the machine learning life cycle, from data collection
    and selection to data wrangling and transformation, in which the data gets prepared
    step by step for model training and evaluation. Data versioning helps us maintain
    data integrity and reproducibility throughout these processes. Data versioning
    is the process of tracking and managing changes in datasets. It involves keeping
    a record of different versions or iterations of the data, allowing us to access
    and compare previous states or recover earlier versions when needed. We can reduce
    the risk of data loss or inconsistencies by ensuring that changes are properly
    documented and versioned.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习生命周期中，我们有不同的阶段，从数据收集和选择到数据整理和转换，数据在这些过程中逐步准备以供模型训练和评估。数据版本控制有助于我们在这些过程中保持数据完整性和可重复性。数据版本控制是跟踪和管理数据集变化的过程。它涉及记录数据的不同版本或迭代，使我们能够在需要时访问和比较先前状态或恢复早期版本。通过确保更改得到适当记录和版本控制，我们可以降低数据丢失或不一致的风险。
- en: 'There are data versioning tools that can help us in managing and tracking changes
    in the data we want to use for machine learning modeling or processes to assess
    the reliability and fairness of our models. Here are some popular data-versioning
    tools:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些数据版本控制工具可以帮助我们管理和跟踪我们想要用于机器学习建模或评估模型可靠性和公平性的数据变化。以下是一些流行的数据版本控制工具：
- en: '**MLflow**: We introduced MLflow for experiment tracking and model monitoring
    in previous chapters, but you can also use it for data versioning ([https://mlflow.org/](https://mlflow.org/))'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLflow**：我们在前面的章节中介绍了MLflow用于实验跟踪和模型监控，但你也可以用它来进行数据版本控制（[https://mlflow.org/](https://mlflow.org/））'
- en: '**Data Version Control** (**DVC**): This is an open source version control
    system for managing data, code, and ML models. It is designed to handle large
    datasets and integrates with Git ([https://dvc.org/](https://dvc.org/))'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据版本控制**（**DVC**）：这是一个开源的数据版本控制系统，用于管理数据、代码和机器学习模型。它旨在处理大型数据集，并与Git集成（[https://dvc.org/](https://dvc.org/））'
- en: '**Pachyderm**: This is a data-versioning platform that provides reproducibility,
    provenance, and scalability in machine learning workflows ([https://www.pachyderm.com/](https://www.pachyderm.com/))'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pachyderm**：这是一个提供机器学习工作流程中可重复性、来源和可扩展性的数据版本控制平台（[https://www.pachyderm.com/](https://www.pachyderm.com/））'
- en: '**Delta Lake**: This is an open source storage layer for Apache Spark and big
    data workloads that provides data versioning ([https://delta.io/](https://delta.io/))'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Delta Lake**：这是一个为Apache Spark和大数据工作负载提供数据版本控制的开源存储层（[https://delta.io/](https://delta.io/））'
- en: '**Git Large File Storage** (**Git-LFS**): This is an extension of Git that
    allows the versioning of large files, such as data files or models, alongside
    code ([https://git-lfs.github.com/](https://git-lfs.github.com/))'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git Large File Storage**（**Git-LFS**）：这是Git的一个扩展，允许对大型文件进行版本控制，如数据文件或模型，同时与代码一起版本控制（[https://git-lfs.github.com/](https://git-lfs.github.com/））'
- en: Each of these tools provides you with different data-versioning capabilities.
    You can choose the one that meets your needs considering the size of the data,
    the nature of the project, and the desired level of integration with other tools.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具中的每一个都为你提供了不同的数据版本控制能力。你可以根据数据的大小、项目的性质以及与其他工具集成的期望水平来选择满足你需求的工具。
- en: 'Here is an example of using DVC with Python for data versioning. After installing
    DVC, you can initialize it by writing the following command in the Terminal:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用DVC进行数据版本控制的Python示例。在安装DVC后，你可以在终端中写入以下命令来初始化它：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create a `.dvc` directory and set up the necessary configuration.
    Now, let’s create a small DataFrame and save it as a CSV file in Python:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个`.dvc`目录并设置必要的配置。现在，让我们创建一个小的DataFrame并将其保存为Python中的CSV文件：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we can add the `dataset.csv` file to DVC and commit the changes, similar
    to committing code changes using Git:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将`dataset.csv`文件添加到DVC中并提交更改，类似于使用Git提交代码更改：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This creates a `data.csv.dvc` file that tracks the dataset’s version, and it
    adds `data.csv` to `.gitignore` so that Git doesn’t track the actual data file.
    Now, we can modify the dataset as follows and save it with the same name:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个`data.csv.dvc`文件来跟踪数据集的版本，并将`data.csv`添加到`.gitignore`中，以便Git不跟踪实际的数据文件。现在，我们可以按如下方式修改数据集并使用相同的名称保存它：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can also commit the changes and save it as a different version:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以提交更改并将其保存为不同的版本：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that we have two versions of the `dataset.csv` file, we can switch to the
    previous version or the latest version of the datasets when needed by using the
    following commands in the Terminal:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`dataset.csv`文件的两个版本，我们可以在需要时使用以下命令在终端切换到之前的版本或最新版本的数据集：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But if you have many versions of the same file or data, you can use other simple
    commands available as part of DVC.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你有很多相同文件或数据的版本，你可以使用DVC（Data Version Control）作为其一部分的其他简单命令。
- en: In addition to versioning our data, we need to track and manage different versions
    of our models throughout the development life cycle. We will cover this next.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对数据进行版本控制外，我们还需要在整个开发周期中跟踪和管理模型的不同版本。我们将在下一章中介绍这一点。
- en: Model versioning
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型版本控制
- en: A model that goes to production is the eventual result of a series of experimentation
    and model modifications with different versions of training and test data, and
    different machine learning methods and their corresponding hyperparameters. Model
    versioning helps us ensure that changes that are made to models are traceable,
    helping to establish reproducibility in our machine learning projects. It ensures
    that every version of a model can be easily reproduced by providing a complete
    snapshot of the model’s parameters, hyperparameters, and training data at a given
    point in time. It allows us to easily roll back to a previous version in case
    of issues with a newly deployed model or to recover an older version that may
    have been unintentionally modified or deleted.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 生产的模型是经过一系列实验和模型修改的最终结果，包括不同版本的训练和测试数据，以及不同的机器学习方法和相应的超参数。模型版本化帮助我们确保对模型所做的更改是可追溯的，有助于在机器学习项目中建立可重复性。它确保了在特定时间点可以轻松地重现每个模型的版本，通过提供模型参数、超参数和训练数据的完整快照。它允许我们在新部署的模型出现问题时轻松回滚到先前的版本，或者恢复可能被无意中修改或删除的旧版本。
- en: 'Let’s go through a very simple example to better understand the need for model
    versioning. *Figure 10**.1* shows the performance of a random forest model with
    five estimators, or decision trees, and the different maximum depths allowed for
    these decision trees. If we simply change the random states that are used to split
    the data into train and test sets, using `train_test_split()` from `scikit-learn`,
    and perform model initialization for a `RandomForestClassifier()` model, we get
    different log-loss values and dependencies on the maximum depth of the trees in
    the random forest model:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个非常简单的例子来更好地理解模型版本化的必要性。*图10.1*展示了具有五个估计器或决策树的随机森林模型的不同最大深度。如果我们简单地改变用于将数据分割成训练集和测试集的随机状态，使用`scikit-learn`中的`train_test_split()`，并对`RandomForestClassifier()`模型进行模型初始化，我们得到不同的对数损失值和随机森林模型中树的最大深度的依赖性：
- en: '![Figure 10.1 – Log-loss in training and validation sets separated from the
    breast cancer dataset using different random states for modeling and data split](img/B16369_10_01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 使用不同的随机状态进行建模和数据分割，从乳腺癌数据集中分离出的训练集和验证集的对数损失](img/B16369_10_01.jpg)'
- en: Figure 10.1 – Log-loss in training and validation sets separated from the breast
    cancer dataset using different random states for modeling and data split
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 使用不同的随机状态进行建模和数据分割，从乳腺癌数据集中分离出的训练集和验证集的对数损失
- en: This was a small example to show how such simple changes, which can happen if
    our models are not versioned, can have drastic effects on our machine learning
    modeling. When we use experiment tracking tools such as MLflow, we have access
    to all the tracked information for a selected model.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小例子，用以展示如果我们的模型没有进行版本控制，这样的简单变化可能会对我们的机器学习建模产生极大的影响。当我们使用实验跟踪工具，如MLflow时，我们可以访问所选模型的全部跟踪信息。
- en: 'To version our model, we need to make sure of the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对模型进行版本控制，我们需要确保以下几点：
- en: We have access to a saved version of the parameters of the corresponding model
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以访问相应模型的参数的保存版本
- en: Other necessary information such as model hyperparameters are documented or
    saved for model retraining
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他必要信息，如模型超参数，已记录或保存以供模型重新训练
- en: The code that needs to be used with the model parameters for inference or even
    retraining and testing is versioned
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要与模型参数一起用于推理或甚至重新训练和测试的代码已进行版本控制
- en: Processes with randomization, such as model initialization and data split for
    training and testing, have specified random states, or seeds
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有随机性的过程，如模型初始化和训练及测试数据分割，有指定的随机状态或种子
- en: 'There are different ways of storing your models and their related documentation.
    For example, you can store your model using serialization libraries such as `pickle`
    alone or in combination with DVC ([https://dvc.org/doc/api-reference/open](https://dvc.org/doc/api-reference/open)),
    as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 存储模型及其相关文档的方式有很多种。例如，您可以使用序列化库如`pickle`单独存储模型，或者与DVC ([https://dvc.org/doc/api-reference/open](https://dvc.org/doc/api-reference/open))
    结合使用，如下所示：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For this, you need to specify a local path on which to save the model using
    `pickle.dump` and a remote path for model versioning using DVC.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了此目的，您需要指定一个用于保存模型的本地路径，使用`pickle.dump`，以及使用DVC进行模型版本化的远程路径。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the meaning and importance of reproducibility
    in machine learning modeling. You also learned about data and model versioning,
    which help us to develop more reliable and reproducible models and data analysis
    results. Next, you learned about the different tools and Python libraries you
    can use to version your data and models. With the concepts and practices introduced
    in this chapter, you are ready to ensure reproducibility in your machine learning
    projects.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了机器学习建模中可重现性的意义和重要性。你还学习了数据版本化和模型版本化，这些有助于我们开发更可靠和可重现的模型和数据分析结果。接下来，你学习了可用于版本化数据和模型的不同的工具和Python库。通过本章介绍的概念和实践，你已准备好确保你的机器学习项目中的可重现性。
- en: In the next chapter, you will learn about techniques you can use to avoid and
    eliminate data drift and concept drift, which constitute two differences between
    the behavior of models before and after deployment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用技术来避免和消除数据漂移和概念漂移，这两者构成了模型在部署前后行为差异的两个方面。
- en: Questions
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are three examples of tools that you can use for data versioning?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列举三个可用于数据版本化的工具的例子？
- en: When you generate different versions of the same data, such as by using DVC,
    do you need to save it with different names?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你使用DVC等工具生成相同数据的不同版本时，你是否需要用不同的名称保存它们？
- en: Can you provide an example where you would use the same method and training
    and evaluation data but get different training and evaluation performance?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能提供一个例子，说明你使用相同的方法、训练和评估数据，但得到不同的训练和评估性能吗？
- en: References
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Reinhart, C., & Rogoff, K. (2010b). *Debt and growth revisited*. VOX. CEPRs
    Policy Portal. Retrieved September 18, 2015.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reinhart, C.，& Rogoff, K. (2010b). *债务与增长的回顾*. VOX. CEPRs政策门户。检索日期：2015年9月18日。
- en: Reinhart, C., & Rogoff, K. (2010a). *Growth in a time of debt*. American Economic
    Review, 100, 573–578.10.1257/aer.100.2.573.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reinhart, C.，& Rogoff, K. (2010a). *债务时期的增长*.美国经济评论，100，573–578.10.1257/aer.100.2.573。
- en: 'Maziarz, Mariusz. *The Reinhart-Rogoff controversy as an instance of the ‘emerging
    contrary result’ phenomenon*. Journal of Economic Methodology 24.3 (2017): 213-225.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maziarz, Mariusz. *Reinhart-Rogoff争议作为“新兴相反结果”现象的一个实例*.经济方法论杂志，24.3 (2017)：213-225。
- en: 'Begley, C. G., & Ellis, L. M. (2012). *Drug development: Raise standards for
    preclinical cancer research*. Nature, 483(7391), 531-533.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Begley, C. G.，& Ellis, L. M. (2012). *药物开发：提高临床前癌症研究标准*.自然，483(7391)，531-533。
- en: Association for Computing Machinery (2016). *Artifact Review and Badging*. Available
    online at [https://www.acm.org/publications/policies/artifact-review-badging](https://www.acm.org/publications/policies/artifact-review-badging)
    (Accessed November 24, 2017).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机协会（2016年）.*工件审查和徽章*.可在[https://www.acm.org/publications/policies/artifact-review-badging](https://www.acm.org/publications/policies/artifact-review-badging)在线获取（访问日期：2017年11月24日）。
- en: 'Plesser, Hans E. *Reproducibility vs. replicability: a brief history of a confused
    terminology*. Frontiers in neuroinformatics 11 (2018): 76.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Plesser, Hans E. *可重现性 vs. 可复制性：一个混乱术语的简要历史*.神经信息学前沿，11 (2018)：76。
- en: Pineau, J., Vincent, M., Larochelle, H., & Bengio, Y. (2020). *Improving reproducibility
    in machine learning research (A report from the NeurIPS 2019 reproducibility program)*.
    arXiv preprint arXiv:2003.12206.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pineau, J.，Vincent, M.，Larochelle, H.，& Bengio, Y. (2020). *提高机器学习研究可重现性（来自NeurIPS
    2019可重现性计划的一份报告）*. arXiv预印本arXiv:2003.12206。
- en: Raff, E., Lemire, D., & Nicholas, C. (2019). *A new measure of algorithmic stability
    for machine learning*. Journal of Machine Learning Research, 20(168), 1-32.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raff, E.，Lemire, D.，& Nicholas, C. (2019). *机器学习中算法稳定性的新度量*.机器学习研究杂志，20(168)，1-32。
- en: 'Gundersen, O. E., & Kjensmo, S. (2018). *State of the art: Reproducibility
    in artificial intelligence*. In Thirty-Second AAAI Conference on Artificial Intelligence.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gundersen, O. E.，& Kjensmo, S. (2018). *人工智能中的最新技术：可重现性*.在第三十二届AAAI人工智能会议。
- en: Jo, T., & Bengio, Y. (2017). *Measuring the tendency of CNNs to Learn Surface
    Statistical Regularities*. arXiv preprint arXiv:1711.11561.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jo, T.，& Bengio, Y. (2017). *测量CNN学习表面统计规律的趋势*. arXiv预印本arXiv:1711.11561。
- en: Haibe-Kains, B., Adam, G. A., Hosny, A., Khodakarami, F., & Waldron, L. (2020).
    *Transparency and reproducibility in artificial intelligence*. Nature, 586(7829),
    E14-E16.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Haibe-Kains, B.，Adam, G. A.，Hosny, A.，Khodakarami, F.，& Waldron, L. (2020).
    *人工智能中的透明度和可重现性*.自然，586(7829)，E14-E16。
