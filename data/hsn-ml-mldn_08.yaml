- en: Anomaly Detection Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常检测模型
- en: 'With k-means clustering models behind us, it is now time to dive into anomaly
    detection models. Anomaly detection is one of the newer additions to ML.NET, and
    specifically, time-series transforms. In this chapter, we will dive into anomaly
    detection and the various applications best suited to utilizing anomaly detection.
    In addition, we will build two new example applications: one anomaly detection
    application that determines whether the login attempt is abnormally demonstrating
    the randomized PCA trainer, and one that demonstrates time series in a network
    traffic anomaly detection application. Finally, we will explore how to evaluate
    an anomaly detection model with the properties that ML.NET exposes.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成了k-means聚类模型之后，现在是时候深入异常检测模型了。异常检测是ML.NET中较新的功能之一，特别是时间序列转换。在本章中，我们将深入探讨异常检测及其最适合利用异常检测的各种应用。此外，我们将构建两个新的示例应用程序：一个用于确定登录尝试是否异常的异常检测应用程序，展示了随机PCA训练器，另一个演示了在网络安全异常检测应用程序中的时间序列。最后，我们将探讨如何使用ML.NET公开的属性来评估异常检测模型。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Breaking down anomaly detection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析异常检测
- en: Creating a time series application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建时间序列应用程序
- en: Creating an anomaly detection application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建异常检测应用程序
- en: Evaluating an anomaly detection model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估异常检测模型
- en: Breaking down anomaly detection
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析异常检测
- en: As mentioned in [Chapter 1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml), *Getting
    Started with Machine Learning and ML.NET,* anomaly detection, by definition, is
    an unsupervised learning algorithm. This means that the algorithm will train on
    data and look for data that does not fit the normal data. In this section, we
    will dive into use cases for anomaly detection and into the various trainers available
    for anomaly detection in ML.NET.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml)“开始使用机器学习和ML.NET”中所述，根据定义，异常检测是一种无监督学习算法。这意味着该算法将在数据上训练并寻找不符合正常数据的数据。在本节中，我们将深入了解异常检测的应用案例以及ML.NET中可用的各种异常检测训练器。
- en: Use cases for anomaly detection
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常检测的应用案例
- en: Anomaly detection, as you might have realized already, has numerous applications
    where data is available but it is unknown whether there is an anomaly in the data.
    Without needing to do manual spot-checking, anomaly detection algorithms train
    on this data and determine whether there are any anomalies. ML.NET provides various
    anomaly detection values to look at programmatically inside of your application.
    We will review these values later on in this chapter to better ensure that any
    detection is not a false positive.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经意识到的，异常检测在数据可用但未知数据中是否存在异常的众多应用中都有。无需进行手动抽查，异常检测算法会在这些数据上训练并确定是否存在任何异常。ML.NET提供了各种异常检测值，以便在您的应用程序中程序化地查看。我们将在本章后面回顾这些值，以确保任何检测都不是假阳性。
- en: 'Some of the potential applications best suited for anomaly detection include
    the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最适合用于异常检测的潜在应用包括以下内容：
- en: Sales forecasting
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 销售预测
- en: Stock market
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 股市
- en: Fraud detection
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欺诈检测
- en: Anticipating the failure of a device due to various factors
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预测设备因各种因素而发生的故障
- en: Cyber-security applications for remote connections and network traffic login
    history, such as the example application that we will dive into later
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对远程连接和网络流量登录历史记录的网络安全应用程序，例如我们将在后面深入研究的示例应用程序
- en: Diving into the randomized PCA trainer
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入随机PCA训练器
- en: The randomized PCA trainer is the only traditional trainer for anomaly detection
    found in ML.NET at the time of writing. The randomized PCA trainer requires normalization
    of the values; however, caching is not necessary and no additional NuGet packages
    are required to utilize the trainer.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 随机PCA训练器是ML.NET在编写时发现的唯一传统异常检测训练器。随机PCA训练器需要归一化值；然而，缓存不是必需的，也不需要额外的NuGet包来使用训练器。
- en: 'Similar to other algorithms, the input is a known vector size of the `Float` type.
    The output comprises two properties: `Score` and `PredictedLabel`. The `Score`
    value is of the `Float` type, non-negative, and unbounded. In contrast, the `PredictedLabel` property indicates
    a valid anomaly based on the threshold set; a value of true indicates an anomaly,
    while a value of false indicates otherwise. ML.NET''s default threshold is 0.5,
    which can be adjusted via the `ChangeModelThreshold` method. Effectively, values
    higher than the threshold return true, and false if they are lower.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他算法类似，输入是一个已知的`Float`类型向量大小。输出包含两个属性：`Score`和`PredictedLabel`。`Score`的值是`Float`类型，非负且无界。相比之下，`PredictedLabel`属性根据设定的阈值指示一个有效的异常；true值表示异常，而false值表示不是异常。ML.NET的默认阈值为0.5，可以通过`ChangeModelThreshold`方法进行调整。实际上，高于阈值的值返回true，低于阈值的返回false。
- en: Under the hood, the algorithm uses eigenvectors to estimate the subspace containing
    the normal class and then computes the normalized difference between the actual
    feature vector and the projected feature vector in that subspace. Put simply,
    the algorithm finds edge cases if the computed error is not close to 0\. If it
    finds the error is close to 0, it is considered a normal data point (that is,
    a non-anomaly).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，该算法使用特征向量来估计包含正常类的子空间，然后计算实际特征向量在该子空间中的投影特征向量之间的归一化差异。简单来说，如果计算出的误差不接近0，算法会找到边缘情况。如果它发现误差接近0，则被认为是正常数据点（即非异常）。
- en: We will demonstrate this trainer in the second example application later on
    in this chapter, by detecting login anomalies.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面的第二个示例应用中通过检测登录异常来演示这个训练器。
- en: If you would like to deep dive further into randomized PCA, the following paper
    is a great resource: [https://web.stanford.edu/group/mmds/slides2010/Martinsson.pdf](https://web.stanford.edu/group/mmds/slides2010/Martinsson.pdf).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要深入了解随机PCA，以下论文是一个很好的资源：[https://web.stanford.edu/group/mmds/slides2010/Martinsson.pdf](https://web.stanford.edu/group/mmds/slides2010/Martinsson.pdf)。
- en: Diving into time series transforms
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解时间序列转换
- en: Unlike other algorithms found in this book and ML.NET itself, time series support
    was added as a series of transforms to be applied to your training and test data.
    Time series, as mentioned previously, is also one of the newer additions to ML.NET,
    being added in 1.2.0.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中和其他ML.NET本身找到的算法不同，时间序列支持是通过一系列应用于你的训练和测试数据的转换来添加的。如前所述，时间序列也是ML.NET的新增功能之一，添加于1.2.0版本。
- en: 'In ML.NET, times series transforms are grouped into the `TimeSeriesCatalog`
    class. There are six different methods inside this class:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在ML.NET中，时间序列转换被分组到`TimeSeriesCatalog`类中。这个类内部有六个不同的方法：
- en: '`DetectAnomalyBySrCnn`: Detects anomalies with the SRCNN algorithm'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetectAnomalyBySrCnn`：使用SRCNN算法检测异常'
- en: '`DetectChangePointBySsa`: Detects anomalies with the **Singular Spectrum Analysis**
    (**SSA**) algorithm on change points'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetectChangePointBySsa`：使用**奇异谱分析**（**SSA**）算法在变化点检测异常'
- en: '`DetectIidChangePoint`: Detects changes to predict change points with an **independent
    identically distributed** (**i.i.d**) algorithm'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetectIidChangePoint`：使用**独立同分布**（**i.i.d**）算法检测变化以预测变化点'
- en: '`DetectIidSpike`: Detects changes with an i.i.d algorithm but predicts spikes
    instead of change points'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetectIidSpike`：使用i.i.d算法检测变化，但预测尖峰而不是变化点'
- en: '`DetectSpikeBySsa`: Detects spikes using the SSA algorithm'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DetectSpikeBySsa`：使用SSA算法检测尖峰'
- en: '`ForecastBySsa`: Uses the SSA algorithm for a singular variable- (commonly
    referred to as univariate-) based time series forecasting'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ForecastBySsa`：使用SSA算法进行基于单一变量（通常称为单变量）的时间序列预测'
- en: Depending on the application, you may want to look for spikes of data changes
    or points of change (on the upward or downward spiral). In this chapter's example
    on time series, we will be looking for spikes in network transfer over time utilizing
    `DetectSpikeBySsa`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用的不同，你可能想要寻找数据变化的尖峰或变化点（上升或下降螺旋）。在本章关于时间序列的示例中，我们将利用`DetectSpikeBySsa`寻找网络传输随时间变化的尖峰。
- en: 'For more information on forecasting with SSA, a great resource can be found
    here: [http://arxiv.org/pdf/1206.6910.pdf](http://arxiv.org/pdf/1206.6910.pdf).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用SSA进行预测的更多信息，这里有一个很好的资源：[http://arxiv.org/pdf/1206.6910.pdf](http://arxiv.org/pdf/1206.6910.pdf)。
- en: Creating a time series application
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建时间序列应用
- en: As mentioned earlier, the application we will be creating is a network traffic
    anomaly detector. Given a set of attributes relating to the network traffic amount
    (in bytes), the application will use that data to find anomalies in the amount
    of traffic for a given checkpoint. As with other applications, this is not meant
    to power the next ML network traffic anomaly detection product; however, it will
    show you how to use time series in ML.NET, specifically to detect spikes with
    SSA.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将创建的应用是一个网络流量异常检测器。给定一组与网络流量量（以字节为单位）相关的属性，该应用将使用这些数据来查找给定检查点的流量异常。与其他应用一样，这并不是为了推动下一个机器学习网络流量异常检测产品的开发；然而，它将向您展示如何在
    ML.NET 中使用时间序列，特别是如何使用 SSA 检测峰值。
- en: As with previous chapters, the completed project code, sample dataset, and project
    files can be downloaded here: [https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter06-time-series](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter06-time-series).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，完成的项目代码、样本数据集和项目文件可以在此下载：[https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter06-time-series](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter06-time-series)。
- en: Exploring the project architecture
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索项目架构
- en: Building on the project architecture and code we created in previous chapters,
    the bulk of the changes are in the training of the model as time series requires
    a fairly significant paradigm shift from what we have reviewed in previous chapters.
    In addition to this, when using time series transforms, you will need to add the
    `Microsoft.ML.TimeSeries` NuGet package if you are creating a project from scratch.
    The example application available in the GitHub repository has this package already
    included.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中创建的项目架构和代码的基础上，大部分的更改集中在模型的训练上，因为时间序列需要从我们在前几章中回顾的内容进行相当大的范式转变。此外，当使用时间序列转换时，如果您是从零开始创建项目，您需要添加
    `Microsoft.ML.TimeSeries` NuGet 包。GitHub 仓库中提供的示例应用已经包含了这个包。
- en: 'In the following screenshot, you will find the Visual Studio Solution Explorer
    view of the project. The new additions to the solution are the `NetworkTrafficHistory`and `NetworkTrafficPrediction`files,
    which we will review later on in this section:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您将找到项目的 Visual Studio 解决方案资源管理器视图。解决方案中的新添加项是 `NetworkTrafficHistory`
    和 `NetworkTrafficPrediction` 文件，我们将在本节后面进行回顾：
- en: '![](img/7800d9bf-46b4-4f78-bcb1-582760156732.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7800d9bf-46b4-4f78-bcb1-582760156732.png)'
- en: 'The `sampledata.csv` file contains eight rows of network traffic data. Feel
    free to adjust the data to fit your own observations or to adjust the trained
    model. Here is a snippet of the data:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`sampledata.csv` 文件包含八行网络流量数据。请随意调整数据以适应您的观察或调整训练模型。以下是数据的片段：'
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each of these rows contains the values for the properties in the newly created `NetworkTrafficHistory`class,
    which we will review later on in this chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行都包含新创建的 `NetworkTrafficHistory` 类中属性的值，我们将在本章后面进行回顾。
- en: 'In addition to this, we have added the `testdata.csv` file, which contains
    additional data points to test the newly trained model against and evaluate. Here
    is a snippet of the data inside of `testdata.csv`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还添加了 `testdata.csv` 文件，其中包含额外的数据点，用于测试新训练的模型并评估。以下是 `testdata.csv` 内的数据片段：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Diving into the code
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入代码
- en: For this application, as noted in the previous section, we are building on top
    of the work completed in [Chapter 5](4c32e261-cec6-4113-9734-1e29c7c18f9a.xhtml), *Clustering
    Model*. For this deep dive, we are going to focus solely on the code that was
    changed for this application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，对于这个应用，我们是在[第5章](4c32e261-cec6-4113-9734-1e29c7c18f9a.xhtml)，“聚类模型”的基础上进行工作的。对于这次深入研究，我们将专注于为这个应用更改的代码。
- en: 'Classes that were changed or added are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 被更改或添加的类如下：
- en: '`NetworkTrafficHistory`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NetworkTrafficHistory`'
- en: '`NetworkTrafficPrediction`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NetworkTrafficPrediction`'
- en: '`Predictor`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Predictor`'
- en: '`Trainer`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trainer`'
- en: '`Program`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Program`'
- en: The NetworkTrafficHistory class
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetworkTrafficHistory 类
- en: 'The `NetworkTrafficHistory`class is the container class that contains the data
    to both predict and train our model. As described in previous chapters, the number
    in the `LoadColumn` decorator maps to the index in the CSV files. As noted earlier,
    anomaly detection in ML.NET requires the use of a single floating-point value;
    in this case, it is the `BytesTransferred` property:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`NetworkTrafficHistory` 类是包含用于预测和训练我们的模型的数据的容器类。如前几章所述，`LoadColumn` 装饰器中的数字映射到
    CSV 文件中的索引。如前所述，ML.NET 中的异常检测需要使用单个浮点值；在这种情况下，是 `BytesTransferred` 属性：'
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The NetworkTrafficPrediction class
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`NetworkTrafficPrediction` 类'
- en: 'The `NetworkTrafficPrediction`class contains the properties mapped to our prediction
    output. The `VectorType(3)` function holds the alert, score, and p-value. We will
    review these values later on in this section:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`NetworkTrafficPrediction` 类包含映射到我们的预测输出的属性。`VectorType(3)` 函数包含警报、得分和 p 值。我们将在本节稍后回顾这些值：'
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Predictor class
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Predictor` 类'
- en: 'There are a couple of changes to make to this class in order to handle the
    network traffic prediction scenario:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理网络流量预测场景，需要对此类进行一些修改：
- en: 'First, we create our prediction engine with the `NetworkTrafficHistory`and `NetworkHistoryPrediction` types:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用 `NetworkTrafficHistory` 和 `NetworkHistoryPrediction` 类型创建我们的预测引擎：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we read the input file into an `IDataView` variable (note the override
    to use a comma as `separatorChar`):'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将输入文件读取到 `IDataView` 变量中（注意使用逗号作为 `separatorChar` 的重写）：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we take the newly created `IDataView` variable and get an enumerable
    based off of that data view:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们获取基于新创建的 `IDataView` 变量的可枚举对象：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Lastly, we need to run the prediction and then output the results of the model
    run:'
  id: totrans-68
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要运行预测并输出模型运行的输出结果：
- en: '[PRE7]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With `Transform` only returning the three-element vector, the original row data
    is output to give context.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 `Transform` 只返回三个元素的向量，原始行数据被输出以提供上下文。
- en: The Trainer class
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Trainer` 类'
- en: 'Inside the `Trainer` class, several modifications need to be made to support
    the time series transform. In many ways, a simplification is required. The removal
    of the evaluation and testing data load is performed:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Trainer` 类内部，需要做出一些修改以支持时间序列转换。在许多方面，需要简化。执行了评估和测试数据加载的移除：
- en: 'The first addition is of the four variables to send to the transform:'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先是向转换发送的四个变量的添加：
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The training window size must be greater than twice the p-value history length
    due to a constraint in the ML.NET library at the time of writing.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于在编写 ML.NET 库时的一个约束，训练窗口大小必须大于 p 值历史长度的两倍。
- en: 'We then build the `DataView` object from the CSV training file:'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们从 CSV 训练文件构建 `DataView` 对象：
- en: '[PRE9]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can then create SSA spike detection:'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以创建 SSA 脉冲检测：
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we fit the model on the training data and save the model:'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们在训练数据上拟合模型并保存模型：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Program class
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Program` 类'
- en: 'Given that the training only requires the training data, some modifications
    to the `Program` class have to be performed:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于训练只需要训练数据，因此需要对 `Program` 类进行一些修改：
- en: 'The help text needs to be updated to reflect the new usage:'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 帮助文本需要更新以反映新的用法：
- en: '[PRE12]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition, the switch case statement needs to be updated to reflect the single
    argument passed for the prediction:'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，需要更新 switch-case 语句以反映预测传递的单个参数：
- en: '[PRE13]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Running the application
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'To run the application, the process we use is nearly identical to [Chapter
    3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml), *Regression Model*''s example
    application:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要运行应用程序，我们使用的流程几乎与 [第 3 章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml) 中“回归模型”的示例应用程序相同：
- en: 'After preparing the data, we must train the model by passing in the newly created `sampledata.csv`
    file:'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备好数据后，我们必须通过传递新创建的 `sampledata.csv` 文件来训练模型：
- en: '[PRE14]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To run the model with this file, simply pass in the `testdata.csv` filementioned
    earlier into the newly built application, and the predicted output will show the
    following:'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用此文件运行模型，只需将之前提到的 `testdata.csv` 文件传递到新构建的应用程序中，预测输出将显示以下内容：
- en: '[PRE15]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The output includes the three data points: `HOST`, `TIMESTAMP`, and `TRANSFER`.
    The new additions are `ALERT`, `SCORE`, and `P-VALUE`. `ALERT` values of nonzero
    indicate an anomaly. `SCORE` is a numeric representation of the anomaly score;
    a higher value indicates a spike. `P-VALUE`, a value between 0 and 1, is the distance
    between the current point and the average point. A value closer or equal to 0
    is another indication of a spike. When evaluating your model and efficacy, using
    these three data points together you can be guaranteed a true spike, effectively
    reducing the potential false positive count.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出包括三个数据点：`HOST`、`TIMESTAMP`和`TRANSFER`。新增的是`ALERT`、`SCORE`和`P-VALUE`。`ALERT`的值不为零表示存在异常。`SCORE`是异常得分的数值表示；值越高表示峰值越大。`P-VALUE`，介于0和1之间的值，是当前点与平均点之间的距离。值接近或等于0是另一个表示峰值的指示。在评估模型和有效性时，结合这三个数据点可以确保真正的峰值，从而有效减少潜在的误报数量。
- en: 'Feel free to modify the values and explore how the prediction changes based
    on the dataset that the model was trained on. A few areas of experimentation from
    this point might be as follows:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以随意修改值，并探索基于模型训练数据集的预测如何变化。从这个点开始，一些实验区域可能包括以下内容：
- en: Adding more specific data points such as an IP address
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加更具体的数据点，如IP地址
- en: Adding diversification and more data points to the training and test data
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在训练和测试数据中添加多样化和更多数据点
- en: Creating an anomaly detection application
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个异常检测应用
- en: As mentioned earlier, the application we will be creating is a login anomaly
    detector. Given a set of attributes relating to the login, the application will
    use that data to find anomalies such as unusual login times. As with other applications,
    this is not meant to power the next ML login anomaly detection product; however,
    it will show you how to use anomaly detection in ML.NET.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前所述，我们将创建的应用是一个登录异常检测器。给定一组与登录相关的属性，该应用将使用这些数据来查找异常，例如不寻常的登录时间。与其他应用一样，这并不是为了推动下一个机器学习登录异常检测产品的开发；然而，它将向您展示如何在ML.NET中使用异常检测。
- en: As with previous chapters, the completed project code, sample dataset, and project
    files can be downloaded here: [https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter06](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter06).
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与前几章一样，完成的项目代码、示例数据集和项目文件可以在此处下载：[https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter06](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter06)。
- en: Exploring the project architecture
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索项目架构
- en: Building on the project architecture and code we created in previous chapters,
    the bulk of the changes in this example are in the training of the model.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前几章中创建的项目架构和代码的基础上，本例中的大部分更改都在模型的训练上。
- en: 'In the following screenshot, you will find the Visual Studio Solution Explorer
    view of the project. The new additions to the solution are the `LoginHistory `and `LoginPrediction` files,
    which we will review later on in this section:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您将找到项目的Visual Studio解决方案资源管理器视图。解决方案的新增内容包括`LoginHistory`和`LoginPrediction`文件，我们将在本节后面进行回顾：
- en: '![](img/2264ca20-b60c-44c8-9b34-ede53f39ca3d.png)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/2264ca20-b60c-44c8-9b34-ede53f39ca3d.png)'
- en: 'The `sampledata.csv` file contains 10 rows of login data. Feel free to adjust
    the data to fit your own observations or to adjust the trained model. Here is
    a snippet of the data:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sampledata.csv`文件包含10行登录数据。您可以随意调整数据以适应您的观察或调整训练好的模型。以下是数据的一个片段：'
- en: '[PRE16]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Each of these rows contains the values for the properties in the newly created
    `LoginHistory` class, which we will review later on in this chapter.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每一行都包含新创建的`LoginHistory`类中属性的值，我们将在本章后面进行回顾。
- en: 'In addition to this, we added the `testdata.csv` file, which contains additional
    data points to test the newly trained model against and evaluate. Here is a snippet
    of the data inside of `testdata.csv`:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，我们还添加了`testdata.csv`文件，其中包含额外的数据点，用于测试新训练的模型并评估。以下是`testdata.csv`中的数据片段：
- en: '[PRE17]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Diving into the code
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入代码分析
- en: For this application, as noted in the previous section, we are building on top
    of the work completed in [Chapter 5](4c32e261-cec6-4113-9734-1e29c7c18f9a.xhtml),
    *Clustering Model*. For this deep dive, we are going to focus solely on the code
    that was changed for this application.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这个应用，正如前文所述，我们是在[第5章](4c32e261-cec6-4113-9734-1e29c7c18f9a.xhtml)“聚类模型”的基础上进行工作的。对于这次深入探讨，我们将专注于为这个应用更改的代码。
- en: 'Classes that were changed or added are as follows:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已更改或添加的类如下：
- en: '`Constants`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Constants`'
- en: '`LoginHistory`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoginHistory`'
- en: '`LoginPrediction`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoginPrediction`'
- en: '`Predictor`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`预测器`'
- en: '`Trainer`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`训练器`'
- en: The Constants class
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Constants` 类'
- en: 'The `Constants` class has been changed to save the model to `chapter6.mdl`.
    The following code block reflects these changes:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Constants` 类已更改以将模型保存到 `chapter6.mdl`。以下代码块反映了这些更改：'
- en: '[PRE18]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The LoginHistory class
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`LoginHistory` 类'
- en: 'The `LoginHistory`class is the container class that contains the data to both
    predict and train our model. As described in previous chapters, the number in
    the `LoadColumn` decorator maps to the index in the CSV files. Each property maps
    to a value that will be sent into the model for anomaly detection:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LoginHistory` 类是包含用于预测和训练我们的模型的数据的容器类。如前几章所述，`LoadColumn` 装饰器中的数字映射到 CSV 文件中的索引。每个属性映射到一个将发送到模型进行异常检测的值：'
- en: '[PRE19]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The LoginPrediction class
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`LoginPrediction` 类'
- en: 'The `LoginPrediction`class contains the properties mapped to our prediction
    output. The following `PredictedLabel` property will hold our prediction, while
    the `Label` and `Score` properties are used for evaluation:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LoginPrediction` 类包含映射到我们的预测输出的属性。以下 `PredictedLabel` 属性将保存我们的预测，而 `Label`
    和 `Score` 属性用于评估：'
- en: '[PRE20]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The Predictor class
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`预测器` 类'
- en: 'There are a couple of changes to make to this class in order to handle the
    `Login` anomaly detection scenario:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了处理 `Login` 异常检测场景，需要对此类进行一些更改：
- en: 'First, we create our prediction engine with the `LoginHistory`and `LoginPrediction`
    types:'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用 `LoginHistory` 和 `LoginPrediction` 类型创建我们的预测引擎：
- en: '[PRE21]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we read the input file into a string variable:'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将输入文件读取到一个字符串变量中：
- en: '[PRE22]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Lastly, we run the prediction and then output the results of the model run:'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们运行预测并输出模型运行的输出结果：
- en: '[PRE23]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The Trainer class
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`训练器` 类'
- en: 'Inside the `Trainer` class, several modifications need to be made to support
    anomaly detection classification using the randomized PCA trainer:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Trainer` 类内部，需要做出一些修改以支持使用随机 PCA 训练器的异常检测分类：
- en: 'The first change is the addition of a `GetDataView` helper method, which builds
    the `IDataView` data view from the columns previously defined in the `LoginHistory` class:'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个更改是添加了一个 `GetDataView` 辅助方法，它从 `LoginHistory` 类中先前定义的列构建 `IDataView` 数据视图：
- en: '[PRE24]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We then build the training data view and the `RandomizedPcaTrainer.Options`
    object:'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们构建训练数据视图和 `RandomizedPcaTrainer.Options` 对象：
- en: '[PRE25]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that the `Rank` property must be equal to or less than the features.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`Rank` 属性必须等于或小于特征数：
- en: 'We can then create the randomized PCA trainer, append it to the training data
    view, fit our model, and then save it:'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以创建随机 PCA 训练器，将其附加到训练数据视图中，拟合我们的模型，然后保存它：
- en: '[PRE26]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now we evaluate the model we just trained using the testing dataset:'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们使用测试数据集评估我们刚刚训练的模型：
- en: '[PRE27]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, we output all of the classification metrics. Each of these will be
    detailed in the next section:'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们输出所有分类指标。这些将在下一节中详细介绍：
- en: '[PRE28]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Running the application
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'To run the application, the process we use is nearly identical to [Chapter
    3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml), *Regression Model*''s example
    application with the addition of passing in the test dataset when training:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要运行应用程序，我们使用的流程几乎与 [第 3 章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml) 中 *回归模型*
    的示例应用程序相同，只是在训练时添加了传入测试数据集：
- en: 'After extracting data, we must train the model by passing in the newly created `sampledata.csv` and `testdata.csv`
    files:'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取数据后，我们必须通过传入新创建的 `sampledata.csv` 和 `testdata.csv` 文件来训练模型：
- en: '[PRE29]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To run the model with this file, simply pass in a constructed JSON file (`input.json`,
    in this case) and the predicted output will show:'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用此文件运行模型，只需传入一个构造的 JSON 文件（在这种情况下为 `input.json`）和预测输出将显示：
- en: '[PRE30]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note the expanded output of the model training to include two metric data points.
    We will go through what each one of these means at the end of this chapter.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意模型训练输出的扩展，包括两个指标数据点。我们将在本章末尾解释这些数据点的含义：
- en: 'Feel free to modify the values and explore how the prediction changes based
    on the dataset that the model was trained on. A few areas of experimentation from
    this point might include the following:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随意修改值并探索基于模型训练的数据集，预测如何变化。从这个点开始的一些实验领域可能包括以下内容：
- en: Adding some additional properties to increase the prediction accuracy in a production
    scenario such as the hour of the day the login occurred
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产场景中添加一些额外的属性以提高预测精度，例如登录发生的小时：
- en: Adding diversity to the training and test data
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在训练和测试数据中增加多样性
- en: Evaluating a randomized PCA model
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估随机PCA模型
- en: As discussed in previous chapters, evaluating a model is a critical part of
    the overall model-building process. A poorly trained model will only provide inaccurate
    predictions. Fortunately, ML.NET provides many popular attributes to calculate
    model accuracy based on a test set at the time of training to give you an idea
    of how well your model will perform in a production environment.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前几章所述，评估模型是整个模型构建过程中的关键部分。一个训练不良的模型只会提供不准确的预测。幸运的是，ML.NET提供了许多流行的属性，可以根据训练时的测试集计算模型精度，以给你一个关于你的模型在生产环境中表现如何的印象。
- en: 'In ML.NET, as noted in the example application, there are two properties that
    comprise the `AnomalyDetectionMetrics`class object. Let''s dive into the properties
    exposed in the `AnomalyDetectionMetrics`object:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ML.NET中，正如示例应用中提到的，有两个属性构成了`AnomalyDetectionMetrics`类对象。让我们深入了解`AnomalyDetectionMetrics`对象公开的属性：
- en: Area under the ROC curve
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROC曲线下的面积
- en: Detection rate at false positive count
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假阳性计数中的检测率
- en: In the next sections, we will break down how these values are calculated and
    ideal values to look for.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将分解这些值的计算方法和理想值。
- en: Area under the ROC curve
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: ROC曲线下的面积
- en: 'The area under the ROC curve, as mentioned in [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml),
    *Regression Model*, is, as the name implies, the area under the **Receiver Operating
    Characteristic** (**ROC**) curve. One question that might come to mind is this:
    how is this relevant to evaluating an anomaly detection model?'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如[第3章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml)中提到的ROC曲线下的面积，顾名思义，是**接收者操作特征**（**ROC**）曲线下的面积。可能有人会问这样一个问题：这与评估异常检测模型有什么关系？
- en: This computed area is equal to the chance that the algorithm, randomized PCA,
    in our case, scores a positive instance higher than a negative one, both chosen
    randomly to better evaluate the data. The number returned closer to 100% is the
    ideal value, while if it is closer to 0%, you will more than likely have significant
    false positives. You might remember our earlier example application getting 78%.
    This means that there was a 22% chance of a false positive; the following outlines
    some suggestions to improve the model and should reduce this number.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个计算出的面积等于算法（在我们的案例中是随机PCA）随机选择一个正实例比一个负实例得分更高的概率，这两个实例都是随机选择的，以更好地评估数据。返回的数字越接近100%是理想值，而如果它接近0%，你很可能会有显著的假阳性。你可能还记得我们之前的应用示例得到了78%。这意味着有22%的假阳性概率；以下概述了一些改进模型的建议，应该会减少这个数字。
- en: 'The following diagram visually reflects both a random guessing line and an
    arbitrary data curve. The area under the data curve in between the random guessing
    line is the area under the ROC curve data metric:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下图直观地反映了随机猜测线和任意数据曲线。随机猜测线之间的数据曲线下的面积是ROC曲线数据度量下的面积：
- en: '![](img/ca963c34-e882-4652-bdae-ba762ee7d9d5.png)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/ca963c34-e882-4652-bdae-ba762ee7d9d5.png)'
- en: Detection rate at false positive count
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假阳性计数中的检测率
- en: 'The detection rate at false positive count property is the detection rate of
    *K* false positives. A false positive in an anomaly detection scenario would be
    to consider a data point an anomaly when, in fact, it was not. This rate is computed
    as follows:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在假阳性计数属性中的检测率是*K*个假阳性的检测率。在异常检测场景中，一个假阳性是将数据点视为异常，而实际上它并不是。这个比率是这样计算的：
- en: '*Detection Rate of K False Positives = X / Y*'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*K个假阳性的检测率 = X / Y*'
- en: Here, *X* is calculated to be the top test samples based on the scores previously
    described in the anomaly detection example (sorted in descending order). These
    are considered the top true positives (that is, more likely to be actual anomalies).
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，*X*是根据异常检测示例中先前描述的分数计算出的顶级测试样本（按降序排序）。这些被认为是顶级真实正例（即更有可能是实际异常）。
- en: '*Y* is calculated to be the total number of anomalies in the test data regardless
    of the score value (not filtering to points that look suspicious or not). In theory,
    this number could be very high if the number of false positives is high in your
    training data. As you build production models with randomized PCA, ensure your
    data represents as close to production as possible to avoid overfitting or underfitting
    to anomalies.'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*Y* 被计算为测试数据中异常的总数，无论分数值如何（不是过滤看起来可疑或不可疑的点）。从理论上讲，如果训练数据中的假阳性数量很高，这个数字可能会非常高。随着你使用随机PCA构建生产模型，确保你的数据尽可能接近生产环境，以避免过度拟合或欠拟合到异常。'
- en: Summary
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Over the course of this chapter, we discussed ML.NET's anomaly detection support
    via the randomized PCA algorithm. We also created and trained our first anomaly
    detection application using the randomized PCA algorithm to predict abnormal logins.
    In addition to this, we created a time series application, looking at network
    traffic and finding spikes in the amount of transferred data. Finally, we also
    looked at how to evaluate an anomaly detection model and the various properties
    that ML.NET exposes to achieve a proper evaluation of an anomaly detection model.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，我们讨论了ML.NET通过随机PCA算法提供的异常检测支持。我们还创建并训练了我们的第一个异常检测应用程序，使用随机PCA算法来预测异常登录。除此之外，我们还创建了一个时间序列应用程序，观察网络流量并寻找传输数据量的峰值。最后，我们还探讨了如何评估异常检测模型以及ML.NET公开的各种属性，以实现异常检测模型的适当评估。
- en: In the next chapter, we will deep dive into matrix factorization with ML.NET to
    create a music preference predictor.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨ML.NET中的矩阵分解，以创建一个音乐偏好预测器。
