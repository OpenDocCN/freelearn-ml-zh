- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Extracting Features from Date and Time Variables
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从日期和时间变量中提取特征
- en: Date and time variables contain information about dates, times, or both, and
    in programming, we refer to them collectively as `datetime` features. Date of
    birth, the time of an event, and the date and time of the last payment are examples
    of `datetime` variables.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期和时间变量包含有关日期、时间或两者的信息，在编程中，我们将其统称为 `datetime` 特征。出生日期、事件发生的时间以及最后付款的日期和时间都是
    `datetime` 变量的例子。
- en: Because of their nature, `datetime` features typically exhibit high cardinality.
    This means that they contain a huge number of unique values, each corresponding
    to a specific date and/or time combination. We don’t normally use `datetime` variables
    for machine learning models in their raw format. Instead, we enrich the dataset
    by extracting multiple features from these variables. These new features will
    typically have reduced cardinality, and allow us to capture meaningful information,
    such as trends, seasonality, and important events and tendencies.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其本质，`datetime` 特征通常具有高基数。这意味着它们包含大量唯一的值，每个值对应于特定的日期和/或时间组合。我们通常不会以原始格式使用 `datetime`
    变量进行机器学习模型。相反，我们通过从这些变量中提取多个特征来丰富数据集。这些新特征通常具有较低的基数，并允许我们捕捉到有意义的 信息，如趋势、季节性和重要事件和趋势。
- en: In this chapter, we will explore how to extract features from dates and time
    by utilizing the `pandas` `dt` module, and then automate this procedure with `feature-engine`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何通过利用 `pandas` 的 `dt` 模块来从日期和时间中提取特征，然后使用 `feature-engine` 自动化此过程。
- en: 'This chapter will cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Extracting features from dates with `pandas`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pandas` 从日期中提取特征
- en: Extracting features from time with `pandas`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pandas` 从时间中提取特征
- en: Capturing elapsed time between `datetime` variables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获 `datetime` 变量之间的经过时间
- en: Working with time in different time zones
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同时区使用时间
- en: Automating `datetime` feature extraction with `feature-engine`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `feature-engine` 自动化 `datetime` 特征提取
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will use the `pandas`, `numpy`, and `feature-engine` Python
    libraries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 `pandas`、`numpy` 和 `feature-engine` Python 库。
- en: Extracting features from dates with pandas
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pandas 从日期中提取特征
- en: The values of `datetime` variables can be dates, time, or both. We’ll begin
    by focusing on those variables that contain dates. We rarely use raw dates with
    machine learning algorithms. Instead, we extract simpler features, such as the
    year, month, or day of the week, that allow us to capture insights such as seasonality,
    periodicity, and trends.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` 变量的值可以是日期、时间或两者兼有。我们将首先关注包含日期的变量。我们很少使用原始日期与机器学习算法结合。相反，我们提取更简单的特征，如年份、月份或星期几，这些特征使我们能够捕捉到季节性、周期性和趋势等洞察。'
- en: The `pandas` Python library is great for working with date and time. Utilizing
    the `pandas` `dt` module, we can access the `datetime` properties of a `pandas`
    Series to extract many features. However, to leverage this functionality, the
    variables need to be cast into a data type that supports these operations, such
    as `datetime` or `timedelta`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` Python 库非常适合处理日期和时间。通过使用 `pandas` 的 `dt` 模块，我们可以访问 `pandas` Series
    的 `datetime` 属性以提取许多特征。然而，为了利用此功能，变量需要转换为支持这些操作的数据类型，例如 `datetime` 或 `timedelta`。'
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `datetime` variables can be cast as objects, particularly when we load the
    data from a CSV file. To extract the date and time features that we will discuss
    throughout this chapter, it is necessary to recast the variables as `datetime`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从 CSV 文件加载数据时，`datetime` 变量可以转换为对象。为了提取本章中将要讨论的日期和时间特征，有必要将变量重新转换为 `datetime`。
- en: In this recipe, we will learn how to extract features from dates by utilizing
    `pandas`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何通过使用 `pandas` 来提取日期特征。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following are some of the features that we can extract from the `date`
    part of the `datetime` variable off the shelf using `pandas`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可以使用 `pandas` 直接从 `datetime` 变量的 `date` 部分提取的一些特征：
- en: '`pandas.Series.dt.year`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.year`'
- en: '`pandas.Series.dt.quarter`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.quarter`'
- en: '`pandas.Series.dt.month`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.month`'
- en: '`pandas.Series.dt.isocalendar().week`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.isocalendar().week`'
- en: '`pandas.Series.dt.day`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.day`'
- en: '`pandas.Series.dt.day_of_week`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.day_of_week`'
- en: '`pandas.Series.dt.weekday`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.weekday`'
- en: '`pandas.Series.dt.dayofyear`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.dayofyear`'
- en: '`pandas.Series.dt.day_of_year`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.day_of_year`'
- en: We can use the features we’ve obtained with `pandas` to create even more features,
    such as the semester or whether it is a weekend. We will learn how to do this
    in the next section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `pandas` 获得的特征来创建更多的特征，例如学期或是否是周末。我们将在下一节中学习如何做到这一点。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To proceed with the recipe, let’s import `pandas` and `numpy`, and create a
    sample DataFrame:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续这个食谱，让我们导入 `pandas` 和 `numpy`，并创建一个样本 DataFrame：
- en: 'Let’s import the libraries:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入库：
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We’ll start by creating 20 `datetime` values beginning from `2024-05-17` at
    midnight and followed by increments of 1 day. Then, we’ll capture those values
    in a `DataFrame` instance and display the top five rows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建从 `2024-05-17` 中午开始，然后每天增加 1 天的 20 个 `datetime` 值。然后，我们将这些值捕获在一个 `DataFrame`
    实例中，并显示前五行：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the following output, we see the variable containing dates that we created
    in *Step 2*:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的输出中，我们可以看到我们在 *步骤 2* 中创建的包含日期的变量：
- en: '![Figure 6.1 – Top rows of a DataFrame with a datetime variable containing
    only dates](img/B22396_06_1.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 仅包含日期的 datetime 变量的 DataFrame 的顶部行](img/B22396_06_1.jpg)'
- en: Figure 6.1 – Top rows of a DataFrame with a datetime variable containing only
    dates
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 仅包含日期的 datetime 变量的 DataFrame 的顶部行
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We can check the data format of the variable by executing `data["date"].dtypes`.
    If the variable is cast as an object, we can convert it into `datetime` format
    by executing `data["date_dt"] =` `pd.to_datetime(data["date"])`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行 `data["date"].dtypes` 来检查变量的数据格式。如果变量被转换为对象类型，我们可以通过执行 `data["date_dt"]
    = pd.to_datetime(data["date"])` 来将其转换为 `datetime` 格式。
- en: 'Let’s extract the year part of the date in a new column and display the top
    five rows of the resulting DataFrame:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将日期的年份部分提取到一个新列中，并显示结果 DataFrame 的前五行：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We see the new `year` variable in the following output:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的输出中，我们可以看到新的 `year` 变量：
- en: '![Figure 6.2 – First five rows of the DataFrame with the year variable extracted
    from the date](img/B22396_06_2.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 从日期中提取的年份变量的 DataFrame 的前五行](img/B22396_06_2.jpg)'
- en: Figure 6.2 – First five rows of the DataFrame with the year variable extracted
    from the date
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 从日期中提取的年份变量的 DataFrame 的前五行
- en: 'Let’s extract the quarter of the year out of the date into a new column and
    display the top five rows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将日期的季度提取到一个新列中，并显示前五行：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We see the new `quarter` variable in the following output:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的输出中，我们可以看到新的 `quarter` 变量：
- en: '![Figure 6.3 – The first five rows of a DataFrame with the quarter variable
    extracted from the date](img/B22396_06_3.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 从日期中提取的季度变量的 DataFrame 的前五行](img/B22396_06_3.jpg)'
- en: Figure 6.3 – The first five rows of a DataFrame with the quarter variable extracted
    from the date
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 从日期中提取的季度变量的 DataFrame 的前五行
- en: 'With `quarter`, we can now create the `semester` feature:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `quarter`，我们现在可以创建 `semester` 特征：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can explore the distinct values of the new variables utilizing `pandas`’
    `unique()`, for example, by executing `df["quarter"].unique()` or `df["semester"].unique()`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `pandas` 的 `unique()` 方法来探索新变量的不同值，例如，通过执行 `df["quarter"].unique()` 或
    `df["semester"].unique()`。
- en: 'Let’s extract the `month` part of the date in a new column and display the
    top five rows of the DataFrame:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将日期的 `month` 部分提取到一个新列中，并显示 DataFrame 的前五行：
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We see the new `month` variable in the following output:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的输出中，我们可以看到新的 `month` 变量：
- en: "![Figure 6.4 – The first five rows of a DataFrame with the new month vari\uFEFF\
    able](img/B22396_06_4.jpg)"
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 包含新月份变量的 DataFrame 的前五行](img/B22396_06_4.jpg)'
- en: Figure 6.4 – The first five rows of a DataFrame with the new month variable
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 包含新月份变量的 DataFrame 的前五行
- en: 'Let’s extract the week number (a year has 52 weeks) from the date:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将日期的周数（一年有 52 周）提取出来：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We see the `week` variable in the following output:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的输出中，我们可以看到 `week` 变量：
- en: '![Figure 6.5 – The first five rows of a DataFrame with the new week variable](img/B22396_06_5.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 包含新周变量的 DataFrame 的前五行](img/B22396_06_5.jpg)'
- en: Figure 6.5 – The first five rows of a DataFrame with the new week variable
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 包含新周变量的 DataFrame 的前五行
- en: 'Let’s extract the day of the month, which can take values between `1` and `31`,
    into a new column:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将月份的日期提取出来，它可以取 `1` 到 `31` 之间的值，作为一个新列：
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We see the `day_mo` variable in the following output:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的输出中，我们可以看到 `day_mo` 变量：
- en: "![Figure 6.6 – The top rows of a DataFrame with the new variable capturing\
    \ the day of the \uFEFFmonth](img/B22396_06_6.jpg)"
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 捕获月份日期的新变量的 DataFrame 的顶部行](img/B22396_06_6.jpg)'
- en: Figure 6.6 – The top rows of a DataFrame with the new variable capturing the
    day of the month
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – DataFrame顶部行，包含表示月份天数的变量
- en: 'Let’s extract the day of the week, with values between `0` and `6` (from Monday
    to Sunday), in a new column, then display the top rows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们提取星期几，其值在`0`到`6`之间（从星期一到星期日），在新的列中，然后显示顶部行：
- en: '[PRE8]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We see the `day_week` variable in the following output:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在以下输出中看到`day_week`变量：
- en: '![Figure 6.7 – The top rows of a DataFrame with a new variable representing
    days of a week](img/B22396_06_7.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – DataFrame顶部行，包含表示一周天数的变量](img/B22396_06_7.jpg)'
- en: Figure 6.7 – The top rows of a DataFrame with a new variable representing days
    of a week
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – DataFrame顶部行，包含表示一周天数的变量
- en: 'With the variable from *Step 9*, we can create a binary variable that indicates
    whether it was a weekend:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*步骤9*中的变量，我们可以创建一个二元变量，表示是否为周末：
- en: '[PRE9]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We see the new `is_weekend` variable in the following output:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在以下输出中看到新的`is_weekend`变量：
- en: '![Figure 6.8 – The first five rows of a DataFrame with the new is_weekend variable](img/B22396_06_8.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8 – 包含新变量is_weekend的DataFrame的前五行](img/B22396_06_8.jpg)'
- en: Figure 6.8 – The first five rows of a DataFrame with the new is_weekend variable
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 包含新变量is_weekend的DataFrame的前五行
- en: Note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We can automate the extraction of all these features by using `feature-engine`.
    Check out the *Automating datetime feature extraction with feature-engine* recipe
    in this chapter for more details.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`feature-engine`来自动提取所有这些特征。查看本章中的*使用feature-engine自动化日期时间特征提取*配方以获取更多详细信息。
- en: With that, we have extracted many new features from the date part of a `datetime`
    variable using `pandas`. These features are useful for data analysis, visualization,
    and predictive modelling.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经使用`pandas`从`datetime`变量的日期部分提取了许多新特征。这些特征对数据分析、可视化和预测建模很有用。
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we extracted many date-related features from a `datetime` variable
    by using the `dt` module from `pandas`. First, we created a sample DataFrame with
    a variable that contained dates. We used `pandas`’ `date_range()` to create a
    range of values starting from an arbitrary date and increasing the time by intervals
    of `1` day. With the `periods` argument, we indicated the number of values to
    create in the range – that is, the number of dates. With the `freq` argument,
    we indicated the size of the steps between the dates. We used `D` for days in
    our example. Finally, we transformed the date range into a DataFrame with `pandas`
    `DataFrame()`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们通过使用`pandas`的`dt`模块从`datetime`变量中提取了许多与日期相关的特征。首先，我们创建了一个包含日期的变量的样本DataFrame。我们使用`pandas`的`date_range()`从任意日期开始创建一个值范围，并按`1`天的时间间隔增加。通过`periods`参数，我们指明了要创建的值范围的数量——即日期的数量。通过`freq`参数，我们指明了日期之间的步长大小。在我们的例子中，我们使用了`D`代表天数。最后，我们使用`pandas`的`DataFrame()`将日期范围转换为一个DataFrame。
- en: To extract the different parts of a date, we used `pandas`’ `dt` to access the
    `datetime` properties of a `pandas` Series and then utilized the different properties.
    We used `year`, `month`, and `quarter` to capture the year, month, and quarter
    into new columns of the DataFrame. To find the semester, we created a Boolean
    using NumPy’s `where()` in combination with the newly created `quarter` variable.
    NumPy’s `where()` scanned the values of the `quarter` variable; if they were smaller
    than `3`, it returned the value of `1` for the first semester; otherwise, it returned
    the value of `2`, corresponding to the second semester.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提取日期的不同部分，我们使用了`pandas`的`dt`来访问`pandas` Series的`datetime`属性，然后利用不同的属性。我们使用`year`、`month`和`quarter`将年份、月份和季度捕获到DataFrame的新列中。为了找到学期，我们使用NumPy的`where()`结合新创建的`quarter`变量创建了一个布尔值。NumPy的`where()`扫描`quarter`变量的值；如果它们小于`3`，则返回第一个学期的`1`值；否则，返回第二个学期的`2`值。
- en: To extract the different representations of days and weeks, we used the `isocalender().week`,
    `day`, and `dayofweek` properties. With the day of the week, we went ahead and
    created a binary variable to indicate whether it was a weekend. We used `where()`
    to scan the day of the week, and if the value was greater than `4`, which corresponds
    to Saturday and Sunday, the function returned `True` and otherwise `False`. Finally,
    we cast this Boolean vector as an integer to have a binary variable with 1s and
    0s. With that, we created multiple features from dates that we can use for data
    analysis and predictive modelling.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提取日期和周的不同表示形式，我们使用了`isocalender().week`、`day`和`dayofweek`属性。利用周几，我们进一步创建了一个二元变量来表示是否为周末。我们使用`where()`函数扫描周几，如果值大于`4`，即周六和周日，函数返回`True`，否则返回`False`。最后，我们将这个布尔向量转换为整数，以得到一个由1和0组成的二元变量。有了这个，我们就从日期中创建了多个特征，这些特征可以用于数据分析与预测建模。
- en: There’s more…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Using `pandas`’ `dt` module, we can extract many more features from dates out
    of the box. For example, we can extract the beginning and end of a month, quarter,
    or year, whether it is a leap year, and the number of days in a month. These are
    the functions that allow you to do so:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pandas`的`dt`模块，我们可以直接从日期中提取更多特征。例如，我们可以提取月份、季度或年份的开始和结束，是否为闰年，以及一个月中的天数。这些函数允许你做到这一点：
- en: '`pandas.Series.dt.is_month_start`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.is_month_start`'
- en: '`pandas.Series.dt.is_month_end`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.is_month_end`'
- en: '`pandas.Series.dt.is_quarter_start`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.is_quarter_start`'
- en: '`pandas.Series.dt.is_quarter_end`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.is_quarter_end`'
- en: '`pandas.Series.dt.is_year_start`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.is_year_start`'
- en: '`pandas.Series.dt.is_year_end`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.is_year_end`'
- en: '`pandas.Series.dt.is_leap_year`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.is_leap_year`'
- en: '`pandas.Series.dt.days_in_month`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.days_in_month`'
- en: We can also return the number of days in a specific month with `pd.dt.days_in_month`
    and the day in a year (from `1` to `365`) with `pd.dt.dayofyear`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`pd.dt.days_in_month`返回特定月份的天数，以及一年中的某一天（从`1`到`365`）使用`pd.dt.dayofyear`。
- en: 'For more details, visit the `pandas`’ `datetime` documentation: [https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多详情，请访问`pandas`的`datetime`文档：[https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components).
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: To learn how to create different `datetime` ranges with `pandas`’ `date_ranges()`,
    visit [https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解如何使用`pandas`的`date_ranges()`创建不同的`datetime`范围，请访问[https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases).
- en: To learn more about `pandas`’ `dt`, visit [https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetime-properties](https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetime-properties).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于`pandas`的`dt`的信息，请访问[https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetime-properties](https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetime-properties).
- en: Extracting features from time with pandas
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pandas从时间中提取特征
- en: Some events occur more often at certain times of the day – for example, fraudulent
    activity is more likely to occur during the night or early morning. Air pollutant
    concentration also changes with the time of the day, with peaks at rush hour when
    there are more vehicles on the streets. Therefore, deriving time features is extremely
    useful for data analysis and predictive modelling. In this recipe, we will extract
    different time parts of a `datetime` variable by utilizing `pandas` and NumPy.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一些事件在一天中的特定时间发生得更频繁——例如，欺诈活动更有可能在夜间或清晨发生。空气污染物浓度也随着一天中的时间变化，在交通高峰时段达到峰值，此时街道上有更多车辆。因此，从时间中提取特征对于数据分析和预测建模非常有用。在本例中，我们将通过使用`pandas`和NumPy来提取`datetime`变量的不同时间部分。
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We can extract hours, minutes, and seconds using the following `pandas`’ `datetime`
    properties:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下`pandas`的`datetime`属性提取小时、分钟和秒：
- en: '`pandas.Series.dt.hour`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.hour`'
- en: '`pandas.Series.dt.minute`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.minute`'
- en: '`pandas.Series.dt.second`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.second`'
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In this recipe, we’ll extract the `hour`, `minute`, and `second` part of a
    `time` variable. Let’s begin by importing the libraries and creating a sample
    dataset:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将提取`time`变量的`hour`、`minute`和`second`部分。让我们首先导入库并创建一个样本数据集：
- en: 'Let’s import `pandas` and `numpy`:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入`pandas`和`numpy`：
- en: '[PRE10]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s begin by creating 20 `datetime` observations, starting on `2024-05-17`
    at midnight and followed by increments of 1 hour, 15 minutes, and 10 seconds.
    Next, we’ll capture the time range in a DataFrame and display the top five rows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建20个`datetime`观测值开始，从`2024-05-17`午夜开始，然后以1小时、15分钟和10秒的增量增加。接下来，我们将时间范围捕获到DataFrame中，并显示前五行：
- en: '[PRE11]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the following output, we see the variable from *Step 2*, with a `date` part
    and a `time` part, and the values increasing by intervals of 1 hour, 15 minutes,
    and 10 seconds:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们看到*步骤2*中的变量，包含日期部分和时间部分，值以1小时、15分钟和10秒的间隔增加：
- en: '![Figure 6.9 – The first five rows of a sample DataFrame with a datetime variable](img/B22396_06_9.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 包含日期时间变量的样本DataFrame的前五行](img/B22396_06_9.jpg)'
- en: Figure 6.9 – The first five rows of a sample DataFrame with a datetime variable
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 包含日期时间变量的样本DataFrame的前五行
- en: 'Let’s extract the `hour`, `minute`, and `second` part and capture them into
    three new columns, then display the DataFrame’s top five rows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们提取`hour`、`minute`和`second`部分，并将它们捕获到三个新列中，然后显示DataFrame的前五行：
- en: '[PRE12]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the following output, we see the three `time` features that we extracted
    in *Step 3*:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们看到我们在*步骤3*中提取的三个`time`特征：
- en: '![Figure 6.10 – The first five rows of a DataFrame with three variables derived
    from time](img/B22396_06_10.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 从时间派生出的DataFrame的前五行](img/B22396_06_10.jpg)'
- en: Figure 6.10 – The first five rows of a DataFrame with three variables derived
    from time
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 从时间派生出的DataFrame的前五行
- en: Note
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that `pandas`’ `dt` needs a `datetime` object to work. You can change
    the data type of an object variable into `datetime` by using `pandas` `to_datetime()`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`pandas`的`dt`需要一个`datetime`对象来工作。您可以使用`pandas`的`to_datetime()`函数将对象变量的数据类型更改为`datetime`。
- en: 'Let’s perform the same operations that we did in *Step 3* but now in one line
    of code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们执行与*步骤3*中相同的操作，但现在是在一行代码中：
- en: '[PRE13]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We see the newly created variables in the following output:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们看到新创建的变量：
- en: '![Figure 6.11 – The first five rows of a DataFrame with the variables derived
    from time](img/B22396_06_11.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 从时间派生出的DataFrame的前五行](img/B22396_06_11.jpg)'
- en: Figure 6.11 – The first five rows of a DataFrame with the variables derived
    from time
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 从时间派生出的DataFrame的前五行
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can inspect the unique values of the new variables with `pandas`’ `unique()`,
    for example, by executing `df['hour'].unique()`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`pandas`的`unique()`检查新变量的唯一值，例如，通过执行`df['hour'].unique()`。
- en: 'Finally, let’s create a binary variable that flags events that occurred in
    the morning, between 6 A.M. and 12 P.M.:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们创建一个二进制变量，标记早上6点至中午12点之间发生的事件：
- en: '[PRE14]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We see the `is_morning` variable in the following output:'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在以下输出中看到`is_morning`变量：
- en: '![Figure 6.12 – The top rows of a DataFrame with the new variables derived
    from time](img/B22396_06_12.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – 从时间派生出的新变量的DataFrame的前几行](img/B22396_06_12.jpg)'
- en: Figure 6.12 – The top rows of a DataFrame with the new variables derived from
    time
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – 从时间派生出的新变量的DataFrame的前几行
- en: With that, we extracted multiple features from the time part of a `datetime`
    variable. These features can be used for data analysis and predictive modelling.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们从`datetime`变量的时间部分提取了多个特征。这些特征可用于数据分析预测建模。
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created features that capture representations of time. First,
    we created a sample DataFrame with a `datetime` variable. We used `pandas` `date_range()`to
    create a range of 20 values starting from an arbitrary date and increasing by
    intervals of 1 hour, 15 minutes, and 10 seconds. We used the `1h15min10s` string
    as the frequency term for the `freq` argument to indicate the desired increments.
    Next, we transformed the date range into a DataFrame with `pandas`’ `DataFrame()`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们创建了捕获时间表示的特征。首先，我们创建了一个包含`datetime`变量的样本DataFrame。我们使用`pandas`的`date_range()`函数创建了一个从任意日期开始，以1小时、15分钟和10秒为间隔的20个值的范围。我们使用`1h15min10s`字符串作为`freq`参数的频率项，以指示所需的增量。接下来，我们使用`pandas`的`DataFrame()`将日期范围转换为DataFrame。
- en: To extract the different time parts, we used `pandas`’ `dt` to access the `hour`,
    `minute`, and `second` `time` properties. After extracting `hour` from `time`,
    we used it to create a new feature that indicated whether it was morning by using
    NumPy’s `where()`. NumPy’s `where()` scanned the `hour` variable; if its values
    were smaller than 12 and greater than 6, it assigned a value of `1`; otherwise,
    it assigned a value of `0`. With these operations, we added several features to
    the DataFrame that can be used for data analysis and to train machine learning
    models.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提取不同时间部分，我们使用了 `pandas` 的 `dt` 来访问 `hour`、`minute` 和 `second` 时间属性。从 `time`
    中提取 `hour` 后，我们使用它通过 NumPy 的 `where()` 创建一个新特征，以表示是否是上午。NumPy 的 `where()` 检查 `hour`
    变量；如果其值小于 12 且大于 6，则分配值为 `1`；否则，分配值为 `0`。通过这些操作，我们在 DataFrame 中添加了几个可用于数据分析和训练机器学习模型的特征。
- en: There’s more…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'We can also extract microseconds and nanoseconds with the following `pandas`
    properties:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下 `pandas` 属性提取微秒和纳秒：
- en: '`pandas.Series.dt.microsecond`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.microsecond`'
- en: '`pandas.Series.dt.nanosecond`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas.Series.dt.nanosecond`'
- en: For more details, visit [https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情，请访问 [https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components)。
- en: Capturing the elapsed time between datetime variables
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕捉 datetime 变量之间的经过时间
- en: We can extract powerful features from each `datetime` variable individually,
    as we did in the previous two recipes. We can create additional features by combining
    multiple `datetime` variables. A common example consists of extracting the **age**
    at the time of an event by comparing the **date of birth** with the **date of**
    **the event**.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像在前两个菜谱中做的那样，单独从每个 `datetime` 变量中提取强大的特征。我们可以通过组合多个 `datetime` 变量来创建额外的特征。一个常见的例子是通过比较
    **出生日期** 和 **事件日期** 来提取事件发生时的 **年龄**。
- en: In this recipe, we will learn how to capture the time between two `datetime`
    variables by utilizing `pandas` and `feature-engine`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将学习如何通过利用 `pandas` 和 `feature-engine` 来捕捉两个 `datetime` 变量之间的时间。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To proceed with this recipe, we’ll create a DataFrame containing two `datatime`
    variables:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续本菜谱，我们将创建一个包含两个 `datatime` 变量的 DataFrame：
- en: 'Let’s begin by importing `pandas`, `numpy`, and `datetime`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从导入 `pandas`、`numpy` 和 `datetime` 开始：
- en: '[PRE15]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We’ll start by creating two `datetime` variables with 20 values each; the values
    start from `2024-05-17` and increase in intervals of `1` hour for the first variable,
    and `1` month for the second. Then, we‘ll capture the variables in a DataFrame,
    add column names, and display the top rows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建两个具有 20 个值的 `datetime` 变量；第一个变量的值从 `2024-05-17` 开始，以 `1` 小时的间隔增加，第二个变量以
    `1` 个月的间隔增加。然后，我们将变量捕捉到 DataFrame 中，添加列名，并显示前几行：
- en: '[PRE16]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We see the first five rows of the DataFrame from *Step 2* in the following
    output:'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在以下输出中看到 *步骤 2* 中的 DataFrame 的前五行：
- en: "![Figure 6.13 – The first five rows of a DataFrame wit\uFEFFh two datetime\
    \ variables](img/B22396_06_13.jpg)"
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 包含两个 datetime 变量的 DataFrame 的前五行](img/B22396_06_13.jpg)'
- en: Figure 6.13 – The first five rows of a DataFrame with two datetime variables
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 包含两个 datetime 变量的 DataFrame 的前五行
- en: 'Let’s capture the difference in days between the two variables in a new feature,
    and then display the DataFrame’s top rows:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在新特征中捕捉两个变量之间的天数差异，然后显示 DataFrame 的前几行：
- en: '[PRE17]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We see the difference in days in the following output:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在以下输出中看到天数差异：
- en: '![Figure 6.14 – Top rows of a DataFrame with a new variable capturing the time
    difference between the two datetime features](img/B22396_06_14.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 包含捕捉两个 datetime 特征时间差的新的变量的 DataFrame 的前几行](img/B22396_06_14.jpg)'
- en: Figure 6.14 – Top rows of a DataFrame with a new variable capturing the time
    difference between the two datetime features
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 包含捕捉两个 datetime 特征时间差的新的变量的 DataFrame 的前几行
- en: 'Let’s capture the difference in weeks between the two `datetime` variables
    and then display the DataFrame’s top rows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们捕捉两个 `datetime` 变量之间的周数差异，然后显示 DataFrame 的前几行：
- en: '[PRE18]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We see the difference in weeks between the variables in the following screenshot:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在以下屏幕截图中看到变量之间的周数差异：
- en: "![Figure 6.15 – A DataFrame with the time difference between the datetime variables\
    \ expressed in number \uFEFFof days and number of weeks](img/B22396_06_15.jpg)"
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 以天数和周数表示的 datetime 变量时间差的 DataFrame](img/B22396_06_15.jpg)'
- en: Figure 6.15 – A DataFrame with the time difference between the datetime variables
    expressed in number of days and number of weeks
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – 一个DataFrame，其中包含两个日期时间变量之间的时间差，以天数和周数表示
- en: 'Now, let’s calculate the time in between the variables in minutes and seconds
    and then display the DataFrame’s top rows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们计算变量之间的时间差（以分钟和秒为单位），然后显示DataFrame的前几行：
- en: '[PRE19]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We see the new variables in the following output:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在以下输出中看到新变量：
- en: '![Figure 6.16 – A DataFrame with the time difference between the two datetime
    variables expressed in different time units](img/B22396_06_16.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 以不同的时间单位表示两个日期时间变量之间时间差的DataFrame](img/B22396_06_16.jpg)'
- en: Figure 6.16 – A DataFrame with the time difference between the two datetime
    variables expressed in different time units
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – 一个DataFrame，其中包含两个日期时间变量之间的时间差，以不同的时间单位表示
- en: 'Finally, let’s calculate the difference between one variable and the current
    day, expressed in number of days, and then display the first five rows of the
    DataFrame:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们计算一个变量与当前日期之间的差异，以天数表示，然后显示DataFrame的前五行：
- en: '[PRE20]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can find the new variable in the final column of the DataFrame in the following
    output:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在以下输出中的DataFrame的最后一列找到新变量：
- en: '![Figure 6.17 – A DataFrame with the new variable containing the difference
    between date1 and the day this code was executed](img/B22396_06_17.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – 包含date1与执行此代码的日期之间差异的新变量的DataFrame](img/B22396_06_17.jpg)'
- en: Figure 6.17 – A DataFrame with the new variable containing the difference between
    date1 and the day this code was executed
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 一个DataFrame，其中包含包含date1与执行此代码的日期之间差异的新变量
- en: Note
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `to_today` variable on your computer will be different from the one in this
    book, due to the difference between the current date (at the time of writing)
    and when you execute the code.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您计算机上的`to_today`变量将与此书中的不同，这是由于当前日期（写作时）与您执行代码时的差异。
- en: That’s it! We’ve now enriched our dataset with new features that were created
    by comparing two `datetime` variables.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是全部！我们现在已经通过比较两个`datetime`变量来创建新特征，丰富了我们的数据集。
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we captured different representations of the time between two
    `datetime` variables. To proceed with this recipe, we created a sample DataFrame
    with two variables, each with 20 dates starting at an arbitrary date. The first
    variable increased in intervals of `1` hour, while the second variable increased
    in intervals of `1` month. We created the variables with `pandas`’ `date_range()`,
    which we discussed in the previous two recipes in this chapter.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们捕捉了两个`datetime`变量之间时间差异的不同表示。为了继续这个菜谱，我们创建了一个包含两个变量的样本DataFrame，每个变量从任意日期开始，有20个日期。第一个变量以`1`小时的间隔增加，而第二个变量以`1`个月的间隔增加。我们使用`pandas`的`date_range()`创建了这些变量，我们在本章前两个菜谱中讨论了它。
- en: To determine the difference between the variables – that is, to determine the
    time between them – we directly subtracted one `datetime` variable from the other
    – that is, one `pandas` Series from the other. The difference between the two
    `pandas` Series returned a new `pandas` Series. To capture the difference in days,
    we used `pandas`’ `dt`, followed by `days`. To convert the time difference into
    months, we used `timedelta()` from NumPy, indicating that we wanted the difference
    in weeks by passing `W` in the second argument of the method. To capture the difference
    in seconds and minutes, we passed the `s` and `m` strings to `timedelta()`, respectively.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定变量之间的差异——即确定它们之间的时间——我们直接从一个`datetime`变量减去另一个——即从一个`pandas` Series减去另一个。两个`pandas`
    Series之间的差异返回了一个新的`pandas` Series。为了捕获天数差异，我们使用了`pandas`的`dt`，然后是`days`。要将时间差转换为月份，我们使用了NumPy的`timedelta()`，表示我们想要以周为单位传递`W`到方法的第二个参数。为了捕获秒和分钟的差异，我们分别传递了`s`和`m`字符串到`timedelta()`。
- en: Note
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The arguments for NumPy’s `timedelta` are a number, `– 1`, in our example, to
    represent the number of units, and a `datetime` unit, such as day (`D`), week
    (`W`), hours (`h`), minutes (`m`), or seconds (`s`).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的`timedelta`的参数是一个数字，例如在我们的例子中是`-1`，表示单位数，以及一个`datetime`单位，如天（`D`）、周（`W`）、小时（`h`）、分钟（`m`）或秒（`s`）。
- en: Finally, we captured the difference from one `datetime` variable to today’s
    date. We obtained the date and time of today (at the time of writing) by using
    `today()` from the built-in `datetime` Python library.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们捕捉了一个`datetime`变量与今天日期之间的差异。我们通过使用内置的`datetime` Python库中的`today()`获得了今天（写作时）的日期和时间。
- en: There's more...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can automate the creation of features that capture the time between variables
    by using the `feature-engine`‘s transformer `DatetimeSubstraction()`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `feature-engine` 的转换器 `DatetimeSubstraction()` 自动化创建捕获变量之间时间的特征。
- en: 'Let’s import `pandas` and `feature-engine`’s transformer:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入 `pandas` 和 `feature-engine` 的转换器：
- en: '[PRE21]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let’s re-create the sample dataset that we described in *Step 2* of the *How
    to do* *it…* section:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们重新创建我们在 *如何做* *it…* 部分的 *步骤 2* 中描述的示例数据集：
- en: '[PRE22]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let’s set up `DatetimeSubstraction()`to return the time difference between
    the second date and the first date expressed in days:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置 `DatetimeSubstraction()` 以返回第二个日期和第一个日期之间以天为单位的时间差：
- en: '[PRE23]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We can obtain the difference between more than two variables by passing variable
    lists in the `variables` and `reference` parameters.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在 `variables` 和 `reference` 参数中传递变量列表来获取两个以上变量的差异。
- en: 'Let’s create and then display the new feature:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建并显示新的特征：
- en: '[PRE24]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the following output, we see the variable that captures the time difference
    between the two `datetime` variables in days:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们看到捕获两个 `datetime` 变量之间时间差的变量：
- en: '![Figure 6.18 – A DataFrame with the new variable containing the difference
    between the two datetime variables](img/B22396_06_18.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.18 – 包含两个日期时间变量之间差异的新变量的 DataFrame](img/B22396_06_18.jpg)'
- en: Figure 6.18 – A DataFrame with the new variable containing the difference between
    the two datetime variables
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18 – 包含两个日期时间变量之间差异的新变量的 DataFrame
- en: For more details, check out [https://feature-engine.trainindata.com/en/latest/api_doc/datetime/DatetimeSubtraction.html](https://feature-engine.trainindata.com/en/latest/api_doc/datetime/DatetimeSubtraction.html).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情，请查看 [https://feature-engine.trainindata.com/en/latest/api_doc/datetime/DatetimeSubtraction.html](https://feature-engine.trainindata.com/en/latest/api_doc/datetime/DatetimeSubtraction.html)。
- en: See also
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn more about NumPy’s `timedelta`, visit [https://numpy.org/devdocs/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic](https://numpy.org/devdocs/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 NumPy 的 `timedelta`，请访问 [https://numpy.org/devdocs/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic](https://numpy.org/devdocs/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic)。
- en: Working with time in different time zones
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同时区处理时间
- en: Some organizations operate internationally; therefore, the information they
    collect about events may be recorded alongside the time zone of the area where
    the event took place. To be able to compare events that occurred across different
    time zones, we typically have to set all of the variables within the same zone.
    In this recipe, we will learn how to unify the time zones of a `datetime` variable
    and how to reassign a variable to a different time zone using `pandas`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组织在国际上运营；因此，他们收集关于事件的信息可能记录在事件发生地区的时区旁边。为了能够比较发生在不同时区的事件，我们通常必须将所有变量设置在同一个时区。在本教程中，我们将学习如何统一
    `datetime` 变量的时区，以及如何使用 `pandas` 将变量重新分配到不同的时区。
- en: How to do it...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To proceed with this recipe, we’ll create a sample DataFrame containing two
    variables in different time zones:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续本教程，我们将创建一个包含两个不同时区变量的样本 DataFrame：
- en: 'Let’s import `pandas`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入 `pandas`：
- en: '[PRE25]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let’s create a DataFrame containing one variable with values in different time
    zones:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个包含不同时区值的单个变量的 DataFrame：
- en: '[PRE26]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let’s add another `datetime` variable to the DataFrame, which also contains
    values in different time zones:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 DataFrame 中添加另一个 `datetime` 变量，它也包含不同时区的值：
- en: '[PRE27]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If we now execute `df`, we’ll see the DataFrame with the variables in the different
    time zones like in the following output:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们现在执行 `df`，我们将看到具有不同时区变量的 DataFrame，如下面的输出所示：
- en: '![Figure 6.19 – A DataFrame with two datetime variables in different time zones](img/B22396_06_19.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – 包含两个不同时区日期时间变量的 DataFrame](img/B22396_06_19.jpg)'
- en: Figure 6.19 – A DataFrame with two datetime variables in different time zones
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – 包含两个不同时区日期时间变量的 DataFrame
- en: Note
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The time zone is indicated with the `+02` and `-05` values, respectively, which
    indicates the time difference to the **Coordinated Universal** **Time** (**UTC**).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 时区用 `+02` 和 `-05` 的值表示，分别表示与协调世界时（**UTC**）的时间差。
- en: 'To work with different time zones, we typically set the variables in the same
    time zone, in this case, we chose the UTC:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要处理不同的时区，我们通常将变量设置在同一个时区，在这种情况下，我们选择了 UTC：
- en: '[PRE28]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we now execute `df`, we’ll see the new variables, which have a difference
    of `00` hours with respect to UTC:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在执行`df`，我们将看到新的变量，它们与UTC相比有`00`小时的差异：
- en: "![Figure 6.20 – A DataFrame\uFEFF containing the new variables in the UTC](img/B22396_06_20.jpg)"
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图6.20 – 包含UTC中新的变量的DataFrame](img/B22396_06_20.jpg)'
- en: Figure 6.20 – A DataFrame containing the new variables in the UTC
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20 – 包含UTC中新的变量的DataFrame
- en: 'Let’s calculate the difference in days between the variables and then display
    the first five rows of the DataFrame:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们计算变量之间的天数差异，然后显示DataFrame的前五行：
- en: '[PRE29]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We see the time difference between the variables in the following output:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们可以看到变量之间的时间差异：
- en: '[PRE30]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: df['time1_london'] = df[
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: df['time1_london'] = df[
- en: ‹time1_utc›].dt.tz_convert('Europe/London')
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ‹time1_utc›].dt.tz_convert('Europe/London')
- en: df['time2_berlin'] = df[
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: df['time2_berlin'] = df[
- en: ‹time1_utc›].dt.tz_convert('Europe/Berlin')
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ‹time1_utc›].dt.tz_convert('Europe/Berlin')
- en: df[['time1_london', 'time2_berlin']]
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: df[['time1_london', 'time2_berlin']]
- en: '[PRE31]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![Figure 6.21 – Variables reformatted into different time zones](img/B22396_06_21.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图6.21 – 将变量重新格式化为不同的时区](img/B22396_06_21.jpg)'
- en: Figure 6.21 – Variables reformatted into different time zones
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.21 – 将变量重新格式化为不同的时区
- en: When changing time zones, not only do the values of the zone change – that is,
    the `+01` and `+02` values in the previous image – but the value of the hour changes
    as well.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改时区时，不仅时区的值会改变——即，如图像中的`+01`和`+02`值——而且小时的值也会改变。
- en: How it works...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we changed time zones and performed operations between variables
    in different time zones. To begin, we created a DataFrame with two variables,
    the values of which started at an arbitrary date and increased hourly; these were
    set in different time zones. To combine the different time zone variables in one
    DataFrame column, we concatenated the series returned by `pandas`’ `date_range()`
    by utilizing `pandas`’ `concat()`. We set the `axis` argument to `0` to indicate
    we wanted to concatenate the series vertically in one column. We covered the arguments
    of `pandas`’ `date_range()` extensively in former recipes in this chapter; see
    the *Extracting features from dates with pandas* and *Extracting features from
    time with pandas* recipes for more details.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们更改了时区，并在不同时区的变量之间执行操作。首先，我们创建了一个包含两个变量的DataFrame，这些变量的值从一个任意日期开始，每小时增加；这些变量设置在不同的时区。为了将不同的时区变量合并到一个DataFrame列中，我们利用`pandas`的`concat()`函数连接了`pandas`的`date_range()`返回的序列。我们将`axis`参数设置为`0`，表示我们想要将序列垂直连接到一个列中。我们已经在本章前面的示例中广泛介绍了`pandas`的`date_range()`的参数；有关更多详细信息，请参阅*使用pandas从日期中提取特征*和*使用pandas从时间中提取特征*的示例。
- en: To reset the time zone of the variables to the central zone, we used `pandas`’
    `to_datetime()`, passing `utc=True`. Finally, we determined the time difference
    between the variables by subtracting one series from the other and capturing the
    difference in days. To reassign a different time zone, we used `pandas`’ `tz_convert()`,
    indicating the new time zone as an argument.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将变量的时区重置为中央时区，我们使用了`pandas`的`to_datetime()`，传递`utc=True`。最后，我们通过从一个序列减去另一个序列并捕获天数差异来确定变量之间的时间差异。为了重新分配不同的时区，我们使用了`pandas`的`tz_convert()`，将新的时区作为参数指定。
- en: See also
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: To learn more about `pandas`’ `to_datetime()`, visit [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`pandas`的`to_datetime()`的信息，请访问[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html)。
- en: To learn more about `pandas`’ `tz_convert()`, visit [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`pandas`的`tz_convert()`的信息，请访问[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html)。
- en: Automating the datetime feature extraction with Feature-engine
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Feature-engine自动化日期时间特征提取
- en: '`feature-engine` is a Python library for feature engineering and selection
    that is well suited to working with `pandas` DataFrames. The `DatetimeFeatures()`
    class can extract features from date and time automatically by using `pandas`’
    `dt` under the hood. `DatetimeFeatures()` allows you to extract the following
    features:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`feature-engine`是一个适用于与`pandas` DataFrame一起工作的特征工程和选择的Python库。`DatetimeFeatures()`类可以通过使用`pandas`的`dt`自动从日期和时间中提取特征。`DatetimeFeatures()`允许您提取以下特征：'
- en: Month
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份
- en: Quarter
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 季度
- en: Semester
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学期
- en: Year
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年份
- en: Week
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 周
- en: Day of the week
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 周几
- en: Day of the month
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份中的日
- en: Day of the year
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年份中的日
- en: Weekend
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 周末
- en: Month start
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份开始
- en: Month end
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 月份结束
- en: Quarter start
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 季度开始
- en: Quarter end
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 季度结束
- en: Year start
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年度开始
- en: Year end
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 年度结束
- en: Leap year
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闰年
- en: Days in a month
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个月中的天数
- en: Hour
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小时
- en: Minute
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分钟
- en: Second
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秒
- en: In this recipe, we will automatically create features from date and time by
    utilizing `feature-engine`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过利用 `feature-engine` 自动从日期和时间创建特征。
- en: How to do it...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To showcase `feature-engine`’s functionality, we’ll create a sample DataFrame
    with a `datetime` variable:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 `feature-engine` 的功能，我们将创建一个包含 `datetime` 变量的样本 DataFrame：
- en: 'Let’s begin by importing `pandas` and `DatetimeFeatures()`:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先导入 `pandas` 和 `DatetimeFeatures()`：
- en: '[PRE32]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let’s create a `datetime` variable with 20 values, beginning from `2024-05-17`
    at midnight and followed by increments of `1` day. Then, we store this variable
    in a DataFrame:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个包含20个值的 `datetime` 变量，从 `2024-05-17` 凌晨开始，然后以 `1` 天的增量递增。然后，我们将这个变量存储在一个
    DataFrame 中：
- en: '[PRE33]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We’ll start by setting up the transformer to extract all supported `datetime`
    features:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先设置转换器以提取所有支持的 `datetime` 特征：
- en: '[PRE34]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: '`DatetimeFeatures()` automatically finds the variables of the `datetime` type,
    or that could be parsed as `datetime` when the `variables` parameter is set to
    `None`. Alternatively, you can pass a list with the names of the variables from
    which you want to extract `date` and `time` features.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatetimeFeatures()` 自动查找 `datetime` 类型的变量，或者当 `variables` 参数设置为 `None` 时可以解析为
    `datetime` 的变量。或者，您可以传递一个包含您想要提取 `date` 和 `time` 特征的变量名称的列表。'
- en: 'Let’s add the `date` and `time` features to the data:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加 `date` 和 `time` 特征到数据中：
- en: '[PRE35]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: 'By default, `DatetimeFeatures()` extracts the following features from each
    `datetime` variable: `month`, `year`, `day_of_week`, `day_of_month`, `hour`, `minute`,
    and `second`. We can modify this behavior through the `features_to_extract` parameter
    as we did in *Step 3*.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`DatetimeFeatures()` 从每个 `datetime` 变量中提取以下特征：`month`，`year`，`day_of_week`，`day_of_month`，`hour`，`minute`，和
    `second`。我们可以通过 `features_to_extract` 参数修改此行为，就像我们在 *步骤 3* 中所做的那样。
- en: 'Let’s capture the names of the new variables in a list:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将新变量的名称记录在列表中：
- en: '[PRE36]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: '`DatetimeFeatures()` names the new variables with the original variable name
    (in this case, `date`) followed by an underscore and then the type of feature
    created, for example, `date_day_of_week` contains the day of the week extracted
    from the `date` variable.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatetimeFeatures()` 使用原始变量名称（在这种情况下为 `date`）后跟一个下划线和创建的特征类型来命名新变量，例如，`date_day_of_week`
    包含从 `date` 变量中提取的星期几。'
- en: 'If we execute `vars_`, we’ll see the names of the features that were created:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行 `vars_`，我们将看到创建的特征名称：
- en: '[PRE37]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: df = pd.DataFrame()
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: df = pd.DataFrame()
- en: df["time"] = pd.concat(
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: df["time"] = pd.concat(
- en: '['
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '['
- en: pd.Series(
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pd.Series(
- en: pd.date_range(
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pd.date_range(
- en: start="2024-08-01 09:00",
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: start="2024-08-01 09:00",
- en: freq="h",
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: freq="h"，
- en: periods=3,
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: periods=3,
- en: tz="Europe/Berlin"
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: tz="Europe/Berlin"
- en: )
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: ),
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ),
- en: pd.Series(
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pd.Series(
- en: pd.date_range(
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pd.date_range(
- en: start="2024-08-01 09:00",
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: start="2024-08-01 09:00",
- en: freq="h",
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: freq="h",
- en: periods=3, tz="US/Central"
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: periods=3, tz="US/Central"
- en: )
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: ),
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ),
- en: '],'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '],'
- en: axis=0,
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: axis=0,
- en: )
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE38]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: dfts = DatetimeFeatures(
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dfts = DatetimeFeatures(
- en: features_to_extract=
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: features_to_extract=
- en: '["day_of_week", "hour","minute"],'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '["day_of_week", "hour","minute"],'
- en: drop_original=False,
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: drop_original=False,
- en: utc=True,
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: utc=True,
- en: )
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE39]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: dft = dfts.fit_transform(df)
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dft = dfts.fit_transform(df)
- en: '[PRE40]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
