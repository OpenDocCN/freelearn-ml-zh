- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Model Monitoring and Management Solutions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型监控和管理解决方案
- en: In [*Chapter 6*](B18638_06.xhtml#_idTextAnchor132), *SageMaker Training and
    Debugging Solutions*, and [*Chapter 7*](B18638_07.xhtml#_idTextAnchor151), *SageMaker
    Deployment Solutions*, we focused on training and deploying **machine learning**
    (**ML**) models using **SageMaker**. If you were able to complete the hands-on
    solutions presented in those chapters, you should be able to perform similar types
    of experiments and deployments using other algorithms and datasets. These two
    chapters are good starting points, especially when getting started with the managed
    service. At some point, however, you will have to use its other capabilities to
    manage, troubleshoot, and monitor different types of resources in production ML
    environments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B18638_06.xhtml#_idTextAnchor132)“SageMaker训练和调试解决方案”和[*第7章*](B18638_07.xhtml#_idTextAnchor151)“SageMaker部署解决方案”中，我们专注于使用**SageMaker**训练和部署**机器学习**（**ML**）模型。如果你能够完成那些章节中提供的动手实践解决方案，你应该能够使用其他算法和数据集执行类似类型的实验和部署。这两章是良好的起点，尤其是在开始使用托管服务时。然而，在某个时候，你将不得不使用其其他功能来管理、故障排除和监控生产机器学习环境中的不同类型资源。
- en: One of the clear advantages of using SageMaker is that a lot of the commonly
    performed tasks of data scientists and ML practitioners have already been automated
    as part of this fully managed service. This means that we generally do not need
    to build a custom solution, especially if SageMaker already has that capability
    or feature. Examples of these capabilities include **SageMaker Debugger**, **SageMaker
    Feature Store**, **SageMaker Training Compiler**, **SageMaker Inference Recommender**,
    **SageMaker Clarify**, **SageMaker Processing**, and more! If we need to use one
    or more of these capabilities, all we need to do is use **boto3**, along with
    the **SageMaker Python SDK**, to run a few lines of code to obtain the desired
    functionality and results in just a matter of hours (or even minutes!).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SageMaker的一个明显优势是，数据科学家和机器学习实践者通常执行的大量任务已经作为这项完全托管服务的一部分自动化。这意味着我们通常不需要构建自定义解决方案，尤其是如果SageMaker已经具备该功能或特性。这些功能的例子包括**SageMaker调试器**、**SageMaker特征存储**、**SageMaker训练编译器**、**SageMaker推理推荐器**、**SageMaker
    Clarify**、**SageMaker处理**等等！如果我们需要使用这些功能之一或多个，我们只需要使用**boto3**以及**SageMaker Python
    SDK**，运行几行代码，就可以在几小时（甚至几分钟！）内获得所需的功能和结果。
- en: In this chapter, we will focus on using the built-in **model registry** of SageMaker,
    which we will use to register and manage trained ML models. We will also show
    a quick demonstration of how to deploy models from the model registry into an
    ML inference endpoint. In addition to the model registry, we will work with **SageMaker
    Model Monitor**, which is another built-in capability that we will use to capture
    and analyze the data that passes through an ML inference endpoint.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于使用SageMaker的内置**模型注册表**，我们将使用它来注册和管理训练好的机器学习模型。我们还将快速演示如何将模型从模型注册表部署到机器学习推理端点。除了模型注册表，我们还将使用**SageMaker模型监控器**，这是另一个内置功能，我们将用它来捕获和分析通过机器学习推理端点的数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Registering models to SageMaker Model Registry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模型注册到SageMaker模型注册表
- en: Deploying models from SageMaker Model Registry
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从SageMaker模型注册表部署模型
- en: Enabling data capture and simulating predictions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用数据捕获并模拟预测
- en: Scheduled monitoring with SageMaker Model Monitor
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SageMaker模型监控器进行计划监控
- en: Analyzing the captured data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析捕获的数据
- en: Deleting an endpoint with a monitoring schedule
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除具有监控计划的端点
- en: Cleaning up
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理
- en: Once you have completed the hands-on solutions in this chapter, you will have
    an easier time understanding, using, and configuring the other built-in features
    of SageMaker. With this in mind, let’s begin!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了本章的动手实践解决方案，你将更容易理解、使用和配置SageMaker的其他内置功能。考虑到这一点，让我们开始吧！
- en: Technical prerequisites
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术先决条件
- en: 'Before we start, we must have the following ready:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们必须准备好以下内容：
- en: A web browser (preferably Chrome or Firefox)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网络浏览器（最好是Chrome或Firefox）
- en: Access to the AWS account and **SageMaker Studio** domain that was used in the
    first chapter of this book
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问本书第一章中使用的AWS账户和**SageMaker Studio**域名
- en: 'The Jupyter notebooks, source code, and other files used for each chapter are
    available in this book’s GitHub repository: [https://github.com/PacktPublishing/Machine-Learning-Engineering-on-AWS](https://github.com/PacktPublishing/Machine-Learning-Engineering-on-AWS).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章使用的 Jupyter 笔记本、源代码和其他文件都可在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Machine-Learning-Engineering-on-AWS](https://github.com/PacktPublishing/Machine-Learning-Engineering-on-AWS).
- en: Important Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is recommended to use an IAM user with limited permissions instead of the
    root account when running the examples in this book. We will discuss this, along
    with other security best practices, in detail in [*Chapter 9*](B18638_09.xhtml#_idTextAnchor187),
    *Security, Governance, and Compliance Strategies*. If you are just starting to
    use AWS, you may proceed with using the root account in the meantime.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在运行本书中的示例时，使用具有有限权限的 IAM 用户而不是根账户。我们将在[*第 9 章*](B18638_09.xhtml#_idTextAnchor187)，*安全、治理和合规策略*中详细讨论这一点，以及其他安全最佳实践。如果你刚开始使用
    AWS，你可以暂时使用根账户。
- en: Registering models to SageMaker Model Registry
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型注册到 SageMaker 模型注册表
- en: In [*Chapter 6*](B18638_06.xhtml#_idTextAnchor132), *SageMaker Training and
    Debugging Solutions*, we used the `deploy()` method of the `Estimator` instance
    to immediately deploy our ML model to an inference endpoint right after using
    the `fit()` method to train the model. When performing ML experiments and deployments
    in production, a model may have to be analyzed and evaluated first before proceeding
    with the deployment step. The individual or team performing the analysis would
    review the input configuration parameters, the training data, and the algorithm
    used to train the model, along with other relevant information available. Once
    the data science team has to work with multiple models, managing and organizing
    all of these would be much easier using a **model registry**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 6 章*](B18638_06.xhtml#_idTextAnchor132)，*SageMaker 训练和调试解决方案*中，我们使用了 `Estimator`
    实例的 `deploy()` 方法，在训练模型后立即将我们的 ML 模型部署到推理端点。在进行生产环境中的 ML 实验和部署时，可能需要先分析并评估模型，然后再进行部署步骤。执行分析的个人或团队将审查输入配置参数、训练数据和用于训练模型的算法，以及其他相关的信息。一旦数据科学团队必须与多个模型一起工作，使用**模型注册表**管理和组织所有这些将变得更加容易。
- en: 'What’s a model registry? A model registry is simply a repository that focuses
    on helping data scientists and ML practitioners manage, organize, and catalog
    ML models. After the training step, the data science team may store the trained
    ML model in the model registry and tag its status as *For Review* or *Pending
    Approval*. This will allow the reviewing team to easily locate the models for
    review, along with the history and information linked to these models:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是模型注册表？模型注册表只是一个专注于帮助数据科学家和 ML 实践者管理、组织和编目 ML 模型的仓库。在训练步骤之后，数据科学团队可以将训练好的
    ML 模型存储在模型注册表中，并标记其状态为*待审查*或*待批准*。这将允许审查团队轻松地找到要审查的模型，以及与这些模型相关的历史信息和信息：
- en: '![Figure 8.1 – Working with a model registry ](img/B18638_08_001.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 使用模型注册表](img/B18638_08_001.jpg)'
- en: Figure 8.1 – Working with a model registry
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 使用模型注册表
- en: Once the reviewing team has finished the review process and has approved a model
    for deployment, the status of the model can now be changed to *Approved*, similar
    to what is shown in the preceding diagram. Once the status of the ML model has
    been changed to *Approved*, it can be deployed manually or even automatically
    using an **MLOps pipeline**. In addition to these, other automated actions such
    as automated reports and notifications can be triggered.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦审查团队完成审查过程并批准模型进行部署，模型的状态现在可以更改为*批准*，类似于前面图中所示。一旦 ML 模型的状态更改为*批准*，它可以通过手动或甚至使用**MLOps
    管道**自动部署。除此之外，还可以触发其他自动化操作，如自动化报告和通知。
- en: Note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on MLOps pipelines, feel free to check out [*Chapter 10*](B18638_10.xhtml#_idTextAnchor215),
    *Machine Learning Pipelines with Kubeflow on Amazon EKS*, and [*Chapter 11*](B18638_11.xhtml#_idTextAnchor231),
    *Machine Learning Pipelines with SageMaker Pipelines*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于 MLOps 管道的详细信息，请随时查看[*第 10 章*](B18638_10.xhtml#_idTextAnchor215)，*在
    Amazon EKS 上使用 Kubeflow 的机器学习管道*和[*第 11 章*](B18638_11.xhtml#_idTextAnchor231)，*使用
    SageMaker Pipelines 的机器学习管道*。
- en: Now that you have a better idea of how data science teams can make their lives
    easier using a model registry, you may already be planning on coding a model registry
    from scratch! Hold it right there – SageMaker already provides one for us! In
    the succeeding pages of this chapter, we will use the **boto3** library and the
    **SageMaker Python SDK** to utilize the model registry available in SageMaker.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经更好地了解了数据科学团队如何使用模型注册表来简化他们的工作，你可能已经在计划从头开始编写一个模型注册表！请稍等——SageMaker 已经为我们提供了一个！在本章接下来的几页中，我们将使用
    **boto3** 库和 **SageMaker Python SDK** 来利用 SageMaker 中可用的模型注册表。
- en: Creating a new notebook in SageMaker Studio
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 SageMaker Studio 中创建新的笔记本
- en: We will start the hands-on portion of this section by opening SageMaker Studio
    and creating a new Jupyter Notebook inside a new directory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过打开 SageMaker Studio 并在新的目录中创建一个新的 Jupyter Notebook 来开始本节的手动实践部分。
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure that you have completed the hands-on solutions in the *Getting Started
    with SageMaker and SageMaker Studio* section of *Chapter 1*, *Introduction to
    ML Engineering on AWS* before proceeding. Note that the hands-on section in this
    chapter is *NOT* a continuation of what we completed in [*Chapter 6*](B18638_06.xhtml#_idTextAnchor132),
    *SageMaker Training and Debugging Solutions*, and [*Chapter 7*](B18638_07.xhtml#_idTextAnchor151),
    *SageMaker Deployment Solutions*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保你已经完成了 *第 1 章* 中 *SageMaker 和 SageMaker Studio 入门* 部分的动手实践解决方案。请注意，本章的动手实践部分
    **不是** 我们在 [*第 6 章*](B18638_06.xhtml#_idTextAnchor132) *SageMaker 训练和调试解决方案* 和
    [*第 7 章*](B18638_07.xhtml#_idTextAnchor151) *SageMaker 部署解决方案* 中所完成内容的延续。
- en: 'Follow these steps to launch SageMaker Studio and then create a new Notebook
    that will be used to run the Python scripts in this chapter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤启动 SageMaker Studio 并创建一个新的笔记本，该笔记本将用于运行本章中的 Python 脚本：
- en: Navigate to `sagemaker studio` in the search bar of the AWS Management Console
    and selecting **SageMaker Studio** from the list of results under **Features**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 管理控制台的搜索栏中导航到 `sagemaker studio`，并从 **功能** 下的结果列表中选择 **SageMaker Studio**。
- en: Important Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This chapter assumes that we are using the `us-west-2`) region when using services
    to manage and create different types of resources. You may use a different region
    but make sure to make any adjustments needed in case certain resources need to
    be transferred to your region of choice.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设我们在使用服务来管理和创建不同类型的资源时使用的是 `us-west-2` 区域。你可以使用不同的区域，但请确保在需要将某些资源转移到你选择的区域时进行任何必要的调整。
- en: Next, click **Studio** under **SageMaker Domain** in the sidebar.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在侧边栏中点击 **SageMaker 域** 下的 **Studio**。
- en: 'Click **Launch app**, as highlighted in the following screenshot. Select **Studio**
    from the list of drop-down options:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **启动应用**，如以下截图所示。从下拉选项中选择 **Studio**：
- en: '![Figure 8.2 – Opening SageMaker Studio ](img/B18638_08_002.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 打开 SageMaker Studio](img/B18638_08_002.jpg)'
- en: Figure 8.2 – Opening SageMaker Studio
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 打开 SageMaker Studio
- en: This will redirect you to SageMaker Studio. Wait a few seconds for the interface
    to load.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将重定向你到 SageMaker Studio。等待几秒钟，直到界面加载。
- en: 'Right-click on the empty space in the **File Browser** sidebar pane to open
    a context menu similar to the following:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **文件浏览器** 侧边栏面板的空白区域右键单击以打开一个类似于以下内容的上下文菜单：
- en: '![Figure 8.3 – Creating a new folder ](img/B18638_08_003.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 创建新的文件夹](img/B18638_08_003.jpg)'
- en: Figure 8.3 – Creating a new folder
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 创建新的文件夹
- en: Select `CH08`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 `CH08`。
- en: Navigate to the **CH08** directory by double-clicking the corresponding folder
    name in the sidebar.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在侧边栏中双击相应的文件夹名称来导航到 **CH08** 目录。
- en: 'Create a new Notebook by clicking the **File** menu and choosing **Notebook**
    from the list of options under the **New** submenu:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **文件** 菜单并从 **新建** 子菜单下的选项列表中选择 **笔记本** 来创建一个新的笔记本：
- en: '![Figure 8.4 – Creating a new Notebook ](img/B18638_08_004.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 创建新的笔记本](img/B18638_08_004.jpg)'
- en: Figure 8.4 – Creating a new Notebook
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 创建新的笔记本
- en: In the preceding screenshot, we can see other options as well, including creating
    a new `.ipynb` Notebook files, which will be used to run the different blocks
    of code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到其他选项，包括创建新的 `.ipynb` 笔记本文件，这些文件将用于运行不同的代码块。
- en: In the `Data Science` (option found under **SageMaker image**)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **SageMaker 图像**（选项）下的 **数据科学**
- en: '`Python 3`'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Python 3`'
- en: '`No script`'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`无脚本`'
- en: Click the **Select** button afterward.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后点击侧边栏中的 **文件浏览器** 空白区域，打开一个类似于以下内容的上下文菜单：
- en: Note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Wait for the kernel to start. This step may take around 3 to 5 minutes while
    an ML instance is being provisioned to run the Jupyter notebook cells.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 等待内核启动。这一步可能需要大约3到5分钟，因为正在配置ML实例以运行Jupyter笔记本单元格。
- en: 'Right-click on the tab’s name, as highlighted in the following screenshot:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击以下截图中突出显示的选项卡名称：
- en: '![Figure 8.5 – Renaming a notebook ](img/B18638_08_005.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 重命名笔记本](img/B18638_08_005.jpg)'
- en: Figure 8.5 – Renaming a notebook
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 重命名笔记本
- en: Select **Rename Notebook…** from the list of options in the context menu.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从上下文菜单中的选项中选择**重命名笔记本…**。
- en: In the `01 - Registering Models to the SageMaker Model Registry.ipynb` under
    **New Name**. Click the **Rename** button afterward.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`01 - Registering Models to the SageMaker Model Registry.ipynb`下的**新名称**中。点击**重命名**按钮。
- en: Now that our notebook is ready, we can proceed with registering pre-trained
    models to SageMaker Model Registry!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在笔记本已经准备好了，我们可以继续将预训练模型注册到SageMaker模型注册表中！
- en: Registering models to SageMaker Model Registry using the boto3 library
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用boto3库将模型注册到SageMaker模型注册表
- en: 'In this section, we will be working with two pre-trained models stored inside
    `.tar.gz` files. We will store and register these models in `.tar.gz` files were
    generated by performing two separate ML training jobs using the **K-Nearest Neighbor**
    and **Linear Learner** built-in algorithms of SageMaker. These models accept *x*
    and *y* values as input and return a predicted *label* value as output. What do
    these *x* and *y* values represent? Let’s take a look:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将处理存储在`.tar.gz`文件中的两个预训练模型。我们将这些模型以`.tar.gz`文件的形式存储和注册，这些文件是通过使用SageMaker的内置算法**K-Nearest
    Neighbor**和**Linear Learner**执行两个单独的ML训练作业生成的。这些模型接受*x*和*y*值作为输入，并返回一个预测的*标签*值作为输出。这些*x*和*y*值代表什么？让我们看看：
- en: '![Figure 8.6 – Predicting the preferred vaccination site ](img/B18638_08_006.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 预测首选疫苗接种点](img/B18638_08_006.jpg)'
- en: Figure 8.6 – Predicting the preferred vaccination site
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 预测首选疫苗接种点
- en: As shown in the preceding screenshot, these *x* and *y* values correspond to
    transformed and scaled coordinate values where certain members of the population
    reside using a specified point in the map as a reference. During the first vaccination
    run, several of these members selected their preferred vaccination site. These
    vaccination sites are tagged with the appropriate *label* value – *0*, *1*, and
    *2*. Using previous vaccination site data as our training data, we were able to
    generate two models that can automatically predict the preferred vaccination site
    for unvaccinated members, given a set of coordinate values – that is, *x* and
    *y*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，这些*x*和*y*值对应于变换和缩放后的坐标值，这些坐标值表示人口中某些成员的位置，使用地图中的指定点作为参考。在第一次疫苗接种运行期间，这些成员中的几个选择了他们首选的疫苗接种点。这些疫苗接种点被标记为适当的*标签*值
    – *0*、*1*和*2*。使用之前的疫苗接种点数据作为我们的训练数据，我们能够生成两个模型，这些模型可以自动预测未接种疫苗的成员的首选疫苗接种点，给定一组坐标值
    – 即*x*和*y*。
- en: 'Follow these steps to download the artifacts of the two pre-trained models
    mentioned and register these in SageMaker Model Registry in the `01 - Registering
    Models to the SageMaker Model Registry.ipynb` Notebook we prepared in the previous
    section:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤下载提到的两个预训练模型的工件，并在我们之前章节中准备的`01 - Registering Models to the SageMaker
    Model Registry.ipynb`笔记本中的SageMaker模型注册表中注册这些模型：
- en: 'We will start by downloading the pre-trained model artifacts to the `tmp` directory
    using the `wget` command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用`wget`命令开始下载预训练模型工件到`tmp`目录：
- en: '[PRE0]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we downloaded two `.tar.gz` files:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们下载了两个`.tar.gz`文件：
- en: '`knn.model.tar.gz`: This contains the model artifacts for the pre-trained **K-Nearest
    Neighbor** model'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`knn.model.tar.gz`：此文件包含预训练的**K-Nearest Neighbor**模型的模型工件'
- en: '`ll.model.tar.gz`: This contains the model artifacts for the pre-trained **Linear
    Learner** model'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ll.model.tar.gz`：此文件包含预训练的**Linear Learner**模型的模型工件'
- en: 'Specify a unique S3 bucket name and prefix. Make sure that you replace the
    value of `<INSERT S3 BUCKET HERE>` with a unique S3 bucket name before running
    the following block of code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定一个唯一的S3存储桶名称和前缀。确保在运行以下代码块之前，将`<INSERT S3 BUCKET HERE>`的值替换为一个唯一的S3存储桶名称：
- en: '[PRE4]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Make sure that you specify a bucket name for an S3 bucket that does *NOT* exist
    yet. If you want to reuse one of the buckets you created in the previous chapters,
    you may do so, but make sure to use an S3 bucket in the same region where **SageMaker
    Studio** is set up and configured.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你指定一个尚不存在的S3存储桶的桶名。如果你想重用之前章节中创建的其中一个存储桶，你可以这样做，但请确保使用与**SageMaker Studio**设置和配置相同的区域的S3存储桶。
- en: 'Let’s create the S3 bucket where we will upload the `ll.model.tar.gz` and `knn.model.tar.gz`
    files we downloaded earlier:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个S3存储桶，我们将上传之前下载的`ll.model.tar.gz`和`knn.model.tar.gz`文件：
- en: '[PRE6]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can skip this step if you are planning to reuse one of the existing S3 buckets
    you created in the previous chapters.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划重用之前章节中创建的现有S3存储桶，则可以跳过此步骤。
- en: 'Now that our S3 bucket is ready, let’s prepare the S3 paths so that they point
    to where we will upload the pre-trained model artifacts:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了S3存储桶，让我们准备S3路径，以便它们指向我们将上传预训练模型工件的位置：
- en: '[PRE7]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that at this point, the `ll.model.tar.gz` and `knn.model.tar.gz` files
    do not exist yet in the specified S3 paths stored in the `ll_model_data` and `knn_model_data`
    variables. Here, we are simply preparing the S3 location paths (string) where
    the `.tar.gz` files will be uploaded.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在此阶段，存储在`ll_model_data`和`knn_model_data`变量中的指定S3路径中尚不存在`ll.model.tar.gz`和`knn.model.tar.gz`文件。在这里，我们只是在准备`.tar.gz`文件将要上传的S3位置路径（字符串）。
- en: 'Now, let’s use the `aws s3 cp` command to copy and upload the `.tar.gz` files
    to their corresponding S3 locations:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用`aws s3 cp`命令来复制和上传`.tar.gz`文件到它们对应的S3位置：
- en: '[PRE11]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will upload the `ll.model.tar.gz` and `knn.model.tar.gz` files from the
    `tmp` directory to the S3 bucket.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把`ll.model.tar.gz`和`knn.model.tar.gz`文件从`tmp`目录上传到S3存储桶。
- en: 'With the pre-trained model artifacts already in S3, let’s proceed with getting
    the ECR container image URI of the ML algorithms used to train these models. We’ll
    use the `retrieve()` function to get the image URIs for the **Linear Learner**
    and **K-Nearest Neighbor** algorithms:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预训练模型工件已存放在S3中，让我们继续获取用于训练这些模型的ML算法的ECR容器镜像URI。我们将使用`retrieve()`函数获取**线性学习器**和**K-最近邻**算法的镜像URI：
- en: '[PRE13]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Initialize the `boto3` client for SageMaker. We will use this client to call
    several SageMaker APIs, which will help us create model packages and model package
    groups in the succeeding set of steps:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化SageMaker的`boto3`客户端。我们将使用此客户端调用几个SageMaker API，这将帮助我们创建模型包和模型包组：
- en: '[PRE24]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, define the `generate_random_string()` function:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义`generate_random_string()`函数：
- en: '[PRE26]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '*What’s this for?* We will use the `generate_random_string()` function when
    creating new resources (in the succeeding set of steps). This will help us generate
    a random identifier or label for each of the resources we will create.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*这是为了什么？* 我们将在创建新资源（在后续步骤中）时使用`generate_random_string()`函数。这将帮助我们为我们将要创建的每个资源生成一个随机的标识符或标签。'
- en: 'With the `generate_random_string()` function ready, let’s generate a random
    `group_id` value. This will be used to generate a *package group name* (`package_group_name`)
    and a *package group description* (`package_group_desc`). Then, we will create
    the *model package group* using the `create_model_package_group()` method of the
    boto3 client:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着`generate_random_string()`函数就绪，让我们生成一个随机的`group_id`值。这将用于生成一个*包组名称*（`package_group_name`）和一个*包组描述*（`package_group_desc`）。然后，我们将使用boto3客户端的`create_model_package_group()`方法创建*模型包组*：
- en: '[PRE33]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, let’s define the `prepare_inference_specs()` function, which we will
    use to configure and set up our model package in the next step:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义`prepare_inference_specs()`函数，我们将使用它来配置和设置我们的模型包，在下一步中：
- en: '[PRE42]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Here, we created a function that prepares and returns the necessary nested configuration
    structure using the *ECR container image URI* and the *model artifact S3 path*
    as input parameters.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个函数，该函数使用*ECR容器镜像URI*和*模型工件S3路径*作为输入参数，准备并返回必要的嵌套配置结构。
- en: 'Next, let’s define a custom function called `create_model_package()`. This
    function accepts several input parameter values, such as the following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义一个名为`create_model_package()`的自定义函数。此函数接受多个输入参数值，如下所示：
- en: The **Amazon Resource Name** (**ARN**) *of the model package group*
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型包组的**Amazon资源名称**（**ARN**）
- en: The *inference specification configuration*
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*这是为了什么？* 我们将在创建新资源（在后续步骤中）时使用`generate_random_string()`函数。这将帮助我们为我们将要创建的每个资源生成一个随机的标识符或标签。'
- en: '(Optional) The `boto3` client for SageMaker:'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）SageMaker的`boto3`客户端：
- en: '[PRE57]'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Here, we automatically set the `ModelApprovalStatus` value to `Approved` upon
    creating the model package. Note that we have the option to set the value to `PendingManualApproval`
    first before transitioning it to `Approved`. However, we will simplify things
    a bit and directly set the value to `Approved`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建模型包时，我们自动将 `ModelApprovalStatus` 的值设置为“已批准”。请注意，我们可以在将其转换为“已批准”之前先将其设置为“待手动批准”。然而，我们将简化一些事情，直接将值设置为“已批准”。
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The approval status of the model can be used to tag and identify which models
    are ready to be deployed to a production endpoint. Ideally, ML models are evaluated
    and manually approved first before being deployed. If the model passes the evaluation
    step, we can set the approval status to `Approved`. Otherwise, we set the status
    to `Rejected`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的批准状态可以用来标记和识别哪些模型已准备好部署到生产端点。理想情况下，ML 模型在部署之前先进行评估和手动批准。如果模型通过了评估步骤，我们可以将批准状态设置为“已批准”。否则，我们将状态设置为“已拒绝”。
- en: 'Use the `prepare_inference_specs()` function to prepare the prerequisite inference
    specification configuration for both the **K-Nearest Neighbor** and **Linear Learner**
    model packages:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `prepare_inference_specs()` 函数为 **K-Nearest Neighbor** 和 **Linear Learner**
    模型包准备必要的推理规范配置：
- en: '[PRE71]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'With the inference specification configurations ready, let’s use `create_model_package()`
    to create the model packages:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推理规范配置就绪后，让我们使用 `create_model_package()` 来创建模型包：
- en: '[PRE79]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Finally, let’s use the `%store` magic from IPython to store the variable values
    for `knn_package_arn`, `ll_package_arn`, `s3_bucket`, and `prefix`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用 IPython 的 `%store` 魔法来存储 `knn_package_arn`、`ll_package_arn`、`s3_bucket`
    和 `prefix` 的变量值：
- en: '[PRE87]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: We will use these stored variable values in the succeeding sections of this
    chapter.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后续部分使用这些存储的变量值。
- en: At this point, two model packages have been created and are ready for use.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，已经创建了两个模型包，并准备好使用。
- en: Note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may use `client.list_model_package_groups()` and `client.list_model_packages(ModelPackageGroupName='<INSERT
    GROUP NAME>')` to check the list of registered model package groups and model
    packages. We will leave this to you as an exercise!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `client.list_model_package_groups()` 和 `client.list_model_packages(ModelPackageGroupName='<INSERT
    GROUP NAME>')` 来检查已注册的模型包组和模型包列表。我们将把这个留给你作为练习！
- en: Deploying models from SageMaker Model Registry
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 SageMaker 模型注册表中部署模型
- en: 'There are many possible next steps available after an ML model has been registered
    to a model registry. In this section, we will focus on deploying the first registered
    ML model (pre-trained **K-Nearest Neighbor** model) manually to a new inference
    endpoint. After the first registered ML model has been deployed, we will proceed
    with deploying the second registered model (pre-trained **Linear Learner** model)
    in the same endpoint where the first ML model has been deployed, similar to what’s
    shown in the following diagram:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ML 模型已注册到模型注册表之后，有许多可能的后续步骤。在本节中，我们将重点关注手动将第一个注册的 ML 模型（预训练的 **K-Nearest Neighbor**
    模型）部署到新的推理端点。在第一个注册的 ML 模型部署后，我们将继续在第一个 ML 模型已部署的相同端点部署第二个注册的模型（预训练的 **Linear
    Learner** 模型），类似于以下图中所示：
- en: '![Figure 8.7 – Deploying models from the model registry   ](img/B18638_08_007.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 从模型注册表中部署模型   ](img/B18638_08_007.jpg)'
- en: Figure 8.7 – Deploying models from the model registry
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 从模型注册表中部署模型
- en: Here, we can see that we can directly replace the deployed ML model inside a
    running ML inference endpoint without creating a new separate inference endpoint.
    This means that we do not need to worry about changing the “target infrastructure
    server” in our setup since the model replacement operation is happening behind
    the scenes. At the same time, SageMaker has already automated this process for
    us, so all we need to do is call the right APIs to initiate this process.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们可以直接替换运行中的 ML 推理端点内的已部署 ML 模型，而无需创建一个新的单独的推理端点。这意味着我们不需要担心更改我们设置中的“目标基础设施服务器”，因为模型替换操作是在幕后进行的。同时，SageMaker
    已经为我们自动化了这个过程，所以我们只需要调用正确的 API 来启动这个过程。
- en: 'Here, we will continue where we left off in the *Registering models to SageMaker
    Model Registry* section and deploy the two registered models to an ML inference
    endpoint. That said, we will perform the following set of steps:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将继续在 *将模型注册到 SageMaker 模型注册表* 部分留下的工作，并将两个注册的模型部署到 ML 推理端点。也就是说，我们将执行以下步骤：
- en: Create a new Notebook by clicking the **File** menu and choosing **Notebook**
    from the list of options under the **New** submenu.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**文件**菜单并从**新建**子菜单下的选项列表中选择**笔记本**来创建一个新的笔记本。
- en: Note
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we will be creating the new notebook inside the `CH08` directory beside
    the `01 - Registering Models to the SageMaker Model Registry.ipynb` notebook file
    we worked with in the previous section.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将在与上一节中使用的`01 - Registering Models to the SageMaker Model Registry.ipynb`笔记本文件相邻的`CH08`目录内创建新的笔记本。
- en: In the `Data Science` (option found under **SageMaker image**)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SageMaker图像**下的**数据科学**（选项）
- en: '`Python 3`'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Python 3`'
- en: '`No script`'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`无脚本`'
- en: Click the **Select** button afterward.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**选择**按钮。
- en: Right-click on the tab name of the new Notebook and select `02 - Deploying Models
    from the SageMaker Model Registry.ipynb` under **New Name**. Click the **Rename**
    button.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击新笔记本标签页的名称，在**新名称**下选择**SageMaker图像**下的**数据科学**选项。点击**重命名**按钮。
- en: 'Now that we have the new notebook ready, let’s continue by loading the values
    of the stored variables for `knn_package_arn` and `ll_package_arn` using the `%store`
    magic from IPython:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了新的笔记本，让我们继续通过使用IPython的`%store`魔法来加载存储变量`knn_package_arn`和`ll_package_arn`的值：
- en: '[PRE91]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Let’s initialize a `ModelPackage` instance using the following block of code:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下代码块初始化一个`ModelPackage`实例：
- en: '[PRE93]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Here, we passed the *IAM execution role*, *K-Nearest Neighbor model package
    ARN*, and the `Session` instance when initializing the `ModelPackage` instance.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们初始化`ModelPackage`实例时传递了*IAM执行角色*、*K-Nearest Neighbor模型包ARN*和`Session`实例。
- en: 'Now that we have initialized the `ModelPackage` instance, we will call its
    `deploy()` method to deploy the pre-trained model to a real-time inference endpoint:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经初始化了`ModelPackage`实例，我们将调用它的`deploy()`方法将预训练模型部署到实时推理端点：
- en: '[PRE105]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Since we set the `predictor_class` attribute in the previous step to `Predictor`,
    the `deploy()` method will return a `Predictor` instance instead of `None`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在上一步中将`predictor_class`属性设置为`Predictor`，因此`deploy()`方法将返回一个`Predictor`实例而不是`None`。
- en: Note
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Model deployment should take around 5 to 10 minutes to complete. Feel free to
    grab a cup of coffee or tea!
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 模型部署应大约需要5到10分钟才能完成。您可以随意拿一杯咖啡或茶！
- en: 'Once our ML inference endpoint is ready, we will perform a sample prediction
    using the `predict()` method of the `Predictor` instance to test our setup:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的ML推理端点准备就绪，我们将使用`Predictor`实例的`predict()`方法执行一个样本预测来测试我们的设置：
- en: '[PRE113]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'This should yield an output value equal or similar to `{''predictions'': [{''predicted_label'':
    2.0}]}`.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '这应该产生一个等于或类似`{''predictions'': [{''predicted_label'': 2.0}]}`的输出值。'
- en: 'Next, let’s define the `process_prediction_result()` function:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义`process_prediction_result()`函数：
- en: '[PRE121]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: This will extract the `label` value from the nested structure returned by the
    `predict()` method of the `Predictor` instance. Of course, the code in the function
    assumes that we will only be passing one payload at a time when calling the `predict()`
    method.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从`Predictor`实例的`predict()`方法返回的嵌套结构中提取`label`值。当然，函数中的代码假设我们在调用`predict()`方法时每次只传递一个有效负载。
- en: 'Let’s define a custom `predict()` function that accepts the input `x` and `y`
    values, along with an optional `Predictor` instance parameter value:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个自定义的`predict()`函数，该函数接受输入`x`和`y`值，以及可选的`Predictor`实例参数值：
- en: '[PRE124]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Let’s test our custom `predict()` function using a set of sample values for
    `x` and `y`:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用一组`x`和`y`的样本值来测试我们的自定义`predict()`函数：
- en: '[PRE136]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: This should return the predicted `label` value equal to or similar to `1.0`.
    *How do we interpret this result?* The customer who lives in a location represented
    with the specified input `x` and `y` values would probably go to the vaccination
    site tagged with the label `1` (that is, the second vaccination site).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回一个预测的`label`值等于或类似`1.0`。*我们如何解释这个结果？*居住在由指定的输入`x`和`y`值表示的位置的客户可能会去标记为`1`（即第二个疫苗接种点）的疫苗接种点。
- en: Note
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to modify the `process_prediction_result()` function to convert the
    type of the resulting predicted `label` value into an *integer* instead of a *float*.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以修改`process_prediction_result()`函数，将结果预测`label`值的类型转换为*整数*而不是*浮点数*。
- en: 'Next, let’s define the `test_different_values()` function:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义`test_different_values()`函数：
- en: '[PRE137]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Here, we just call our custom `predict()` function multiple times (with a 200-millisecond
    delay between each prediction request) using different combinations of values
    for *x* and *y*.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们只是多次调用我们的自定义 `predict()` 函数（每次预测请求之间有 200 毫秒的延迟）使用 *x* 和 *y* 的不同值组合。
- en: 'Before proceeding, let’s check if our `test_different_values()` function is
    working as expected:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行下一步之前，让我们检查我们的 `test_different_values()` 函数是否按预期工作：
- en: '[PRE148]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: This should show us the predicted `label` values given the different combinations
    of *x* and *y*.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会显示给定 *x* 和 *y* 的不同组合的预测 `label` 值。
- en: 'Next, let’s define a custom `create_model()` function that makes use of the
    `create_model()` method of the boto3 client to work with the SageMaker API:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义一个自定义的 `create_model()` 函数，该函数使用 boto3 客户端的 `create_model()` 方法与 SageMaker
    API 一起工作：
- en: '[PRE149]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Let’s define the `generate_random_string()` function, which we will use to
    generate a random model name. After that, we will call the custom `create_model()`
    function we defined in the previous step, passing the model package ARN of our
    **Linear Learner** model along with the generated model name:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义 `generate_random_string()` 函数，我们将使用它来生成一个随机的模型名称。之后，我们将调用之前步骤中定义的自定义 `create_model()`
    函数，传递我们 **Linear Learner** 模型的模型包 ARN 以及生成的模型名称：
- en: '[PRE164]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Next, let’s define the `create_endpoint_config()` function:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义 `create_endpoint_config()` 函数：
- en: '[PRE176]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: This function simply makes use of the `create_endpoint_config()` method of the
    boto3 client for SageMaker to prepare the desired endpoint configuration.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数简单地使用 boto3 客户端的 `create_endpoint_config()` 方法为 SageMaker 准备所需的端点配置。
- en: 'Using the `create_endpoint_config()` function we defined in the previous step,
    let’s create a SageMaker ML inference endpoint configuration:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在上一步中定义的 `create_endpoint_config()` 函数，让我们创建一个 SageMaker ML 推理端点配置：
- en: '[PRE191]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'Now, let’s update the endpoint configuration using the `update_endpoint()`
    method:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `update_endpoint()` 方法更新端点配置：
- en: '[PRE196]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Here, we used the endpoint configuration we created in the previous step.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了之前步骤中创建的端点配置。
- en: Important Note
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '*What’s going to happen here?* Once we call the `update_endpoint()` method,
    SageMaker will perform the needed steps behind the scenes to update the endpoint
    and replace the old, deployed model (**K-Nearest Neighbor**) with the new model
    (**Linear Learner**) specified in the latest endpoint configuration. Note that
    this is just one of the possible solutions we can implement using the **SageMaker
    Python SDK** and the **boto3** library. Other possible deployment solutions include
    **multi-model endpoints**, **A/B testing** endpoint setups, endpoints using an
    **inference pipeline model**, and more! We won’t dive deep into these other variations
    and solutions, so feel free to check the deployment recipes found in the book
    *Machine Learning with Amazon SageMaker Cookbook*.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '*这里会发生什么？* 一旦我们调用 `update_endpoint()` 方法，SageMaker 将在幕后执行所需的步骤来更新端点，并用最新端点配置中指定的模型（**K-Nearest
    Neighbor**）替换旧的已部署模型（**Linear Learner**）。请注意，这只是我们可以使用 **SageMaker Python SDK**
    和 **boto3** 库实现的可能解决方案之一。其他可能的部署解决方案包括 **多模型端点**、**A/B 测试**端点设置、使用 **推理管道模型**
    的端点等等！我们不会深入探讨这些其他变体和解决方案，所以请随意查看书中 *Machine Learning with Amazon SageMaker Cookbook*
    中找到的部署食谱。'
- en: 'Before proceeding with the next set of steps, let’s wait 5 minutes using the
    following block of code:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行下一组步骤之前，让我们使用以下代码块等待 5 分钟：
- en: '[PRE200]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Here, we used the `sleep()` function, which accepts an input value equal to
    the number of seconds we want our code to wait or sleep.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用了 `sleep()` 函数，它接受一个等于我们希望代码等待或休眠的秒数的输入值。
- en: Note
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We use the `sleep()` function to wait for 5 minutes to ensure that the update
    endpoint operation has been completed already (assuming that it takes approximately
    5 minutes or less to complete).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `sleep()` 函数等待 5 分钟以确保更新端点操作已经完成（假设它需要大约 5 分钟或更少的时间来完成）。
- en: 'Initialize a `Predictor` object and attach it to the existing ML inference
    endpoint we prepared earlier in this section:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个 `Predictor` 对象并将其附加到本节之前准备好的现有 ML 推理端点：
- en: '[PRE202]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'Let’s test our setup by making a prediction using a sample payload:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过使用样本有效载荷进行预测来测试我们的设置：
- en: '[PRE208]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'This should yield an output value with a structure similar to `{''predictions'':
    [{''score'': [0.04544410854578018, 0.3947080075740814, 0.5598478317260742], ''predicted_label'':
    2}]}`.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '这应该会输出一个类似 `{''predictions'': [{''score'': [0.04544410854578018, 0.3947080075740814,
    0.5598478317260742], ''predicted_label'': 2}]}` 结构的输出值。'
- en: '*How do we interpret this result?* The customer who lives in a location represented
    with the specified input `x` and `y` values (that is, *x* = `1.5` and *y* = `2`)
    has the following probabilities:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们如何解释这个结果？* 位于指定输入`x`和`y`值所代表的位置的客户（即，*x* = `1.5`和*y* = `2`）有以下概率：'
- en: '`4.5%` probability of going to the first vaccination site (label = 0)'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`4.5%` 前往第一个疫苗接种点的概率（标签 = 0）'
- en: '`39.5%` probability of going to the second vaccination site (label = 1)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`39.5%` 前往第二个疫苗接种点的概率（标签 = 1）'
- en: '`56%` probability of going to the third vaccination site (label = 2)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`56%` 前往第三个疫苗接种点的概率（标签 = 2）'
- en: Given that the third vaccination site has the highest probability value, the
    model sets the `predicted_label` value to `2` (given that counting starts at 0).
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 由于第三个疫苗接种点的概率值最高，模型将`predicted_label`值设置为`2`（假设计数从0开始）。
- en: Note
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the deployed **Linear Learner** model returned the *probability scores
    for each class*, along with the *predicted label*, while the **k-nearest neighbor**
    model that we deployed at the start of this section only returned the *predicted
    label*. We need to be careful when replacing a deployed model with a model from
    a different instance family (which may require using a different algorithm container
    image for inference) since the new model may involve a different set of input
    and output structures and values.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，部署的**线性学习器**模型返回了每个类的**概率分数**以及**预测标签**，而我们在本节开头部署的**k最近邻**模型仅返回了**预测标签**。当我们用来自不同实例家族（可能需要使用不同的推理算法容器镜像）的模型替换已部署的模型时，我们需要小心，因为新模型可能涉及不同的输入和输出结构和值。
- en: 'Similar to what we performed earlier on the ML inference endpoint hosting our
    **K-Nearest Neighbor** model, we will perform multiple sample predictions using
    different values of *x* and *y*:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与我们在之前对托管我们的**K-最近邻**模型的机器学习推理端点所执行的操作类似，我们将使用不同的*x*和*y*值进行多次样本预测：
- en: '[PRE216]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'Use the `%store` magic to store the variable value for `endpoint_name`:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`%store`魔法将`endpoint_name`变量的值存储起来：
- en: '[PRE217]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: If you are wondering why we haven’t deleted the ML inference endpoint yet… we
    will reuse this endpoint and use it to demonstrate how to use the model monitoring
    capabilities and features of SageMaker in the very next section!
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想为什么我们还没有删除机器学习推理端点……我们将重用此端点，并在下一节中演示如何使用SageMaker的模型监控功能和特性！
- en: Enabling data capture and simulating predictions
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用数据捕获并模拟预测
- en: 'After an ML model has been deployed to an inference endpoint, its quality needs
    to be monitored and checked so that we can easily perform corrective actions whenever
    quality issues or deviations are detected. This is similar to web application
    development, where even if the quality assurance team has already spent days (or
    weeks) testing the final build of the application, there can still be other issues
    that would only be detected once the web application is running already:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习模型部署到推理端点后，其质量需要被监控和检查，以便我们可以在检测到质量问题时或偏差时轻松采取纠正措施。这类似于Web应用程序开发，即使质量保证团队已经花费了数天（或数周）测试应用程序的最终版本，仍然可能存在其他问题，这些问题只有在Web应用程序运行后才会被发现：
- en: '![Figure 8.8 – Capturing the request and response data of the ML inference
    endpoint ](img/B18638_08_008.jpg)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – 捕获机器学习推理端点的请求和响应数据](img/B18638_08_008.jpg)'
- en: Figure 8.8 – Capturing the request and response data of the ML inference endpoint
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – 捕获机器学习推理端点的请求和响应数据
- en: As shown in the preceding diagram, model monitoring starts by capturing the
    request and response data, which passes through a running ML inference endpoint.
    This collected data is processed and analyzed in a later step using a separate
    automated task or job that can generate reports and flag issues or anomalies.
    If we deployed our ML model in a custom-built web application endpoint, we may
    need to build this data capturing and model monitoring setup ourselves. However,
    if we are using SageMaker, there is no need for us to code anything from scratch
    since we can just utilize the built-in model monitoring capabilities, which just
    need to be enabled and configured.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，模型监控从捕获请求和响应数据开始，这些数据通过正在运行的机器学习推理端点。这些收集到的数据在后续步骤中通过一个单独的自动化任务或作业进行处理和分析，该任务或作业可以生成报告并标记问题或异常。如果我们将在自定义构建的Web应用程序端点部署我们的机器学习模型，我们可能需要自己构建此数据捕获和模型监控设置。然而，如果我们使用SageMaker，我们无需从头编写任何代码，因为我们只需利用内置的模型监控功能，只需启用和配置即可。
- en: Note
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In our “preferred vaccination site prediction” example, the captured data (ideally)
    includes both the input (the *x* and *y* values) and output values (predicted
    *label* value).
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的“首选疫苗接种点预测”示例中，捕获的数据（理想情况下）包括输入（*x*和*y*值）和输出值（预测的*标签*值）。
- en: 'Follow these steps to enable data capture in a running ML inference endpoint
    and simulate inference requests using randomly generated payload values:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤启用运行中的机器学习推理端点的数据捕获，并使用随机生成的有效载荷值模拟推理请求：
- en: Create a new Notebook by clicking the **File** menu and choosing **Notebook**
    from the list of options under the **New** submenu.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**文件**菜单并从**新**子菜单下的选项列表中选择**笔记本**来创建一个新的笔记本。
- en: Note
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we will be creating the new notebook inside the `CH08` directory beside
    the `01 - Registering Models to the SageMaker Model Registry.ipynb` and `02 -
    Deploying Models from the SageMaker Model Registry.ipynb` notebook files we worked
    with in the previous sections in this chapter.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将在`CH08`目录内创建新的笔记本，该目录位于我们之前章节中使用的`01 - Registering Models to the SageMaker
    Model Registry.ipynb`和`02 - Deploying Models from the SageMaker Model Registry.ipynb`笔记本文件旁边。
- en: In the `Data Science` (option found under **SageMaker image**)
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`数据科学`（在**SageMaker镜像**下找到的选项）
- en: '`Python 3`'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Python 3`'
- en: '`No script`'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`无脚本`'
- en: Click the **Select** button afterward.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 之后点击**选择**按钮。
- en: Right-click on the tab name of the new Notebook and select `03 - Enabling Data
    Capture and Simulating Predictions.ipynb` under **New Name**. Click the **Rename**
    button.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击新笔记本标签页的名称，在**新名称**下选择**03 - Enabling Data Capture and Simulating Predictions.ipynb**。点击**重命名**按钮。
- en: 'Now that we have our new notebook ready, let’s use the `%store` magic from
    IPython to load the values of the stored variables for `s3_bucket`, `prefix`,
    `ll_package_arn`, and `endpoint_name`:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了新的笔记本，让我们使用IPython的`%store`魔法来加载存储变量`s3_bucket`、`prefix`、`ll_package_arn`和`endpoint_name`的值：
- en: '[PRE219]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Initialize a `Predictor` object and attach it to the ML inference endpoint
    we prepared in the *Deploying models from SageMaker Model Registry* section of
    this chapter:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个`Predictor`对象并将其附加到本章*从SageMaker模型注册表中部署模型*部分中准备的机器学习推理端点：
- en: '[PRE223]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Next, let’s prepare and initialize the `DataCaptureConfig` instance using the
    following block of code:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用以下代码块准备和初始化`DataCaptureConfig`实例：
- en: '[PRE237]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Here, we specified a `sampling_percentage` value of `100`, which means that
    all of the data will be captured. We also specified, through the `capture_options`
    configuration value, that we are planning to capture both the request and response
    data that passes through the ML inference endpoint.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定了`sampling_percentage`值为`100`，这意味着将捕获所有数据。我们还通过`capture_options`配置值指定，我们计划捕获通过机器学习推理端点传递的请求和响应数据。
- en: 'Now that our configuration is ready, let’s call the `update_data_capture_config()`
    method of the `Predictor` instance:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了配置，让我们调用`Predictor`实例的`update_data_capture_config()`方法：
- en: '[PRE252]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Note
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This should take around 5 to 15 minutes to complete. Feel free to grab a cup
    of coffee or tea!
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该需要大约5到15分钟才能完成。请随意拿一杯咖啡或茶！
- en: 'Use the `%store` magic to store the variable value for `capture_upload_path`:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`%store`魔法存储`capture_upload_path`变量的值：
- en: '[PRE256]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Define the `generate_random_payload()` function:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`generate_random_payload()`函数：
- en: '[PRE257]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Define the `perform_good_input()` and `perform_bad_input()` functions:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`perform_good_input()`和`perform_bad_input()`函数：
- en: '[PRE262]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Important Note
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意
- en: At this point, you might be wondering why we are considering floating-point
    values for the *y* input payload as *bad input*. Note that this is just for demonstration
    purposes since we are planning to configure **SageMaker Model Monitor** to tag
    floating-point input values for *x* and *y* as invalid values while configuring
    the constraints in the *Scheduled Monitoring with SageMaker Model Monitor* section.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能想知道为什么我们考虑将*y*输入有效载荷的浮点值视为*不良输入*。请注意，这只是为了演示目的，因为我们计划在配置*使用SageMaker
    Model Monitor进行计划监控*部分中的约束时，将*x*和*y*的浮点输入值标记为无效值。
- en: Use the `perform_good_input()` function to run a sample inference request containing
    “valid values:”
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`perform_good_input()`函数运行包含“有效值：”的样本推理请求
- en: '[PRE272]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: Use the `perform_bad_input()` function to run a sample inference request containing
    “invalid values:”
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`perform_bad_input()`函数运行包含“无效值：”的样本推理请求
- en: '[PRE273]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: 'Define the `generate_sample_requests()` function, which will alternate between
    calling the `perform_good_input()` and `perform_bad_input()` functions:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`generate_sample_requests()`函数，该函数将在`perform_good_input()`和`perform_bad_input()`函数之间交替调用：
- en: '[PRE274]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'With everything ready, let’s continuously send sample requests to our ML inference
    endpoint using the `generate_sample_requests()` function:'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪后，让我们使用 `generate_sample_requests()` 函数连续发送样本请求到我们的机器学习推理端点：
- en: '[PRE282]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Important Note
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that the last step in this section will continuously send sample inference
    requests every 30 seconds and loop 480 times. We will leave this running and proceed
    with the next section. We should only stop the execution of the `generate_sample_requests()`
    function after completing the *Scheduled monitoring with SageMaker Model Monitor*
    section of this chapter.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，本节最后一步将每30秒连续发送样本推理请求，并循环480次。我们将保持此操作并继续下一节。我们应在完成本章的“使用 SageMaker Model
    Monitor 的计划监控”部分后，才停止执行 `generate_sample_requests()` 函数。
- en: At this point, you might be wondering where the data is stored and how this
    data would be used for analysis. In the next few sections, we will answer these
    questions and provide more details on how model monitoring works in SageMaker.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能想知道数据存储在哪里以及这些数据将如何用于分析。在接下来的几节中，我们将回答这些问题，并提供更多关于 SageMaker 中模型监控工作原理的详细信息。
- en: Scheduled monitoring with SageMaker Model Monitor
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SageMaker Model Monitor 进行计划监控
- en: 'If you have been working in the data science and ML industry for quite some
    time, you probably know that an ML model’s performance after deployment is not
    guaranteed. Deployed models in production must be monitored in real time (or near-real
    time) so that we can potentially replace the deployed model and fix any issues
    once any **drift** or deviation from the expected set of values is detected:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在数据科学和机器学习行业工作了一段时间，你可能知道部署后的机器学习模型性能并不保证。生产环境中的部署模型必须实时（或接近实时）监控，以便我们可以在检测到任何**漂移**或与预期值集合的偏差后，替换已部署的模型并修复任何问题：
- en: '![Figure 8.9 – Analyzing captured data and detecting violations using Model
    Monitor    ](img/B18638_08_009.jpg)'
  id: totrans-483
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – 使用 Model Monitor 分析捕获的数据并检测违规情况](img/B18638_08_009.jpg)'
- en: Figure 8.9 – Analyzing captured data and detecting violations using Model Monitor
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 使用 Model Monitor 分析捕获的数据并检测违规情况
- en: In the preceding diagram, we can see that we can process and analyze the captured
    data through a monitoring (processing) job. This job is expected to generate an
    automated report that can be used to analyze the deployed model and the data.
    At the same time, any detected violations are flagged and reported as part of
    the report.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到我们可以通过监控（处理）作业来处理和分析捕获的数据。这个作业预计将生成一个自动报告，可用于分析已部署的模型和数据。同时，任何检测到的违规情况都会被标记并作为报告的一部分进行报告。
- en: Note
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Let’s say that we have trained an ML model that predicts a professional’s *salary*
    given the professional’s *age*, *number of years of work experience*, *role*,
    and *number of children*. Once the ML model has been deployed to an inference
    endpoint, a variety of applications would then send request data to the ML inference
    endpoint to get the predicted salary value. *What if one of the applications starts
    sending erroneous values?* For example, the value specified for the *number of
    children* in the input payload is negative. Given that it is impossible to have
    a negative number for this field, a monitoring job should flag this violation
    as a **data quality issue**.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经训练了一个机器学习模型，该模型根据专业人士的*年龄*、*工作年限*、*角色*和*子女数量*预测专业人士的*薪水*。一旦机器学习模型部署到推理端点，各种应用程序就会将请求数据发送到机器学习推理端点以获取预测的薪水值。*如果其中一个应用程序开始发送错误值怎么办？*
    例如，输入负载中指定的*子女数量*为负数。鉴于这个字段不可能有负数，监控作业应将此违规情况标记为**数据质量问题**。
- en: In this section, we will configure **SageMaker Model Monitor** to analyze the
    captured data using a scheduled hourly processing job. Once the processing job
    results are ready, we will see that the monitoring job has flagged a violation
    caused by sending “bad input” as part of the payload to the ML inference endpoint
    in the previous section. Model Monitor can be configured to detect violations
    concerning **data quality**, **model quality**, **bias drift**, and **feature
    attribution drift**. In the hands-on solutions in this section, we will only focus
    on detecting violations concerning data quality. However, detecting the other
    types of drifts and violations should follow a similar set of steps, which will
    be presented in a bit.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置 **SageMaker Model Monitor** 以使用计划每小时的处理作业分析捕获的数据。一旦处理作业的结果准备好，我们将看到监控作业已经标记了由于在上一节中将“不良输入”作为有效负载的一部分发送到机器学习推理端点而引起的违规。Model
    Monitor 可以配置为检测关于 **数据质量**、**模型质量**、**偏差漂移** 和 **特征归因漂移** 的违规。在本节的动手实践中，我们只会关注检测关于数据质量的违规。然而，检测其他类型的漂移和违规应遵循类似的步骤，这些步骤将在稍后介绍。
- en: 'Follow these steps to configure **SageMaker Model Monitor** to run a monitoring
    job every hour and analyze the captured data that passed through the ML inference
    endpoint:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置 **SageMaker Model Monitor** 以每小时运行一次监控作业并分析通过机器学习推理端点传递的捕获数据：
- en: Create a new Notebook by clicking the **File** menu and choosing **Notebook**
    from the list of options under the **New** submenu.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **文件** 菜单并从 **新建** 子菜单下的选项列表中选择 **笔记本** 来创建一个新的笔记本。
- en: Note
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we will be creating the new notebook inside the `CH08` directory beside
    the other notebook files we created in the previous sections of this chapter.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将在这个章节的上一节中创建的其他笔记本文件旁边的 `CH08` 目录中创建新的笔记本。
- en: In the `Data Science` (option found under **SageMaker image**)
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `数据科学`（在 **SageMaker 图像** 下找到的选项）
- en: '`Python 3`'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Python 3`'
- en: '`No script`'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`无脚本`'
- en: Click the **Select** button afterward.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **选择** 按钮。
- en: Right-click on the tab name of the new Notebook and select `04 - Scheduled Monitoring
    with SageMaker Model Monitor.ipynb` under **New Name**. Click the **Rename** button
    afterward.
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击新笔记本标签页的名称，在 **新建名称** 下选择 **04 - 使用 SageMaker Model Monitor 进行计划监控.ipynb**。之后点击
    **重命名** 按钮。
- en: 'Now that we have our new notebook ready, let’s use the `%store` magic from
    IPython to load the values of the stored variables for `s3_bucket`, `prefix`,
    `ll_package_arn`, `endpoint_name`, and `ll_package_arn`:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了新的笔记本，让我们使用 IPython 的 `%store` 魔法命令来加载存储变量 `s3_bucket`、`prefix`、`ll_package_arn`、`endpoint_name`
    和 `ll_package_arn` 的值：
- en: '[PRE283]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: 'Initialize a `Predictor` object and attach it to the ML inference endpoint
    we deployed in the *Deploying models from SageMaker Model Registry* section:'
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个 `Predictor` 对象并将其附加到我们在 *从 SageMaker Model Registry 部署模型* 部分部署的机器学习推理端点：
- en: '[PRE288]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: 'Download the `baseline.csv` file using the `wget` command:'
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `wget` 命令下载 `baseline.csv` 文件：
- en: '[PRE298]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: Note
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: What’s the `baseline.csv` file for? This CSV file will later serve as the **baseline
    dataset** that will be used by **SageMaker Model Monitor** as a “reference” to
    check for drifts and issues with the captured data.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '`baseline.csv` 文件是做什么用的？此 CSV 文件将作为后续使用的 **基线数据集**，供 **SageMaker Model Monitor**
    作为检查捕获数据漂移和问题的“参考”。'
- en: 'Let’s also prepare the S3 path location where we will store the baseline analysis
    output files:'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也准备 S3 路径位置，我们将在此处存储基线分析输出文件：
- en: '[PRE301]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'Use the `aws s3 cp` command to upload the `baseline.csv` file from the `tmp`
    directory to the S3 target location stored in `baseline_source_uri`:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `aws s3 cp` 命令将 `baseline.csv` 文件从 `tmp` 目录上传到存储在 `baseline_source_uri` 中的
    S3 目标位置：
- en: '[PRE304]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: 'Initialize and configure the `DefaultModelMonitor` instance using the following
    block of code:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块初始化和配置 `DefaultModelMonitor` 实例：
- en: '[PRE305]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: Here, we configured `ml.m5.large` instance when processing the captured data.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们配置了 `ml.m5.large` 实例来处理捕获的数据。
- en: Note
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To monitor the deployed ML model and the data passing through the inference
    endpoint, `monitor_dict` correspond to the configuration of the SageMaker Processing
    jobs for monitoring the ML model and the data.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 为了监控部署的机器学习模型和通过推理端点传递的数据，`monitor_dict` 对应于 SageMaker Processing 作业的配置，用于监控机器学习模型和数据。
- en: 'Let’s run the baselining job using the following block of code:'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块运行基线作业：
- en: '[PRE316]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: Here, we used the `baseline.csv` file as a reference for the expected properties
    of the data that will pass through the ML inference endpoint. Let’s say that one
    of the columns in the `baseline.csv` file only contains positive integers. Using
    this CSV file as the baseline, we would be able to configure **SageMaker Model
    Monitor** to flag negative or floating-point input values (for the said column
    or feature) as “bad input.”
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `baseline.csv` 文件作为参考，以了解将通过 ML 推理端点传递的数据的预期属性。假设 `baseline.csv` 文件中的一个列只包含正整数。使用这个
    CSV 文件作为基线，我们可以配置 **SageMaker Model Monitor** 来标记（对于该列或特征）负数或浮点输入值作为“坏输入。”
- en: Note
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Of course, detecting the violations and issues is only half the story. Fixing
    the issue would be the other half.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，检测违规和问题是故事的一半。解决问题将是另一半。
- en: 'Define a custom `flatten()` function, which will help us inspect and view a
    dictionary object in a DataFrame:'
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个自定义的 `flatten()` 函数，这将帮助我们检查和查看 DataFrame 中的字典对象：
- en: '[PRE330]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'Let’s the check statistics report generated by the baselining job:'
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查基线作业生成的统计报告：
- en: '[PRE334]'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'This should yield a DataFrame similar to the following:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生一个类似于以下 DataFrame：
- en: '![Figure 8.10 – DataFrame containing the baseline statistics ](img/B18638_08_010.jpg)'
  id: totrans-571
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 包含基线统计的 DataFrame](img/B18638_08_010.jpg)'
- en: Figure 8.10 – DataFrame containing the baseline statistics
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 包含基线统计的 DataFrame
- en: Here, we can see the `inferred_type` values for each of the columns of the `baseline.csv`
    file, along with the other statistics values.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 `baseline.csv` 文件中每一列的 `inferred_type` 值，以及其他统计值。
- en: 'Next, let’s review the suggested constraints prepared by the baselining job:'
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们回顾基线作业准备的推荐约束：
- en: '[PRE338]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: 'This should give us a DataFrame of values similar to the following:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给我们一个类似于以下值的 DataFrame：
- en: '![Figure 8.11 – DataFrame with the suggested constraints of each of the features
    ](img/B18638_08_011.jpg)'
  id: totrans-579
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 包含每个特征建议约束的 DataFrame](img/B18638_08_011.jpg)'
- en: Figure 8.11 – DataFrame with the suggested constraints of each of the features
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 包含每个特征建议约束的 DataFrame
- en: Here, we can see the constraints recommended by the baselining job after analyzing
    the baseline dataset used.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到基线数据集分析后推荐的约束。
- en: Note
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These (suggested) constraints will be used later by the `a` in the baseline
    dataset has a constraint where it should contain integer values only, then the
    processing jobs will flag if the captured data contains records, where the column
    `a` value is a floating-point number.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 这些（建议的）约束将在后续的 `a` 中使用，基线数据集有一个约束，其中它应该只包含整数值，那么处理作业将标记如果捕获的数据包含记录，其中列 `a` 的值是浮点数。
- en: 'Next, we will modify the constraints for columns `a` and `b` (containing the
    input *x* and *y* values) and assume that the valid values for these are of the
    integer type instead of float or decimal:'
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将修改 `a` 和 `b` 列（包含输入 *x* 和 *y* 值）的约束，并假设这些有效值是整型而不是浮点型或十进制型：
- en: '[PRE341]'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: Once the hourly processing job analyzes the captured data, **SageMaker Model
    Monitor** will flag the payloads containing floating-point *y* values as “bad
    input.”
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦每小时处理作业分析了捕获的数据，**SageMaker Model Monitor** 将标记包含浮点 *y* 值的有效载荷为“坏输入。”
- en: Important Note
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意
- en: What happens if we change the `inferred_type` values for columns `a` and `b`
    (containing the *x* and *y* values, respectively) of the suggested constraints
    to `'Fractional'` instead of `'Integral'`? Since the payload values generated
    by the `generate_sample_requests()` function in the *Enabling data capture and
    simulating predictions* section involve a combination of integer and floating-point
    values, **SageMaker Model Monitor** will tag all input request payloads as “good
    input” and it will not report any detected violations.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将建议约束中 `a` 和 `b` 列（分别包含 *x* 和 *y* 值）的 `inferred_type` 值从 `'Integral'` 改为
    `'Fractional'` 会发生什么？由于 *启用数据捕获和模拟预测* 部分中 `generate_sample_requests()` 函数生成的有效载荷值涉及整数和浮点值的组合，**SageMaker
    Model Monitor** 将标记所有输入请求有效载荷为“好输入”，并且它不会报告任何检测到的违规行为。
- en: 'Let’s define the `generate_label()` function, which will help us generate a
    random string label for the monitoring schedule name in a later step:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义 `generate_label()` 函数，这将帮助我们生成一个随机字符串标签，用于后续步骤中的监控计划名称：
- en: '[PRE344]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: 'Let’s load the baseline statistics and suggested constraints using the `baseline_statistics()`
    and `suggested_constraints()` methods, respectively:'
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用 `baseline_statistics()` 和 `suggested_constraints()` 方法分别加载基线统计和推荐约束：
- en: '[PRE353]'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: 'Let’s prepare the **cron expression** that we will use to configure the monitoring
    job to run once every hour in a later step:'
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后续步骤中，我们将准备用于配置监控作业每小时运行一次的 **cron 表达式**：
- en: '[PRE356]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE356]'
- en: Note
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more details on other supported **cron expressions**, feel free to check
    out [https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-schedule-expression.xhtml](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-schedule-expression.xhtml).
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 有关其他支持的 **cron 表达式**的更多详细信息，请查阅 [https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-schedule-expression.xhtml](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-schedule-expression.xhtml)。
- en: 'With the prerequisites ready, let’s create the monitoring schedule using the
    `create_monitoring_schedule()` method of the `DefaultModelMonitor` instance:'
  id: totrans-609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备好先决条件后，让我们使用 `DefaultModelMonitor` 实例的 `create_monitoring_schedule()` 方法创建监控计划：
- en: '[PRE357]'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-615
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: After running this block of code, `schedule` that runs a **SageMaker Processing**
    job (once every hour) that processes and monitors the data that’s been captured.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码块后，`schedule` 将运行一个 **SageMaker Processing** 作业（每小时运行一次），处理并监控已捕获的数据。
- en: Note
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you encounter deprecation warnings or issues when using `predictor.endpoint`,
    you may replace it with `predictor.endpoint_name` instead. For more information
    on deprecations (along with breaking and non-breaking changes) when using version
    2.x of the **SageMaker Python SDK**, feel free to check out [https://sagemaker.readthedocs.io/en/stable/v2.xhtml](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-schedule-expression.xhtml).
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 `predictor.endpoint` 时遇到弃用警告或问题，你可以用 `predictor.endpoint_name` 来替换它。有关使用
    SageMaker Python SDK 2.x 版本时的弃用信息（包括破坏性和非破坏性更改），请查阅 [https://sagemaker.readthedocs.io/en/stable/v2.xhtml](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-schedule-expression.xhtml)。
- en: 'Let’s quickly inspect the monitor’s schedule properties:'
  id: totrans-625
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速检查监控计划的属性：
- en: '[PRE369]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: 'This should yield a DataFrame similar to the following:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该生成一个类似于以下 DataFrame：
- en: '![Figure 8.12 – DataFrame describing the properties of the monitoring schedule
    ](img/B18638_08_012.jpg)'
  id: totrans-628
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 描述监控计划属性的 DataFrame](img/B18638_08_012.jpg)'
- en: Figure 8.12 – DataFrame describing the properties of the monitoring schedule
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 描述监控计划属性的 DataFrame
- en: Here, we can see that the `MonitoringScheduleStatus` value is still `Pending`.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 `MonitoringScheduleStatus` 的值仍然是 `Pending`。
- en: 'Use the `sleep()` function to wait for 5 minutes before executing the next
    cell:'
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `sleep()` 函数等待 5 分钟后再执行下一个单元格：
- en: '[PRE370]'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: Note
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Here, we wait for a few minutes while the monitoring schedule is being created
    (assuming it is created in 5 minutes).
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，我们等待几分钟，直到监控计划创建完成（假设在 5 分钟内完成）。
- en: 'Test and load the initial set of values for the monitor’s constraint violations
    and statistics using the `latest_monitoring_constraint_violations()` and `latest_monitoring_statistics()`
    methods of the `DefaultModelMonitor` instance:'
  id: totrans-636
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `DefaultModelMonitor` 实例的 `latest_monitoring_constraint_violations()` 和 `latest_monitoring_statistics()`
    方法测试和加载监控约束违规和统计的初始值集：
- en: '[PRE372]'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'Define the `get_violations()` and `load_and_load_violations()` functions:'
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `get_violations()` 和 `load_and_load_violations()` 函数：
- en: '[PRE377]'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE395]'
- en: 'Invoke the `load_and_load_violations()` function we defined in the previous
    step:'
  id: totrans-662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用我们在上一步中定义的 `load_and_load_violations()` 函数：
- en: '[PRE396]'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE396]'
- en: 'This should yield a set of logs similar to the following:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该生成一组类似于以下日志：
- en: '![Figure 8.13 – Logs generated while running the loop_and_load_violations()
    function ](img/B18638_08_013.jpg)'
  id: totrans-665
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 运行 loop_and_load_violations() 函数时生成的日志](img/B18638_08_013.jpg)'
- en: Figure 8.13 – Logs generated while running the loop_and_load_violations() function
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 运行 loop_and_load_violations() 函数时生成的日志
- en: Here, we simply iterated and waited for the scheduled Model Monitor processing
    job to yield the generated analysis report containing the detected violations,
    along with the other statistical values computed from the captured data.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是迭代并等待计划中的 Model Monitor 处理作业生成包含检测到的违规行为的分析报告，以及从捕获的数据中计算出的其他统计值。
- en: Important Note
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This step may take an hour or more to complete. Feel free to grab a (larger)
    cup of coffee or tea! While waiting for this step to complete, you may continue
    with the hands-on solutions of the next section of this chapter, *Analyzing the
    captured data*.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤可能需要一小时或更长时间才能完成。在此步骤完成等待期间，您可以继续本章下一节“分析捕获的数据”的动手实践解决方案。
- en: 'Once the `loop_and_load_violations()` function has finished running, you can
    proceed with loading and inspecting the detected violations using the `latest_monitoring_constraint_violations()`
    method of the `DefaultModelMonitor` instance:'
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`loop_and_load_violations()`函数运行完成，你可以使用`DefaultModelMonitor`实例的`latest_monitoring_constraint_violations()`方法来加载和检查检测到的违规。
- en: '[PRE397]'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE398]'
- en: 'This should give us a nested dictionary of values, similar to what we have
    in the following code:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给我们一个嵌套字典的值，类似于以下代码中的值：
- en: '[PRE399]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: 'Here, we can see that we have several detected violations for feature `b` (corresponding
    to the *y* input values). To have a better idea of what these detected violations
    are, we can check the available description – `Data type match requirement is
    not met. Expected data type: Integral, Expected match: 100.0%. Observed: Only
    50.0% of data is Integral`.'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们对特征`b`（对应于*y*输入值）有多个检测到的违规。为了更好地了解这些检测到的违规，我们可以检查可用的描述——`数据类型匹配要求未满足。预期数据类型：整数，预期匹配：100.0%。观察结果：只有50.0%的数据是整数`。
- en: 'Load and inspect the statistics data using the `latest_monitoring_statistics()`
    method of the `DefaultModelMonitor` instance:'
  id: totrans-676
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`DefaultModelMonitor`实例的`latest_monitoring_statistics()`方法加载和检查统计数据。
- en: '[PRE400]'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE401]'
- en: 'This should give us a nested structure of values similar to the following:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给我们一个类似于以下结构的嵌套值：
- en: '[PRE402]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '*Wasn’t that easy?* Imagine trying to build this yourself! It would have taken
    you a few days to code and build this yourself from scratch.'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '*这不是很简单吗？* 想象一下自己从头开始构建这个！这可能需要你几天时间来编码和构建。'
- en: At this point, you should have a better idea of how to configure and use **SageMaker
    Model Monitor** to detect violations and potential issues in the model and data.
    Before cleaning up the resources we created and used in this chapter, we will
    look at another approach regarding how to analyze and process the data captured
    and collected by Model Monitor in the S3 bucket.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该对如何配置和使用**SageMaker模型监控器**来检测模型和数据中的违规和潜在问题有了更好的了解。在我们清理本章创建和使用的资源之前，我们将探讨另一种关于如何分析和处理S3桶中由模型监控器捕获和收集的数据的方法。
- en: Analyzing the captured data
  id: totrans-683
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析捕获的数据
- en: Of course, there are other ways to process the data that’s been captured and
    stored inside the S3 bucket. Instead of using the built-in model monitoring capabilities
    and features discussed in the previous section, we can also download the collected
    ML inference endpoint data from the S3 bucket and analyze it directly in a notebook.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有其他方法来处理存储在S3桶中的捕获数据。除了使用上一节中讨论的内置模型监控功能和特性之外，我们还可以从S3桶中下载收集到的机器学习推理端点数据，并在笔记本中直接分析它。
- en: Note
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is still recommended to utilize the built-in model monitoring capabilities
    and features of SageMaker. However, knowing this approach would help us troubleshoot
    any issues we may encounter while using and running the automated solutions available
    in SageMaker.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然建议利用SageMaker内置的模型监控功能和特性。然而，了解这种方法将帮助我们解决在使用和运行SageMaker中可用的自动化解决方案时可能遇到的问题。
- en: 'Follow these steps to use a variety of Python libraries to process, clean,
    and analyze the collected ML inference data in S3:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用各种Python库在S3中处理、清理和分析收集到的机器学习推理数据：
- en: Create a new Notebook by clicking the **File** menu and choosing **Notebook**
    from the list of options under the **New** submenu.
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**文件**菜单并从**新建**子菜单下的选项列表中选择**笔记本**来创建一个新的笔记本。
- en: Note
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we will be creating the new notebook inside the `CH08` directory beside
    the other notebook files we created in the previous sections of this chapter.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将在本章前几节创建的其他笔记本文件旁边的`CH08`目录内创建新的笔记本。
- en: In the `Data Science` (option found under **SageMaker image**)
  id: totrans-691
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**数据科学**（在**SageMaker镜像**下找到的选项）
- en: '`Python 3`'
  id: totrans-692
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Python 3`'
- en: '`No script`'
  id: totrans-693
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`无脚本`'
- en: Click the **Select** button afterward.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 之后点击**选择**按钮。
- en: Right-click on the tab name of the new Notebook and select `05 - Analyzing the
    Captured Data.ipynb` under **New Name**. Click the **Rename** button.
  id: totrans-695
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击新笔记本标签页的名称，然后在**新名称**下选择**05 - 分析捕获的数据.ipynb**。点击**重命名**按钮。
- en: 'Now that we have created our new notebook, let’s use the `%store` magic from
    `s3_bucket` and `capture_upload_path`:'
  id: totrans-696
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了新的笔记本，让我们使用来自`s3_bucket`和`capture_upload_path`的`%store`魔法。
- en: '[PRE403]'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE404]'
- en: Note
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Wait! Where did `capture_upload_path` come from? In the *Enabling data capture
    and simulating predictions* section, we initialized `capture_upload_path` and
    set its value to the S3 path where the captured data (of **SageMaker Model Monitor**)
    will be stored.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 等等！`capture_upload_path`是从哪里来的？在*启用数据捕获和模拟预测*部分，我们初始化了`capture_upload_path`并将其值设置为存储捕获数据的S3路径（这些数据是**SageMaker
    Model Monitor**捕获的）。
- en: 'Get the S3 path of each of the generated `jsonl` files containing the input
    and output data of the inference requests:'
  id: totrans-701
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取包含推理请求输入和输出数据的每个生成的`jsonl`文件的S3路径：
- en: '[PRE405]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE411]'
- en: 'Create the `captured` directory using the `mkdir` command:'
  id: totrans-709
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mkdir`命令创建`captured`目录：
- en: '[PRE412]'
  id: totrans-710
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE412]'
- en: 'Next, use the `aws s3 cp` command to copy each of the generated `jsonl` files
    to the `captured` directory we just created in the previous step:'
  id: totrans-711
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`aws s3 cp`命令将每个生成的`jsonl`文件复制到我们在上一步创建的`captured`目录中：
- en: '[PRE413]'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: 'Define the `load_json_file()` function:'
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`load_json_file()`函数：
- en: '[PRE416]'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE421]'
- en: 'Extract the JSON values from each of the downloaded `jsonl` files inside the
    `captured` directory:'
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`captured`目录中下载的每个`jsonl`文件中提取JSON值：
- en: '[PRE422]'
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: 'Use `pip` to install the `flatten-dict` library:'
  id: totrans-731
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pip`安装`flatten-dict`库：
- en: '[PRE430]'
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: As we will see in the succeeding set of steps, the `flatten-dict` package is
    useful in “flattening” any nested dictionary structure.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在接下来的步骤中将要看到的，`flatten-dict`包在“扁平化”任何嵌套字典结构方面非常有用。
- en: 'Test the `flatten()` function from the `flatten-dict` library on the first
    entry stored in the `all_json` list:'
  id: totrans-734
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`all_json`列表中存储的第一个条目上测试`flatten()`函数（来自`flatten-dict`库）：
- en: '[PRE431]'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE433]'
- en: 'This should give us a flattened structure similar to the following:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们一个类似于以下结构的扁平化结构：
- en: '[PRE434]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: Note
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will use `flatten()` shortly to convert the nested JSON values stored in
    `all_json` into “flattened” JSON values. This list of “flattened” JSON values
    will then be converted into a **pandas** **DataFrame** (which we will process
    and analyze in later steps).
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将很快使用`flatten()`函数将存储在`all_json`中的嵌套JSON值转换为“扁平化”的JSON值。然后，这个“扁平化”的JSON值列表将被转换为**pandas**
    **DataFrame**（我们将在后续步骤中处理和分析）。
- en: 'Flatten each of the JSON values stored in the `all_json` list using the following
    block of code:'
  id: totrans-742
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块将`all_json`列表中存储的每个JSON值进行扁平化：
- en: '[PRE435]'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE439]'
- en: 'Next, load the flattened structure into a pandas DataFrame:'
  id: totrans-748
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将扁平化结构加载到pandas DataFrame中：
- en: '[PRE440]'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE442]'
- en: 'This should yield a DataFrame similar to the following:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该产生一个类似于以下DataFrame的DataFrame：
- en: '![Figure 8.14 – DataFrame containing the collected monitoring data  ](img/B18638_08_014.jpg)'
  id: totrans-753
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14 – 包含收集到的监控数据的DataFrame](img/B18638_08_014.jpg)'
- en: Figure 8.14 – DataFrame containing the collected monitoring data
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – 包含收集到的监控数据的DataFrame
- en: Here, we can see the collected endpoint data flattened inside a DataFrame.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到收集到的端点数据在DataFrame内部进行了扁平化。
- en: 'Now, let’s clean things up a bit by extracting the *x* and *y* values from
    the DataFrame column, `captureData.endpointInput.data`, which contains the input
    request data:'
  id: totrans-756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过从DataFrame列`captureData.endpointInput.data`中提取*x*和*y*值来稍微整理一下，该列包含输入请求数据：
- en: '[PRE443]'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE443]'
- en: 'After that, let’s extract the `label` value from the DataFrame column, `captureData.endpointOutput.data`,
    which contains the output response data. Store the `label` values inside a new
    column called `predicted_label`:'
  id: totrans-758
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，让我们从DataFrame列`captureData.endpointOutput.data`中提取`label`值，该列包含输出响应数据。将`label`值存储在一个名为`predicted_label`的新列中：
- en: '[PRE444]'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE444]'
- en: 'Let’s prepare the `clean_df` DataFrame, which only contains three columns from
    the original `DataFrame` – `predicted_label`, `x`, and `y`:'
  id: totrans-760
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们准备只包含原始`DataFrame`中的三个列（`predicted_label`、`x`和`y`）的`clean_df` DataFrame：
- en: '[PRE445]'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE446]'
- en: 'This should give us a DataFrame similar to the following:'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们一个类似于以下DataFrame的DataFrame：
- en: '![Figure 8.15 – DataFrame containing the values for predicted_label, x, and
    y ](img/B18638_08_015.jpg)'
  id: totrans-764
  prefs: []
  type: TYPE_IMG
  zh: '![图8.15 – 包含预测标签、x和y值的DataFrame](img/B18638_08_015.jpg)'
- en: Figure 8.15 – DataFrame containing the values for predicted_label, x, and y
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 – 包含预测标签、x和y值的DataFrame
- en: Here, we can see that some values of the `y` column are integers, while some
    values are in floating-point format.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`y`列的一些值是整数，而一些值是浮点格式。
- en: 'Next, let’s typecast the values stored in the `clean_df` DataFrame using the
    `astype` method:'
  id: totrans-767
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用`astype`方法将存储在`clean_df` DataFrame中的值进行类型转换：
- en: '[PRE447]'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE452]'
- en: 'This should give us a DataFrame similar to the following:'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们一个类似于以下DataFrame的DataFrame：
- en: '![Figure 8.16 – Values for x and y cast into floating-point values ](img/B18638_08_016.jpg)'
  id: totrans-775
  prefs: []
  type: TYPE_IMG
  zh: '![图8.16 – x和y的值转换为浮点数](img/B18638_08_016.jpg)'
- en: Figure 8.16 – Values for x and y cast into floating-point values
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – x和y的值转换为浮点数
- en: Now, everything is in floating-point format under the `x` and `y` columns.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`x`和`y`列下的一切都是浮点格式。
- en: At this point, we can run different types of analysis, such as computing different
    types of statistics manually, similar to what is performed automatically by **SageMaker
    Model Monitor**. We can also use this approach to troubleshoot data encoding issues
    encountered by the Model Monitor processing job when analyzing the collected data,
    similar to what we have at [https://github.com/aws/sagemaker-python-sdk/issues/1896](https://github.com/aws/sagemaker-python-sdk/issues/1896).
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以运行不同类型的分析，例如手动计算不同类型的统计数据，类似于SageMaker Model Monitor自动执行的操作。我们还可以使用这种方法来调试Model
    Monitor处理作业在分析收集的数据时遇到的数据编码问题，类似于我们在[https://github.com/aws/sagemaker-python-sdk/issues/1896](https://github.com/aws/sagemaker-python-sdk/issues/1896)中遇到的情况。
- en: Deleting an endpoint with a monitoring schedule
  id: totrans-779
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除带有监控计划的端点
- en: Now that we are done using our ML inference endpoint, let’s delete it, along
    with the attached monitors and monitoring schedules.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经完成了对ML推理端点的使用，让我们将其删除，包括附带的监控器和监控计划。
- en: 'Follow these steps to list all the attached monitors of our ML inference endpoint
    and delete any attached monitoring schedules, along with the endpoint:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤列出我们ML推理端点的所有附加监控器，并删除任何附加的监控计划，包括端点：
- en: Create a new Notebook by clicking the **File** menu and choosing **Notebook**
    from the list of options under the **New** submenu.
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**文件**菜单并从**新建**子菜单下的选项列表中选择**Notebook**来创建一个新的Notebook。
- en: Note
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we will be creating the new notebook inside the `CH08` directory beside
    the other notebook files we created in the previous sections of this chapter.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将在本章前几节创建的其他Notebook文件旁边的`CH08`目录内创建新的Notebook。
- en: In the `Data Science` (option found under **SageMaker image**)
  id: totrans-785
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**SageMaker镜像**下的**数据科学**（选项）
- en: '`Python 3`'
  id: totrans-786
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Python 3`'
- en: '`No script`'
  id: totrans-787
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`无脚本`'
- en: Click the **Select** button afterward.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 之后点击**选择**按钮。
- en: Right-click on the tab name of the new Notebook and select `06 - Deleting an
    Endpoint with a Monitoring Schedule.ipynb` under **New Name**. Click the **Rename**
    button.
  id: totrans-789
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击新Notebook标签页的名称，在**新名称**下选择**06 - 删除带有监控计划的端点.ipynb**。点击**重命名**按钮。
- en: 'Now that we have our new notebook ready, let’s use the `%store` magic from
    IPython to load the stored variable value for `endpoint_name`:'
  id: totrans-790
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了新的Notebook，让我们使用IPython的`%store`魔法来加载存储的`endpoint_name`变量的值：
- en: '[PRE453]'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE453]'
- en: 'Initialize the `Predictor` instance and attach it to an existing ML inference
    endpoint using the following block of code:'
  id: totrans-792
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块初始化`Predictor`实例并将其附加到现有的ML推理端点：
- en: '[PRE454]'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE463]'
- en: 'Let’s quickly list any attached monitors before deleting them in the next step:'
  id: totrans-803
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在删除它们之前，让我们快速列出任何附加的监控器：
- en: '[PRE464]'
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE466]'
- en: Here, we used the `__dict__` attribute to inspect the properties of the monitor
    instances.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`__dict__`属性来检查监控实例的属性。
- en: 'Let’s use the `delete_monitoring_schedule()` method to delete each of the monitors:'
  id: totrans-808
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`delete_monitoring_schedule()`方法删除每个监控器：
- en: '[PRE467]'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE468]'
- en: 'This should yield an output similar to `Deleting Monitoring Schedule with name:
    monitor-HWFEL`.'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生类似于`删除带有名称的监控计划：monitor-HWFEL`的输出。
- en: 'Finally, let’s delete the inference endpoint using the `delete_endpoint()`
    method:'
  id: totrans-812
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用`delete_endpoint()`方法删除推理端点：
- en: '[PRE469]'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE469]'
- en: Make sure that you also stop the execution of any running cells in the notebooks
    that were used in this chapter.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您还停止了在本章中使用过的Notebook中任何运行单元格的执行。
- en: Cleaning up
  id: totrans-815
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: 'Now that we have finished working on the hands-on solutions of this chapter,
    it is time we clean up and turn off any resources we will no longer use. Follow
    these steps to locate and turn off any remaining running instances in **SageMaker
    Studio**:'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经完成了本章的动手实践解决方案，是时候清理并关闭我们将不再使用的任何资源了。按照以下步骤查找并关闭SageMaker Studio中任何剩余的运行实例：
- en: 'Click the **Running Instances and Kernels** icon in the sidebar, as highlighted
    in the following screenshot:'
  id: totrans-817
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击侧边栏中突出显示的**运行实例和内核**图标，如下截图所示：
- en: '![Figure 8.17 – Turning off the running instance ](img/B18638_08_017.jpg)'
  id: totrans-818
  prefs: []
  type: TYPE_IMG
  zh: '![图8.17 – 关闭运行实例](img/B18638_08_017.jpg)'
- en: Figure 8.17 – Turning off the running instance
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – 关闭运行实例
- en: Clicking the **Running Instances and Kernels** icon should open and show the
    running instances, apps, and terminals in SageMaker Studio.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**运行实例和内核**图标应该会打开并显示SageMaker Studio中的运行实例、应用和终端。
- en: Turn off all running instances under **RUNNING INSTANCES** by clicking the **Shutdown**
    button for each of the instances, as highlighted in the preceding screenshot.
    Clicking the **Shutdown** button will open a popup window verifying the instance
    shutdown operation. Click the **Shut down all** button to proceed.
  id: totrans-821
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击每个实例的**关闭**按钮，在**正在运行的实例**下关闭所有运行实例，如前一张截图所示。点击**关闭**按钮将打开一个弹出窗口，以验证实例关闭操作。点击**全部关闭**按钮继续。
- en: Important Note
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Make sure that you close the open notebook tabs in the **Editor** pane. In some
    cases, SageMaker will automatically turn on an instance when it detects that there
    are open notebook tabs.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您关闭**编辑器**面板中打开的笔记本标签页。在某些情况下，当SageMaker检测到打开的笔记本标签页时，它会自动打开一个实例。
- en: 'Make sure that you check and delete all running inference endpoints under **SageMaker
    resources** as well (if any):'
  id: totrans-824
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您还检查并删除**SageMaker资源**下所有正在运行的推理端点（如果有）：
- en: '![Figure 8.18 – Checking the list of running inference endpoints ](img/B18638_08_018.jpg)'
  id: totrans-825
  prefs: []
  type: TYPE_IMG
  zh: '![图8.18 – 检查正在运行的推理端点列表](img/B18638_08_018.jpg)'
- en: Figure 8.18 – Checking the list of running inference endpoints
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 – 检查正在运行的推理端点列表
- en: To check if there are running inference endpoints, click the **SageMaker resources**
    icon, as highlighted in the preceding screenshot, and then select **Endpoints**
    from the list of options in the drop-down menu.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查是否有正在运行的推理端点，请点击前一张截图所示**SageMaker资源**图标，然后从下拉菜单中选择**端点**。
- en: Finally, open the **File** menu and select **Shut down** from the list of options
    available. This should ensure that all running instances inside SageMaker Studio
    have been turned off as well.
  id: totrans-828
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开**文件**菜单，并从可用选项中选择**关闭**。这应该确保SageMaker Studio内部的所有运行实例都已关闭。
- en: Note that this cleanup operation needs to be performed after using **SageMaker
    Studio**. These resources are not turned off automatically by SageMaker, even
    during periods of inactivity.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此清理操作需要在使用**SageMaker Studio**后执行。即使在不活跃期间，SageMaker也不会自动关闭这些资源。
- en: Summary
  id: totrans-830
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we utilized the model registry available in SageMaker to register,
    organize, and manage our ML models. After deploying ML models stored in the registry,
    we used **SageMaker Model Monitor** to capture data and run processing jobs that
    analyze the collected data and flag any detected issues or deviations.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们利用SageMaker中可用的模型注册表来注册、组织和管理我们的机器学习模型。在部署存储在注册表中的机器学习模型后，我们使用**SageMaker
    Model Monitor**来捕获数据并运行分析收集数据的处理作业，并标记任何检测到的问题或偏差。
- en: In the next chapter, we will focus on securing ML environments and systems using
    a variety of strategies and solutions. If you are serious about designing and
    building secure ML systems and environments, then the next chapter is for you!
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重点介绍使用各种策略和解决方案来保护机器学习环境和系统。如果您认真设计并构建安全的机器学习系统和环境，那么下一章就是为您准备的！
- en: Further reading
  id: totrans-833
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information on the topics that were covered in this chapter, feel
    free to check out the following resources:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本章所涉及主题的更多信息，请随意查看以下资源：
- en: '*SageMaker Model Registry – Viewing the Deployment History* ([https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-deploy-history.xhtml](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-deploy-history.xhtml))'
  id: totrans-835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SageMaker Model Registry – 查看部署历史* ([https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-deploy-history.xhtml](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-deploy-history.xhtml))'
- en: '*SageMaker Model Monitor – Monitor models for data and model quality, bias,
    and explainability* ([https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.xhtml](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.xhtml))'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SageMaker Model Monitor – 监控模型的数据质量、偏差和可解释性* ([https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.xhtml](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.xhtml))'
- en: '*SageMaker Python SDK — Amazon SageMaker Model Monitor* ([https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_model_monitoring.xhtml](https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_model_monitoring.xhtml))'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SageMaker Python SDK — Amazon SageMaker Model Monitor* ([https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_model_monitoring.xhtml](https://sagemaker.readthedocs.io/en/stable/amazon_sagemaker_model_monitoring.xhtml))'
