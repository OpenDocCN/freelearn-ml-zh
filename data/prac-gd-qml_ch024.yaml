- en: Appendix A
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A
- en: Complex Numbers
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 复数
- en: '![e^{i\pi} + 1 = 0](img/file77.png "e^{i\pi} + 1 = 0")'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![e^(iπ) + 1 = 0](img/file77.png "e^(iπ) + 1 = 0")'
- en: — Leonhard Euler
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: — 莱昂哈德·欧拉
- en: The set of complex numbers is the set of all numbers of the form ![a + bi](img/file1493.png
    "a + bi") where ![a](img/file16.png "a") and ![b](img/file17.png "b") are real
    numbers and ![i^{2} = - 1](img/file543.png "i^{2} = - 1"). This might not be the
    most formal way of presenting them, but it will do for our purposes!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 复数集是所有形式为![a + bi](img/file1493.png "a + bi")的数的集合，其中![a](img/file16.png "a")和![b](img/file17.png
    "b")是实数，且![i² = - 1](img/file543.png "i² = - 1")。这可能不是最正式的介绍方式，但对我们来说足够了！
- en: The way you operate with complex numbers is pretty straightforward. Let ![a](img/file16.png
    "a"), ![b](img/file17.png "b"), ![x](img/file269.png "x"), and ![y](img/file270.png
    "y") be some real numbers. We add complex numbers as
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 复数的操作方式相当直接。设![a](img/file16.png "a")、![b](img/file17.png "b")、![x](img/file269.png
    "x")和![y](img/file270.png "y")是一些实数。我们按如下方式加复数
- en: '| ![(a + bi) + (x + yi) = (a + b) + (x + y)i.](img/file1494.png "(a + bi) +
    (x + yi) = (a + b) + (x + y)i.") |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| ![（a + bi）+（x + yi）=（a + b）+（x + y）i.](img/file1494.png "（a + bi）+（x + yi）=（a
    + b）+（x + y）i.") |'
- en: Regarding multiplication, we have
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 关于乘法，我们有
- en: '| ![(a + bi) \cdot (x + yi) = ax + ayi + bix + byi^{2} = (ax - by) + (ay +
    bx)i.](img/file1495.png "(a + bi) \cdot (x + yi) = ax + ayi + bix + byi^{2} =
    (ax - by) + (ay + bx)i.") |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| ![（a + bi）·（x + yi）= ax + ayi + bix + byi² = (ax - by) + (ay + bx)i.](img/file1495.png
    "（a + bi）·（x + yi）= ax + ayi + bix + byi² = (ax - by) + (ay + bx)i.") |'
- en: In particular, when ![b = 0](img/file1496.png "b = 0"), we can deduce that
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，当![b = 0](img/file1496.png "b = 0")时，我们可以推导出，
- en: '| ![a(x + yi) = ax + (ay)i.](img/file1497.png "a(x + yi) = ax + (ay)i.") |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| ![a(x + yi) = ax + (ay)i.](img/file1497.png "a(x + yi) = ax + (ay)i.") |'
- en: Given any complex number ![z = a + bi](img/file1498.png "z = a + bi"), its **real
    part**, which we denote as ![{Re}z](img/file1499.png "{Re}z"), is ![a](img/file16.png
    "a"), and its **imaginary** **part**, which we denote as ![{Im}z](img/file1500.png
    "{Im}z"), is ![b](img/file17.png "b"). Moreover, any such number ![z](img/file81.png
    "z") can be represented in the two-dimensional plane as a vector ![({Re}z,{Im}z)
    = (a,b)](img/file1501.png "({Re}z,{Im}z) = (a,b)"). The length of the resulting
    vector is said to be the **module** of ![z](img/file81.png "z"), and it is computed
    as
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 给定任何复数![z = a + bi](img/file1498.png "z = a + bi")，它的**实部**，我们记为![Rez](img/file1499.png
    "Rez")，是![a](img/file16.png "a")，它的**虚部**，我们记为![Imz](img/file1500.png "Imz")，是![b](img/file17.png
    "b")。此外，任何这样的数![z](img/file81.png "z")都可以在二维平面上表示为一个向量![({Re}z,{Im}z) = (a,b)](img/file1501.png
    "({Re}z,{Im}z) = (a,b)")。这个向量的长度被称为![z](img/file81.png "z")的**模**，它被计算为
- en: '| ![&#124;z&#124; = \sqrt{a^{2} + b^{2}}.](img/file1502.png "&#124;z&#124;
    = \sqrt{a^{2} + b^{2}}.") |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| ![|z| = √(a² + b²).](img/file1502.png "|z| = √(a² + b²).") |'
- en: If ![z = a + bi](img/file1498.png "z = a + bi") is a complex number, its **conjugate**
    is ![z^{\ast} = a - bi](img/file1503.png "z^{\ast} = a - bi"). In layman’s terms,
    if you want to get the conjugate of any complex number, all you have to do is
    flip the sign of its imaginary part. It is easy to check that, given any complex
    number ![z](img/file81.png "z"),
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果![z = a + bi](img/file1498.png "z = a + bi")是一个复数，它的**共轭**是![z* = a - bi](img/file1503.png
    "z* = a - bi")。用通俗的话说，如果你想得到任何复数的共轭，你只需要改变它的虚部的符号。很容易验证，对于任何复数![z](img/file81.png
    "z")，
- en: '| ![&#124;z&#124;^{2} = zz^{\ast},](img/file1504.png "&#124;z&#124;^{2} = zz^{\ast},")
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| ![|z|² = zz*,](img/file1504.png "|z|² = zz*,"") |'
- en: which shows us, incidentally, that ![zz^{\ast}](img/file1505.png "zz^{\ast}")
    is always a non-negative real number.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这无意中表明，![zz*](img/file1505.png "zz*")始终是一个非负实数。
- en: One of the most well-known formulas involving the use of complex numbers is
    Euler’s identity, which reads that, for any real number ![\theta](img/file89.png
    "\theta"),
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 涉及复数使用最著名的公式之一是欧拉公式，它表明，对于任何实数![θ](img/file89.png "θ")，
- en: '| ![e^{i\theta} = \cos\theta + i\sin\theta.](img/file1506.png "e^{i\theta}
    = \cos\theta + i\sin\theta.") |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| ![e^(iθ) = cosθ + i sinθ.](img/file1506.png "e^(iθ) = cosθ + i sinθ.") |'
- en: This formula can be easily derived by extending the exponential functions from
    the usual series that defines it. In particular, according to Euler’s identity
    and using the usual properties of exponentiation, we must have, for any real numbers
    ![a](img/file16.png "a") and ![b](img/file17.png "b"),
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个公式可以通过扩展定义它的常规级数中的指数函数来轻松推导。特别是，根据欧拉公式和指数运算的常规性质，对于任何实数![a](img/file16.png
    "a")和![b](img/file17.png "b")，我们必须有，
- en: '| ![e^{(a + ib)} = e^{a}e^{ib} = e^{a}(\cos\theta + i\sin\theta).](img/file1507.png
    "e^{(a + ib)} = e^{a}e^{ib} = e^{a}(\cos\theta + i\sin\theta).") |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| ![e^{(a + ib)} = e^{a}e^{ib} = e^{a}(\cos\theta + i\sin\theta).](img/file1507.png
    "e^{(a + ib)} = e^{a}e^{ib} = e^{a}(\cos\theta + i\sin\theta).") |'
- en: 'Just to conclude this appendix, let us share with you some fun trivia about
    our beloved complex numbers:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 只为了结束这个附录，让我们与你分享一些关于我们心爱的复数的有趣趣事：
- en: Every polynomial of degree ![n](img/file244.png "n") with complex coefficients
    has exactly ![n](img/file244.png "n") roots, if we account for multiplicity
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个具有复系数的次数为 ![n](img/file244.png "n") 的多项式恰好有 ![n](img/file244.png "n") 个根，如果我们考虑重数
- en: Any complex-differentiable function ![\left. C\rightarrow C \right.](img/file1508.png
    "\left. C\rightarrow C \right.") is smooth and analytic
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何复可微函数 ![\left. C\rightarrow C \right.](img/file1508.png "\left. C\rightarrow
    C \right.") 都是光滑且解析的
- en: To learn more…
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多…
- en: 'If you would like to learn more about complex numbers, we invite you to read
    the same book that both of us — with a gap of a few years in the middle — used
    in the complex analysis course of our undergraduate studies: Bak and Newman’s
    *Complex Analysis* [[117](ch030.xhtml#Xcomplex-newman)].'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于复数的信息，我们邀请你阅读我们俩——中间隔了几年的时间——在大学复变函数课程中使用的同一本书：Bak 和 Newman 的 *复变函数学*
    [[117](ch030.xhtml#Xcomplex-newman)]。
