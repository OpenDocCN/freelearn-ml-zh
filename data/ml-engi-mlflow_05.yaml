- en: '*Chapter 3*: Your Data Science Workbench'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 3 章*：您的数据科学工作台'
- en: In this chapter, you will learn about MLflow in the context of creating a local
    environment so that you can develop your machine learning project locally with
    the different features provided by MLflow. This chapter is focused on machine
    learning engineering, and one of the most important roles of a machine learning
    engineer is to build up an environment where model developers and practitioners
    can be efficient. We will also demonstrate a hands-on example of how we can use
    workbenches to accomplish specific tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解在创建本地环境的情况下 MLflow 的应用，以便您可以使用 MLflow 提供的不同功能在本地开发机器学习项目。本章专注于机器学习工程，机器学习工程师最重要的角色之一是建立一个环境，让模型开发者和从业者可以高效工作。我们还将演示如何使用工作台完成特定任务的动手示例。
- en: 'Specifically, we will look at the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，在本章中，我们将探讨以下主题：
- en: Understanding the value of a data science workbench
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解数据科学工作台的价值
- en: Creating your own data science workbench
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您自己的数据科学工作台
- en: Using the workbench for stock prediction
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工作台进行股票预测
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following prerequisites:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要以下先决条件：
- en: The latest version of Docker installed on your machine. If you don’t already
    have it installed, please follow the instructions at [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的机器上安装的 Docker 最新版本。如果您尚未安装，请按照 [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)
    上的说明进行操作。
- en: The latest version of Docker Compose installed. If you don’t already have it
    installed, please follow the instructions at https://docs.docker.com/compose/install/.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已安装 Docker Compose 的最新版本。如果您尚未安装，请按照 https://docs.docker.com/compose/install/
    上的说明进行操作。
- en: 'Access to Git in the command line, and installed as described in this **Uniform
    Resource Locator** (**URL**): [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行中访问 Git，并按照本 **统一资源定位符** （**URL**）[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
    中的说明进行安装。
- en: Access to a `bash` terminal (Linux or Windows).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 `bash` 终端（Linux 或 Windows）。
- en: Access to a browser.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问浏览器。
- en: Python 3.5+ installed.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 Python 3.5+。
- en: MLflow installed locally, as described in [*Chapter 1*](B16783_01_Final_SB_epub.xhtml#_idTextAnchor015),
    *Introducing MLflow*.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如在 [*第 1 章*](B16783_01_Final_SB_epub.xhtml#_idTextAnchor015) 中所述，本地安装 MLflow。
- en: Understanding the value of a data science workbench
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解数据科学工作台的价值
- en: A data science workbench is an environment to standardize the machine learning
    tools and practices of an organization, allowing for rapid onboarding and development
    of models and analytics. One critical machine learning engineering function is
    to support data science practitioners with tools that empower and accelerate their
    day-to-day activities.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学工作台是一个环境，用于标准化组织的机器学习工具和实践，允许快速上线和开发模型和分析。机器学习工程的一个关键功能是支持数据科学从业者使用能够赋予他们力量并加速他们日常活动的工具。
- en: In a data science team, the ability to rapidly test multiple approaches and
    techniques is paramount. Every day, new libraries and open source tools are created.
    It is common for a project to need more than a dozen libraries in order to test
    a new type of model. These multitudes of libraries, if not collated correctly,
    might cause bugs or incompatibilities in the model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学团队中，快速测试多种方法和技术的能力至关重要。每天都有新的库和开源工具被创建。一个项目可能需要超过十个库来测试一种新的模型。这些众多的库，如果未能正确整理，可能会在模型中引起错误或不兼容。
- en: Data is at the center of a data science workflow. Having clean datasets available
    for developing and evaluating models is critical. With an abundance of huge datasets,
    specialized big data tooling is necessary to process the data. Data can appear
    in multiple formats and velocities for analysis or experimentation, and can be
    available in multiple formats and mediums. It can be available through files,
    the cloud, or **REpresentational State Transfer** (**REST**) **application programming
    interfaces** (**APIs**).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是数据科学工作流程的核心。拥有干净的数据集用于开发和评估模型至关重要。随着大量大型数据集的出现，需要专门的大数据工具来处理数据。数据可以以多种格式和速度进行分析或实验，并且可以以多种格式和介质提供。它可以通过文件、云或
    **REpresentational State Transfer** （**REST**） **应用程序编程接口** （**API**）提供。
- en: Data science is mostly a collaborative craft; it’s part of a workflow to share
    models and processes among team members. Invariably, one pain point that emerges
    from that activity is the cross-reproducibility of model development jobs among
    practitioners. Data scientist A shares a training script of a model that assumes
    version 2.6 of a library, but data scientist B is using version 2.8 environment.
    Tracing and fixing the issue can take hours in some cases. If this problem occurs
    in a production environment, it can become extremely costly to the company.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学主要是一种协作工艺；它是团队成员之间共享模型和流程的工作流程的一部分。不可避免地，从这个活动中出现的一个痛点是模型开发作业在从业者之间的跨可重复性。数据科学家A分享了一个假设库版本2.6的模型训练脚本，但数据科学家B使用的是版本2.8的环境。在某些情况下，追踪和修复这个问题可能需要数小时。如果这个问题出现在生产环境中，它可能会对公司造成极大的成本。
- en: When iterating—for instance—over a model, each run contains multiple parameters
    that can be tweaked to improve it. Maintaining traceability of which parameter
    yielded a specific performance metric—such as accuracy, for instance—can be problematic
    if we don’t store details of the experiment in a structured manner. Going back
    to a specific batch of settings that produced a better model may be impossible
    if we only keep the latest settings during the model development phase.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在迭代——例如——模型时，每次运行都包含多个可以调整以改进模型的参数。如果我们不以结构化的方式存储实验的详细信息，那么维护哪个参数产生了特定的性能指标（例如准确性）的可追溯性可能会成为问题。如果在模型开发阶段只保留最新设置，那么回到产生更好模型的特定批次设置可能是不可能的。
- en: The need to iterate quickly can cause many frustrations when translating prototype
    code to a production environment, where it can be executed in a reliable manner.
    For instance, if you are developing a new trading model in a Windows machine with
    easy access to **graphics processing units** (**GPUs**) for inference, your engineering
    team member may decide to reuse the existing Linux infrastructure without GPU
    access. This leads to a situation where your production algorithm ends up taking
    5 hours and locally runs in 30 seconds, impacting the final outcome of the project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代速度的需求在将原型代码翻译到可靠执行的生产环境时，可能会引起许多挫败感。例如，如果你在一个可以轻松访问**图形处理单元**（**GPUs**）进行推理的Windows机器上开发新的交易模型，你的工程团队成员可能会决定重用现有的无GPU访问的Linux基础设施。这导致你的生产算法最终需要5小时才能完成，而在本地运行只需30秒，影响了项目的最终结果。
- en: 'It is clear that a data science department risks systemic technical pain if
    issues related to the environment and tools are not addressed upfront. To summarize,
    we can list the following main points as described in this section:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，如果不对环境和工具相关的问题进行前期处理，数据科学部门会面临系统性的技术痛点。总结来说，我们可以列出本节中描述的以下主要点：
- en: Reproducibility friction
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重复性摩擦
- en: The complexity of handling large and varied datasets
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理大型和多样化数据集的复杂性
- en: Poor management of experiment settings
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验设置管理不善
- en: Drift between local and production environments
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地和生产环境之间的漂移
- en: A data science workbench addresses the pain points described in this section
    by creating a structured environment where a machine learning practitioner can
    be empowered to develop and deploy their models reliably, with reduced friction.
    A no-friction environment will allow highly costly model development hours to
    be focused on developing and iterating models, rather than on solving tooling
    and data technical issues.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学工作台通过创建一个结构化环境来解决本节中描述的痛点，在这个环境中，机器学习从业者可以授权可靠地开发和部署他们的模型，减少摩擦。无摩擦的环境将允许高度昂贵的模型开发时间专注于开发和迭代模型，而不是解决工具和数据技术问题。
- en: After having delved into the motivation for building a data science workbench
    for a machine learning team, we will next start designing the data science workbench
    based on known pain points.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究为机器学习团队构建数据科学工作台的动机之后，我们接下来将根据已知的痛点开始设计数据科学工作台。
- en: Creating your own data science workbench
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自己的数据科学工作台
- en: In order to address common frictions for developing models in data science,
    as described in the previous section, we need to provide data scientists and practitioners
    with a standardized environment in which they can develop and manage their work.
    A data science workbench should allow you to quick-start a project, and the availability
    of an environment with a set of starting tools and frameworks allows data scientists
    to rapidly jump-start a project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决前述章节中描述的数据科学模型开发中的常见摩擦，我们需要为数据科学家和从业者提供一个标准化的环境，让他们可以在其中开发和管理工作。数据科学工作台应允许您快速启动项目，并且一套起始工具和框架的可用性允许数据科学家快速启动项目。
- en: 'The data scientist and machine learning practitioner are at the center of the
    workbench: they should have a reliable platform that allows them to develop and
    add value to the organization, with their models at their fingertips.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家和机器学习从业者处于工作台的中心：他们应该有一个可靠的平台，允许他们开发并为其组织增加价值，同时他们的模型触手可及。
- en: 'The following diagram depicts the core features of a data science workbench:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了数据科学工作台的核心功能：
- en: '![Figure 3.1 – Core features of a data science workbench'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.1 – 数据科学工作台的核心功能'
- en: '](img/B16783_03_001.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16783_03_001.jpg]'
- en: Figure 3.1 – Core features of a data science workbench
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 数据科学工作台的核心功能
- en: 'In order to think about the design of our data science workbench and based
    on the diagram in *Figure 3.1*, we need the following core features in our data
    science workbench:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了思考我们数据科学工作台的设计，并基于*图3.1*中的图表，我们需要在我们的数据科学工作台中具备以下核心功能：
- en: '**Dependency Management**: Having dependency management built into your local
    environment helps in handling reproducibility issues and preventing library conflicts
    between different environments. This is generally achieved by using environment
    managers such as Docker or having environment management frameworks available
    in your programming language. MLflow provides this through the support of Docker-
    or Conda-based environments.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖管理**：在本地环境中集成依赖管理有助于处理可重复性问题，并防止不同环境之间的库冲突。这通常是通过使用环境管理器，如Docker，或者在您的编程语言中提供环境管理框架来实现的。MLflow通过支持基于Docker或Conda的环境来提供这一功能。'
- en: '**Data Management**: Managing data in a local environment can be complex and
    daunting if you have to handle huge datasets. Having a standardized definition
    of how you handle data in your local projects allows others to freely collaborate
    on your projects and understand the structures available.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据管理**：如果您必须处理大量数据集，则在本地环境中管理数据可能会变得复杂且令人畏惧。在您的本地项目中有一个标准化的数据处理定义，允许他人自由协作并理解可用的结构。'
- en: '**Model Management**: Having the different models organized and properly stored
    provides an easy structure to be able to work through many ideas at the same time
    and persist the ones that have potential. MLflow helps support this through the
    model format abstraction and **Model Registry** component to manage models.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型管理**：将不同的模型组织并妥善存储提供了一个易于工作的结构，能够同时处理许多想法并持久化那些有潜力的想法。MLflow通过模型格式抽象和**模型注册**组件来支持这一点，以管理模型。'
- en: '**Deployment**: Having a development environment aligned with the production
    environment where the model will be serviced requires deliberation in the local
    environment. The production environment needs to be ready to receive a model from
    a model developer, with the least possible friction. This smooth deployment workflow
    is only possible if the local environment is engineered correctly.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：在本地环境中与模型将提供服务的生产环境保持一致需要深思熟虑。生产环境需要准备好接收模型开发者的模型，以尽可能少的摩擦。这种平稳的部署工作流程只有在本地环境正确设计的情况下才可能实现。'
- en: '**Experimentation Management**: Tweaking parameters is the most common thing
    that a machine learning practitioner does. Being able to keep abreast of the different
    versions and specific parameters can quickly become cumbersome for the model developer.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实验管理**：调整参数是机器学习从业者最常见的事情。能够跟上不同版本和特定参数可能会迅速变得繁琐，对模型开发者来说。'
- en: Important note
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this section, we will implement the foundations of a data science workbench
    from scratch with MLflow, with support primarily for local development. There
    are a couple of very opinionated and feature-rich options provided by cloud providers
    such as **Amazon Web Services** (**AWS**) Sagemaker, Google AI, and **Azure Machine
    Learning** (**Azure ML**).
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本节中，我们将从头开始使用MLflow实现数据科学工作台的基础，主要支持本地开发。云提供商如**亚马逊网络服务**（**AWS**）Sagemaker、**谷歌AI**和**Azure机器学习**（**Azure
    ML**）提供了一些非常具有意见和功能丰富的选项。
- en: Machine learning engineering teams have freedom in terms of the use cases and
    technologies that the team they are serving will use.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习工程团队在所服务的团队使用的用例和技术方面有自由度。
- en: 'The following steps demonstrate a good workflow for development with a data
    science workbench:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤展示了使用数据科学工作台进行开发的良好工作流程：
- en: The model developer installs the company workbench package through an installer
    or by cloning the repository.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型开发者通过安装程序或克隆仓库来安装公司工作台包。
- en: The model developer runs a command to start a project.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型开发者运行一个命令以启动项目。
- en: The model developer chooses a set of options based on configuration or a prompt.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型开发者根据配置或提示选择一组选项。
- en: 'The basic scaffolding is produced with specific folders for the following items:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本框架生成时，会为以下项目创建特定文件夹：
- en: 'a) `Data`: This will contain all the data assets of your current project'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `Data`：这将包含当前项目的所有数据资产
- en: 'b) `Notebooks`: To hold all the iterative development notebooks with all the
    steps required to produce the model'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `Notebooks`：用于存放所有迭代开发笔记本，包括生成模型所需的所有步骤
- en: 'c) `Model`: A folder that contains the binary model or a reference to models,
    potentially in binary format'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `Model`：包含二进制模型或模型引用的文件夹，可能以二进制格式
- en: 'd) `Source Code`: A folder to store the structured code component of the code
    and reusable libraries'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `Source Code`：用于存储代码的结构化组件和可重用库
- en: 'e) `Output`: A folder for any specific outputs of the project—for instance,
    visualizations, reports, or predictions'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e) `Output`：用于存放项目特定输出的文件夹——例如，可视化、报告或预测
- en: A project folder is created with the standards for the organization around packages,
    dependency management, and tools.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准化的包、依赖管理和工具组织创建项目文件夹。
- en: The model developer is free to iterate and create models using supported tooling
    at an organizational level.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型开发者可以自由迭代并使用组织级别的支持工具创建模型。
- en: Establishing a data science workbench provides a tool for acceleration and democratization
    of machine learning in the organization, due to standardization and efficient
    adoption of machine learning best practices.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 建立数据科学工作台为组织中的机器学习加速和民主化提供了一个工具，这是由于标准化和高效采用机器学习最佳实践的结果。
- en: We will start our workbench implementation in our chapter with sensible components
    used industrywide.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中开始我们的工作台实现，使用业界广泛使用的合理组件。
- en: Building our workbench
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建我们的工作台
- en: 'We will have the following components in the architecture of our development
    environment:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在开发环境架构中拥有以下组件：
- en: '**Docker/Docker Compose**: Docker will be used to handle each of the main component
    dependencies of the architecture, and Docker Compose will be used as a coordinator
    between different containers of software pieces. The advantage of having each
    component of the workbench architecture in Docker is that neither element’s libraries
    will conflict with the other.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker/Docker Compose**：将使用Docker来处理架构中每个主要组件的依赖关系，Docker Compose将用作不同软件组件容器之间的协调器。工作台架构的每个组件都在Docker中，其优势是元素库之间不会相互冲突。'
- en: '**JupyterLab**: The de facto environment to develop data science code and analytics
    in the context of machine learning.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JupyterLab**：在机器学习环境中开发数据科学代码和进行数据分析的事实上环境。'
- en: '**MLflow**: MLflow is at the cornerstone of the workbench, providing facilities
    for experiment tracking, model management, registry, and deployment interface.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLflow**：MLflow是工作台的核心，提供实验跟踪、模型管理、注册和部署接口的功能。'
- en: '**PostgreSQL database**: The PostgreSQL database is part of the architecture
    at this stage, as the storage layer for MLflow for backend metadata. Other relational
    databases could be used as the MLflow backend for metadata, but we will use PostgreSQL.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL数据库**：PostgreSQL数据库作为MLflow后端元数据的存储层，是当前架构的一部分。其他关系型数据库也可以用作MLflow后端元数据，但我们将使用PostgreSQL。'
- en: 'Our data science workbench design can be seen in the following diagram:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据科学工作台设计可以在以下图表中看到：
- en: '![Figure 3.2 – Our data science workbench design'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 – 我们的数据科学工作台设计'
- en: '](img/image0021.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0021.jpg)'
- en: Figure 3.2 – Our data science workbench design
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 我们的数据科学工作台设计
- en: '*Figure 3.2* illustrates the layout of the proposed components that will underpin
    our data science workbench.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3.2* 展示了我们将支持的数据科学工作台组件布局。'
- en: The usual workflow of the practitioner, once the environment is up and running,
    is to develop their code in Jupyter and run their experiments with MLflow support.
    The environment will automatically route to the right MLflow installation configured
    to the correct backend, as shown in *Figure 3.2*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦环境启动并运行，实践者的常规工作流程是在Jupyter中开发他们的代码，并使用MLflow支持运行他们的实验。环境将自动路由到正确配置到正确后端的MLflow安装，如图3.2所示。
- en: Important note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Our data science workbench, as defined in this chapter, is a complete local
    environment. As the book progresses, we will introduce cloud-based environments
    and link our workbench to shared resources.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 根据本章定义，我们的数据科学工作台是一个完整的地方环境。随着本书的进展，我们将介绍基于云的环境，并将我们的工作台与共享资源链接。
- en: 'A sample layout of the project is available in the following GitHub folder:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub文件夹中提供了一个项目布局的示例：
- en: https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter03/gradflow
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter03/gradflow
- en: 'You can see a representation of the general layout of the workbench in terms
    of files here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处看到工作台文件布局的一般表示：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The main elements of this folder structure are outlined here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件夹结构的主要元素在此概述：
- en: '`Makefile`: This allows control of your workbench. By issuing commands, you
    can ask your workbench to set up a new environment notebook to start MLflow in
    different formats.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Makefile`：这允许您控制工作台。通过发出命令，您可以要求工作台设置一个新的环境笔记本以以不同格式启动MLflow。'
- en: '`README.md`: A file that contains a sample description of your project and
    how to run it.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：一个包含项目示例描述及其如何运行的文件。'
- en: '`data` folder: A folder where we store the datasets used during development
    and mount the data directories of the database when running locally.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`文件夹：一个文件夹，用于存储开发期间使用的数据集，并在本地运行时挂载数据库的数据目录。'
- en: '`docker`: A folder that encloses the Docker images of the different subsystems
    that our environment consists of.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker`：一个包含我们环境所包含的不同子系统Docker镜像的文件夹。'
- en: '`docker-compose.yml`: A file that contains the orchestration of different services
    in our workbench environment—namely: Jupyter Notebooks, MLflow, and PostgreSQL
    to back MLflow.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose.yml`：一个包含我们工作台环境中的不同服务编排的文件——即：Jupyter笔记本、MLflow和用于支持MLflow的PostgreSQL。'
- en: '`docs`: Contains relevant project documentation that we want persisted for
    the project.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docs`：包含我们希望持久化的相关项目文档。'
- en: '`notebooks`: A folder that contains the notebook information.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`notebooks`：一个包含笔记本信息的文件夹。'
- en: '`requirements.txt`: A requirements file to add libraries to the project.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements.txt`：一个要求文件，用于向项目添加库。'
- en: '`src`: A folder that encloses the source code of the project, to be updated
    in further phases of the project.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`：一个包含项目源代码的文件夹，将在项目的后续阶段进行更新。'
- en: '`tests`: A folder that contains end-to-end testing for the code of the project.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests`：一个包含项目代码端到端测试的文件夹。'
- en: '`tox.ini`: A templated file that controls the execution of unit tests.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tox.ini`：一个模板文件，用于控制单元测试的执行。'
- en: We will now move on to using our own development environment for a stock-prediction
    problem, based on the framework we have just built.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续使用我们自己的开发环境来解决股票预测问题，基于我们刚刚构建的框架。
- en: Using the workbench for stock prediction
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工作台进行股票预测
- en: In this section, we will use the workbench step by step to set up a new project.
    Follow the instructions step by step to start up your environment and use the
    workbench for the stock-prediction project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将逐步使用工作台来设置新项目。按照步骤说明启动您的环境并使用工作台进行股票预测项目。
- en: Important note
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is critical that all packages/libraries listed in the *Technical requirements*
    section are correctly installed on your local machine to enable you to follow
    along.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在“技术要求”部分列出的所有软件包/库都必须正确安装在您的本地机器上，这对于您跟随教程至关重要。
- en: Starting up your environment
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动你的环境
- en: 'We will move on next to exploring your own development environment, based on
    the development environment shown in this section. Please execute the following
    steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将接着探索您自己的开发环境，基于本节中所示的开发环境。请执行以下步骤：
- en: Copy the contents of the project available in https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter03/gradflow.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制位于 https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter03/gradflow
    的项目内容。
- en: 'Start your local environment by running the following command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令启动您的本地环境：
- en: '[PRE1]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Inspect the created environments, like this:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查创建的环境，如下所示：
- en: '[PRE2]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot presents three Docker images: the first for Jupyter,
    the second for MLflow, and the third for the PostgreSQL database. The status should
    show `Up x minutes`:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图展示了三个 Docker 镜像：第一个用于 Jupyter，第二个用于 MLflow，第三个用于 PostgreSQL 数据库。状态应显示为 `Up
    x minutes`：
- en: '![Figure 3.3 – Running Docker images'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – 运行 Docker 镜像'
- en: '](img/image0031.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0031.jpg)'
- en: Figure 3.3 – Running Docker images
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 运行 Docker 镜像
- en: 'The usual ports used by your workbench are listed as follows: Jupyter serves
    in port `8888`, MLflow serves in port `5000`, and PostgreSQL serves in port `5432`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您工作台通常使用的端口如下所示：Jupyter 在端口 `8888` 上运行，MLflow 在端口 `5000` 上运行，PostgreSQL 在端口
    `5432` 上运行。
- en: In case any of the containers fail, you might want to check if the ports are
    used by different services. If this is the case, you will need to turn off all
    of the other services.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何容器失败，您可能需要检查端口是否被不同的服务使用。如果是这种情况，您将需要关闭所有其他服务。
- en: 'Check your Jupyter Notebooks environment at [http://localhost:8888](http://localhost:8888),
    as illustrated in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您的 Jupyter Notebooks 环境 [http://localhost:8888](http://localhost:8888)，如下面的截图所示：
- en: '![Figure 3.4 – Running Jupyter environment'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – 运行 Jupyter 环境'
- en: '](img/image0041.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0041.jpg)'
- en: Figure 3.4 – Running Jupyter environment
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 运行 Jupyter 环境
- en: You should have a usable environment, allowing you to create new `notebooks`
    file in the specified folder.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有一个可用的环境，允许您在指定的文件夹中创建新的 `notebooks` 文件。
- en: 'Check your MLflow environment at http://localhost:5000, as illustrated in the
    following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 http://localhost:5000 上检查您的 MLflow 环境，如下面的截图所示：
- en: '![Figure 3.5 – Running MLflow environment'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – 运行 MLflow 环境'
- en: '](img/image0051.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0051.jpg)'
- en: Figure 3.5 – Running MLflow environment
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 运行 MLflow 环境
- en: '*Figure 3.5* shows your experiment tracker environment in MLflow that you will
    use to visualize your experiments running in MLflow.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.5* 展示了您将在 MLflow 中使用的实验跟踪环境。'
- en: 'Run a sample experiment in MLflow by running the `notebook` file available
    in `/notebooks/mlflow_sample.ipynb`, as illustrated in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行 `/notebooks/mlflow_sample.ipynb` 中的 `notebook` 文件在 MLflow 中运行一个示例实验，如下面的截图所示：
- en: '![Figure 3.6 – Excerpt of mlflow_sample code'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – mlflow_sample 代码摘录'
- en: '](img/image0061.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0061.jpg)'
- en: Figure 3.6 – Excerpt of mlflow_sample code
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – mlflow_sample 代码摘录
- en: The code in *Figure 3.6* imports MLflow and creates a dummy experiment manually,
    on the second line, using `mlflow.set_experiment(‘mlflow_experiment’)`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.6* 中的代码导入 MLflow 并手动创建一个实验，在第二行使用 `mlflow.set_experiment(''mlflow_experiment'')`。'
- en: The `with mlflow.start_run()` line is responsible for starting and tearing down
    the experiment in MLflow.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`with mlflow.start_run()` 行负责在 MLflow 中启动和拆除实验。'
- en: In the three following lines, we log a couple of string-type test parameters,
    using the `mlflow.log_param` function. To log numeric values, we will use the
    `mlflow.log_metric` function.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的三行中，我们使用 `mlflow.log_param` 函数记录几个字符串类型的测试参数。要记录数值，我们将使用 `mlflow.log_metric`
    函数。
- en: Finally, we also log the entire file that executed the function to ensure traceability
    of the model and code that originated it, using the `mlflow.log_artifact(“mlflow_example.ipynb”)`
    function.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还将使用 `mlflow.log_artifact("mlflow_example.ipynb")` 函数记录执行函数的整个文件，以确保模型及其源代码的可追溯性。
- en: 'Check the sample runs, to confirm that the environment is working correctly.
    You should go back to the MLflow **user interface** (**UI**) available at http://localhost:5000
    and check if the new experiment was created, as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 检查示例运行情况，以确认环境是否正常工作。您应该回到位于 http://localhost:5000 的 MLflow **用户界面**（**UI**）并检查是否创建了新的实验，如下面的截图所示：
- en: '![Figure 3.7 – MLflow test experiment'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.7 – MLflow 测试实验'
- en: '](img/image0071.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0071.jpg)'
- en: Figure 3.7 – MLflow test experiment
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – MLflow 测试实验
- en: '*Figure 3.7* displays the additional parameters that we used on our specific
    experiment and the specific metric named `i` that is visible in the **Metrics**
    column.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.7* 显示了我们特定实验中使用的附加参数以及 **指标** 列中可见的特定指标 `i`。'
- en: 'Next, you should click on the experiment created to have access to the details
    of the run we have executed so far. This is illustrated in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您应该点击创建的实验以访问我们迄今为止执行的运行的详细信息。以下是一个截图示例：
- en: '![Figure 3.8 – MLflow experiment details'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.8 – MLflow 实验细节'
- en: '](img/image0081.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0081.jpg)'
- en: Figure 3.8 – MLflow experiment details
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – MLflow 实验细节
- en: Apart from details of the metrics, you also have access to the `mlflow_example`
    notebook file at a specific point in time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 除了指标细节之外，您还可以访问特定时间点的 `mlflow_example` 笔记本文件。
- en: At this stage, you have your environment running and working as expected. Next,
    we will update it with our own algorithm; we’ll use the one we created in [*Chapter
    2*](B16783_02_Final_SB_epub.xhtml#_idTextAnchor030), *Your Machine Learning Project*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，您已经拥有一个按预期运行和工作的环境。接下来，我们将使用我们自己的算法来更新它；我们将使用我们在 [*第 2 章*](B16783_02_Final_SB_epub.xhtml#_idTextAnchor030)，*您的机器学习项目*
    中创建的算法。
- en: Updating with your own algorithms
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用您自己的算法进行更新
- en: 'Let’s update the notebook file that we created in [*Chapter 2*](B16783_02_Final_SB_epub.xhtml#_idTextAnchor030),
    *ML Problem Framing*, and add it to the notebook folder on your local workbench.
    The code excerpt is presented here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们在 [*第 2 章*](B16783_02_Final_SB_epub.xhtml#_idTextAnchor030)，*ML 问题框架*
    中创建的笔记本文件，并将其添加到您本地工作台上的笔记本文件夹中。代码摘录如下：
- en: '[PRE3]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Under the `notebook` folder in the `notebooks/stockpred_randomizer.ipynb` file,
    you can follow along with the integration of the preceding code excerpt in our
    recently created data science workbench. We will proceed as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `notebooks/stockpred_randomizer.ipynb` 文件中的 `notebook` 文件夹下，您可以跟随我们最近创建的数据科学工作台中前面代码摘录的集成。我们将按以下步骤进行：
- en: We will first import all the dependencies needed and run the first cell of the
    notebook, as follows:![Figure 3.9 – MLflow experiment details
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先导入所有需要的依赖项并运行笔记本的第一个单元，如下所示：![图 3.9 – MLflow 实验细节
- en: '](img/image0091.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image0091.jpg)'
- en: Figure 3.9 – MLflow experiment details
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.9 – MLflow 实验细节
- en: Let’s declare and execute the class outlined in *Figure 3.9*, represented in
    the second cell of the notebook, as follows:![Figure 3.10 – Notebook cell with
    the RandomPredictor class declaration
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们声明并执行 *图 3.9* 中概述的类，该类在笔记本的第二单元中表示，如下所示：![图 3.10 – 包含 RandomPredictor 类声明的笔记本单元
- en: '](img/image010.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image010.jpg)'
- en: Figure 3.10 – Notebook cell with the RandomPredictor class declaration
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.10 – 包含 RandomPredictor 类声明的笔记本单元
- en: We can now save our model in the MLflow infrastructure so that we can test the
    loading of the model. `model_path` holds the folder name where the model will
    be saved. You need to instantiate the model in an `r` variable and use `mlflow.pyfunc.save_model`
    to save the model locally, as illustrated in the following code snippet:![Figure
    3.11 – Notebook demonstrating saving the model
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以在 MLflow 基础设施中保存我们的模型，以便我们可以测试模型的加载。`model_path` 包含模型将保存的文件夹名称。您需要在 `r`
    变量中实例化模型，并使用 `mlflow.pyfunc.save_model` 将模型本地保存，如下面的代码片段所示：![图 3.11 – 展示保存模型的笔记本
- en: '](img/image011.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image011.jpg)'
- en: Figure 3.11 – Notebook demonstrating saving the model
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.11 – 展示保存模型的笔记本
- en: 'You can see on the left pane of your notebook environment that a new folder
    was created alongside your files to store your models. This folder will store
    the Conda environment and the pickled/binarized Python function of your model,
    as illustrated in the following screenshot:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在笔记本环境左侧的窗格中看到，在您的文件旁边创建了一个新文件夹来存储您的模型。此文件夹将存储 Conda 环境以及您的模型的可 pickled/binarized
    Python 函数，如下面的截图所示：
- en: '![Figure 3.12 – Notebook demonstrating the saved model folder'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.12 – 展示保存模型文件夹的笔记本'
- en: '](img/image012.jpg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image012.jpg)'
- en: Figure 3.12 – Notebook demonstrating the saved model folder
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.12 – 展示保存模型文件夹的笔记本
- en: 'Next, we can load and use the model to check that the saved model is usable,
    as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以加载并使用模型来检查保存的模型是否可用，如下所示：
- en: '![Figure 3.13 – Notebook demonstrating the saved model folder'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – 展示保存模型文件夹的笔记本'
- en: '](img/image013.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image013.jpg)'
- en: Figure 3.13 – Notebook demonstrating the saved model folder
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 展示保存模型文件夹的笔记本
- en: '*Figure 3.14* demonstrates the creation of a random input `loaded_model` to
    predict over the input vector. We will run the experiment with the name `stockpred_experiment_days_up`,
    logging as a metric the number of days on which the market was up on each of the
    models, as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.14* 展示了创建一个随机输入 `loaded_model` 来预测输入向量的过程。我们将以 `stockpred_experiment_days_up`
    为名运行实验，将每个模型在市场上涨的天数作为指标进行记录，如下所示：'
- en: '![Figure 3.14 – Notebook cell demonstrating use of the loaded model'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14 – 展示加载模型使用的笔记本单元格'
- en: '](img/image014.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image014.jpg)'
- en: Figure 3.14 – Notebook cell demonstrating use of the loaded model
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 展示加载模型使用的笔记本单元格
- en: 'To check the last runs of the experiment, you can look at http://localhost:5000
    and check that the new experiment was created, as illustrated in the following
    screenshot:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实验的最后运行，你可以查看 http://localhost:5000 并确认新实验已被创建，如下面的屏幕截图所示：
- en: '![Figure 3.15 – Initial UI of MLflow for our stockpred experiment'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15 – 我们 stockpred 实验的 MLflow 初始用户界面'
- en: '](img/image015.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image015.jpg)'
- en: Figure 3.15 – Initial UI of MLflow for our stockpred experiment
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 我们 stockpred 实验的 MLflow 初始用户界面
- en: 'You can now compare multiple runs of our algorithm and see differences in the
    **Days Up** metric, as illustrated in the following screenshot. You can choose
    accordingly to delve deeper on a run that you would like to have more details
    about:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以比较我们算法的多次运行，并查看**天数上升**指标的变化，如下面的屏幕截图所示。你可以相应地选择深入了解你想要更多详细信息的运行：
- en: '![Figure 3.16 – Logged details of the artifacts saved'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.16 – 保存的工件日志细节'
- en: '](img/image016.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image016.jpg)'
- en: Figure 3.16 – Logged details of the artifacts saved
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 保存的工件日志细节
- en: In *Figure 3.16*, you can clearly see the logged details of our run—namely,
    the artifact model and the **Days Up** metric.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 3.16*中，你可以清楚地看到我们运行的日志细节——即，工件模型和**天数上升**指标。
- en: 'In order to tear down the environment properly, you must run the following
    command in the same folder:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确地拆除环境，你必须在同一文件夹中运行以下命令：
- en: '[PRE4]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the concept of a data science workbench and explored some
    of the motivation behind adopting this tool as a way to accelerate our machine
    learning engineering practice.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了数据科学工作台的概念，并探讨了采用此工具作为加速我们的机器学习工程实践的一些动机。
- en: We designed a data science workbench, using MLflow and adjacent technologies
    based on our requirements. We detailed the steps to set up your development environment
    with MLflow and illustrated how to use it with existing code. In later sections,
    we explored the workbench and added to it our stock-trading algorithm developed
    in the last chapter.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据需求设计了一个数据科学工作台，使用 MLflow 和基于相邻技术的技术。我们详细说明了使用 MLflow 设置你的开发环境的步骤，并说明了如何使用现有代码。在后面的章节中，我们探讨了工作台，并添加了我们上一章开发的股票交易算法。
- en: In the next chapter, we will focus on experimentation to improve our models
    with MLflow, using the workbench developed in this chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于使用 MLflow 进行实验，以改进我们的模型，使用本章开发的工作台。
- en: Further reading
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In order to further your knowledge, you can consult the documentation in the
    following links:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步扩展你的知识，你可以查阅以下链接中的文档：
- en: 'Cookiecutter documentation page: [https://cookiecutter.readthedocs.io/en/1.7.2/](https://cookiecutter.readthedocs.io/en/1.7.2/)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookiecutter 文档页面：[https://cookiecutter.readthedocs.io/en/1.7.2/](https://cookiecutter.readthedocs.io/en/1.7.2/)
- en: 'Reference information about cookie cutters: [https://drivendata.github.io/cookiecutter-data-science/](https://drivendata.github.io/cookiecutter-data-science/)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 cookie cutters 的参考信息：[https://drivendata.github.io/cookiecutter-data-science/](https://drivendata.github.io/cookiecutter-data-science/)
- en: 'The motivation behind data science workbenches: [https://dzone.com/articles/what-is-a-data-science-workbench-and-why-do-data-s#](https://dzone.com/articles/what-is-a-data-science-workbench-and-why-do-data-s#)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据科学工作台背后的动机：[https://dzone.com/articles/what-is-a-data-science-workbench-and-why-do-data-s#](https://dzone.com/articles/what-is-a-data-science-workbench-and-why-do-data-s#)
