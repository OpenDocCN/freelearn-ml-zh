- en: Chapter 6. Building Personalized Recommendation Engines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。构建个性化推荐引擎
- en: Recommendation engines have been evolving very fast, with a lot of research
    also going into this field. Big multinational companies are investing huge amounts
    of money into this field. As mentioned earlier, right from the earlier models
    of recommendation engines such as collaborative filtering, these systems have
    been a huge success. With more and more revenues being generated through recommendation
    engines and more and more people using the Internet for their shopping needs,
    reading news, or for getting information related to health, business organizations
    have seen huge business in tapping this available user activities on the Internet.
    With the increase in the number of users of recommendation engines, and with more
    and more applications being powered by recommendation engines, users also started
    asking for personalized suggestions rather than community-based recommendations.
    This requirement of the user community was taken as the new challenge, and personalized
    recommendation engines have been built for providing suggestions at a personal
    level.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐引擎正在快速发展，大量研究也投入到了这个领域。大型跨国公司在这个领域投入了巨额资金。如前所述，从早期的推荐引擎模型，如协同过滤，这些系统已经取得了巨大成功。随着通过推荐引擎产生的收入越来越多，越来越多的人使用互联网进行购物、阅读新闻或获取与健康、商业相关的信息，商业组织看到了从互联网上可用的用户活动中获得巨大商业机会。随着推荐引擎用户数量的增加，以及越来越多的应用程序由推荐引擎驱动，用户也开始要求个性化的建议，而不是基于社区的推荐。用户社区的这个需求被视为新的挑战，为此，已经构建了个性化的推荐引擎，以在个人层面提供建议。
- en: Almost all the industry domains are currently building recommendation engines
    that can recommend at personalized levels.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有行业领域目前都在构建能够提供个性化推荐的推荐引擎。
- en: 'The following are a few personalized recommendations:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些个性化推荐：
- en: Personalized news recommendations--Google News
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个性化新闻推荐——Google News
- en: Personalized health-care systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个性化医疗保健系统
- en: Personalized travel recommendation systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个性化旅行推荐系统
- en: Personalized recommendations on Amazon
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊上的个性化推荐
- en: Personalized movie recommendations on YouTube
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YouTube上的个性化电影推荐
- en: 'The following is the screenshot of personalized recommendations:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为个性化推荐的截图：
- en: '![Building Personalized Recommendation Engines](img/image00351.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![构建个性化推荐引擎](img/image00351.jpeg)'
- en: In the [Chapter 3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation Engines
    Explained"), *Recommendation Engines Explained*, we learned in detail about content-based
    recommender systems and context-aware recommender systems. In this chapter, we
    will recall these topics in brief and then move ahead to build content-based and
    context-aware recommender systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](part0022.xhtml#aid-KVCC1 "第3章。推荐引擎解释")《推荐引擎解释》中，我们详细学习了基于内容的推荐系统和基于上下文的推荐系统。在本章中，我们将简要回顾这些主题，然后继续构建基于内容和基于上下文的推荐系统。
- en: Personalized recommender systems
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 个性化推荐系统
- en: 'In this chapter, we will learn about two flavours of personalized recommenders:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习两种个性化推荐器的类型：
- en: Content-based recommender systems
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于内容的推荐系统
- en: Context-aware recommender systems
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于上下文的推荐系统
- en: Content-based recommender systems
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于内容的推荐系统
- en: Building collaborative filtering is relatively easy. In the fifth chapter, we
    learned about building collaborative filtering recommender systems. While building
    those systems, we just considered the ratings given to a product and the information
    about whether a product is liked or not. With this minimal information, we built
    the systems. To many people's surprise, these systems performed very well. But
    these systems had their own limitations, such as the cold start problem explained
    in the previous chapters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 构建协同过滤相对简单。在第五章中，我们学习了如何构建协同过滤推荐系统。在构建这些系统时，我们只考虑了产品获得的评分以及产品是否受欢迎的信息。凭借这些最小信息，我们构建了系统。令许多人惊讶的是，这些系统表现非常出色。但这些系统也有自己的局限性，例如前几章中解释的冷启动问题。
- en: Assume a case of a user, Nick, giving five-star rating to a movie, say *Titanic.*
    What could have made Nick give that rating? May be the story of the film, the
    actors in the movie, the background score, or the screenplay. These preferences
    for these features made Nick rate the movie. Wouldn't including this internal
    information of preferences for the product/features make more sense while building
    recommendations?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个用户尼克给一部电影评了五星，比如《泰坦尼克号》。是什么让尼克给出了这个评价？可能是电影的故事、电影中的演员、背景音乐或剧本。这些特征的偏好使得尼克对电影进行了评分。在构建推荐时，包含产品/特征的偏好内部信息不是更有意义吗？
- en: In collaborative filtering, the basic assumption is that people with similar
    taste in the past will have similar taste in the future. If we closely observe,
    this assumption may not apply in all cases. For example, if my neighbors have
    rated the thriller movie *The Exorcist highly*, that movie should not be suggested
    to me since I have a preference for romantic movies. I should instead get *Titanic,*
    which is of the romance genre, as a suggestion. I do not always have the same
    taste as my neighbors; I would be happy if I got suggestions solely based on my
    preferences and actions. Businesses have seen a lot of business opportunities
    in implementing these types of recommendations, known as personalized recommender
    systems, at an individual level.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在协同过滤中，基本假设是过去有相似品味的人在未来也会有相似的品味。如果我们仔细观察，这个假设可能并不适用于所有情况。例如，如果我的邻居对恐怖电影《驱魔人》给出了高度评价，那么这部电影不应该被推荐给我，因为我更喜欢浪漫电影。我应该得到一部浪漫类型的电影，比如《泰坦尼克号》，作为推荐。我并不总是和我的邻居有相同的品味；如果我能得到仅基于我的偏好和行为的建议，我会很高兴。企业已经看到了在个人层面上实施这些类型推荐的大量商业机会，这些推荐被称为个性化推荐系统。
- en: Building a content-based recommendation system
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建基于内容的推荐系统
- en: 'In content-based recommender systems, we use the content information of both
    users and items while building recommendation engines. A typical content-based
    recommender system will perform the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于内容的推荐系统中，我们在构建推荐引擎时同时使用用户和物品的内容信息。一个典型的基于内容的推荐系统将执行以下步骤：
- en: Generate user profiles.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成用户配置文件。
- en: Generate item profile.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成物品配置文件。
- en: Generate the recommendation engine model.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成推荐引擎模型。
- en: Suggest the top N recommendations.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供前N个推荐。
- en: We first generate user and item profiles from the available information. A profile
    typically contains preferences for the features of items and users (refer to [Chapter
    3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation Engines Explained"), *Recommendation
    Engines Explained* for details). Once the profiles are created, we choose a method
    to build the recommendation engine model. Many data-mining techniques such as
    classification, text similarity approaches such as *tf-idf* similarity, and Matrix
    factorization models can be applied for building content-based recommendation
    engines.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从可用信息中生成用户和物品配置文件。配置文件通常包含对物品和用户特征的偏好（有关详细信息，请参阅[第3章](part0022.xhtml#aid-KVCC1
    "第3章。推荐引擎解释")，《推荐引擎解释》）。一旦创建了配置文件，我们就选择一种方法来构建推荐引擎模型。许多数据挖掘技术，如分类、文本相似度方法如*tf-idf*相似度，以及矩阵分解模型，都可以应用于构建基于内容的推荐引擎。
- en: 'We can even employ multiple recommendation engine models and build hybrid recommendation
    engines to serve as content-based recommendations. A typical content recommender
    is depicted in the following figure:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以采用多个推荐引擎模型并构建混合推荐引擎，作为基于内容的推荐。以下图示了一个典型的内容推荐器：
- en: '![Building a content-based recommendation system](img/image00352.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![构建基于内容的推荐系统](img/image00352.jpeg)'
- en: Content-based recommendation using R
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用R进行基于内容的推荐
- en: Let's start building a personalized recommendation engine in R. We choose the
    MovieLens dataset to build our system. In the previous section, we refreshed the
    concepts of content-based recommender systems. There are multiple ways we can
    build personalized recommenders; in this section, we will use the multiclass classification
    approach to build our basic content-based recommendation engine.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始用R构建一个个性化的推荐引擎。我们选择MovieLens数据集来构建我们的系统。在前一节中，我们回顾了基于内容的推荐系统的概念。我们可以用多种方式构建个性化推荐者；在本节中，我们将使用多类分类方法来构建我们的基本基于内容的推荐引擎。
- en: Using the classification approach, we are trying to build a model-based recommendation
    engine. Most recommender systems--either collaborative filtering or content-based--use
    neighbourhood methods to build the recommenders. Let's explore how we can use
    a supervised machine-learning approach to build the recommendation engines.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分类方法，我们试图构建一个基于模型的推荐引擎。大多数推荐系统——无论是协同过滤还是基于内容的——都使用邻域方法来构建推荐器。让我们探讨如何使用监督机器学习方法来构建推荐引擎。
- en: 'Before we start writing the code, let''s discuss the steps for building the
    personalized recommender system. The following figure shows the order of steps
    we would be following to achieve our objective:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，让我们讨论构建个性化推荐系统的步骤。以下图示展示了我们将遵循的步骤顺序以实现我们的目标：
- en: '![Content-based recommendation using R](img/image00353.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用R进行基于内容的推荐](img/image00353.jpeg)'
- en: 'The first step would always be to gather the data and pull it into the programming
    environment so that we may apply further steps. For our use case, we download
    the MovieLens dataset containing three sets of data, as defined next:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步始终是收集数据并将其拉入编程环境，以便我们可以应用后续步骤。在我们的用例中，我们下载了MovieLens数据集，包含三组数据，如下定义：
- en: Ratings data containing userID, itemID, rating, timestamp
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含userID、itemID、评分和时间戳的评分数据
- en: User data containing the user information, such as userID, age, gender, occupation,
    ZIP code, and so on
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含用户信息的数据，如userID、年龄、性别、职业、ZIP代码等
- en: Movie data containing a certain movie's information, such as movieID, release
    date, URL, genre details, and so on
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含某些电影信息的数据，如movieID、上映日期、URL、流派细节等
- en: 'The second step would be preparing the data required to build the classification
    models. In this step, we extract the required features of the users and class
    labels to build the classification model:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步将是准备构建分类模型所需的数据。在这一步中，我们提取构建分类模型所需的用户特征和类别标签：
- en: '![Content-based recommendation using R](img/image00354.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![使用R进行基于内容的推荐](img/image00354.jpeg)'
- en: For our example case, we define the ratings (1 to 5) given by the users as class
    labels, such as 1-3 rating as 0 and 4-5 rating as 1\. Thus, we will build a two-class
    classification model. Our model will predict the class label, given the input
    features for a given user.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于我们的示例案例，我们将用户给出的评分（1到5）定义为类别标签，例如1-3评分作为0，4-5评分作为1。因此，我们将构建一个双类分类模型。我们的模型将根据给定用户的输入特征预测类别标签。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You might be wondering why we are choosing binary classification instead of
    multiclass classification. The choice of model is left to the person building
    the recommender system; in our case, with the dataset we have chosen, binary class
    classification fits better than a multiclass classification. Readers are encouraged
    to try multiclass-classification for your understanding.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能想知道为什么我们选择二元分类而不是多类分类。模型的选择留给构建推荐系统的人；在我们的情况下，由于我们选择的数据库，二元分类比多类分类更适合。鼓励读者尝试多类分类以加深理解。
- en: We choose user demography and item features from user data and item data to
    form the features of our binary classification model. We extended the `User_item_rating`
    data by including features such as genre information for the movie rated by the
    user, user personal information such as age, gender, occupation, and so on. The
    final features and class labels can be seen in the preceding figure.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从用户数据和项目数据中选择用户人口统计信息和项目特征，以形成我们的二元分类模型的特征。我们通过包括用户评分的电影的流派信息、用户的个人信息（如年龄、性别、职业等）等特征扩展了`User_item_rating`数据。最终的特征和类别标签可以在前面的图中看到。
- en: The third step will be to build the binary classification model. We will choose
    the RandomForest algorithm to build the class.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步将是构建二元分类模型。我们将选择RandomForest算法来构建类别。
- en: The fourth and final step will be to generate the top-N recommendations for
    the users. For our example, we take a test user and predict the class labels for
    the movie that he has not rated earlier and send the top-N movies, which have
    higher probability ratings predicted by our classification model.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 第四步和最后一步将是为用户生成前N个推荐。在我们的例子中，我们选择一个测试用户，预测他之前未评分的电影的类别标签，并发送具有更高概率评分的前N部电影，这些评分是由我们的分类模型预测的。
- en: Please note that the choice of generating the top-N recommendations are left
    to the choice of the users.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，生成前N个推荐的选择留给用户自己决定。
- en: Let's implement the aforementioned steps using R. In this section, we will go
    through a step-by-step implementation of content-based recommendation using R.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用R实现上述步骤。在本节中，我们将逐步实现使用R的内容推荐。
- en: Dataset description
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据集描述
- en: For this exercise, we use two MovieLens dataset files--one is a ratings file
    containing ratings given to 943 to 1682 movies on a scale of 1-5, and the second
    is an item dataset file containing content information, that is, information about
    the movie genre, movie name, movie ID, URLs, and so on.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用两个MovieLens数据集文件--一个是包含对943到1682部电影评分的评分文件，评分范围为1-5，另一个是包含内容信息的项目数据集文件，即关于电影流派、电影名称、电影ID、URL等信息。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The MovieLens dataset can be downloaded from following URL:[http://grouplens.org/datasets/movielens/](http://grouplens.org/datasets/movielens/)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: MovieLens数据集可以从以下URL下载：[http://grouplens.org/datasets/movielens/](http://grouplens.org/datasets/movielens/)
- en: 'Loading ratings data into R environment using `read.csv()` function available
    in R:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用R中可用的`read.csv()`函数将评分数据加载到R环境中：
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code removes the last column from the DataFrame:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码从DataFrame中删除最后一列：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'See the first five lines of the data, we use `head()` function as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`head()`函数查看数据的前五行，如下所示：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See the columns of the rating data frame using `names()` function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`names()`函数查看评分数据框的列。
- en: 'See the descriptions of the ratings function using `str()` function. All the
    results of the three mentioned functions are shown as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`str()`函数查看评分函数的描述。三个提到的函数的所有结果如下所示：
- en: '![Dataset description](img/image00355.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00355.jpeg)'
- en: 'The following code loads item data into the R environment using the `read.csv()`
    function available in R:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用R中的`read.csv()`函数将项目数据加载到R环境中：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we add columns to the data frame:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在数据框中添加列：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then we remove unwanted data; for this exercise we are keeping only the genre
    information only:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们删除不需要的数据；在这个练习中，我们只保留流派信息：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Dataset description](img/image00356.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00356.jpeg)'
- en: 'The description of movies is given by `str(movies)`.The column names can be
    seen using `names(movies)`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 电影的描述由`str(movies)`给出。列名可以通过`names(movies)`查看：
- en: '![Dataset description](img/image00357.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00357.jpeg)'
- en: The next step is to create feature profiles of customers to build a classification
    model. We should extend the rating data frame containing userID, movieID, and
    rating with the movie properties, as shown next.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建客户特征配置文件以构建分类模型。我们应该将包含userID、movieID和评分的评分数据框与电影属性扩展，如下所示。
- en: 'In the following code, we use `merge()` to perform a join function to merge
    ratings data with item data:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们使用`merge()`执行连接函数以合并评分数据与项目数据：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Dataset description](img/image00358.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00358.jpeg)'
- en: 'Let''s see the columns names using `names()` method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`names()`方法查看列名：
- en: '![Dataset description](img/image00359.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00359.jpeg)'
- en: 'Now we create the class labels for each record of the profile we just created.
    We shall create a binary class label for each of the ratings so that 1-3 ratings
    will be labelled as 0 and 4-5 ratings as 1\. The following code does this conversion
    for us. We use the `lapply()` function to reshape the ratings:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为我们刚才创建的每个配置文件记录创建类标签。我们将为每个评分创建一个二元类标签，因此1-3个评分将被标记为0，4-5个评分将被标记为1。以下代码为我们执行此转换。我们使用`lapply()`函数重塑评分：
- en: 'The following code manages the conversion of numerical ratings to binary categorical
    variable:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码管理将数值评分转换为二元分类变量的转换：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we combine the newly created rating categorical rating variable - `nrat`
    - with the original rating data frame ratings using `cbind()`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将新创建的评分分类变量`nrat`与原始评分数据框ratings使用`cbind()`结合：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Dataset description](img/image00360.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00360.jpeg)'
- en: In the preceding figure, we can observe the new rating binary class, `nrat`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以观察到新的评分二元类`nrat`。
- en: 'Now let''s observe the variables that will be going into the model building
    stage using the `apply()` function by applying `table()` to each column, as shown
    next:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`apply()`函数通过将`table()`应用于每一列来观察将进入模型构建阶段的变量，如下所示：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Dataset description](img/image00361.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00361.jpeg)'
- en: 'From the preceding results, we can observe that the number of zeroes is very
    high when compared to the number of 1s; so let''s remove this variable from our
    feature list. Also, let''s remove the rating variable, as we have created a new
    variable `nrat`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的结果中，我们可以观察到与1的数量相比，零的数量非常高；因此，让我们从我们的特征列表中删除这个变量。此外，让我们删除评分变量，因为我们已经创建了一个新的变量`nrat`：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We shall now standardize or center the data by using the `scale()` function
    available in R before we build the model as shown in the following code snippet.
    Standardizing will adjust data in different scales to common a scale. The scale
    function will apply centering by removing column means on the each of corresponding
    column:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建模型之前，我们将使用R中的`scale()`函数对数据进行标准化或居中，如下面的代码片段所示。标准化将调整不同尺度的数据以适应一个共同的尺度。该函数将通过移除每个对应列的列均值来实现居中：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Dataset description](img/image00362.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00362.jpeg)'
- en: Now let's get into building the model using the `randomForest` algorithm for
    binary classification. Before that, let's divide the data into training and test
    sets with an 80:20 split.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`randomForest`算法来构建二元分类模型。在此之前，让我们将数据分为训练集和测试集，比例为80:20。
- en: The following code will first create a randomize index object of all the data.
    Then we use this indexes to divide the train and test sets.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码首先创建所有数据的随机索引对象。然后我们使用这些索引来划分训练集和测试集。
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Dataset description](img/image00363.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00363.jpeg)'
- en: 'Now let''s build the model using `randomForest` algorithm from the library
    `randomForest`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`randomForest`库中的`randomForest`算法来构建模型：
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the following code snippet, we are converting the integer `nrat` variable
    to factor format.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们将整数变量`nrat`转换为因子格式。
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can see the details of the model build, fit, by just typing, `fit`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 只需输入`fit`，我们就可以看到模型构建、拟合的详细信息：
- en: '![Dataset description](img/image00364.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00364.jpeg)'
- en: In the previous code snippet we have used the `randomforest()` method with default
    values. For random forests we have two parameters which can be tuned for optimal
    performance; **mtry** is number of samples at each tree split, **ntree** is number
    of decision trees to be grown. Using parameter tuning and cross-validation approaches,
    we should choose optimal parameters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用了默认值的`randomforest()`方法。对于随机森林，我们有两个参数可以调整以获得最佳性能；**mtry**是每个树分裂处的样本数，**ntree**是要生成的决策树的数量。使用参数调整和交叉验证方法，我们应该选择最佳参数。
- en: 'We can also see the summary of the model using `summary()`, as shown next:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`summary()`函数查看模型的摘要，如下所示：
- en: '![Dataset description](img/image00365.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00365.jpeg)'
- en: 'Now, let''s see how the model performs on the test set:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看模型在测试集上的表现：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Dataset description](img/image00366.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00366.jpeg)'
- en: 'Let''s evaluate the model using the Precision-Recall method:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用精确率-召回率方法评估模型：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Dataset description](img/image00367.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00367.jpeg)'
- en: 'With the preceding results, we are quite happy with a 60% precision rate and
    a 75% recall rate. Now we move ahead to generate the top-N recommendations to
    a user ID (943) by performing the following steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的结果，我们对60%的精确率和75%的召回率感到非常满意。现在我们继续进行以下步骤，为用户ID（943）生成前N个推荐：
- en: 'Create a DataFrame containing all the movies not rated by the active user (user
    id: 943 in our case).'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含所有未被活跃用户评分的电影的DataFrame（在我们的案例中用户ID为943）。
- en: '[PRE16]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Dataset description](img/image00368.jpeg)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![数据集描述](img/image00368.jpeg)'
- en: '[PRE17]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Dataset description](img/image00369.jpeg)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![数据集描述](img/image00369.jpeg)'
- en: 'Build a profile for this active user DataFrame:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此活跃用户DataFrame构建一个配置文件：
- en: '[PRE18]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Dataset description](img/image00370.jpeg)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![数据集描述](img/image00370.jpeg)'
- en: 'Predict ratings, sort and generate 10 recommendations:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预测评分，排序并生成10个推荐：
- en: '[PRE19]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With this step, we have when extending or improving finished building the content-based
    recommendation engine using a classification model. Before we move into the next
    section, I would like to make a clear point that the choice of the model and class
    label features is up to the reader to extend or improve the model.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一步，我们已经完成了扩展或改进基于内容的推荐引擎构建的内容，使用分类模型。在我们进入下一节之前，我想明确指出，模型和类标签特征的选择取决于读者来扩展或改进模型。
- en: As mentioned earlier, we should use cross-validation approach to choose optimal
    parameters so as to improve the model accuracy.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们应该使用交叉验证方法来选择最佳参数，以提高模型精度。
- en: Content-based recommendation using Python
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python进行基于内容的推荐
- en: In the previous section, we built a model-based content recommendation engine
    using R. In this section, we will build content recommendations using another
    approach, using the Python `sklearn`, `NumPy`, and `pandas` packages.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用R构建了一个基于模型的推荐内容引擎。在本节中，我们将使用另一种方法，使用Python的`sklearn`、`NumPy`和`pandas`包来构建内容推荐。
- en: 'Let''s recall the steps for building a content-based system discussed in the
    beginning of the chapter:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章开头讨论的构建基于内容系统的步骤：
- en: Item profile generation
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目配置文件生成
- en: User profile generation
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户配置文件生成
- en: Recommendation engine model generation
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成推荐引擎模型
- en: Generation of the top-N recommendations
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成前N个推荐
- en: 'In this section, we shall learn in detail how to build content following the
    aforementioned steps using Python:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细学习如何使用Python按照上述步骤构建内容：
- en: 'The design of the approach is shown in the following figure:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的设计如下所示：
- en: '![Content-based recommendation using Python](img/image00371.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python进行基于内容的推荐](img/image00371.jpeg)'
- en: '**Item profile creation**: In this step, we create a profile for each item
    using the content information we have about the items. The item profile is usually
    created using a widely-used information retrieval technique called tf-idf. In
    [Chapter 4](part0029.xhtml#aid-RL0A2 "Chapter 4. Data Mining Techniques Used in
    Recommendation Engines"), *Data Mining Techniques for Recommendation Engines*,
    we explained *tf-idf* in detail. To recap, the tf-idf value gives the relative
    importance of features with respect to all the items or documents.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建项目配置文件**：在这个步骤中，我们使用关于项目的现有内容信息为每个项目创建一个配置文件。项目配置文件通常使用一种广泛使用的信息检索技术创建，称为tf-idf。在[第4章](part0029.xhtml#aid-RL0A2
    "第4章。推荐引擎中使用的数据挖掘技术")《推荐引擎中的数据挖掘技术》中，我们详细解释了*tf-idf*。为了回顾，tf-idf值给出了相对于所有项目或文档的特征的相对重要性。'
- en: '**User profile creation**: In this step, we take the user activity dataset
    and preprocess the data into a proper format to create a user profile. We should
    remember that, in a content-based recommender system, the user profile is created
    with respect to the item content, that is, we have to extract or compute the preferences
    of the user for the item content or item features. Usually, a dot product between
    user activity and item profile gives us the user profile.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建用户配置文件**：在这个步骤中，我们将用户活动数据集预处理成适当的格式以创建用户配置文件。我们应该记住，在基于内容的推荐系统中，用户配置文件是根据项目内容创建的，也就是说，我们必须提取或计算用户对项目内容或项目特征的偏好。通常，用户活动和项目配置文件之间的点积给出了用户配置文件。'
- en: '**Recommendation engine model generation**: Now that we have the user profile
    and item profile in hand, we will proceed to build a recommendation model. Computing
    a cosine similarity between the user profile and item profile gives us the affinity
    of the user to each of the items.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成推荐引擎模型**：现在我们已经有了用户配置文件和项目配置文件，我们将继续构建推荐模型。计算用户配置文件和项目配置文件之间的余弦相似度给出了用户对每个项目的亲和力。'
- en: '**Generation of the top-N recommendations**: In the final step, we shall sort
    the user-item preferences based on the values calculated in the previous step
    and then suggest the top-N recommendations.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成前N个推荐**：在最后一步，我们将根据上一步计算出的值对用户-项目偏好进行排序，然后提出前N个推荐。'
- en: Now we will proceed toward the implementation of the aforementioned steps in
    Python.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将开始使用Python实现上述步骤。
- en: Dataset description
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据集描述
- en: In this section, we will use the Anonymous Microsoft Web Dataset to build a
    content-based recommendation system. The objective of this section is to recommend
    websites to an active user, based on his previous web browsing history.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用匿名微软Web数据集来构建一个基于内容的推荐系统。本节的目标是根据用户的先前网络浏览历史推荐网站给活跃用户。
- en: MS Web Dataset refers to the web logs of the website [www.microsoft.com](http://www.microsoft.com)
    accessed by 38,000 anonymous users. For each of the users, the dataset consists
    of lists about data of all the websites visited by the users in a time frame of
    one week.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: MS Web 数据集指的是38,000名匿名用户访问的网站 [www.microsoft.com](http://www.microsoft.com)
    的网络日志。对于每位用户，数据集包括用户在一周时间范围内访问的所有网站的列表。
- en: 'The dataset can be downloaded from the following URL:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集可以从以下URL下载：
- en: '[https://archive.ics.uci.edu/ml/datasets/Anonymous+Microsoft+Web+Data](https://archive.ics.uci.edu/ml/datasets/Anonymous+Microsoft+Web+Data)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://archive.ics.uci.edu/ml/datasets/Anonymous+Microsoft+Web+Data](https://archive.ics.uci.edu/ml/datasets/Anonymous+Microsoft+Web+Data)'
- en: For the sake of simplicity, from now on, we will refer to the website areas
    with the term *items.* There are 5,000 users, and they are represented by sequential
    numbers between 10,001 and 15,000\. Items are represented by numbers between 1,000
    and 1,297, even if they are less than 298.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，从现在起，我们将使用术语 *items* 来指代网站区域。有5,000个用户，它们由10,001到15,000之间的连续数字表示。项目由1,000到1,297之间的数字表示，即使它们小于298。
- en: 'The dataset is an unstructured text file. Each record contains several fields
    between two and six. The first field is a letter defining what the record contains.
    There are three main types of records, which are as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集是一个非结构化文本文件。每条记录包含两个到六个字段。第一个字段是一个字母，定义了记录包含的内容。主要有三种类型的记录，如下所示：
- en: '**Attribute (A)**: This is the description of the website area'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性（A）**：这是网站区域的描述'
- en: '**Case (C)**: This is the case for each user, containing its ID'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**案例（C）**：这是每个用户的案例，包含其ID'
- en: '**Vote (V)**: This is the vote lines for the case'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投票（V）**：这是案例的投票行'
- en: The first column case record is followed by the userID/caseID. The third column
    contains the user ID/vote given to the website area. The fourth column contains
    the description of the website area, and the fifth column consists of the URL
    of the website area.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列的案例记录后面跟着 userID/caseID。第三列包含用户ID/对网站区域的投票。第四列包含网站区域的描述，第五列包含网站区域的URL。
- en: 'The following image shows a small set of original data:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了一组原始数据：
- en: '![Dataset description](img/image00372.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00372.jpeg)'
- en: Our target is to suggest that each user explores some areas of the website that
    they haven't explored yet.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是建议每个用户探索他们尚未探索的网站区域。
- en: 'The following is the list of packages we will be using for this exercise:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的列表是我们将用于此练习的包：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Loading the data:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 加载数据：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Use `read.csv()` function available in pandas package to read the data:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas包中可用的 `read.csv()` 函数读取数据：
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Dataset description](img/image00373.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00373.jpeg)'
- en: 'Let''s see more sample data to have a much clearer idea:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看更多的样本数据，以便有更清晰的概念：
- en: '![Dataset description](img/image00374.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![数据集描述](img/image00374.jpeg)'
- en: 'We can observe the following from the preceding figure:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从前面的图中观察到以下内容：
- en: 'The first column contains three types of values: **A**/**V**/**C**, where A
    represents case ID, **V** represents the user, and **C** represents the case IDs
    that the user has accessed'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一列包含三种类型的值：**A**/**V**/**C**，其中A代表案例ID，**V**代表用户，**C**代表用户访问的案例ID
- en: The second column contains IDs to represent users and items
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二列包含ID，用于表示用户和项目
- en: The third column contains the description of website area
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三列包含网站区域的描述
- en: The fourth contains the URL for the website area on the website
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四部分包含网站区域在网站上的URL
- en: To make an item profile, we use the rows containing **A** in the first column,
    and to create a user activity or dataset, we use the rows which don't contain
    **A** in the first column.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建项目配置文件，我们使用第一列包含 **A** 的行，为了创建用户活动或数据集，我们使用第一列不包含 **A** 的行。
- en: Let's get started with profile generation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始配置文件生成。
- en: Before we proceed toward profile generation, we will have to format the user
    activity data; the following section explains how to create a user activity dataset.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行配置文件生成之前，我们必须格式化用户活动数据；以下部分解释了如何创建用户活动数据集。
- en: User activity
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户活动
- en: 'In this section, we will create a user-item rating matrix containing users
    as rows, items as columns, and the value as the cells. Here, the value is either
    `0` or `1`, indicating `1` if the user has accessed the web page, else `0`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个用户-项目评分矩阵，其中用户作为行，项目作为列，值作为单元格。在这里，值是 `0` 或 `1`，如果用户访问了网页，则为 `1`，否则为
    `0`：
- en: 'First we filter only records that don''t contain `"A"` in the first column:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们只过滤掉第一列不包含 `"A"` 的记录：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we assign then we remove unwanted columns from the dataset:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从数据集中移除不需要的列：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Assigning names to the columns of `user_activity` DataFrame:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为 `user_activity` DataFrame的列分配名称：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following code shows the sample `user_activity` data:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了样本 `user_activity` 数据：
- en: '![User activity](img/image00375.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![用户活动](img/image00375.jpeg)'
- en: 'To get the total unique `webid` in the dataset, see as the following code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取数据集中的总唯一`webid`，请参阅以下代码：
- en: '[PRE26]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To get the unique users count, see following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取唯一用户数，请参阅以下代码：
- en: '[PRE27]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now let''s run the following code to create a user-item-rating matrix, as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行以下代码来创建一个用户-项目-评分矩阵，如下所示：
- en: 'First, we assign variables:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们分配变量：
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then we get the last index of the dataset:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们获取数据集的最后一个索引：
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The for loop code loops through each record and adds new columns(`''userid''`,
    `''webid''`) to `user_activity` data frame which shows `userid` and corresponding
    web activity:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: for循环代码遍历每条记录，并将新的列（`'userid'`，`'webid'`）添加到`user_activity`数据框中，该数据框显示`userid`和相应的网络活动：
- en: '[PRE30]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![User activity](img/image00376.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![用户活动](img/image00376.jpeg)'
- en: 'Next, we remove the unwanted rows from the preceding data frame, that is, we
    will be removing the rows containing `"C"` in the category column:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从前面的数据框中删除不需要的行，即删除包含类别列中`"C"`的行：
- en: '[PRE31]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![User activity](img/image00377.jpeg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![用户活动](img/image00377.jpeg)'
- en: 'We subset the columns, and remove the first two columns, which we no longer
    needed:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们子集列，并删除我们不再需要的头两列：
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we sort the data by `webid`; this is to make sure that the rating matrix
    generation is in good format:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们按`webid`对数据进行排序；这是为了确保评分矩阵生成格式良好：
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, let''s create a dense binary rating matrix containing user_item_rating
    using the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下代码创建一个包含用户_item_rating的密集二进制评分矩阵：
- en: 'First, we get the size of `webid` column:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们获取`webid`列的大小：
- en: '[PRE34]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then we add a new column, `''rating''` to the `user_activity` data frame which
    contains only 1:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在`user_activity`数据框中添加一个新列`'rating'`，其中只包含1：
- en: '[PRE35]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, we use pivot to create binary rating matrix:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用pivot创建二进制评分矩阵：
- en: '[PRE36]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, we create a dense matrix:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建一个密集矩阵：
- en: '[PRE37]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Item profile generation
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目配置文件生成
- en: 'In this section, we will be creating an item profile from the initial raw data
    (`raw_data`). To create item data, we will consider the data that contains `A`
    in the first column:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从初始原始数据（`raw_data`）创建项目配置文件。为了创建项目数据，我们将考虑包含第一列中`A`的数据：
- en: First, we filter all the records containing first column as `"A"`
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们筛选出所有第一列包含`"A"`的记录：
- en: '[PRE38]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then we name the columns as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们按如下方式命名列：
- en: '[PRE39]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To generate `item` profile we only needed two columns so we slice the dataframe
    as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成项目配置文件，我们只需要两个列，所以我们按如下方式切片数据框：
- en: '[PRE40]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To see the dimensions of the items, the dataframe is given like:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看项目的维度，数据框被给出如下：
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We observe that there are `294` unique `webid` in the dataset:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到数据集中有`294`个唯一的`webid`：
- en: 'To check the sample of the data, we use the following code:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查数据的样本，我们使用以下代码：
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![Item profile generation](img/image00378.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![项目配置文件生成](img/image00378.jpeg)'
- en: 'To check the count of unique `webid`, we use the following code:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查唯一`webid`的数量，我们使用以下代码：
- en: '[PRE43]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can also only those `webid` which are present in the `user_activity` data:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以只选择存在于`user_activity`数据中的`webid`：
- en: '[PRE44]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We can use the following code check type of the object
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码检查对象类型：
- en: '[PRE45]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We can also sort the data by `webid`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以按`webid`对数据进行排序：
- en: '[PRE46]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let''see what we have done till now, using the `head(5)` function:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`head(5)`函数看看我们现在做了什么：
- en: '![Item profile generation](img/image00379.jpeg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![项目配置文件生成](img/image00379.jpeg)'
- en: Now, we shall create the item profile using the `tf-idf` functions available
    in the sklearn package. To generate `tf-idf`, we use the `TfidfVectorizer()`.
    The `fit_transform()` methods are in the `sklearn` package. The following code
    shows how we can create `tf-idf`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用sklearn包中可用的`tf-idf`函数创建项目配置文件。要生成`tf-idf`，我们使用`TfidfVectorizer()`。`fit_transform()`方法位于`sklearn`包中。以下代码显示了我们可以如何创建`tf-idf`。
- en: 'In the following code, the choice of the number of features to be included
    depends on the dataset, and the optimal number of features can be selected by
    the cross-validation approach:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，要包含的特征数量取决于数据集，并且可以通过交叉验证方法选择最佳特征数量：
- en: '[PRE47]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![Item profile generation](img/image00380.jpeg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![项目配置文件生成](img/image00380.jpeg)'
- en: User profile creation
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户配置文件创建
- en: We now have item profile and user activity in hand; the dot product between
    these two matrices will create a new matrix with dimensions equal to `#` of users
    by `#` Item features.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们手头有项目配置文件和用户活动；这两个矩阵的点积将创建一个新矩阵，其维度等于用户数乘以项目特征数。
- en: To compute the dot product between user activity and item profile, we use the
    `scipy` package methods such as `linalg`, dot available.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算用户活动和项目资料之间的点积，我们使用`scipy`包中的方法，如`linalg`和`dot`。
- en: 'Run the following code to compute the dot product:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码以计算点积：
- en: '[PRE48]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![User profile creation](img/image00381.jpeg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![用户资料创建](img/image00381.jpeg)'
- en: The final step in a recommendation engine model would be to compute the active
    user preferences for the items. For this, we do a cosine similarity between user
    profile and item profile.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐引擎模型中的最后一步是计算活动用户对项目的偏好。为此，我们在用户资料和项目资料之间进行余弦相似度计算。
- en: 'To compute the cosine calculations, we will be using the `sklearn` package.
    The following code will calculate the `cosine_similarity`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算余弦计算，我们将使用`sklearn`包。以下代码将计算`cosine_similarity`：
- en: 'We calculate the cosine similarity between `userprofile` an item profile:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算`userprofile`和项目资料之间的余弦相似度：
- en: '[PRE49]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We can see the results of the preceding calculation as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下查看前面计算的结果：
- en: '![User profile creation](img/image00382.jpeg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![用户资料创建](img/image00382.jpeg)'
- en: 'Now, let''s format the preceding results calculated as binary data `(0,1)`,
    as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将之前计算的二进制数据（0,1）格式化如下：
- en: 'First, we convert the rating to binary format:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将评分转换为二进制格式：
- en: '[PRE50]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then we examine the final predictions of first three users:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们检查前三个用户的最终预测：
- en: '![User profile creation](img/image00383.jpeg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![用户资料创建](img/image00383.jpeg)'
- en: 'Removing the zero values from the preceding results gives us the list of the
    probable items that can be recommended to the users:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的结果中移除零值，我们得到可以推荐给用户的可能项目列表：
- en: 'For user `213` the recommended items are generated as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户`213`，推荐的物品生成如下：
- en: '[PRE51]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the preceding code, we are generating recommendations for the active user
    `213`:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在为活动用户`213`生成推荐：
- en: '![User profile creation](img/image00384.jpeg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![用户资料创建](img/image00384.jpeg)'
- en: Context-aware recommender systems
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文感知推荐系统
- en: The next type of personalized recommender system that we will be learning here
    is context-aware recommender system. These recommender systems are next generation
    recommendations systems, which fall into the hyper-personalization category. It's
    natural that there won't be an end to the needs of humans. The more we get, the
    more we want. Though content-based recommender systems are efficient, targeted
    at an individual level, and consider the user's personal preferences alone while
    building recommendation engines, people wanted recommendation engines to be more
    personalized. For example, a person going on a trip alone may need a book to read
    whereas the same person may need beer if he is travelling with friends. Similarly,
    the same person might require diapers, medicines, snacks, and so on if he is going
    with his own family. People at different places at different times with different
    company have different needs. Our recommender systems should be robust enough
    to handle such scenarios. Such hyper personalized recommender systems, which cater
    to different recommendations to the same person based on his current context,
    are known as context-aware recommender systems.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要学习的是个性化推荐系统中的另一种类型，即上下文感知推荐系统。这些推荐系统属于下一代推荐系统，属于超个性化类别。人类的需求永远不会结束，这是很自然的。我们得到的越多，我们想要的就越多。尽管基于内容的推荐系统很高效，针对个人层面，并且在构建推荐引擎时仅考虑用户的个人偏好，但人们希望推荐引擎更加个性化。例如，一个人独自旅行时可能需要一本书来阅读，而如果他和朋友一起旅行，他可能需要啤酒。同样，如果这个人带着自己的家人出行，他可能需要尿布、药品、零食等等。不同地方、不同时间、与不同人在一起的人有不同的需求。我们的推荐系统应该足够强大，能够处理这样的场景。这种为同一人根据其当前上下文提供不同推荐的超个性化推荐系统，被称为上下文感知推荐系统。
- en: Building a context-aware recommender systems
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建上下文感知推荐系统
- en: 'Building a context-aware recommender system is more like extending a content
    recommender system. Building a context-aware system typically involves adding
    the context dimension on top of content recommenders, as shown in the following
    figure:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 构建上下文感知推荐系统更像是扩展内容推荐系统。构建上下文感知系统通常涉及在内容推荐器之上添加上下文维度，如下面的图所示：
- en: '![Building a context-aware recommender systems](img/image00385.jpeg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![构建上下文感知推荐系统](img/image00385.jpeg)'
- en: 'In the preceding figure, we can observe that context dimension is added on
    top of a content-based recommendation engine model, and then recommendations are
    generated. As we discussed in [Chapter 3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation
    Engines Explained"), *Recommendation Engines Explained*, there are two popular
    types of approaches for building context-aware recommendations:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以观察到上下文维度被添加到基于内容的推荐引擎模型之上，然后生成推荐。正如我们在[第3章](part0022.xhtml#aid-KVCC1
    "第3章。推荐引擎解释")中讨论的，《推荐引擎解释》，构建上下文感知推荐有两种流行的方法：
- en: Pre-filtering approaches
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预过滤方法
- en: Post-filtering approaches
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后过滤方法
- en: In this section, we will use post-filtering techniques to build context-aware
    recommender systems.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用后过滤技术来构建上下文感知推荐系统。
- en: Context-aware recommendations using R
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用R进行上下文感知推荐
- en: In the previous section, we built a content-based recommendation engine. In
    this section, we will extend the previous model to include context information
    and generate a context-aware recommendation engine.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们构建了一个基于内容的推荐引擎。在本节中，我们将扩展先前的模型以包括上下文信息并生成一个上下文感知推荐引擎。
- en: The usual practice of building context-aware systems is to add a time dimension
    to the content-based recommendations.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 构建上下文感知系统的常规做法是在基于内容的推荐中添加一个时间维度。
- en: 'The workflow is shown as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程如下所示：
- en: '![Context-aware recommendations using R](img/image00386.jpeg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![使用R进行上下文感知推荐](img/image00386.jpeg)'
- en: 'Let''s try building context aware systems using R. The steps for building context-aware
    systems in R are as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用R构建上下文感知系统。在R中构建上下文感知系统的步骤如下：
- en: Define context.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义上下文。
- en: Create a context profile with respect to a user for item content.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据用户的内容创建上下文配置文件。
- en: Generate recommendations for a context.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为上下文生成推荐。
- en: Defining the context
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义上下文
- en: The first step is to define the context that we will be including in our recommendations.
    In the previous section, we used the MovieLens dataset to build content-based
    recommendation engines. In the dataset, we have a time component, timestamp, in
    the rating data. We shall use this variable for our context-aware recommendation
    systems.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是定义我们将包括在推荐中的上下文。在前一节中，我们使用了MovieLens数据集来构建基于内容的推荐引擎。在数据集中，我们有一个时间组件，即评分数据中的时间戳。我们将使用此变量来构建我们的上下文感知推荐系统。
- en: We will extend the R code we used while building content-based recommendations.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展在构建基于内容的推荐时使用的R代码。
- en: 'We load the full MovieLens ratings dataset as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如下加载完整的MovieLens评分数据集：
- en: '[PRE52]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'See the sample data using `head()` function:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `head()` 函数查看样本数据：
- en: '![Defining the context](img/image00387.jpeg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![定义上下文](img/image00387.jpeg)'
- en: 'We load movies dataset:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加载电影数据集：
- en: '[PRE53]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then we add column names to the movies data frame:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们向电影数据框添加列名：
- en: '[PRE54]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Next, we remove unwanted columns from the data frame:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从数据框中删除不需要的列：
- en: '[PRE55]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '![Defining the context](img/image00388.jpeg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![定义上下文](img/image00388.jpeg)'
- en: We merge the Movies and Ratings datasets using `merge()` function
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `merge()` 函数合并电影和评分数据集。
- en: '[PRE56]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '![Defining the context](img/image00389.jpeg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![定义上下文](img/image00389.jpeg)'
- en: The context that we want to introduce to our previous content-based recommendation
    is the hour of the day, that is, our recommendations will be made as per the time
    of the day. The set of recommendations for an active user will be different for
    each hour of the day. Usually, these changes in recommendations are due to the
    ordering of the recommendations as per the hour. We will see next how we achieve
    this.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望引入到之前基于内容的推荐中的上下文是白天的小时，也就是说，我们的推荐将根据一天中的时间进行。活跃用户的一天的推荐集合将因小时而异。通常，这些推荐的变化是由于根据小时排序的推荐顺序。我们将在下一节中看到我们是如何实现这一点的。
- en: Creating context profile
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建上下文配置文件
- en: In the following section, we shall write code to create context profile of the
    user. We chose the timestamp information available in the dataset and calculate
    the preference value for movie genres for each user for each hour of the day.
    This context profile information is used for generating context aware recommendations.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将编写代码来创建用户的上下文配置文件。我们选择了数据集中可用的日期时间信息，并计算了每个用户每天每个小时的影片类型的偏好值。此上下文配置文件信息用于生成上下文感知推荐。
- en: 'We extract timestamp from the ratings dataset:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从评分数据集中提取时间戳：
- en: '[PRE57]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then, we convert it into a `POSIXlt` date object and using hour property to
    extract hour of the day:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将其转换为`POSIXlt`日期对象，并使用小时属性提取一天中的小时：
- en: '[PRE58]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'See below for sample data:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为样本数据：
- en: '![Creating context profile](img/image00390.jpeg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![创建上下文配置文件](img/image00390.jpeg)'
- en: 'We can append the hours back on to the ratings dataset:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将小时重新添加到评分数据集中：
- en: '[PRE59]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '![Creating context profile](img/image00391.jpeg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![创建上下文配置文件](img/image00391.jpeg)'
- en: 'Now, let''s start building a context profile for a user with the user ID 943:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始为用户ID为943的用户构建上下文配置文件：
- en: 'Extract ratings information for the active user(943) and removing UserId, MovieId,
    Rating, Timestamp columns, as shown as follow:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 提取活跃用户（943）的评分信息，并删除UserId、MovieId、Rating、Timestamp列，如下所示：
- en: '[PRE60]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '![Creating context profile](img/image00392.jpeg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![创建上下文配置文件](img/image00392.jpeg)'
- en: As a next step, we compute the columns of all the item features. This columnwise
    sum is used to compute the preferences for the item features for each hour of
    the day.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 作为下一步，我们计算所有项目特征的列。这个列向总和用于计算每天每个小时的项目特征的偏好。
- en: 'We compute the column wide sum of each column using `aggregate()` function:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`aggregate()`函数计算每列的列宽总和：
- en: '[PRE61]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '![Creating context profile](img/image00393.jpeg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![创建上下文配置文件](img/image00393.jpeg)'
- en: 'From the preceding figure, we can see the time preferences for each of the
    movie genres for the active user 943\. We can observe that during the ninth hour
    of the day, the user watches more movies, especially action/drama/comedy movies:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图中，我们可以看到活跃用户943对每个电影类型的偏好时间。我们可以观察到，在每天的第九个小时，用户观看的电影更多，尤其是动作/剧情/喜剧电影：
- en: 'We can normalize the preceding data between 0-1 using following function:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下函数将前面的数据归一化到0-1之间：
- en: '[PRE62]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '![Creating context profile](img/image00394.jpeg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![创建上下文配置文件](img/image00394.jpeg)'
- en: Generating context-aware recommendations
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成上下文感知推荐
- en: Now that we have created the context profile for the active user, let's start
    generating context-aware recommendations for the user.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为活跃用户创建了上下文配置文件，让我们开始为用户生成上下文感知推荐。
- en: For this, we shall reuse the recommend object built using R, which contains
    content recommendations for all the users.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此，我们将重新使用使用R构建的推荐对象，其中包含所有用户的基于内容的推荐。
- en: 'Let''s see the recommendations made to the user 943 using the content-based
    system:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看基于内容的系统为用户943做出的推荐：
- en: '[PRE63]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '![Generating context-aware recommendations](img/image00395.jpeg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![生成上下文感知推荐](img/image00395.jpeg)'
- en: Now, to these content recommendations, we add our time or hour of the day dimension
    and then generate recommendations as per the current context.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将时间或一天中的小时维度添加到这些内容推荐中，然后根据当前上下文生成推荐。
- en: 'We merge recommendations and movies dataset using `merge()` function:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`merge()`函数合并推荐和电影数据集：
- en: '[PRE64]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '![Generating context-aware recommendations](img/image00396.jpeg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![生成上下文感知推荐](img/image00396.jpeg)'
- en: With the preceding step, we have computed all the required matrices, user context
    profile (`UCP_Pref_SC`) and user content recommendations (`UCP_Pref_content`).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们已经计算了所有所需的矩阵，用户上下文配置文件（`UCP_Pref_SC`）和用户内容推荐（`UCP_Pref_content`）。
- en: 'Suppose we want to generate recommendations for the user at the ninth hour;
    we just need to perform an element wise multiplication of user content recommendations
    and the context row for the ninth hour of the day from the `UCP_pref_SC` object.
    This is given as follows:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要在第九个小时为用户生成推荐；我们只需要对用户内容推荐和`UCP_pref_SC`对象中一天中第九个小时的上下文行进行逐元素乘法。如下所示：
- en: 'Performing element wise multiplication for the User content recommendations
    and the ninth hour context preferences for the user:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 对用户内容推荐和第九个小时的上下文偏好进行逐元素乘法：
- en: '[PRE65]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The results can be seen as follows; we can observe that the preference for MovieId
    3 is 0.5 where as for MovieId 4 the preference is 2.8
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下；我们可以观察到，对于MovieId 3的偏好是0.5，而对于MovieId 4的偏好是2.8
- en: '![Generating context-aware recommendations](img/image00397.jpeg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![生成上下文感知推荐](img/image00397.jpeg)'
- en: 'We can create a dataframe object of the prediction object:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个预测对象的dataframe对象：
- en: '[PRE66]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Next, we add column names to the predictions object:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们向预测对象添加列名：
- en: '[PRE67]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Then we sort the results:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们排序结果：
- en: '[PRE68]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Summary
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to build content-based recommendation engines
    and context-aware recommendation engines using R and Python. We modelled content-based
    recommendation engines in two types--the classification model and the tf-idf model
    approaches using R and Python. To build context-aware recommendations, we simply
    did an element wise multiplication between content-based recommendations and context
    profile of the user.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用R和Python构建基于内容的推荐引擎和上下文感知推荐引擎。我们使用R和Python对基于内容的推荐引擎进行了两种类型的建模——分类模型和tf-idf模型方法。为了构建上下文感知推荐，我们只需对基于内容的推荐和用户上下文配置文件进行逐元素相乘。
- en: In the next chapter, we will be exploring Apache Spark, to build scalable, real-time
    recommendation engines.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Apache Spark，以构建可扩展的实时推荐引擎。
