- en: Training and Building Production Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练和构建生产模型
- en: 'As we enter the last section of the book, this chapter provides an overview
    of using machine learning in a production environment. At this point in the book,
    you have learned the various algorithms that ML.NET provides, and you have created
    a set of three production applications. With all of this knowledge garnered, your
    first thought will probably be: how can I immediately create the next killer machine
    learning app? Prior to jumping right into answering that question, this chapter
    will help to prepare you for those next steps in that journey. As discussed and
    utilized in previous chapters, there are three major components of training a
    model: feature engineering, sample gathering, and creating a training pipeline.
    In this chapter we will focus on those three components, expanding your thought
    process for how to succeed in creating a production model, as well as providing
    some suggested tools for being able to repeat that success with a production-grade
    training pipeline.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进入本书的最后一部分，本章提供了在生产环境中使用机器学习的概述。在本书的这一部分，你已经学习了ML.NET提供的各种算法，并且已经创建了一套三个生产级应用。在积累了所有这些知识之后，你可能会想：我如何立即创建下一个杀手级机器学习应用？在直接回答这个问题之前，本章将帮助你为这一旅程的下一步做好准备。正如在前几章中讨论和使用的，训练模型有三个主要组成部分：特征工程、样本收集和创建训练管道。在本章中，我们将重点关注这三个组成部分，扩展你如何成功创建生产级模型的思考过程，并提供一些建议工具，以便能够通过生产级训练管道重复这一成功。
- en: 'Over the course of this chapter we will discuss the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下内容：
- en: Investigating feature engineering
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查特征工程
- en: Obtaining training and testing datasets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取训练和测试数据集
- en: Creating your model-building pipeline
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的模型构建管道
- en: Investigating feature engineering
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调查特征工程
- en: 'As we have discussed in previous chapters, features are one of the most important
    components—and objectively the most important component—in the model building
    process. When approaching a new problem, the main question that arises is: how
    are you going to solve this problem? For example, a common exploit in the cyber-security
    world is the use of steganography. Steganography, which dates back to 440 BCE
    is the practice of hiding data within a container. This container has ranged from
    drawings, crosswords, music, and pictures, to name a few. In the cyber-security
    world, steganography is used to hide malicious payloads in files that would otherwise
    be ignored, such as images, and audio and video files.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中讨论的，特征是模型构建过程中最重要的组成部分——客观上也是最重要的组成部分。在处理一个新问题时，出现的主要问题是：你将如何解决这个问题？例如，在网络安全领域的一个常见攻击手段是使用隐写术。隐写术可以追溯到公元前440年，是一种在容器中隐藏数据的行为。这个容器包括绘画、填字游戏、音乐、图片等。在网络安全领域，隐写术用于在通常会被忽略的文件中隐藏恶意负载，例如图像、音频和视频文件。
- en: 'Take the following image of a basket of food. This image—created using an online
    steganography tool—has an embedded message in it; have a look at whether you can
    spot any unusual patterns in the following image:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下食物篮子的图像。这张图像——使用在线隐写术工具创建——其中包含一个嵌入的消息；看看你是否能在以下图像中找到任何异常模式：
- en: '![](img/87343f3c-14ed-4e7f-96bf-0c8027ac76ed.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87343f3c-14ed-4e7f-96bf-0c8027ac76ed.png)'
- en: Most tools today can mask content within both complex and solid color images,
    to the point where, you as an end-user wouldn't even notice—as seen in the preceding
    example.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前大多数工具都可以在复杂和纯色图像中隐藏内容，以至于作为最终用户的你甚至都不会注意到——正如前一个示例所示。
- en: 'Continuing this scenario, a quick question you might need to answer right now
    is: does the file contain another file format within the file? Another element
    to consider is the scope of your question. Attempting to answer the aforementioned
    question would lead to a time-consuming deep dive into analyzing every file format
    used with a recursive parser—not something that would make sense to tackle right
    off the bat. A better option would be to scope the question to perhaps just analyze
    audio files or image files. Taking that thought process further, let''s proceed
    by scoping the problem to a specific image type and payload type.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景继续进行的情况下，你现在可能需要回答的一个快速问题是：文件中是否包含其他文件格式？另一个需要考虑的因素是问题的范围。尝试回答上述问题可能会导致对每个使用递归解析器分析的文件格式进行耗时深入分析——这并不是一开始就要解决的问题。更好的选择是将问题范围缩小到可能只分析音频文件或图像文件。进一步思考这个思路，让我们将问题范围缩小到特定的图像类型和有效载荷类型。
- en: PNG image files with embedded executables
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入可执行文件的PNG图像文件
- en: 'Let us dive into this more specific question: how can we detect Windows Executables
    within **Portable Network Graphics** (**PNG**) files? For those curious, the reasoning
    behind specifically choosing PNG files is that they are a very common lossless
    image format used in video games and the internet due to their great image quality-to-file
    size ratio. This level of usage creates an interface for attackers to get a PNG
    file on your machine, with you as the end user not thinking twice about it, versus
    a proprietary format or Windows **Executable** (**EXE**), which will likely cause
    alarm to the end user.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨这个更具体的问题：我们如何在**便携式网络图形**（**PNG**）文件中检测Windows可执行文件？对于那些好奇的人来说，选择PNG文件的具体原因在于，由于它们具有极高的图像质量与文件大小的比率，PNG文件是一种非常常见的无损图像格式，被广泛应用于视频游戏和互联网。这种广泛的使用为攻击者提供了一个机会，他们可以在你的机器上获取PNG文件，而你作为最终用户甚至不会多想，这与专有格式或Windows**可执行文件**（**EXE**）不同，这很可能会引起最终用户的警觉。
- en: 'In the next section, we will break down the PNG file into the following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将把PNG文件分解成以下步骤：
- en: '![](img/292aec1c-411c-4fc1-a039-bb0d67ddaa4c.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/292aec1c-411c-4fc1-a039-bb0d67ddaa4c.png)'
- en: To dive further into the PNG file format, the specification for PNG is available
    here: [http://libpng.org/pub/png/spec/1.2/PNG-Contents.html](http://libpng.org/pub/png/spec/1.2/PNG-Contents.html)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步深入了解PNG文件格式，PNG的规范可以在以下链接找到：[http://libpng.org/pub/png/spec/1.2/PNG-Contents.html](http://libpng.org/pub/png/spec/1.2/PNG-Contents.html)
- en: Creating a PNG parser
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个PNG解析器
- en: Let us now dive into taking apart the PNG file format into features in order
    to drive a potential model for detecting hidden payloads. A PNG file is structured
    with continuous chunks. Each chunk is composed of a header description field,
    followed by a payload of data. The chunks required for a PNG file include **IHDR**,
    **IDAT,** and **IEND**. The sections, as per the specification, must appear in
    that order. Each of these sections will be explained below.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨将PNG文件格式分解成特性，以便为检测隐藏的有效载荷驱动潜在的模型。PNG文件由连续的chunks组成。每个chunk由一个头部描述字段和一个数据有效载荷组成。PNG文件所需的chunks包括**IHDR**、**IDAT**和**IEND**。根据规范，这些部分必须按此顺序出现。以下将解释每个部分。
- en: The first element ahead of the chunks is to implement the check in order to
    make sure the file is actually a PNG image file. This check is generally called
    the **File Magic check**. The majority of files used throughout our digital world
    have a unique signature, making both the parsing and saving of these files easier.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在chunks之前的第一要素是实施检查，以确保文件实际上是一个PNG图像文件。这个检查通常被称为**文件魔数检查**。在我们数字世界的绝大多数文件都有一个独特的签名，这使得这些文件的解析和保存变得更加容易。
- en: For those curious about other file format's signature, an extensive list can
    be found here: [https://www.garykessler.net/library/file_sigs.html](https://www.garykessler.net/library/file_sigs.html)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对其他文件格式签名好奇的人来说，一个详尽的列表可以在以下链接找到：[https://www.garykessler.net/library/file_sigs.html](https://www.garykessler.net/library/file_sigs.html)
- en: 'PNG files specifically begin with the following bytes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: PNG文件特别以以下字节开始：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By using these File Magic bytes, we can then utilize the `SequenceEqual` .NET
    method to compare the file data''s first sequence of bytes, as shown in the following
    code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些文件魔数字节，我们可以利用.NET的`SequenceEqual`方法来比较文件数据的第一序列字节，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If the `SequenceEqual` method checks against the `FileMagicBytes` property and
    does not match, we return false. In this scenario, the file is not a PNG file,
    and therefore, we want to stop parsing the file any further.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`SequenceEqual`方法与`FileMagicBytes`属性比较不匹配，我们返回false。在这种情况下，该文件不是PNG文件，因此我们想要停止进一步解析文件。
- en: 'From this point, we will now iterate over the chunks of the file. At any point,
    if the bytes aren''t set properly, this should be noted, as Microsoft Paint or
    Adobe PhotoShop would save the file, as per the PNG file format''s specification.
    A malicious generator, on the other hand, may bend the rules around adhering to
    the PNG file format''s specification, as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个点开始，我们现在将遍历文件的块。在任何时候，如果字节没有正确设置，应该注意这一点，因为Microsoft Paint或Adobe PhotoShop会按照PNG文件格式的规范保存文件。另一方面，恶意生成者可能会像这里展示的那样，扭曲遵守PNG文件格式规范的规则：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For each chunk, we read the `ChunkInfoSize` variable, which is defined as 4
    bytes. This `ChunkInfoSize` array, once read, contains the size of the chunk to
    then read from. In addition to determining which chunk type we are to read, we
    also read the 4-byte chunk for the 4-character string (`IHDR`, `IDAT`, `IEND`).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个块，我们读取`ChunkInfoSize`变量，它定义为4字节。一旦读取了这个`ChunkInfoSize`数组，它就包含了要读取的块的大小。除了确定我们要读取的块类型外，我们还读取了4字节的块，用于4个字符的字符串（`IHDR`、`IDAT`、`IEND`）。
- en: 'Once we have the chunk size and the type, we then build out the class object
    representations of each. For the scope of this code example, we will just look
    at a snippet of the IHDR class, which contains the high-level image properties
    such as the dimensions, bit depth, and compression:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了块大小和类型，我们就构建每个类的对象表示。在这个代码示例的范围内，我们将只查看IHDR类的片段，它包含高级图像属性，如尺寸、位深度和压缩：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We'll just pull the `Width` and `Height` properties, which are the first 8 bytes
    (4 bytes each). For this example, we also make use of an extension method to convert
    a byte array into an **`Int32`** array. IN most cases, BitConverter would be the
    ideal scenario, however, for this code example, I wanted to simplify the sequential
    accessing of data, such as the offset of 4 bytes when retrieving the previously
    mentioned `Height` property.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只提取`Width`和`Height`属性，它们是前8个字节（每个4字节）。在这个例子中，我们还使用了一个扩展方法将字节数组转换为**`Int32`**数组。在大多数情况下，`BitConverter`会是理想的选择，然而，在这个代码示例中，我想简化数据的顺序访问，例如在检索前面提到的`Height`属性时偏移4字节。
- en: The previously mentioned IDAT chunks are the actual image data—and the potential
    chunk in which to contain the embedded payloads. The IEND, as the name implies,
    simply tells the PNG parser that the file is complete, that is, there is no payload
    in the IEND chunk.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的IDAT块是实际图像数据——以及可能包含嵌入有效载荷的块。IEND，正如其名所示，只是告诉PNG解析器文件已完整，也就是说，IEND块中没有有效载荷。
- en: Once the file has been parsed, we return the file type (**PNG**)—whether or
    not it is a validly structured PNG file—and we note anything that is suspicious,
    such as if the file size is considerably larger than it should be, given the width,
    height, and maximum bit depth (24). For each of these notes, they could be normalized,
    along with the valid/invalid flag in a production model. In addition, these could
    have a numeric representation with a simple enumeration.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件被解析，我们返回文件类型（**PNG**）——无论它是否是一个有效结构的PNG文件——并且我们注意任何可疑之处，例如如果文件大小远远大于根据宽度、高度和最大位深度（24）应有的大小。对于这些注释中的每一个，它们都可以在生产模型中与有效/无效标志一起标准化。此外，这些可以用简单的枚举表示数字。
- en: For those who are curious about the full application's source code, please refer
    to [https://github.com/jcapellman/virus-tortoise](https://github.com/jcapellman/virus-tortoise),
    which utilizes many of the same principles that were shown in the *Creating the
    File Classification application* section of [Chapter 9](5f67e3b8-56bd-47ab-8a72-4f00b239d517.xhtml),
    *Using ML.NET with ASP.NET Core*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对完整应用程序的源代码感到好奇的人，请参阅[https://github.com/jcapellman/virus-tortoise](https://github.com/jcapellman/virus-tortoise)，它利用了在第9章“使用ML.NET与ASP.NET
    Core”部分中展示的*创建文件分类应用程序*中展示的许多相同原则。
- en: Taking this example a step further, to iterate through the IDAT chunks that
    contain the actual image data—and potential executable payloads—would complete
    the extractor in a production application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个例子进一步扩展，迭代包含实际图像数据——以及可能的可执行有效载荷的IDAT块，将完成生产应用程序中的提取器。
- en: Now that we have seen the required level of effort for building a production
    level of features, let us dive into building a production training dataset.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了构建生产级功能所需的工作量，让我们深入探讨构建生产级训练数据集。
- en: Obtaining training and testing datasets
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取训练和测试数据集
- en: Now that we have completed our discussion on feature engineering, the next step
    is to obtain a dataset. For some problems, this can be very difficult. For instance,
    when attempting to predict something that no one else has done, or that is in
    an emerging sector, having a training set to train on would be more difficult
    than say, finding malicious files for our previous example.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了关于特征工程讨论，下一步是获取一个数据集。对于某些问题，这可能非常困难。例如，当试图预测别人没有做过的事情，或者在一个新兴领域时，拥有一个用于训练的训练集会比我们之前的例子中寻找恶意文件更困难。
- en: Another aspect to consider is diversity and how the data is broken out. For
    instance, consider how you would predict malicious Android applications based
    on behavioral analysis using the anomaly detection trainer that ML.NET provides. When
    thinking about building your dataset, most Android users, I would argue, do not
    have half of their apps as malicious. Therefore, an even malicious and benign
    (50/50) breakdown of training and test sets might be over-fitting on malicious
    applications. Figuring out and analyzing the actual representation of what your
    target users will encounter is critical, otherwise your model may either tend
    to a false positive or false negative, both of which your end users will not be
    happy with.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的方面是多样性和数据是如何划分的。例如，考虑您如何使用ML.NET提供的异常检测训练器根据行为分析预测恶意Android应用程序。当思考构建您的数据集时，我敢说，大多数Android用户，他们的应用程序中恶意软件的比例不会超过一半。因此，训练和测试集的恶意和良性（50/50）划分可能会过度拟合恶意应用程序。弄清楚和分析您的目标用户将遇到的实际代表性是至关重要的，否则您的模型可能会倾向于假阳性或假阴性，这两种情况您的最终用户都不会满意。
- en: The last element to consider when training and testing datasets is how you are
    obtaining your datasets. Since your model is largely based on the training and
    test datasets, finding real datasets that represent your problem set is crucial.
    Using the previous steganography example, if you pulled random PNG files without
    validation, there is a possibility of training a model on bad data. A mitigation
    for this would be to check for hidden payloads within the IDAT chunks. Likewise,
    validation in the PNG example on the actual files is critical, as well. Training
    on JPG, BMP, or GIF files mixed in with your PNG files when you only run against
    PNG files in your production app could lead to false positives or negatives, as
    well. Because the binary structures of the other image formats differ from PNG,
    this non-representative data will skew the training set toward the unsupported
    formats.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练和测试数据集时需要考虑的最后一个元素是如何获取您的数据集。由于您的模型主要基于训练和测试数据集，因此找到代表您问题集的真实数据集至关重要。以之前的隐写术为例，如果您没有验证就随机抽取PNG文件，那么训练一个基于不良数据的模型是有可能的。对此的一种缓解措施是检查IDAT块中的隐藏有效载荷。同样，在PNG示例中对实际文件进行验证也是至关重要的。当您只针对生产应用中的PNG文件运行时，在PNG文件中混合训练JPG、BMP或GIF文件可能会导致假阳性或假阴性，因为其他图像格式的二进制结构不同于PNG，这种非代表性数据将使训练集偏向于不受支持的格式。
- en: For those in the cyber-security field, VirusTotal ([https://www.virustotal.com](https://www.virustotal.com))
    and Reversing Labs ([https://www.reversinglabs.com](https://www.reversinglabs.com))
    offer extensive databases of files to download for a fee if local sources of data
    for various file types prove difficult to obtain.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于网络安全领域的人来说，VirusTotal ([https://www.virustotal.com](https://www.virustotal.com))
    和 Reversing Labs ([https://www.reversinglabs.com](https://www.reversinglabs.com))
    提供了广泛的文件数据库，您可以付费下载，如果难以获取各种文件类型的数据源。
- en: Creating your model-building pipeline
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的模型构建管道
- en: 'Once your feature extractor has been created and your dataset obtained, the
    next element to establish is a model building pipeline. The definition of the
    model building pipeline can be shown better in the following diagram:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了特征提取器并获取了数据集，接下来要建立的是模型构建管道。模型构建管道的定义可以在以下图中更好地展示：
- en: '![](img/96a12aa1-920c-40d8-bc92-2e0771fde4fb.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96a12aa1-920c-40d8-bc92-2e0771fde4fb.png)'
- en: For each of the steps, we will discuss how they relate to the pipeline that
    you choose in the next section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论每个步骤如何与您选择的管道相关联。
- en: Discussing attributes to consider in a pipeline platform
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论在管道平台中需要考虑的属性
- en: 'There are quite a few pipeline tools that are available for deployment on-premises,
    both in the cloud and as **SaaS** (**Software as** **a** **Service**) services.
    We will review a few of the more commonly used platforms in the industry. However,
    the following points are a few elements to keep in mind, no matter which platform
    you choose:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多管道工具可用于本地部署，无论是在云中还是在**SaaS**（**软件即服务**）服务中。我们将审查行业中一些更常用的平台。然而，以下是一些无论你选择哪个平台都需要记住的要点：
- en: '**Speed** is important for several reasons. While building your initial model,
    the time to iterate is very important, as you will more than likely be adjusting
    your training set and hyper-parameters in order to test various combinations.
    On the other end of the process, when you are in pre-production or production,
    the time to iterate with testers or customers (who are awaiting a new model in
    order to address issues or add features) is critical in most cases.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**对于多个原因来说都很重要。在构建你的初始模型时，迭代的速度非常重要，因为你很可能会调整你的训练集和超参数，以测试各种组合。在流程的另一端，当你处于预生产或生产阶段时，与测试人员或客户（他们正在等待新模型以解决问题或添加功能）迭代的速度在大多数情况下是关键的。'
- en: '**Repeatability** is also important to ensure that a perfect model can be rebuilt
    every time, given the same dataset, features, and hyper-parameters. Utilizing
    automation as much as possible is one method to avoid the human-error aspect of
    training models, while also helping the repeatability aspect. All of the platforms
    that will be reviewed in the next section promote defining a pipeline without
    any human input after launching a new training session.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重复性**同样重要，以确保在给定相同的训练数据集、特征和超参数的情况下，每次都能重建一个完美的模型。尽可能多地利用自动化是避免模型训练中人为错误的一个方法，同时也有助于提高可重复性。下一节将要审查的所有平台都提倡在启动新的训练会话后，无需任何人工输入即可定义流程。'
- en: '**Versioning and tracking of comparisons **are important in order to ensure
    that when changes are made, they can be compared. For example, whether it is hyper-parameters—such
    as the depth of your trees in a FastTree model—or additional samples that you
    add, keeping track of these changes as you iterate is critical. Hypothetically,
    if you made a documented change and your efficacy drops significantly, you could
    always go back and evaluate that one change. If you hadn''t versioned or documented
    your individual changes for comparisons, this simple change could be very difficult
    to pinpoint the drop in efficacy.  Another element of tracking is to track progress
    over a period of time, such as per quarter or per year.  This level of tracking
    can help to paint a picture and can also help to drive the next steps or track
    trends in efficacy in order to obtain more samples or add additional features.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制和比较跟踪**对于确保在做出更改时能够进行比较非常重要。例如，无论是超参数——比如FastTree模型中树的深度——还是你添加的额外样本，在迭代过程中跟踪这些变化至关重要。假设你进行了一次文档化的更改，而你的效果显著下降，你总是可以回过头来评估这一变化。如果你没有为比较版本化或记录你的个人更改，这种简单的更改可能很难确定效果下降的原因。跟踪的另一个要素是跟踪一段时间内的进度，比如按季度或按年。这种级别的跟踪可以帮助描绘一幅图景，也可以帮助推动下一步行动或跟踪效果的趋势，以便获取更多样本或添加更多特征。'
- en: Lastly, **quality assurance** is important for several reasons, and, in almost
    every case, critical to the success or failure of a project. Imagine a model being
    deployed straight to production without any extra checks being put in place by
    a dedicated quality assurance team performing manual and automated tests. Automated
    tests—as simple as a set of unit tests to ensure that samples test the same, or
    better, from model to model prior to release, and then to production—can be a
    good stop-gap solution instead of an entire automated suite of tests with specific
    ranges of efficacy to keep within.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，**质量保证**对于多个原因来说都很重要，在几乎所有情况下，对项目的成功或失败都至关重要。想象一下，一个模型直接部署到生产环境中，没有任何由专门的质量保证团队进行的额外检查，包括手动和自动测试。自动测试——就像一组单元测试，确保在发布和进入生产之前，样本在模型之间测试相同或更好——可以是一个好的临时解决方案，而不是一个完整的自动测试套件，该套件具有特定的效果范围，需要保持在其中。
- en: All four of these elements should be considered when performing each step in
    the model building pipeline that was discussed in the previous section. The last
    step of delivery depends on the previous three elements being completed properly.
    The actual delivery is dependent on your application. For instance, if you're
    creating an ASP.NET application, such as the one that we created in [Chapter 9](5f67e3b8-56bd-47ab-8a72-4f00b239d517.xhtml),
    *Using ML.NET with ASP.NET Core*, adding the ML.NET model as part of your Jenkins
    pipeline—so that it automatically gets bundled with your deployment—would be a
    good approach.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行上一节中讨论的模型构建管道的每个步骤时，应考虑这四个要素。交付的最后一步取决于前三个要素的正确完成。实际的交付取决于您的应用程序。例如，如果您正在创建一个ASP.NET应用程序，例如我们在[第9章](5f67e3b8-56bd-47ab-8a72-4f00b239d517.xhtml)中创建的应用程序，*使用ML.NET与ASP.NET
    Core*，将ML.NET模型作为Jenkins管道的一部分添加——这样它就会自动与您的部署捆绑在一起——将是一个好的方法。
- en: Exploring machine learning platforms
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索机器学习平台
- en: The following are platforms I have either personally used, and/or had colleagues
    utilize in order to solve various problems.  Each platform has its pros and cons,
    especially given the uniqueness of each problem that we are trying to solve.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我个人使用过，以及/或者同事使用过以解决各种问题的平台。每个平台都有其优缺点，尤其是在我们试图解决的每个问题的独特性方面。
- en: Azure Machine Learning
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Machine Learning
- en: 'Microsoft''s Azure Cloud Platform provides a complete platform for Kubernetes,
    virtual machines, and databases, in addition to providing a machine learning platform.
    This platform provides direct connections to Azure SQL databases, Azure File Storage,
    and public URLs, to name just a few for training and test sets. A lightweight
    version that doesn''t scale is provided inside of Visual Studio Community 2019
    for free. The following screenshot shows the full-fledged UI:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的Azure云平台提供了一个完整的平台，包括Kubernetes、虚拟机和数据库，以及提供机器学习平台。该平台提供了直接连接到Azure SQL数据库、Azure文件存储和公共URL等，仅举几个例子，用于训练和测试集。在Visual
    Studio Community 2019中提供了一个免费的不具备扩展性的轻量级版本。以下截图显示了完整的用户界面：
- en: '![](img/be818c8d-cd8c-4887-8877-e7cac13cefaf.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/be818c8d-cd8c-4887-8877-e7cac13cefaf.png)'
- en: In addition, non-.NET technologies, such as TensorFlow, PyTorch, and scikit-learn are
    fully supported. Tools such as the popular Jupyter Notebook and Azure Notebook
    are also fully supported.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还完全支持非.NET技术，如TensorFlow、PyTorch和scikit-learn。流行的Jupyter Notebook和Azure Notebook等工具也完全支持。
- en: Similar to Apache Airflow, reviewing run histories in order to compare versions
    is also easy to do in Azure Machine Learning.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与Apache Airflow类似，在Azure机器学习中比较运行历史记录以比较版本也很容易做到。
- en: 'All phases of the aforementioned model building pipeline are supported. Here
    are some of the pros and cons of Azure Machine Learning:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述模型构建管道的阶段都得到了支持。以下是Azure机器学习的优缺点：
- en: '**Pros:**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点：**'
- en: Extensive integrations into multiple data sources
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与多个数据源广泛集成
- en: ML.NET natively supported
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ML.NET原生支持
- en: Can scale up and down depending on your needs
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据您的需求进行扩展和缩减
- en: No infrastructure setup required
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需基础设施设置
- en: '**Cons:**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点：**'
- en: Can be expensive when training
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练时可能很昂贵
- en: Apache Airflow
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Airflow
- en: 'Apache Airflow, an open source software, provides the ability to create pipelines
    of almost unlimited complexity. While not a natively supported framework, .NET
    Core applications—such as those that we have created throughout this book—can
    run, provided the .NET Core runtime is installed or simply compiled with the self-contained
    flags. While the learning curve is higher than Microsoft''s Azure Machine Learning
    platform, being free in certain scenarios, especially when simply experimenting,
    might be more beneficial. The following screenshot shows the UI of Airflow:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Airflow，一款开源软件，提供了创建几乎无限复杂性的管道的能力。虽然不是原生支持的框架，但.NET Core应用程序——例如本书中创建的那些——可以在安装.NET
    Core运行时或简单地使用自包含标志编译的情况下运行。虽然学习曲线高于微软的Azure机器学习平台，但在某些场景下免费，尤其是在仅仅进行实验时，可能更有益。以下截图显示了Airflow的用户界面：
- en: '![](img/e7cf1548-8991-4e39-a9f5-a0f934e9a5f6.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e7cf1548-8991-4e39-a9f5-a0f934e9a5f6.png)'
- en: Much like Azure Machine Learning, the visualization of the pipelines does make
    the configuration of a particular pipeline easier than Apache Spark. However,
    much like Apache Spark, the setup and configuration (depending on your skill level)
    can be quite daunting, especially following the pip installation. An easier path
    to get up and running is by using a pre-built Docker container, such as Puckel's
    Docker container ([https://hub.docker.com/r/puckel/docker-airflow](https://hub.docker.com/r/puckel/docker-airflow)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与Azure机器学习类似，管道的可视化确实使得特定管道的配置比Apache Spark更容易。然而，与Apache Spark类似，设置和配置（取决于你的技能水平）可能相当令人望而却步，尤其是在pip安装之后。一个更容易上手的方法是使用预构建的Docker容器，例如Puckel的Docker容器（[https://hub.docker.com/r/puckel/docker-airflow](https://hub.docker.com/r/puckel/docker-airflow)）。
- en: 'Here are some of the pros and cons of Apache Airflow:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Apache Airflow的一些优缺点：
- en: '**Pros:**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点：**'
- en: Free and open source
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费且开源
- en: Documentation and examples given the 4+ years
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了4年以上的文档和示例
- en: Runs on Windows, Linux, and macOS
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows、Linux和macOS上运行
- en: '**Cons:**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点：**'
- en: Complex to set up (especially with the official pip instructions)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置复杂（尤其是使用官方pip说明）
- en: .NET is not natively supported
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET不是原生支持的
- en: Apache Spark
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache Spark
- en: 'Apache Spark, another open source tool, while generally used in big-data pipelines,
    can also be configured for feature extraction, training, and the production of
    models at scale. When memory and CPU constraints are hindering your ability to
    build models, for example, training with a massive dataset, I have personally
    seen Apache Spark scale to utilizing multiple 64C/128T AMD servers with over a
    terabyte of ram being maximized. I found this platform to be more difficult to
    set up than Apache Airflow or Azure''s Machine Learning platform, however, once
    set up it can be quite powerful. The following screenshot shows the UI of Apache
    Spark:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Spark，作为另一个开源工具，虽然通常用于大数据管道，但也可以配置用于特征提取、训练和大规模模型的生成。例如，当内存和CPU限制阻碍你构建模型时，比如使用大规模数据集进行训练，我亲眼看到Apache
    Spark可以扩展到利用多个64C/128T AMD服务器，并最大化超过1TB的RAM。我发现这个平台比Apache Airflow或Azure的机器学习平台设置起来更困难，但一旦设置好，它就可以非常强大。以下截图显示了Apache
    Spark的用户界面：
- en: '![](img/b43f5783-5d07-426a-ba4f-16044cd96c75.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b43f5783-5d07-426a-ba4f-16044cd96c75.png)'
- en: 'A great step by step install guide can be found on Microsoft''s Apache Spark
    page ([https://dotnet.microsoft.com/learn/data/spark-tutorial/intro](https://dotnet.microsoft.com/learn/data/spark-tutorial/intro))
    for both Windows and Linux. This guide does remove some of the unknowns, however,
    compared to Azure or Airflow it is still far from easy to get up and running.
    Here are some of the pros and cons of Apache Spark:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在微软的Apache Spark页面（[https://dotnet.microsoft.com/learn/data/spark-tutorial/intro](https://dotnet.microsoft.com/learn/data/spark-tutorial/intro)）上找到优秀的分步安装指南，适用于Windows和Linux。这个指南确实消除了许多未知因素，然而，与Azure或Airflow相比，它仍然远非容易上手。以下是Apache
    Spark的一些优缺点：
- en: '**Pros:**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点：**'
- en: Free and open source
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费且开源
- en: .NET bindings from Microsoft
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自微软的.NET绑定
- en: Lots of documentation due to its long history (> 5 years old)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于其悠久的历史（超过5年），有大量的文档
- en: Runs on Windows, macOS, and Linux
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows、macOS和Linux上运行
- en: '**Cons:**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点：**'
- en: Can be difficult to configure and get up and running
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和启动可能比较困难
- en: Sensitive to IT infrastructure changes
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对IT基础设施变化敏感
- en: Microsoft has written a .NET binding for Apache Spark and released it for free: [https://dotnet.microsoft.com/apps/data/spark](https://dotnet.microsoft.com/apps/data/spark). 
    These bindings are available for Windows, macOS, and Linux.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 微软为Apache Spark编写了.NET绑定，并将其免费发布：[https://dotnet.microsoft.com/apps/data/spark](https://dotnet.microsoft.com/apps/data/spark)。这些绑定适用于Windows、macOS和Linux。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Over the course of this chapter, we have deep-dived into what goes into production-ready
    model training from the original purpose question to a trained model. Through
    this deep dive, we have examined the level of effort that is needed to create
    detailed features through production thought processes and feature engineering.
    We then reviewed the challenges, the ways to address the training, and how to
    test dataset questions. Lastly, we also dove into the importance of an actual
    model building pipeline, using an entirely automated process.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，我们深入探讨了从原始目的问题到训练模型的生产就绪模型训练所涉及的内容。通过这次深入探讨，我们检查了创建详细特征所需的工作量，这些特征是通过生产思维过程和特征工程实现的。然后，我们回顾了挑战、解决训练的方法以及如何测试数据集问题。最后，我们还深入探讨了实际模型构建管道的重要性，使用完全自动化的流程。
- en: In the next chapter, we will utilize a pre-built TensorFlow model in a WPF application
    to determine if a submitted image contains certain objects or not. This deep dive
    will explore how ML.NET provides an easy-to-use interface for TensorFlow models.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在一个WPF应用程序中使用预构建的TensorFlow模型来确定提交的图像是否包含某些对象。这次深入探讨将介绍ML.NET如何为TensorFlow模型提供一个易于使用的接口。
