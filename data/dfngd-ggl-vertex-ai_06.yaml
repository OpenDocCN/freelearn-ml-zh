- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Low-Code Options for Building ML Models
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 ML 模型的低代码选项
- en: '**BigQuery Machine Learning**, often abbreviated as **BQML**, is a tool offered
    as part of Google Cloud that seamlessly merges the worlds of data warehousing
    and ML. Designed to bridge the gap between data analysts and ML models, BQML empowers
    individuals to build, evaluate, and predict with ML models directly within the
    confines of BigQuery, without the need to move data or master a new toolset.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**BigQuery 机器学习**，通常简称为 **BQML**，是 Google Cloud 提供的工具之一，它无缝地将数据仓库和 ML 世界融合在一起。设计用于弥合数据分析师和
    ML 模型之间的差距，BQML 使个人能够在 BigQuery 的范围内直接构建、评估和预测 ML 模型，无需移动数据或掌握新的工具集。'
- en: This integration not only simplifies the process of model creation but also
    presents an intuitive transition for those familiar with SQL. With just a few
    statements, you can go from data analysis to predictive insights.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这种集成不仅简化了模型创建的过程，还为熟悉 SQL 的人提供了一个直观的过渡。只需几个语句，您就可以从数据分析过渡到预测洞察。
- en: 'In this chapter, we will go over the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: What is BQML?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 BQML？
- en: Using BQML for feature transformations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 BQML 进行特征转换
- en: Building ML models with BQML
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 BQML 构建 ML 模型
- en: Doing inference with BQML
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 BQML 进行推理
- en: What is BQML?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 BQML？
- en: BQML is a powerful, built-in ML service provided by Google Cloud that allows
    users to create, train, and deploy ML models using familiar SQL queries. BQML
    is designed to simplify the process of building and deploying ML models for those
    who may not have a strong background in data science or programming. In this chapter,
    we will explore the key features and capabilities of BQML and how you can use
    it to leverage the power of Google Cloud AI for your projects.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: BQML 是 Google Cloud 提供的强大内置 ML 服务，允许用户使用熟悉的 SQL 查询创建、训练和部署 ML 模型。BQML 设计用于简化那些可能没有强大数据科学或编程背景的人构建和部署
    ML 模型的过程。在本章中，我们将探讨 BQML 的关键特性和功能，以及您如何使用它来利用 Google Cloud AI 的力量为您的项目服务。
- en: 'BQML provides a seamless way to integrate ML into your data analytics workflows
    without requiring a deep understanding of ML concepts or programming languages.
    With BQML, you can do the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: BQML 提供了一种无缝的方式将机器学习（ML）集成到您的数据分析工作流程中，无需深入了解 ML 概念或编程语言。使用 BQML，您可以做到以下几点：
- en: Create and train ML models using SQL queries
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SQL 查询创建和训练 ML 模型
- en: Make predictions using trained models
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用训练模型进行预测
- en: Evaluate the performance of your models
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估您模型的性能
- en: Perform feature transformation and hyperparameter tuning
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行特征转换和超参数调整
- en: Understand model explanations and weights
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解模型解释和权重
- en: Export and import models
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出和导入模型
- en: 'Utilizing BQML offers numerous advantages:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 BQML 提供了许多优势：
- en: BQML eliminates the need to load data into local memory, thereby addressing
    the constraint posed by sizable datasets
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BQML 消除了将数据加载到本地内存中的需求，从而解决了大型数据集带来的约束
- en: BQML streamlines the ML process by handling standard tasks such as dividing
    data into train and test sets, selecting and adjusting learning rates, and choosing
    an optimization approach
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BQML 通过处理标准任务，如将数据分为训练集和测试集、选择和调整学习率以及选择优化方法来简化 ML 流程
- en: With automatic versioning of BQML models, tracking alterations and reverting
    to earlier versions when needed becomes effortless
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BQML 模型的自动版本控制使得跟踪变更并在需要时回滚到早期版本变得轻而易举
- en: When serving predictions, BQML models can be seamlessly integrated with Vertex
    AI
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提供预测时，BQML 模型可以无缝集成到 Vertex AI
- en: 'There are also a few limitations to using BQML:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 BQML 也有一些限制：
- en: '**Limited model types**: BQML supports a restricted set of ML models, such
    as linear regression, logistic regression, k-means clustering, matrix factorization,
    and others. It may not meet the requirements of projects that necessitate advanced
    or specialized models.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型类型有限**：BQML 支持一组受限的 ML 模型，如线性回归、逻辑回归、k-means 聚类、矩阵分解等。它可能无法满足需要高级或专用模型的项目需求。'
- en: '**Customizability**: BQML’s automated approach to ML means that there is limited
    scope for customization. Users might not be able to fine-tune models or experiment
    with different model architectures as they could with other ML frameworks.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可定制性**：BQML 对 ML 的自动化方法意味着可定制的范围有限。用户可能无法像在其他 ML 框架中那样微调模型或尝试不同的模型架构。'
- en: '**Scalability**: Although BQML is designed for handling large datasets, it
    may not scale as effectively as other distributed ML frameworks when working with
    extremely large datasets or complex models.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：尽管 BQML 设计用于处理大型数据集，但在处理极大数据集或复杂模型时，它可能不如其他分布式机器学习框架那样有效地扩展。'
- en: '`ML.PREDICT` function to make predictions based on images. BQML now also supports
    adding **remote models** as API endpoints, which opens up the possibility of adding
    any model hosted on Vertex AI endpoints or adding other cloud-based ML services
    such as Vision API to support additional use cases.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.PREDICT` 函数根据图像进行预测。BQML 现在也支持将 **远程模型** 作为 API 端点添加，这为添加托管在 Vertex AI
    端点上的任何模型或添加其他基于云的机器学习服务（如 Vision API）以支持更多用例打开了可能性。'
- en: '**Feature engineering**: BQML might not be the best option for extensive feature
    engineering as it focuses more on simplifying the ML process. Users may need to
    perform feature engineering outside of BQML for advanced feature engineering tasks.
    We will discuss the limitations in more detail in the *Feature engineering* section
    of this chapter.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特征工程**：BQML 可能不是进行广泛特征工程的最佳选择，因为它更侧重于简化机器学习过程。用户可能需要在 BQML 之外执行特征工程以进行高级特征工程任务。我们将在本章的
    *特征工程* 部分更详细地讨论这些限制。'
- en: '**External data sources**: BQML works primarily with Google BigQuery data,
    limiting its flexibility in terms of data sources. If you want to use data from
    different sources or formats, you might need to import it into BigQuery first.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部数据源**：BQML 主要与 Google BigQuery 数据一起工作，这限制了其在数据源方面的灵活性。如果您想使用来自不同来源或格式的数据，您可能需要首先将其导入到
    BigQuery 中。'
- en: '**Model portability**: BQML models are tightly integrated with Google Cloud.
    Exporting models for use outside of the Google ecosystem may be challenging and
    might require additional work.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型可移植性**：BQML 模型与 Google Cloud 紧密集成。将模型导出以在 Google 生态系统之外使用可能具有挑战性，可能需要额外的工作。'
- en: Now let’s look at how you can start using BigQuery for ML solutions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看您如何开始使用 BigQuery 解决机器学习问题。
- en: Getting started with BigQuery
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 BigQuery
- en: 'Google BigQuery is a serverless, fully managed data warehouse that enables
    super-fast SQL queries using the processing power of Google’s infrastructure.
    Since BigQuery is not part of Vertex AI, we won’t be covering the features of
    the tool in depth in this book, but here’s a quick guide on getting started. This
    should be enough information to help you follow along with the exercises later
    in this chapter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'Google BigQuery 是一个无服务器、完全管理的数据仓库，它利用 Google 基础设施的强大处理能力进行超快的 SQL 查询。由于 BigQuery
    不是 Vertex AI 的一部分，我们不会在本书中深入探讨该工具的功能，但这里有一个快速指南，介绍如何开始使用 BigQuery：这将提供足够的信息，帮助您跟随本章后面的练习。 '
- en: '**Set up a Google Cloud project**: Before you can use BigQuery, you’ll need
    to set up a **Google Cloud Platform** (**GCP**) project. Head over to the Google
    Cloud console and create a new project. If you’ve never used GCP before, you might
    need to create an account and set up billing information.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置 Google Cloud 项目**：在您可以使用 BigQuery 之前，您需要设置一个 **Google Cloud Platform**（**GCP**）项目。前往
    Google Cloud 控制台并创建一个新的项目。如果您之前从未使用过 GCP，您可能需要创建一个账户并设置账单信息。'
- en: '**Enable the BigQuery API**: Within your GCP project, navigate to the **API
    & Services** section and enable the BigQuery API.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启用 BigQuery API**：在您的 GCP 项目中，导航到 **API & Services** 部分，并启用 BigQuery API。'
- en: '**Access the BigQuery console**: Once the API has been enabled, you can access
    the BigQuery console either via the GCP dashboard or directly through the BigQuery
    console link ([https://console.cloud.google.com/bigquery](https://console.cloud.google.com/bigquery)).'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**访问 BigQuery 控制台**：一旦启用 API，您可以通过 GCP 仪表板或直接通过 BigQuery 控制台链接（[https://console.cloud.google.com/bigquery](https://console.cloud.google.com/bigquery)）访问
    BigQuery 控制台。'
- en: '**Create a dataset**: Datasets are containers for tables, views, and other
    data objects in BigQuery. To create one, click on the vertical ellipsis next to
    your GCP project name in the BigQuery console, select **Create Dataset**, and
    fill in the dataset’s name. Then, click **Create Dataset**.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建数据集**：数据集是 BigQuery 中表、视图和其他数据对象的容器。要创建一个数据集，请点击 BigQuery 控制台中您 GCP 项目名称旁边的垂直省略号，选择
    **创建数据集**，并填写数据集的名称。然后，点击 **创建数据集**。'
- en: '**Load data**: BigQuery supports various data formats, including CSV, JSON,
    and others. You can load data into BigQuery from Google Cloud Storage, send data
    directly with an API request, or manually upload files. To load data, navigate
    to your dataset in the BigQuery console on the left, click **Create Table**, and
    follow the prompts.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加载数据**：BigQuery 支持多种数据格式，包括 CSV、JSON 等。你可以从 Google Cloud Storage 将数据加载到 BigQuery
    中，通过 API 请求直接发送数据，或手动上传文件。要加载数据，请导航到左侧的 BigQuery 控制台中的数据集，点击 **创建表**，然后按照提示操作。'
- en: '**Run SQL queries**: With data loaded into BigQuery, you can then run SQL queries.
    Use the query editor in the BigQuery console to start analyzing your data using
    SQL.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行 SQL 查询**：将数据加载到 BigQuery 后，你可以运行 SQL 查询。使用 BigQuery 控制台中的查询编辑器开始使用 SQL
    分析你的数据。'
- en: Now, let’s look at how you can use BigQuery’s native functions to do large-scale
    feature/data transformations to prepare training data for the ML models.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用 BigQuery 的原生函数进行大规模特征/数据转换，为机器学习模型准备训练数据。
- en: Using BQML for feature transformations
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 BQML 进行特征转换
- en: 'Two types of feature preprocessing are supported by BQML:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: BQML 支持两种类型的特征预处理：
- en: '**Automatic preprocessing**: During training, BQML carries out automatic preprocessing.
    For further details, please carries out automatic preprocessing like missing data
    imputation, one-hot encoding, and timestamp transformation and encoding.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动预处理**：在训练过程中，BQML 会执行自动预处理。有关更详细的信息，请执行自动预处理，如缺失数据插补、独热编码和时间戳转换与编码。'
- en: '`TRANSFORM` clause provided by BQML to define customized preprocessing using
    manual preprocessing functions. These functions can also be utilized outside the
    `TRANSFORM` clause.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BQML 提供的 `TRANSFORM` 子句用于定义使用手动预处理函数的定制预处理。这些函数也可以在 `TRANSFORM` 子句之外使用。
- en: 'While BQML does support some feature engineering tasks, it has certain limitations
    compared to more flexible and feature-rich ML frameworks:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 BQML 支持一些特征工程任务，但与更灵活且功能丰富的机器学习框架相比，它存在某些限制：
- en: '**Limited preprocessing functions**: BQML provides a basic set of SQL functions
    for data preprocessing, such as scaling and encoding. However, it may lack some
    advanced preprocessing techniques or specialized functions available in other
    ML libraries such as **scikit-learn** or **TensorFlow**.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的预处理函数**：BQML 提供了一组基本的 SQL 函数用于数据预处理，例如缩放和编码。然而，它可能缺乏其他机器学习库（如 **scikit-learn**
    或 **TensorFlow**）中可用的某些高级预处理技术或专用函数。'
- en: '**No automated feature selection**: BQML does not offer automated feature selection
    methods to identify the most important variables in your dataset. You must manually
    select and engineer features based on your domain knowledge and intuition, or
    use external tools for feature selection.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无自动特征选择**：BQML 不提供自动特征选择方法来识别数据集中最重要的变量。你必须根据你的领域知识和直觉手动选择和构建特征，或者使用外部工具进行特征选择。'
- en: '**Complex feature transformations**: BQML’s SQL-based approach may not be well
    suited for certain complex feature transformations that involve non-linear combinations,
    rolling windows, or sequential patterns in the data. In such cases, you may need
    to preprocess your data using other tools or programming languages before using
    BQML.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂特征转换**：基于 SQL 的 BQML 方法可能不适合某些涉及非线性组合、滚动窗口或数据中的序列模式等复杂特征转换。在这种情况下，你可能需要在使用
    BQML 之前使用其他工具或编程语言对数据进行预处理。'
- en: '**Custom feature generation**: BQML lacks the flexibility to create custom
    features, such as domain-specific functions or transformations, as easily as you
    can with more versatile ML libraries. You might need to implement these custom
    features outside of BQML, which could be cumbersome and less efficient.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义特征生成**：BQML 缺乏创建自定义特征的灵活性，例如像更通用的机器学习库那样轻松创建特定领域的函数或转换。你可能需要在外部实现这些自定义特征，这可能会很繁琐且效率较低。'
- en: '**Feature engineering pipelines**: BQML does not provide a built-in mechanism
    to create and manage reusable feature engineering pipelines. In contrast, other
    ML frameworks offer functionality to build modular and maintainable pipelines,
    streamlining the process of applying the same transformations to training and
    validation datasets or during model deployment.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特征工程管道**：BQML 不提供内置机制来创建和管理可重用的特征工程管道。相比之下，其他机器学习框架提供了构建模块化和可维护管道的功能，简化了将相同的转换应用于训练和验证数据集或在模型部署期间的过程。'
- en: While BQML simplifies the ML process, it may not be the best choice for projects
    that require extensive or advanced feature engineering. In such cases, you may
    need to preprocess your data using external tools or libraries and then import
    the transformed data into BigQuery for further analysis with BQML.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然BQML简化了机器学习过程，但它可能不是需要大量或高级特征工程的项目最佳选择。在这种情况下，您可能需要使用外部工具或库预处理您的数据，然后将转换后的数据导入BigQuery，以便使用BQML进行进一步分析。
- en: Manual preprocessing
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动预处理
- en: BQML provides a variety of manual preprocessing functions that can be utilized
    with the `CREATE MODEL` syntax to preprocess your data before training. These
    functions can also be used outside the `TRANSFORM` clause. These preprocessing
    functions can be scalar, operating on a single row, or analytic, operating on
    all rows and outputting results based on statistics collected across all rows.
    When ML analytic functions are used inside the `TRANSFORM` clause during training,
    the same statistics are automatically applied to the input in prediction.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: BQML提供了一系列手动预处理函数，可以使用 `CREATE MODEL` 语法在训练前预处理您的数据。这些函数也可以在 `TRANSFORM` 子句之外使用。这些预处理函数可以是标量，对单行进行操作，或者分析型，对所有行进行操作，并基于所有行收集的统计信息输出结果。当在训练期间
    `TRANSFORM` 子句中使用 ML 分析函数时，相同的统计信息会自动应用于预测输入。
- en: 'The following table lists all the supported data preprocessing functions in
    BigQuery:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了BigQuery中所有支持的数据预处理函数：
- en: '| **Function Name** | **Description** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **函数名称** | **描述** |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ML.BUCKETIZE` | Bucketizes a numerical expression into user-defined categories
    based on provided split points |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `ML.BUCKETIZE` | 根据提供的分割点将数值表达式分桶到用户定义的类别。'
- en: '| `ML.POLYNOMIAL_EXPAND` | Generates polynomial combinations of a given set
    of numerical features up to a specified degree |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `ML.POLYNOMIAL_EXPAND` | 生成给定数值特征的指定度数的多项式组合。'
- en: '| `ML.FEATURE_CROSS` | Generates feature crosses of categorical features up
    to a specified degree |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `ML.FEATURE_CROSS` | 生成指定度数的分类特征的交叉特征。'
- en: '| `ML.NGRAMS` | Extracts n-grams from an array of tokens, based on a given
    range of *n* values |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `ML.NGRAMS` | 根据给定的 *n* 值范围从标记数组中提取 n-gram。'
- en: '| `ML.QUANTILE_BUCKETIZE` | Bucketizes a numerical expression into quantile-based
    categories based on several buckets |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `ML.QUANTILE_BUCKETIZE` | 根据几个桶将数值表达式分桶到基于分位数的类别。'
- en: '| `ML.HASH_BUCKETIZE` | Bucketizes a string expression into a fixed number
    of hash-based buckets |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `ML.HASH_BUCKETIZE` | 将字符串表达式分桶到基于哈希的固定数量桶。'
- en: '| `ML.MIN_MAX_SCALER` | Scales a numerical expression to the range [0, 1] capped
    with `MIN` and `MAX` across all rows |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `ML.MIN_MAX_SCALER` | 将数值表达式缩放到范围 [0, 1]，并在所有行中使用 `MIN` 和 `MAX` 进行限制。'
- en: '| `ML.STANDARD_SCALER` | Standardizes a numerical expression |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `ML.STANDARD_SCALER` | 标准化数值表达式。'
- en: '| `ML.MAX_ABS_SCALER` | Scales a numerical expression to the range [-1, 1]
    by dividing through the largest maximum absolute value |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `ML.MAX_ABS_SCALER` | 通过除以最大绝对值将数值表达式缩放到范围 [-1, 1]。'
- en: '| `ML.ROBUST_SCALER` | Scales a numerical expression using statistics that
    are robust to outliers |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `ML.ROBUST_SCALER` | 使用对异常值具有鲁棒性的统计方法缩放数值表达式。'
- en: '| `ML.NORMALIZER` | Normalizes an array expression to have a unit norm using
    the given p-norm |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `ML.NORMALIZER` | 使用给定的 p-范数将数组表达式归一化到单位范数。'
- en: '| `ML.IMPUTER` | Replaces `NULL` in an expression using a specified value (for
    example, mean, median, or most frequent) |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `ML.IMPUTER` | 使用指定的值（例如，平均值、中位数或最频繁值）替换表达式中的 `NULL`。'
- en: '| `ML.ONE_HOT_ENCODER` | Encodes a string expression using a one-hot encoding
    scheme |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `ML.ONE_HOT_ENCODER` | 使用单热编码方案编码字符串表达式。'
- en: '| `ML.LABEL_ENCODER` | Encodes a string expression to an `INT64` in `[``0,
    n_categories]` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `ML.LABEL_ENCODER` | 将字符串表达式编码为 `[0, n_categories]` 范围内的 `INT64`。'
- en: Table 6.1 – Data transformation functions
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.1 – 数据转换函数
- en: 'Here is a list of all the functions with their inputs and outputs, as well
    as an example for each:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了所有函数及其输入和输出，以及每个函数的示例：
- en: '`ML.BUCKETIZE`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.BUCKETIZE`'
- en: Bucketizes a numerical expression into user-defined categories based on provided
    split points.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据提供的分割点将数值表达式分桶到用户定义的类别。
- en: 'Input:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：
- en: '`numerical_expression`: Numerical expression to bucketize.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numerical_expression`: 用于分桶的数值表达式。'
- en: '`array_split_points`: Sorted numerical array with split points.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`array_split_points`: 包含分割点的排序数值数组。'
- en: '`exclude_boundaries` (optional): If `TRUE`, the two boundaries are removed
    from `array_split_points`. The default value is `FALSE`.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exclude_boundaries`（可选）：如果为 `TRUE`，则从 `array_split_points` 中移除两个边界。默认值为 `FALSE`。'
- en: 'Output:'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：
- en: '`STRING` is the name of the buckets into which the `numerical_expression` field
    is split.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`STRING` 是 `numerical_expression` 字段分割成桶的名称。'
- en: 'Here’s an example SQL statement:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个示例 SQL 语句：
- en: '[PRE0]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Submitting this query in BigQuery should generate the following output:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 BigQuery 中提交此查询应生成以下输出：
- en: '[PRE1]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`ML.FEATURE_CROSS`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.FEATURE_CROSS`'
- en: 'This generates feature crosses of categorical features up to a specified degree:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可以生成指定度数的分类特征的交叉特征：
- en: '[PRE2]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here’s an example SQL statement:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个示例 SQL 语句：
- en: '[PRE3]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Submitting this query in BigQuery should generate the following output:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 BigQuery 中提交此查询应生成以下输出：
- en: '| **animal** | **color** | **animal_color** |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **动物** | **颜色** | **动物_颜色** |'
- en: '| --- | --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| dog | brown | dog_brown |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 狗 | 棕色 | 狗_棕色 |'
- en: '| cat | black | cat_black |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 猫 | 黑色 | 猫_黑色 |'
- en: '| bird | yellow | bird_yellow |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 鸟 | 黄色 | 鸟_黄色 |'
- en: '| fish | orange | fish_orange |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 鱼 | 橙色 | 鱼_橙色 |'
- en: Table 6.2 – BigQuery Query Output
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.2 – BigQuery 查询输出
- en: Note that the `ML.FEATURE_CROSS` function can be used to create a cross of multiple
    columns if you include more columns in the `ARRAY` argument.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果 `ARRAY` 参数中包含更多列，则可以使用 `ML.FEATURE_CROSS` 函数创建多个列的交叉。
- en: '`ML.NGRAMS`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.NGRAMS`'
- en: This extracts n-grams from an array of tokens, based on a given range of *n*
    values.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这根据给定的 *n* 值范围从标记数组中提取 n-gram。
- en: 'Input:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：
- en: '`array_input`: `ARRAY` of `STRING`. The strings are the tokens to be merged.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`array_input`: `ARRAY` 的 `STRING`。这些字符串是要合并的标记。'
- en: '`range`: `ARRAY` of two `INT64` elements or a single `INT64`. These two sorted
    `INT64` elements in the `ARRAY` input are the range of n-gram sizes to return.
    A single `INT64` is equivalent to the range of [x, x].'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`range`: `ARRAY` 的两个 `INT64` 元素或单个 `INT64`。`ARRAY` 输入中的这两个排序的 `INT64` 元素是要返回的
    n-gram 大小范围。单个 `INT64` 等同于 [x, x] 范围。'
- en: '`separator`: Optional `STRING`. `separator` connects two adjacent tokens in
    the output. The default value is whitespace.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`separator`: 可选的 `STRING`。`separator` 连接输出中的相邻标记。默认值是空格。'
- en: 'Output: `ARRAY` of `STRING`.'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：`ARRAY` 的 `STRING`。
- en: 'Here’s an example SQL statement:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个示例 SQL 语句：
- en: '[PRE4]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Submitting this query in BigQuery should generate the following output:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 BigQuery 中提交此查询应生成以下输出：
- en: '| **fruit** | **fruit2** | **fruit3** | **fruit_ngrams** |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| **水果** | **水果2** | **水果3** | **水果_ngrams** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| apple | cherry | pear | [apple cherry, cherry pear] |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 苹果 | 樱桃 | 梨 | [苹果 樱桃, 樱桃 梨] |'
- en: '| banana | banana | melon | [banana banana, banana melon] |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 香蕉 | 香蕉 | 西瓜 | [香蕉 香蕉, 香蕉 西瓜] |'
- en: '| cherry | cherry | pineapple | [cherry cherry, cherry pineapple] |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 樱桃 | 樱桃 | 菠萝 | [樱桃 樱桃, 樱桃 菠萝] |'
- en: Table 6.3 – Output from BigQuery
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.3 – BigQuery 输出
- en: '`ML.QUANTILE_BUCKETIZE`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.QUANTILE_BUCKETIZE`'
- en: This bucketizes a numerical expression into quantile-based categories based
    on several buckets.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个功能将数值表达式根据几个桶划分为基于分位数的类别。
- en: 'Input:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：
- en: '`numerical_expression`: Numerical expression to bucketize'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numerical_expression`: 要划分的数值表达式'
- en: '`num_buckets`: `INT64`. The number of buckets to split `numerical_expression`
    into'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_buckets`: `INT64`。将 `numerical_expression` 分割成桶的数量'
- en: 'Output: `STRING`.'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：`STRING`。
- en: 'Here’s an example SQL statement:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个示例 SQL 语句：
- en: '[PRE5]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we create a virtual table dataset with five rows of age data.
    Then, we use the `ML.QUANTILE_BUCKETIZE` function to bucketize the `age` column
    into four quantile buckets. The resulting `age_bucket` column shows which quantile
    bucket each row of the dataset belongs to.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，我们创建了一个包含五行年龄数据的虚拟表数据集。然后，我们使用 `ML.QUANTILE_BUCKETIZE` 函数将 `age` 列划分为四个分位数桶。结果
    `age_bucket` 列显示了数据集的每一行属于哪个分位数桶。
- en: 'Here’s the output:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是输出示例：
- en: '[PRE6]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`ML.HASH_BUCKETIZE`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.HASH_BUCKETIZE`'
- en: This bucketizes a string expression into a fixed number of hash-based buckets.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将字符串表达式划分为基于哈希的固定数量的桶。
- en: 'Input:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：
- en: '`string_expression`: `STRING`. The string expression to bucketize.'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string_expression`: `STRING`。要划分的字符串表达式。'
- en: '`hash_bucket_size`: `INT64`. The number of buckets. Expected `hash_bucket_size
    >= 0`. If `hash_bucket_size = 0`, the function only hashes the string without
    bucketizing the hashed value.'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hash_bucket_size`: `INT64`。桶的数量。预期 `hash_bucket_size >= 0`。如果 `hash_bucket_size
    = 0`，则函数仅对字符串进行哈希处理，而不对哈希值进行桶划分。'
- en: 'Output: `INT64`.'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：`INT64`。
- en: 'Here’s an example SQL statement:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个示例 SQL 语句：
- en: '[PRE7]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we create a virtual table dataset with four rows of data. Then,
    we use the `ML.HASH_BUCKETIZE` function to hash the `animal` column into two buckets.
    The resulting `animal_bucket` column shows which hash bucket each row of the dataset
    belongs to.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，我们创建了一个包含四行数据的虚拟表数据集。然后，我们使用`ML.HASH_BUCKETIZE`函数将`animal`列哈希到两个桶中。结果`animal_bucket`列显示了数据集的每一行属于哪个哈希桶。
- en: Note that the `ML.HASH_BUCKETIZE` function can be used to hash the values of
    a column into a different number of buckets by specifying a different value for
    the second argument.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，可以通过指定第二个参数的不同值来使用`ML.HASH_BUCKETIZE`函数将列的值哈希到不同数量的桶中。
- en: 'Here’s the output:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是输出：
- en: '[PRE8]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, we create a virtual table dataset with four rows of data. Then,
    we use the `ML.HASH_BUCKETIZE` function to hash the animal column into two buckets.
    The resulting `animal_bucket` column shows which hash bucket each row of the dataset
    belongs to.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，我们创建了一个包含四行数据的虚拟表数据集。然后，我们使用`ML.HASH_BUCKETIZE`函数将`animal`列哈希到两个桶中。结果`animal_bucket`列显示了数据集的每一行属于哪个哈希桶。
- en: '`ML.MIN_MAX_SCALER`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.MIN_MAX_SCALER`'
- en: Scales a numerical expression to the range [0, 1] capped with `MIN` and `MAX`
    across all rows.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将数值表达式缩放到范围[0, 1]，范围由所有行的`MIN`和`MAX`值限制。
- en: 'Input: `numerical_expression`. Numerical expression to scale.'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：`numerical_expression`。要缩放的数值表达式。
- en: 'Output: `DOUBLE`.'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：`DOUBLE`。
- en: 'Here’s an example SQL statement:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个示例SQL语句：
- en: '[PRE9]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we create a virtual table dataset with five rows of age data.
    Then, we use the `ML.MIN_MAX_SCALER` function to scale the `age` column to a range
    of 0 to 1\. Note that the `ML.MIN_MAX_SCALER` function can be used to scale the
    values of a column to a different range by specifying different values for the
    `MIN` and `MAX` arguments.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，我们创建了一个包含五行年龄数据的虚拟表数据集。然后，我们使用`ML.MIN_MAX_SCALER`函数将`age`列缩放到0到1的范围。请注意，可以通过指定不同的`MIN`和`MAX`参数值来使用`ML.MIN_MAX_SCALER`函数将列的值缩放到不同的范围。
- en: 'Here’s the output:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是输出：
- en: '[PRE10]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`ML.STANDARD_SCALER`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.STANDARD_SCALER`'
- en: This function standardizes a numerical expression.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数对数值表达式进行标准化。
- en: 'Input: `numerical_expression`. Numerical expression to scale.'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：`numerical_expression`。要缩放的数值表达式。
- en: 'Output: `DOUBLE`.'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：`DOUBLE`。
- en: 'Here’s an example SQL statement:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个示例SQL语句：
- en: '[PRE11]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, we create a virtual table dataset with five rows of age data.
    Then, we use the `ML.STANDARD_SCALER` function to standardize the `age` column
    to have a mean of 0 and a standard deviation of 1\. The resulting `scaled_age`
    column shows the standardized values of the `age` column.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，我们创建了一个包含五行年龄数据的虚拟表数据集。然后，我们使用`ML.STANDARD_SCALER`函数将`age`列标准化，使其均值为0，标准差为1。结果`scaled_age`列显示了`age`列的标准化值。
- en: 'Here’s the output:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是输出：
- en: '[PRE12]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`ML.MAX_ABS_SCALER`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.MAX_ABS_SCALER`'
- en: This function scales a numerical expression to the range [-1, 1] by dividing
    through the largest maximum absolute value.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数通过除以最大绝对值来将数值表达式缩放到范围[-1, 1]。
- en: 'Input: `numerical_expression`.'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：`numerical_expression`。
- en: 'Output: `DOUBLE`.'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：`DOUBLE`。
- en: 'Here’s an example SQL statement:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个示例SQL语句：
- en: '[PRE13]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, we create a virtual table dataset with five rows of age data.
    Then, we use the `ML.MAX_ABS_SCALER` function to scale the `age` column so that
    the absolute values of the largest magnitude element in the column are scaled
    to 1\. The resulting `scaled_age` column shows the scaled values of the `age`
    column.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本例中，我们创建了一个包含五行年龄数据的虚拟表数据集。然后，我们使用`ML.MAX_ABS_SCALER`函数缩放`age`列，使得该列中最大绝对值元素的绝对值缩放到1。结果`scaled_age`列显示了`age`列的缩放值。
- en: 'Here’s the output:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是输出：
- en: '[PRE14]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`ML.NORMALIZER`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.NORMALIZER`'
- en: This function normalizes `array_expression` to have a unit norm using the given
    p-norm.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数使用给定的p-norm将`array_expression`归一化，使其具有单位范数。
- en: 'Input: `array_expression, p`.'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：`array_expression, p`。
- en: 'Output: `ARRAY<DOUBLE>`.'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：`ARRAY<DOUBLE>`。
- en: 'Here’s an example SQL statement:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个示例SQL语句：
- en: '[PRE15]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here’s the output:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是输出：
- en: '[PRE16]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`ML.IMPUTER`'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.IMPUTER`'
- en: This function replaces `NULL` in an expression using a specified value (for
    example, mean, median, or most frequent).
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数使用指定的值（例如，均值、中位数或最频繁值）替换表达式中的`NULL`。
- en: 'Input: `expression, strategy`.'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：`expression, strategy`。
- en: 'Output: `DOUBLE` for numerical expression. `STRING` for `STRING` expression.'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：数值表达式的`DOUBLE`。`STRING`表达式的`STRING`。
- en: 'Here’s an example SQL statement:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个示例SQL语句：
- en: '[PRE17]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here’s the output:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是输出：
- en: '[PRE18]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`ML.ONE_HOT_ENCODER`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.ONE_HOT_ENCODER`'
- en: This function encodes `string_expression` using a one-hot encoding scheme.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数使用单热编码方案对`string_expression`进行编码。
- en: 'Inputs:'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：
- en: '`string_expression`: The `STRING` expression to be encoded.'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string_expression`：要编码的`STRING`表达式。'
- en: '`drop` (optional): This determines which category to drop during encoding.
    The default value is `none`, which means all categories are retained.'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drop`（可选）：这决定了在编码过程中要丢弃哪个类别。默认值是`none`，意味着保留所有类别。'
- en: '`top_k` (optional): `INT64`. This limits the encoding vocabulary to the `top_k`
    frequent categories. The default value is 32,000, and the max supported value
    is 1 million to avoid suffering from high dimensionality.'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top_k`（可选）：`INT64`。这限制了编码词汇表只包含`top_k`个最频繁的类别。默认值是32,000，最大支持值是1百万，以避免因高维性而受到影响。'
- en: '`frequency_threshold` (optional): `INT64`. It limits the encoding vocabulary
    to categories whose frequency is `>= frequency_threshold`. The default value is
    `5`.'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frequency_threshold`（可选）：`INT64`。它限制了编码词汇表只包含频率`>= frequency_threshold`的类别。默认值是`5`。'
- en: 'Output: It is an array of `STRUCT` that contains the encoded values, where
    `index` is the index of the encoded value and `value` is the value of the encoded
    value.'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：它是一个包含编码值的`STRUCT`数组，其中`index`是编码值的索引，`value`是编码值的值。
- en: 'Here''s an example SQL statement:'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个示例SQL语句：
- en: '[PRE19]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding query results in the following output:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述查询的结果如下所示：
- en: '| **color** | **encoding.index** | **encoding.value** |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| **颜色** | **encoding.index** | **encoding.value** |'
- en: '| --- | --- | --- |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| green | 0 | 1.0 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 绿色 | 0 | 1.0 |'
- en: '| red | 0 | 1.0 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 红色 | 0 | 1.0 |'
- en: '| purple | 0 | 1.0 |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 紫色 | 0 | 1.0 |'
- en: '| blue | 0 | 1.0 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 蓝色 | 0 | 1.0 |'
- en: '| green | 0 | 1.0 |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 绿色 | 0 | 1.0 |'
- en: 'Table 6.4: Output from the previous query'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.4：前一个查询的输出
- en: '`ML.LABEL_ENCODER`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ML.LABEL_ENCODER`'
- en: This function converts string values into `INT64` numbers within a designated
    range. The function organizes the encoding terms in alphabetical order, and any
    category not found in this vocabulary will be represented as `0`. When utilized
    in the `TRANSFORM` clause, the vocabulary and categories omitted during the training
    process are seamlessly applied during prediction.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此函数将字符串值转换为指定范围内的`INT64`数字。该函数按字母顺序组织编码术语，且在此词汇表中未找到的任何类别将表示为`0`。当在`TRANSFORM`子句中使用时，训练过程中省略的词汇表和类别将无缝应用于预测。
- en: 'Inputs:'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入：
- en: '`string_expression`: The `STRING` expression to be encoded.'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string_expression`：要编码的`STRING`表达式。'
- en: '`top_k`: Optional `INT64`. This limits the encoding vocabulary to the `top_k`
    frequent categories. The default value is 32,000, and the max supported value
    is 1 million.'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top_k`：可选的`INT64`。这限制了编码词汇表只包含`top_k`个最频繁的类别。默认值是32,000，最大支持值是1百万，以避免因高维性而受到影响。'
- en: '`frequency_threshold`: Optional `INT64`. This limits the encoding vocabulary
    to categories whose frequency is `>= frequency_threshold`. The default value is
    `5`.'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frequency_threshold`：可选的`INT64`。这限制了编码词汇表只包含频率`>= frequency_threshold`的类别。默认值是`5`。'
- en: 'Output: `INT64`. This is the encoded value of the string expression in the
    specified range.'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出：`INT64`。这是指定范围内字符串表达式的编码值。
- en: 'Here’s an example SQL statement:'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个示例SQL语句：
- en: '[PRE20]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding query results in the following output:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述查询的结果如下所示：
- en: '| **fruit** | **encoded_fruit** |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| **水果** | **encoded_fruit** |'
- en: '| --- | --- |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| orange | 0 |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 橙子 | 0 |'
- en: '| pear | 0 |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| 梨 | 0 |'
- en: '| banana | 2 |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| 香蕉 | 2 |'
- en: '| apple | 1 |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| 苹果 | 1 |'
- en: '| kiwi | 0 |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 草莓 | 0 |'
- en: '| apple | 1 |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 苹果 | 1 |'
- en: '| banana | 2 |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 香蕉 | 2 |'
- en: 'Table 6.5: Output from the previous query'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.5：前一个查询的输出
- en: Now let’s look at the different type of ML models you can build with BQML.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看你可以使用BQML构建的不同类型的机器学习模型。
- en: Building ML models with BQML
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BQML构建机器学习模型
- en: BQML supports model training for several different use cases. The key model
    categories that are currently supported are supervised learning models, unsupervised
    learning models, time series models, imported models, and remote models.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: BQML支持多种不同用例的模型训练。目前支持的关键模型类别包括监督学习模型、无监督学习模型、时间序列模型、导入的模型和远程模型。
- en: 'The following table showcases some of the key ML model types that are supported
    within BigQuery:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了BigQuery支持的一些关键机器学习模型类型：
- en: '| **Model Type** | **Model Types** | **Manually Defined** **Feature Preprocessing**
    | **Hyperparameter Tuning** **in BQML** |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| **模型类型** | **模型类型** | **手动定义** **特征预处理** | **在BQML中的超参数调整** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Supervised | Linear and logistic regression | Supported | Supported |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| 监督学习 | 线性和逻辑回归 | 支持 | 支持 |'
- en: '| Supervised | Deep neural networks | Supported | Supported |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| 监督学习 | 深度神经网络 | 支持 | 支持 |'
- en: '| Supervised | Wide-and-deep | Supported | Supported |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 监督学习 | 广度与深度 | 支持 | 支持 |'
- en: '| Supervised | Boosted trees | Supported | Supported |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 监督 | 提升树 | 支持 | 支持 |'
- en: '| Supervised | Random forest | Supported | Supported |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 监督 | 随机森林 | 支持 | 支持 |'
- en: '| Supervised | AutoML tables | Not supported | Automated |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 监督 | AutoML表格 | 不支持 | 自动 |'
- en: '| Unsupervised | k-means | Supported | Supported |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 无监督 | k-means | 支持 | 支持 |'
- en: '| Unsupervised | Matrix factorization | Not supported | Supported |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 无监督 | 矩阵分解 | 不支持 | 支持 |'
- en: '| Unsupervised | PCA | Supported | Not supported |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 无监督 | PCA | 支持 | 不支持 |'
- en: '| Unsupervised | Autoencoder | Supported | Not supported |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 无监督 | 自动编码器 | 支持 | 不支持 |'
- en: '| Time series | `ARIMA_PLUS` | Only automatic preprocessing | Supported`(``auto.ARIMA4)*`
    |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| 时间序列 | `ARIMA_PLUS` | 仅自动预处理 | 支持`(``auto.ARIMA4)*` |'
- en: '| Time series | `ARIMA_PLUS_XREG` | Only automatic preprocessing | Supported`(``auto.ARIMA4)*`
    |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 时间序列 | `ARIMA_PLUS_XREG` | 仅自动预处理 | 支持`(``auto.ARIMA4)*` |'
- en: Table 6.6 – Supported capabilities for key ML models
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.6 – 支持的关键机器学习模型的功能
- en: There are two other important model creation options available in BigQuery to
    help you utilize ML models built outside BigQuery – imported models and remote
    models.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在BigQuery中，有两个其他重要的模型创建选项可供您使用，以帮助您利用BigQuery外部构建的机器学习模型 – 导入模型和远程模型。
- en: BQML allows you to import models that have been trained outside BigQuery so
    that they can be used for inference within BigQuery.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: BQML允许您导入在BigQuery外部训练的模型，以便可以在BigQuery内部进行推理。
- en: 'The following model frameworks are supported for importing:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 支持以下模型框架用于导入：
- en: TensorFlow
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow
- en: TensorFlow Lite
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow Lite
- en: ONNX
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ONNX
- en: XGBoost
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XGBoost
- en: BQML allows you to register existing Vertex AI endpoints as a remote model.
    Once registered in BigQuery, you can send a prediction request to the Vertex AI
    endpoint from within BigQuery for inference.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: BQML允许您将现有的Vertex AI端点注册为远程模型。一旦在BigQuery中注册，您就可以从BigQuery内部向Vertex AI端点发送预测请求以进行推理。
- en: Creating BQML models
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建BQML模型
- en: The BigQuery function that’s used to initiate model creation is aptly called
    `CREATE`. In this section, we’ll look at the options available to a user when
    they’re creating different types of BQML models using the `CREATE` function. You
    don’t necessarily need to read through the details of every single model at the
    moment. This should be used more as a reference, as needed.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 用于启动模型创建的BigQuery函数被称为`CREATE`。在本节中，我们将探讨当用户使用`CREATE`函数创建不同类型的BQML模型时可供使用的选项。您目前不一定需要阅读每个模型的详细信息。这应该更多地用作参考，按需使用。
- en: Linear or logistic regression models
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性或逻辑回归模型
- en: 'The following is the syntax for creating regression models, along with the
    different required and optional arguments you need to provide as part of the query:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的语法用于创建回归模型，以及您需要在查询中提供的一些必需和可选参数：
- en: '[PRE21]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The key options that can be specified in the `CREATE MODEL` statement are as
    follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`CREATE MODEL`语句中指定的关键选项如下：
- en: '`MODEL_TYPE`: Specifies the required model type (for example, linear or logistic
    regression).'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODEL_TYPE`：指定所需的模型类型（例如，线性或逻辑回归）。'
- en: '`INPUT_LABEL_COLS`: Defines the label column names in the training data.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INPUT_LABEL_COLS`：定义训练数据中的标签列名。'
- en: '`OPTIMIZE_STRATEGY`: Selects the approach for training linear regression models:'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIMIZE_STRATEGY`：选择训练线性回归模型的方法：'
- en: '`AUTO_STRATEGY`: Chooses the training approach based on several conditions:'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTO_STRATEGY`：根据几个条件选择训练方法：'
- en: The `batch_gradient_descent` strategy is employed if either `l1_reg` or `warm_start`
    is specified
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果指定了`l1_reg`或`warm_start`，则采用`batch_gradient_descent`策略
- en: '`batch_gradient_descent` is also used if the overall cardinality of training
    features surpasses 10,000'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch_gradient_descent` 如果训练特征的总体基数超过10,000也会被使用'
- en: When overfitting may be an issue, specifically when the number of training samples
    is less than 10 times the total cardinality, `batch_gradient_descent` is chosen
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当可能存在过拟合问题时，特别是当训练样本数小于总基数10倍时，选择`batch_gradient_descent`
- en: For all other scenarios, the `NORMAL_EQUATION` strategy is implemented
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有其他场景，实现`NORMAL_EQUATION`策略
- en: '`BATCH_GRADIENT_DESCENT`: Engages the batch gradient descent method for model
    training, optimizing the loss function through the use of the gradient function.'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BATCH_GRADIENT_DESCENT`：在模型训练中启用批量梯度下降方法，通过使用梯度函数优化损失函数。'
- en: '`NORMAL_EQUATION`: Derives the least square solution for the linear regression
    issue using an analytical formula. The use of the `NORMAL_EQUATION` strategy is
    not permissible in the following situations:'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NORMAL_EQUATION`: 使用解析公式推导线性回归问题的最小二乘解。在以下情况下不允许使用`NORMAL_EQUATION`策略：'
- en: '`l1_reg` is defined'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l1_reg`被定义'
- en: '`warm_start` is defined'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warm_start`被定义'
- en: The total cardinality of training features exceeds 10,000
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练特征的总基数超过10,000
- en: '`L1_REG`: Sets the amount of L1 regularization applied.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`L1_REG`: 设置应用的L1正则化的量。'
- en: '`L2_REG`: Sets the amount of L2 regularization applied.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`L2_REG`: 设置应用的L2正则化的量。'
- en: '`MAX_ITERATIONS`: Determines the maximum number of training iterations or steps.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX_ITERATIONS`: 确定训练迭代的最大次数或步骤。'
- en: '`LEARN_RATE_STRATEGY`: Selects the strategy for specifying the learning rate
    during training.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LEARN_RATE_STRATEGY`: 选择在训练期间指定学习率的策略。'
- en: '`LEARN_RATE`: Defines the learning rate for gradient descent.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LEARN_RATE`: 定义梯度下降的学习率。'
- en: '`EARLY_STOP`: Indicates whether training should stop after the first iteration
    with minimal relative loss improvement.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EARLY_STOP`: 指示是否在第一次迭代后，如果相对损失改进最小，则停止训练。'
- en: '`MIN_REL_PROGRESS`: Sets the minimum relative loss improvement to continue
    training.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MIN_REL_PROGRESS`: 设置继续训练的最小相对损失改进。'
- en: '`DATA_SPLIT_METHOD`: Chooses the method for splitting input data into training
    and evaluation sets. The options here are `''AUTO_SPLIT''`, `''RANDOM''`, `''CUSTOM''`,
    `''SEQ''`, and `''NO_SPLIT''`.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA_SPLIT_METHOD`: 选择将输入数据分割为训练集和评估集的方法。这里的选项有`''AUTO_SPLIT''`、`''RANDOM''`、`''CUSTOM''`、`''SEQ''`和`''NO_SPLIT''`。'
- en: '`DATA_SPLIT_EVAL_FRACTION`: Specifies the fraction of data used for evaluation
    with `''RANDOM''` and `''``SEQ''` splits.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA_SPLIT_EVAL_FRACTION`: 指定在`''RANDOM''`和`''SEQ''`分割中用于评估的数据的分数。'
- en: '`DATA_SPLIT_COL`: Identifies the column used to split the data.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA_SPLIT_COL`: 识别用于分割数据的列。'
- en: '`LS_INIT_LEARN_RATE`: Sets the initial learning rate for the `''``LINE_SEARCH''`
    strategy.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LS_INIT_LEARN_RATE`: 为`''LINE_SEARCH''`策略设置初始学习率。'
- en: '`WARM_START`: Retrains a model with new training data, new model options, or
    both.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WARM_START`: 使用新的训练数据、新的模型选项或两者重新训练模型。'
- en: '`AUTO_CLASS_WEIGHTS`: Balances class labels using weights for each class in
    inverse proportion to the frequency of that class.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTO_CLASS_WEIGHTS`: 使用每个类别的权重来平衡类别标签，这些权重与该类别的频率成反比。'
- en: '`CLASS_WEIGHTS`: Defines the weights to use for each class label.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CLASS_WEIGHTS`: 定义每个类别标签使用的权重。'
- en: '`ENABLE_GLOBAL_EXPLAIN`: Computes global explanations using Explainable AI
    for global feature importance evaluation.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENABLE_GLOBAL_EXPLAIN`: 使用可解释AI计算全局特征重要性评估的全局解释。'
- en: '`CALCULATE_P_VALUES`: Computes p-values and standard errors during training.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CALCULATE_P_VALUES`: 在训练期间计算p值和标准误差。'
- en: '`FIT_INTERCEPT`: Fits an intercept to the model during training.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FIT_INTERCEPT`: 在训练期间将截距拟合到模型中。'
- en: '`CATEGORY_ENCODING_METHOD`: Specifies the encoding method to use on non-numeric
    features.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CATEGORY_ENCODING_METHOD`: 指定对非数值特征使用的编码方法。'
- en: Creating deep neural network models and wide-and-deep models
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建深度神经网络模型和宽深度模型
- en: 'Here’s the syntax for creating deep learning models, along with the different
    required and optional arguments you need to provide as part of the query:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建深度学习模型的语法，以及作为查询一部分需要提供的不同必需和可选参数：
- en: '[PRE22]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following options can be specified as part of the model creation request:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项可以作为模型创建请求的一部分指定：
- en: '`model_name`: The name of the BQML model you’re creating or replacing.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_name`: 你正在创建或替换的BQML模型名称。'
- en: '`model_type`: Specifies the type of model, either `''DNN_CLASSIFIER''` or `''DNN_REGRESSOR''`.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_type`: 指定模型的类型，可以是`''DNN_CLASSIFIER''`或`''DNN_REGRESSOR''`。'
- en: '`activation_fn`: For DNN model types, this specifies the activation function
    of the neural network. The options are `''RELU''`, `''RELU6''`, `''CRELU''`, `''ELU''`,
    `''SELU''`, `''SIGMOID''`, and `''TANH''`.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activation_fn`: 对于DNN模型类型，这指定了神经网络的激活函数。选项有`''RELU''`、`''RELU6''`、`''CRELU''`、`''ELU''`、`''SELU''`、`''SIGMOID''`和`''TANH''`。'
- en: '`auto_class_weights`: Specifies whether to balance class labels using weights
    for each class in inverse proportion to the frequency of that class. Use only
    with the `DNN_CLASSIFIER` model.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_class_weights`: 指定是否使用每个类别的权重来平衡类别标签，这些权重与该类别的频率成反比。仅与`DNN_CLASSIFIER`模型一起使用。'
- en: '`batch_size`: For DNN model types, this specifies the mini-batch size of samples
    that are fed to the neural network.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch_size`: 对于DNN模型类型，这指定了输入到神经网络的样本的迷你批大小。'
- en: '`class_weights`: The weights to use for each class label. This option cannot
    be specified if `AUTO_CLASS_WEIGHTS` is `TRUE`.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_weights`: 用于每个类别标签的权重。如果`AUTO_CLASS_WEIGHTS`为`TRUE`，则不能指定此选项。'
- en: '`data_split_method`: The method to split input data into training and evaluation
    sets. The options are `''AUTO_SPLIT''`, `''RANDOM''`, `''CUSTOM''`, `''SEQ''`,
    and `''NO_SPLIT''`.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_split_method`: 将输入数据分割为训练集和评估集的方法。选项有`''AUTO_SPLIT''`、`''RANDOM''`、`''CUSTOM''`、`''SEQ''`和`''NO_SPLIT''`。'
- en: '`data_split_eval_fraction`: Used with `''RANDOM''` and `''SEQ''` splits. It
    specifies the fraction of the data used for evaluation.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_split_eval_fraction`: 与`''RANDOM''`和`''SEQ''`分割一起使用。它指定用于评估的数据比例。'
- en: '`data_split_col`: Identifies the column used to split the data.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_split_col`: 识别用于分割数据的列。'
- en: '`dropout`: For DNN model types, this specifies the dropout rate of units in
    the neural network.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropout`: 对于DNN模型类型，这指定了神经网络中单元的丢弃率。'
- en: '`early_stop`: Whether training should stop after the first iteration in which
    the relative loss improvement is less than the value specified for `MIN_REL_PROGRESS`.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`early_stop`: 是否在相对损失改进小于为`MIN_REL_PROGRESS`指定的值的第一次迭代后停止训练。'
- en: '`enable_global_explain`: Specifies whether to compute global explanations using
    Explainable AI to evaluate global feature importance to the model.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_global_explain`: 指定是否使用可解释人工智能来计算全局解释，以评估全局特征对模型的重要性。'
- en: '`hidden_units`: For DNN model types, this specifies the hidden layers of the
    neural network.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_units`: 对于DNN模型类型，这指定了神经网络的隐藏层。'
- en: '`input_label_cols`: The label column name(s) in the training data.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_label_cols`: 训练数据中的标签列名称。'
- en: '`integrated_gradients_num_steps`: Specifies the number of steps to sample between
    the example being explained and its baseline for approximating the integral in
    integrated gradients attribution methods.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integrated_gradients_num_steps`: 指定在解释示例及其基线之间采样步数的数量，以近似积分梯度属性方法中的积分。'
- en: '`l1_reg`: The L1 regularization strength of the optimizer.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l1_reg`: 优化器的L1正则化强度。'
- en: '`l2_reg`: The L2 regularization strength of the optimizer.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l2_reg`: 优化器的L2正则化强度。'
- en: '`learn_rate`: The initial learning rate for training.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`learn_rate`: 训练的初始学习率。'
- en: '`max_iterations`: The maximum number of training iterations.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_iterations`: 训练迭代的最大次数。'
- en: '`optimizer`: For DNN model types, this specifies the optimizer for training
    the model. The options are `''ADAGRAD''`, `''ADAM''`, `''FTRL''`, `''RMSPROP''`,
    and `''SGD''`.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`optimizer`: 对于DNN模型类型，这指定了训练模型的优化器。选项有`''ADAGRAD''`、`''ADAM''`、`''FTRL''`、`''RMSPROP''`和`''SGD''`。'
- en: '`warm_start`: Whether to retrain a model with new training data, new model
    options, or both.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warm_start`: 是否使用新的训练数据、新的模型选项或两者重新训练模型。'
- en: '`tf_version`: Specifies the TensorFlow version for model training.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tf_version`: 指定模型训练的TensorFlow版本。'
- en: Creating boosted tree and random forest models
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建提升树和随机森林模型
- en: 'Here’s the syntax for creating boosted tree and random forest models, along
    with different required and optional arguments you need to provide as part of
    the query:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 创建提升树和随机森林模型的语法，以及作为查询一部分需要提供的不同必需和可选参数：
- en: '[PRE23]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here are the options that can be specified as part of the model creation request:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建模型请求中可以指定的选项包括：
- en: '`MODEL_TYPE`: Specifies whether the model is a boosted tree classifier, boosted
    tree regressor, random forest classifier, or random forest regressor. The options
    are `''BOOSTED_TREE_CLASSIFIER''`, `''BOOSTED_TREE_REGRESSOR''`, `''RANDOM_FOREST_CLASSIFIER''`,
    and `''RANDOM_FOREST_REGRESSOR''`.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODEL_TYPE`: 指定模型是提升树分类器、提升树回归器、随机森林分类器还是随机森林回归器。选项有`''BOOSTED_TREE_CLASSIFIER''`、`''BOOSTED_TREE_REGRESSOR''`、`''RANDOM_FOREST_CLASSIFIER''`和`''RANDOM_FOREST_REGRESSOR''`。'
- en: '`BOOSTER_TYPE` (applicable only for `Boosted_Tree_Models`): Specifies the type
    of booster used for the boosted tree model. **GBTREE** stands for **Gradient Boosting
    Tree** and **DART** stands for **Dropouts meet** **Multiple Additive** **Regression
    Trees**.'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BOOSTER_TYPE`（仅适用于`Boosted_Tree_Models`）：指定用于提升树模型的提升器类型。**GBTREE**代表**梯度提升树**，**DART**代表**Dropouts
    meet Multiple Additive Regression Trees**。'
- en: '`NUM_PARALLEL_TREE`: Specifies the number of parallel trees to grow. Larger
    numbers can lead to improved performance but can also increase training time and
    memory usage.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NUM_PARALLEL_TREE`: 指定要生长的并行树的数量。较大的数字可以提高性能，但也会增加训练时间和内存使用。'
- en: '`DART_NORMALIZE_TYPE` (applicable only for `Boosted_Tree_Models`): Specifies
    the normalization method used for the `''TREE''` means normalization by the number
    of dropped trees in the boosting process and `''FOREST''` means normalization
    by the total number of trees in the forest.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DART_NORMALIZE_TYPE`（仅适用于`Boosted_Tree_Models`）：指定用于`''TREE''`的归一化方法，表示在提升过程中根据丢弃的树的数量进行归一化，而`''FOREST''`表示根据森林中树的总数进行归一化。'
- en: '`TREE_METHOD`: Specifies the method used to construct each decision tree in
    the ensemble. `''AUTO''` means that the algorithm will choose the best method
    based on the data, `''EXACT''` means exact greedy algorithm, `''APPROX''` means
    approximate greedy algorithm, and `''HIST''` means histogram-based algorithm.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TREE_METHOD`: 指定用于构建集成中每个决策树的方法。`''AUTO''` 表示算法将根据数据选择最佳方法，`''EXACT''` 表示精确贪婪算法，`''APPROX''`
    表示近似贪婪算法，而`''HIST''` 表示基于直方图的算法。'
- en: '`MIN_TREE_CHILD_WEIGHT`: Specifies the minimum sum of instance weights required
    in a child node of a tree. If the sum is below this value, the node will not be
    split.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MIN_TREE_CHILD_WEIGHT`: 指定树的孩子节点中所需的实例权重最小总和。如果总和低于此值，则节点将不会分割。'
- en: '`COLSAMPLE_BYTREE`: Specifies the fraction of columns to be randomly sampled
    for each tree.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COLSAMPLE_BYTREE`: 指定为每棵树随机采样的列的比例。'
- en: '`COLSAMPLE_BYLEVEL`: Specifies the fraction of columns to be randomly sampled
    for each level of a tree.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COLSAMPLE_BYLEVEL`: 指定为树的每个级别随机采样的列的比例。'
- en: '`COLSAMPLE_BYNODE`: Specifies the fraction of columns to be randomly sampled
    for each split node of a tree.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COLSAMPLE_BYNODE`: 指定为树的每个分割节点随机采样的列的比例。'
- en: '`MIN_SPLIT_LOSS`: Specifies the minimum loss reduction required to split a
    node.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MIN_SPLIT_LOSS`: 指定分割节点所需的最低损失减少量。'
- en: '`MAX_TREE_DEPTH`: Specifies the maximum depth of each tree.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX_TREE_DEPTH`: 指定每棵树的最大深度。'
- en: '`SUBSAMPLE`: Specifies the fraction of training instances to be randomly sampled
    for each tree.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SUBSAMPLE`: 指定为每棵树随机采样的训练实例的比例。'
- en: '`AUTO_CLASS_WEIGHTS`: If set to `TRUE`, the algorithm will automatically determine
    the weights to be assigned to each class based on the data.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AUTO_CLASS_WEIGHTS`: 如果设置为`TRUE`，算法将根据数据自动确定分配给每个类的权重。'
- en: '`CLASS_WEIGHTS`: Specifies the weight to be assigned to each class. This can
    be used to balance the data if the classes are imbalanced.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CLASS_WEIGHTS`: 指定分配给每个类的权重。这可以用于平衡数据，如果类别不平衡的话。'
- en: '`INSTANCE_WEIGHT_COL`: Specifies the name of the column containing the instance
    weights.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTANCE_WEIGHT_COL`: 指定包含实例权重的列的名称。'
- en: '`L1_REG`: Specifies the L1 regularization parameter.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`L1_REG`: 指定L1正则化参数。'
- en: '`L2_REG`: Specifies the L2 regularization parameter.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`L2_REG`: 指定L2正则化参数。'
- en: '`EARLY_STOP`: If set to `TRUE`, the training process will stop early if the
    performance improvement falls below a certain threshold. The options are `TRUE`
    and `FALSE`.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EARLY_STOP`: 如果设置为`TRUE`，当性能提升低于某个阈值时，训练过程将提前停止。选项是`TRUE`和`FALSE`。'
- en: '`LEARN_RATE` (applicable only for `Boosted_Tree_Models`): Specifies the learning
    rate, which controls the step size at each iteration of the boosting process.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LEARN_RATE`（仅适用于`Boosted_Tree_Models`）：指定学习率，它控制提升过程中每次迭代的步长大小。'
- en: '`INPUT_LABEL_COLS`: Specifies the names of the columns containing the input
    features and the label.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INPUT_LABEL_COLS`: 指定包含输入特征和标签的列的名称。'
- en: '`MAX_ITERATIONS` (applicable only for `Boosted_Tree_Models`): Specifies the
    maximum number of boosting iterations to perform.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX_ITERATIONS`（仅适用于`Boosted_Tree_Models`）：指定要执行的提升迭代次数的最大值。'
- en: '`MIN_REL_PROGRESS`: Specifies the minimum relative progress required to continue
    the training process.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MIN_REL_PROGRESS`: 指定继续训练过程所需的最低相对进度。'
- en: '`DATA_SPLIT_METHOD`: Specifies the method used to split the data into training
    and validation sets. `''AUTO_SPLIT''` means that the algorithm will automatically
    split the data, `''RANDOM''` means random splitting, `''CUSTOM''` means user-defined
    splitting, `''SEQ''` means sequential splitting, and `''NO_SPLIT''` means no splitting
    (use all data for training).'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA_SPLIT_METHOD`: 指定用于将数据分割为训练集和验证集的方法。`''AUTO_SPLIT''` 表示算法将自动分割数据，`''RANDOM''`
    表示随机分割，`''CUSTOM''` 表示用户自定义分割，`''SEQ''` 表示顺序分割，而`''NO_SPLIT''` 表示不分割（使用所有数据进行训练）。'
- en: '`DATA_SPLIT_EVAL_FRACTION`: Specifies the fraction of the data to be used for
    validation when splitting the data.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA_SPLIT_EVAL_FRACTION`: 指定分割数据时用于验证的数据比例。'
- en: '`DATA_SPLIT_COL`: Specifies the name of the column used to split the data.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATA_SPLIT_COL`: 指定用于分割数据的列的名称。'
- en: '`ENABLE_GLOBAL_EXPLAIN`: If set to `TRUE`, the algorithm will compute global
    feature importance scores. The options are `TRUE` and `FALSE`.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENABLE_GLOBAL_EXPLAIN`: 如果设置为 `TRUE`，则算法将计算全局特征重要性分数。选项有 `TRUE` 和 `FALSE`。'
- en: '`XGBOOST_VERSION`: Specifies the version of XGBoost to be used.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XGBOOST_VERSION`: 指定要使用的 XGBoost 版本。'
- en: Importing models
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入模型
- en: BQML also allows you to import deep learning models trained outside BigQuery.
    This is an extremely useful feature because it gives you the flexibility to train
    models using a more custom setup outside BigQuery and yet be able to use BigQuery’s
    compute infrastructure for inference.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: BQML 还允许您导入在 BigQuery 外部训练的深度学习模型。这是一个非常有用的功能，因为它为您提供了使用 BigQuery 外部更定制设置训练模型的灵活性，同时还能使用
    BigQuery 的计算基础设施进行推理。
- en: 'Here is how you can use the import feature:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您可以使用导入功能的方式：
- en: '[PRE24]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here are the available options as part of the import feature:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是作为导入功能一部分的可用选项：
- en: '`MODEL_TYPE`: Specifies whether the model is TensorFlow, TensorFlow Lite, or
    an ONNX model. The options are `''TENSORFLOW''`, `''ONNX''`, and `''TENSORFLOW_LITE''`.'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODEL_TYPE`: 指定模型是 TensorFlow、TensorFlow Lite 还是 ONNX 模型。选项有 `''TENSORFLOW''`、`''ONNX''`
    和 `''TENSORFLOW_LITE''`。'
- en: '`MODEL_PATH`: Provides the Cloud Storage URI of the model to import into BQML.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODEL_PATH`: 提供要导入到 BQML 的模型的云存储 URI。'
- en: k-means models
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: k-means 模型
- en: 'Here’s the syntax for creating k-means models, along with different required
    and optional arguments you need to provide as part of the query:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建 k-means 模型的语法，以及您需要作为查询一部分提供的不同必需和可选参数：
- en: '[PRE25]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let’s look at the options that can be specified as part of the model creation
    query:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看可以作为模型创建查询一部分指定的选项：
- en: '`MODEL_TYPE`: Specifies the type of model. This option is required.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MODEL_TYPE`: 指定模型类型。此选项是必需的。'
- en: '`NUM_CLUSTERS` (optional): For a k-means model, this specifies the number of
    clusters to identify in the input data. The default value is `log10(n)`, where
    `n` is the number of training examples.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NUM_CLUSTERS`（可选）：对于 k-means 模型，这指定了在输入数据中要识别的簇的数量。默认值为 `log10(n)`，其中 `n`
    是训练示例的数量。'
- en: '`KMEANS_INIT_METHOD` (optional): For a k-means model, this specifies the method
    of initializing the clusters. The default value is `''RANDOM''`. The options are
    `''RANDOM''`, `''KMEANS++''`, and `''CUSTOM''`.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KMEANS_INIT_METHOD`（可选）：对于 k-means 模型，这指定了初始化簇的方法。默认值为 `''RANDOM''`。选项有 `''RANDOM''`、`''KMEANS++''`
    和 `''CUSTOM''`。'
- en: '`KMEANS_INIT_COL` (optional): For a k-means model, this identifies the column
    that will be used to initialize the centroids. This option can only be specified
    when `KMEANS_INIT_METHOD` has a value of `CUSTOM`. The corresponding column must
    be of the `BOOL` type, and the `NUM_CLUSTERS` model option must be present in
    the query and its value must equal the total number of `TRUE` rows in this column.
    BQML cannot use this column as a feature and excludes it from features automatically.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KMEANS_INIT_COL`（可选）：对于 k-means 模型，这标识了将用于初始化质心的列。此选项只能在 `KMEANS_INIT_METHOD`
    的值为 `CUSTOM` 时指定。相应的列必须是 `BOOL` 类型，并且 `NUM_CLUSTERS` 模型选项必须在查询中存在，其值必须等于此列中 `TRUE`
    行的总数。BQML 不能使用此列作为特征，并自动将其排除在特征之外。'
- en: '`DISTANCE_TYPE` (optional): For a k-means model, this specifies the type of
    metric to compute the distance between two points. The default value is `''EUCLIDEAN''`.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DISTANCE_TYPE`（可选）：对于 k-means 模型，这指定了计算两点之间距离的度量类型。默认值为 `''EUCLIDEAN''`。'
- en: '`STANDARDIZE_FEATURES` (optional): For a k-means model, this specifies whether
    to standardize numerical features. The default value is `TRUE`.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`STANDARDIZE_FEATURES`（可选）：对于 k-means 模型，这指定了是否标准化数值特征。默认值为 `TRUE`。'
- en: '`MAX_ITERATIONS` (optional): The maximum number of training iterations or steps.
    The default value is `20`.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX_ITERATIONS`（可选）：最大训练迭代次数或步骤。默认值为 `20`。'
- en: '`EARLY_STOP` (optional): Whether training should stop after the first iteration
    in which the relative loss improvement is less than the value specified for `MIN_REL_PROGRESS`.
    The default value is `TRUE`.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EARLY_STOP`（可选）：是否在相对损失改进小于为 `MIN_REL_PROGRESS` 指定值的第一次迭代后停止训练。默认值为 `TRUE`。'
- en: '`MIN_REL_PROGRESS` (optional): The minimum relative loss improvement that is
    necessary to continue training when `EARLY_STOP` is set to `TRUE`. For example,
    a value of 0.01 specifies that each iteration must reduce the loss by 1% for training
    to continue. The default value is `0.01`.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MIN_REL_PROGRESS`（可选）：当 `EARLY_STOP` 设置为 `TRUE` 时，继续训练所需的最低相对损失改进。例如，0.01
    的值指定每次迭代必须将损失降低 1%，以便继续训练。默认值为 `0.01`。'
- en: '`WARM_START` (optional): Whether to retrain a model with new training data,
    new model options, or both. Unless explicitly overridden, the initial options
    used to train the model are used for the warm start run. The value of `MODEL_TYPE`
    and the training data schema must remain constant in a warm start model’s retraining.
    The default value is `FALSE`.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WARM_START` (可选): 是否使用新的训练数据、新的模型选项或两者重新训练模型。除非明确覆盖，否则用于训练模型的初始选项将用于热启动运行。`MODEL_TYPE`
    的值和训练数据模式必须在热启动模型的重新训练中保持不变。默认值是 `FALSE`。'
- en: Now let’s look at the support BQML offers for hyperparameter tuning.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 BQML 对超参数调优的支持。
- en: Hyperparameter tuning with BQML
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BQML 的超参数调优
- en: BQML allows you to fine-tune hyperparameters when building ML models through
    the use of `CREATE MODEL` statements. This process, known as hyperparameter tuning,
    is a commonly employed method for enhancing model accuracy by finding the ideal
    set of hyperparameters.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: BQML 允许您在构建机器学习模型时通过使用 `CREATE MODEL` 语句来微调超参数。这个过程称为超参数调优，是一种常用的方法，通过找到最佳的超参数集来提高模型精度。
- en: 'Here’s an example BigQuery SQL statement:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 BigQuery SQL 语句的示例：
- en: '[PRE26]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let’s look at the options that can be specified as part of the model creation
    query:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看可以作为模型创建查询一部分指定的选项：
- en: '`NUM_TRIALS`'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NUM_TRIALS`'
- en: 'Description: This determines the maximum number of submodels to train. Tuning
    will cease after training `num_trials` submodels or upon search space exhaustion.
    The maximum value is 100.'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：这确定了要训练的最大子模型数量。在训练 `num_trials` 个子模型或搜索空间耗尽后，将停止调优。最大值是 100。
- en: 'Arguments: `int64_value` must be an `INT64` value ranging from 1 to 100.'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数：`int64_value` 必须是一个范围从 1 到 100 的 `INT64` 值。
- en: Note
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is suggested to use at least (`num_hyperparameters` * 10) trials for model
    tuning.3
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 建议至少使用 (`num_hyperparameters` * 10) 次试验来进行模型调优。
- en: '`MAX_PARALLEL_TRIALS`'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX_PARALLEL_TRIALS`'
- en: 'Description: This represents the maximum number of trials to run concurrently.
    The default value is 1, while the maximum value is 5.'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：这表示可以同时运行的试验的最大数量。默认值是 1，最大值是 5。
- en: 'Arguments: `int64_value` must be an `INT64` value ranging from 1 to 5.'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数：`int64_value` 必须是一个范围从 1 到 5 的 `INT64` 值。
- en: Note
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: A larger `max_parallel_trials` value can speed up hyperparameter tuning, but
    it may compromise the final model’s quality for the `VIZIER_DEFAULT` tuning algorithm
    as parallel trials cannot benefit from concurrent training results.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 较大的 `max_parallel_trials` 值可以加快超参数调优的速度，但对于 `VIZIER_DEFAULT` 调优算法，它可能会降低最终模型的质量，因为并行试验无法从并发训练结果中受益。
- en: '`HPARAM_TUNING_ALGORITHM`'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HPARAM_TUNING_ALGORITHM`'
- en: 'Description: This determines the algorithm for hyperparameter tuning and supports
    the following values:'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：这确定了超参数调优的算法，并支持以下值：
- en: '`VIZIER_DEFAULT` (default and recommended): Uses the default Vertex AI Vizier
    algorithm, which combines advanced search algorithms such as Bayesian optimization
    with Gaussian processes and employs transfer learning to utilize previously tuned
    models.'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VIZIER_DEFAULT` (默认并推荐): 使用默认的 Vertex AI Vizier 算法，该算法结合了贝叶斯优化和高斯过程等高级搜索算法，并采用迁移学习来利用先前调优的模型。'
- en: '`RANDOM_SEARCH`: Employs random search to explore the search space.'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RANDOM_SEARCH`: 采用随机搜索来探索搜索空间。'
- en: '`GRID_SEARCH`: Utilizes grid search to explore the search space. This is only
    available when every hyperparameter’s search space is discrete.'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GRID_SEARCH`: 使用网格搜索来探索搜索空间。这仅在每个超参数的搜索空间都是离散的情况下才可用。'
- en: '`HYPERPARAMETER`'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HYPERPARAMETER`'
- en: 'Syntax: `hyperparameter={HPARAM_RANGE(min, max) |` `HPARAM_CANDIDATES([candidates])
    }...`'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法：`hyperparameter={HPARAM_RANGE(min, max) | HPARAM_CANDIDATES([candidates])
    }...`
- en: 'This parameter configures a hyperparameter’s search space. Refer to the hyperparameters
    and objectives for each model type to find out which tunable hyperparameters are
    supported:'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数配置超参数的搜索空间。请参考每种模型类型的超参数和目标，以了解哪些可调超参数受支持：
- en: '`HPARAM_RANGE(min, max)`: Specifies the continuous search space for a hyperparameter
    – for example, `learn_rate` = `HPARAM_RANGE``(0.0001, 1.0)`'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HPARAM_RANGE(min, max)`: 指定超参数的连续搜索空间 – 例如，`learn_rate` = `HPARAM_RANGE(0.0001,
    1.0)`'
- en: '`HPARAM_CANDIDATES([candidates])`: Specifies a hyperparameter with discrete
    values – for example, `OPTIMIZER=HPARAM_CANDIDATES(`[‘`adagrad`’, ‘`sgd`’, ‘`ftrl`’]`)`'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HPARAM_CANDIDATES([candidates])`: 指定具有离散值的超参数 – 例如，`OPTIMIZER=HPARAM_CANDIDATES([‘adagrad’,
    ‘sgd’, ‘ftrl’]`)`'
- en: '`HPARAM_TUNING_OBJECTIVES`'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HPARAM_TUNING_OBJECTIVES`'
- en: This parameter specifies objective metrics for the model. The candidates are
    a subset of model evaluation metrics. Only one objective is supported currently.
    Refer to *Table 6.7*, which shows each model type, to see the supported hyperparameters
    and tuning objectives.
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数指定模型的客观指标。候选指标是模型评估指标的一个子集。目前仅支持一个客观指标。请参阅*表6.7*，以查看支持的模型类型、超参数和调整目标。
- en: '| **Model Type** | **Hyperparameter Objectives** | **Hyperparameter** |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| **模型类型** | **超参数目标** | **超参数** |'
- en: '| --- | --- | --- |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `LINEAR_REG` |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| `LINEAR_REG` |'
- en: '`mean_absolute_error`'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_error`'
- en: '`mean_squared_error`'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`mean_squared_log_error`'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_log_error`'
- en: '`median_absolute_error`'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`median_absolute_error`'
- en: '`r2_score (default)`'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r2_score (默认)`'
- en: '`explained_variance`'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`explained_variance`'
- en: '|'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`l1_reg`'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l1_reg`'
- en: '`l2_reg`'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l2_reg`'
- en: '|'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `LOGISTIC_REG` |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| `LOGISTIC_REG` |'
- en: '`precision`'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision`'
- en: '`recall`'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recall`'
- en: '`accuracy`'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accuracy`'
- en: '`f1_score`'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f1_score`'
- en: '`log_loss`'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_loss`'
- en: '`roc_auc (default)`'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roc_auc (默认)`'
- en: '|'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`l1_reg`'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l1_reg`'
- en: '`l2_reg`'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l2_reg`'
- en: '|'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `KMEANS` |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| `KMEANS` |'
- en: '`davies_bouldin_index`'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`davies_bouldin_index`'
- en: '| `num_clusters` |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| `num_clusters` |'
- en: '| `MATRIX_``FACTORIZATION (``implicit/explicit)` |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| `MATRIX_``FACTORIZATION (``隐式/显式``) |'
- en: '`mean_average_precision (``explicit model)`'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_average_precision (``显式模型``)`'
- en: '`mean_squared_error (implicit/explicit)`'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error (隐式/显式)`'
- en: '`normalized_discounted_cumulative_gain (``explicit model)`'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalized_discounted_cumulative_gain (``显式模型``)`'
- en: '`average_rank (``explicit model)`'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`average_rank (``显式模型``)`'
- en: '|'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`num_factors`'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_factors`'
- en: '`l2_reg`'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l2_reg`'
- en: '`wals_alpha(implicit` `model only)`'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wals_alpha(隐式模型仅)`'
- en: '|'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `DNN_CLASSIFIER` |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| `DNN_CLASSIFIER` |'
- en: '`precision`'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision`'
- en: '`recall`'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recall`'
- en: '`accuracy`'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accuracy`'
- en: '`f1_score`'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f1_score`'
- en: '`log_loss`'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_loss`'
- en: '`roc_auc (default)`'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roc_auc (默认)`'
- en: '|'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`batch_size`'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch_size`'
- en: '`dropout`'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropout`'
- en: '`hidden_units`'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_units`'
- en: '`learn_rate`'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`learn_rate`'
- en: '`optimizer`'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`optimizer`'
- en: '`l1_reg`'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l1_reg`'
- en: '`l2_reg`'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l2_reg`'
- en: '`activation_fn`'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activation_fn`'
- en: '|'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `DNN_REGRESSOR` |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| `DNN_REGRESSOR` |'
- en: '`mean_absolute_error`'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_error`'
- en: '`mean_squared_error`'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`mean_squared_log_error`'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_log_error`'
- en: '`median_absolute_error`'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`median_absolute_error`'
- en: '`r2_score (default)`'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r2_score (默认)`'
- en: '`explained_variance`'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`explained_variance`'
- en: '|'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `BOOSTED_TREE_``CLASSIFIER` |'
  id: totrans-453
  prefs: []
  type: TYPE_TB
  zh: '| `BOOSTED_TREE_``CLASSIFIER` |'
- en: '`precision`'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision`'
- en: '`recall`'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recall`'
- en: '`accuracy`'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accuracy`'
- en: '`f1_score`'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f1_score`'
- en: '`log_loss`'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_loss`'
- en: '`roc_auc (default)`'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roc_auc (默认)`'
- en: '|'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`learn_rate`'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`learn_rate`'
- en: '`l1_reg`'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l1_reg`'
- en: '`l2_reg`'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l2_reg`'
- en: '`dropout`'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropout`'
- en: '`max_tree_depth`'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_tree_depth`'
- en: '`subsample`'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subsample`'
- en: '`min_split_loss`'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_split_loss`'
- en: '`num_parallel_tree`'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_parallel_tree`'
- en: '`min_tree_child_weight`'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_tree_child_weight`'
- en: '`colsample_bytree`'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colsample_bytree`'
- en: '`colsample_bylevel`'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colsample_bylevel`'
- en: '`colsample_bynode`'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colsample_bynode`'
- en: '`booster_type`'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`booster_type`'
- en: '`dart_normalize_type`'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dart_normalize_type`'
- en: '`tree_method`'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tree_method`'
- en: '|'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `BOOSTED_TREE_``REGRESSOR` |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| `BOOSTED_TREE_``REGRESSOR` |'
- en: '`mean_absolute_error`'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_error`'
- en: '`mean_squared_error`'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`mean_squared_log_error`'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_log_error`'
- en: '`median_absolute_error`'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`median_absolute_error`'
- en: '`r2_score (default)`'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r2_score (默认)`'
- en: '`explained_variance`'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`explained_variance`'
- en: '|'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `RANDOM_FOREST_``CLASSIFIER` |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| `RANDOM_FOREST_``CLASSIFIER` |'
- en: '`precision`'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision`'
- en: '`recall`'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recall`'
- en: '`accuracy`'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accuracy`'
- en: '`f1_score`'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f1_score`'
- en: '`log_loss`'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_loss`'
- en: '`roc_auc (default)`'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roc_auc (默认)`'
- en: '|'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`l1_reg`'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l1_reg`'
- en: '`l2_reg`'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l2_reg`'
- en: '`max_tree_depth`'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_tree_depth`'
- en: '`subsample`'
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subsample`'
- en: '`min_split_loss`'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_split_loss`'
- en: '`num_parallel_tree`'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_parallel_tree`'
- en: '`min_tree_child_weight`'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_tree_child_weight`'
- en: '`colsample_bytree`'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colsample_bytree`'
- en: '`colsample_bylevel`'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colsample_bylevel`'
- en: '`colsample_bynode`'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colsample_bynode`'
- en: '`tree_method`'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tree_method`'
- en: '|'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `RANDOM_FOREST_``REGRESSOR` |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| `RANDOM_FOREST_``REGRESSOR` |'
- en: '`mean_absolute_error`'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_error`'
- en: '`mean_squared_error`'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`mean_squared_log_error`'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_log_error`'
- en: '`median_absolute_error`'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`median_absolute_error`'
- en: '`r2_score (default)`'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r2_score (默认)`'
- en: '`explained_variance`'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`explained_variance`'
- en: '|'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Table 6.7 – Supported hyperparameter objectives by model type
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.7 – 模型类型支持的超参数目标
- en: '[https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-hyperparameter-tuning](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-hyperparameter-tuning)'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-hyperparameter-tuning](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-hyperparameter-tuning)'
- en: Now let’s look at BQML features that you can use when trying to evaluate ML
    models.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看在尝试评估机器学习模型时可以使用的BQML功能。
- en: Evaluating trained models
  id: totrans-516
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估训练模型
- en: 'Once the BQML model has been trained, you will want to evaluate the key performance
    statistics, depending on the type of model. You can do so by using the `ML.EVALUATE`
    function, as shown here:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦训练了BQML模型，您将想要评估关键性能统计指标，具体取决于模型类型。您可以通过使用`ML.EVALUATE`函数来实现，如下所示：
- en: '[PRE27]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let’s look at the options you can specify as part of the evaluation query:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您可以在评估查询中指定的选项：
- en: '`model_name`: The name of the model being evaluated'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_name`：正在评估的模型名称'
- en: '`table_name` (optional): The name of the table containing the evaluation data'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table_name`（可选）：包含评估数据的表的名称'
- en: '`query_statement` (optional): The query used to generate the evaluation data'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_statement`（可选）：用于生成评估数据的查询'
- en: '`threshold` (optional): A custom threshold value for binary-class classification
    models that’s used during evaluation'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold`（可选）：在评估期间用于二分类模型的自定义阈值值'
- en: '`perform_aggregation` (optional): A Boolean value that identifies the level
    of evaluation for forecasting accuracy'
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perform_aggregation`（可选）：标识预测准确度评估级别的布尔值'
- en: '`horizon` (optional): The number of forecasted time points against which evaluation
    metrics are computed'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`horizon`（可选）：用于计算评估指标的预测时间点的数量'
- en: '`confidence_level` (optional): The percentage of future values that fall within
    the prediction interval'
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`confidence_level`（可选）：预测区间内未来值的百分比'
- en: 'The output of the `ML.Evaluate` function depends on the type of model being
    evaluated:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`ML.Evaluate`函数的输出取决于正在评估的模型类型：'
- en: '| **Model Type** | **Returned Fields** |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| **模型类型** | **返回字段** |'
- en: '| --- | --- |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Regression models |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| 回归模型 |'
- en: '`mean_absolute_error`'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_error`'
- en: '`mean_squared_error`'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`mean_squared_log_error`'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_log_error`'
- en: '`median_absolute_error`'
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`median_absolute_error`'
- en: '`r2_score`'
  id: totrans-535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r2_score`'
- en: '`explained_variance`'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`explained_variance`'
- en: '|'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Classification models |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| 分类模型 |'
- en: '`precision`'
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision`'
- en: '`recall`'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recall`'
- en: '`accuracy`'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accuracy`'
- en: '`f1_score`'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`f1_score`'
- en: '`log_loss`'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_loss`'
- en: '`roc_auc`'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roc_auc`'
- en: '|'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| k-means model |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| k-means模型 |'
- en: '`Davies-Bouldin index`'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Davies-Bouldin指数`'
- en: '`Mean` `squared distance`'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`均方距离`'
- en: '|'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Matrix factorization model with implicit feedback |'
  id: totrans-550
  prefs: []
  type: TYPE_TB
  zh: '| 带有隐式反馈的矩阵分解模型 |'
- en: '`mean_average_precision`'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_average_precision`'
- en: '`mean_squared_error`'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`normalized_discounted_cumulative_gain`'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalized_discounted_cumulative_gain`'
- en: '`average_rank`'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`average_rank`'
- en: '|'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Matrix factorization model with explicit feedback |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| 带有显式反馈的矩阵分解模型 |'
- en: '`mean_absolute_error`'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_error`'
- en: '`mean_squared_error`'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`mean_squared_log_error`'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_log_error`'
- en: '`median_absolute_error`'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`median_absolute_error`'
- en: '`r2_score`'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r2_score`'
- en: '`explained_variance`'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`explained_variance`'
- en: '|'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| PCA model |'
  id: totrans-564
  prefs: []
  type: TYPE_TB
  zh: '| PCA模型 |'
- en: '`total_explained_variance_ratio`'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`total_explained_variance_ratio`'
- en: '|'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Time series `ARIMA_PLUS` or `ARIMA_PLUS_XREG` model with input data and perform_aggregation
    = false |'
  id: totrans-567
  prefs: []
  type: TYPE_TB
  zh: '| 带有输入数据和perform_aggregation = false的时序ARIMA_PLUS或ARIMA_PLUS_XREG模型 |'
- en: '`time_series_id_col` `or time_series_id_cols`'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_series_id_col` 或 `time_series_id_cols`'
- en: '`time_series_timestamp_col`'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_series_timestamp_col`'
- en: '`time_series_data_col`'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_series_data_col`'
- en: '`forecasted_time_series_data_col`'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forecasted_time_series_data_col`'
- en: '`lower_bound`'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lower_bound`'
- en: '`upper_bound`'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upper_bound`'
- en: '`absolute_error`'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absolute_error`'
- en: '`absolute_percentage_error`'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absolute_percentage_error`'
- en: '|'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Time series `ARIMA_PLUS` or `ARIMA_PLUS_XREG` model with input data and perform_aggregation
    = true |'
  id: totrans-577
  prefs: []
  type: TYPE_TB
  zh: '| 带有输入数据和perform_aggregation = true的时序ARIMA_PLUS或ARIMA_PLUS_XREG模型 |'
- en: '`time_series_id_col` `or time_series_id_cols`'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_series_id_col` 或 `time_series_id_cols`'
- en: '`mean_absolute_error`'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_error`'
- en: '`mean_squared_error`'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`root_mean_squared_error`'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`root_mean_squared_error`'
- en: '`mean_absolute_percentage_error`'
  id: totrans-582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_percentage_error`'
- en: '`symmetric_mean_absolute_percentage_error`'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symmetric_mean_absolute_percentage_error`'
- en: '|'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Time series `ARIMA_PLUS` model without input data |'
  id: totrans-585
  prefs: []
  type: TYPE_TB
  zh: '| 没有输入数据的时序ARIMA_PLUS模型 |'
- en: '`time_series_id_col` `or time_series_id_cols`'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_series_id_col` 或 `time_series_id_cols`'
- en: '`non_seasonal_p`'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`non_seasonal_p`'
- en: '`non_seasonal_d`'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`non_seasonal_d`'
- en: '`non_seasonal_q`'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`non_seasonal_q`'
- en: '`has_drift`'
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_drift`'
- en: '`log_likelihood`'
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_likelihood`'
- en: '`AIC`'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AIC`'
- en: '`variance`'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variance`'
- en: '`seasonal_periods`'
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seasonal_periods`'
- en: '`has_holiday_effect`'
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_holiday_effect`'
- en: '`has_spikes_and_dips`'
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_spikes_and_dips`'
- en: '`has_step_change`'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_step_change`'
- en: '|'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Autoencoder model |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
  zh: '| 自动编码器模型 |'
- en: '`mean_absolute_error`'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_absolute_error`'
- en: '`mean_squared_error`'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_error`'
- en: '`mean_squared_log_error`'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mean_squared_log_error`'
- en: '|'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Remote model |'
  id: totrans-604
  prefs: []
  type: TYPE_TB
  zh: '| 远程模型 |'
- en: '`remote_eval_metrics`'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remote_eval_metrics`'
- en: '|'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Table 6.8 – ML.Evaluate Output
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.8 – ML.Evaluate输出
- en: In the next section we look at how you can use your BQML models for inference.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用您的BQML模型进行推理。
- en: Doing inference with BQML
  id: totrans-609
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BQML进行推理
- en: In supervised ML, the ultimate goal is to use a trained model to make predictions
    on new data. BQML provides the `ML.PREDICT` function for this purpose. Using this
    function, you can easily predict outcomes by supplying new data to a trained model.
    The `ML.PREDICT` function can be used during model creation, after model creation,
    or after a failure, so long as at least one iteration has been completed. The
    function returns a table with the same number of rows as the input table, and
    it includes all columns from the input table and all output columns from the model,
    with the output column names prefixed with `predicted_`.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 在监督式机器学习中，最终目标是使用训练好的模型对新数据进行预测。BQML 提供了 `ML.PREDICT` 函数来实现这一目的。使用此函数，您可以通过向训练好的模型提供新数据来轻松预测结果。只要至少完成了一次迭代，该函数就可以在模型创建期间、创建后或失败后使用。该函数返回一个与输入表行数相同的表，其中包含输入表的所有列以及模型的所有输出列，输出列名称以
    `predicted_` 为前缀。
- en: '[PRE28]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output fields that are included in the response of the `ML.PREDICT` function
    depends on the type of model being used:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '`ML.PREDICT` 函数的输出字段取决于所使用的模型类型：'
- en: '| **Model Type** | **Output Columns** |'
  id: totrans-613
  prefs: []
  type: TYPE_TB
  zh: '| **模型类型** | **输出列** |'
- en: '| --- | --- |'
  id: totrans-614
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Linear regressionBoosted tree regressorRandom forest regressorDNN regressor
    | `predicted_<label_column_name>` |'
  id: totrans-615
  prefs: []
  type: TYPE_TB
  zh: '| 线性回归Boosted 树回归器随机森林回归器DNN 回归器 | `predicted_<label_column_name>` |'
- en: '| Binary logistic regressionBoosted tree classifierRandom forest classifierDNN
    classifierMulticlass logistic regression | `predicted_<label_column_name>,` `predicted_<label_column_name>_probs`
    |'
  id: totrans-616
  prefs: []
  type: TYPE_TB
  zh: '| 二元逻辑回归Boosted 树分类器随机森林分类器DNN 分类器多类逻辑回归 | `predicted_<label_column_name>,`
    `predicted_<label_column_name>_probs` |'
- en: '| k-means | `centroid_id, nearest_centroids_distance` |'
  id: totrans-617
  prefs: []
  type: TYPE_TB
  zh: '| k-means | `centroid_id, nearest_centroids_distance` |'
- en: '| PCA | `principal_component_<index>,`input columns (if keep_original_columns
    is set to true) |'
  id: totrans-618
  prefs: []
  type: TYPE_TB
  zh: '| PCA | `principal_component_<index>,` 输入列（如果 keep_original_columns 设置为 true）
    |'
- en: '| Autoencoder | `latent_col_<index>,`input columns |'
  id: totrans-619
  prefs: []
  type: TYPE_TB
  zh: '| 自编码器 | `latent_col_<index>,` 输入列 |'
- en: '| TensorFlow Lite | The output of the TensorFlow Lite model’s predict method
    |'
  id: totrans-620
  prefs: []
  type: TYPE_TB
  zh: '| TensorFlow Lite | TensorFlow Lite 模型预测方法的输出 |'
- en: '| Remote models | The output columns containing all Vertex AI endpoint output
    fields, and a remote_model_status field containing status messages from the Vertex
    AI endpoint |'
  id: totrans-621
  prefs: []
  type: TYPE_TB
  zh: '| 远程模型 | 包含所有 Vertex AI 端点输出字段的输出列，以及包含 Vertex AI 端点状态消息的 remote_model_status
    字段 |'
- en: '| ONNX models | The output of the ONNX model’s predict method |'
  id: totrans-622
  prefs: []
  type: TYPE_TB
  zh: '| ONNX 模型 | ONNX 模型预测方法的输出 |'
- en: '| XGBoost models | The output of the XGBoost model’s predict method |'
  id: totrans-623
  prefs: []
  type: TYPE_TB
  zh: '| XGBoost 模型 | XGBoost 模型预测方法的输出 |'
- en: Table 6.9 – ML.Predict Output
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.9 – ML.Predict 输出
- en: Now let’s work through a hands-on exercise where we use BQML to train an ML
    model and use it for generating predictions.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个实际操作练习来使用 BQML 训练一个机器学习模型，并使用它进行预测。
- en: User exercise
  id: totrans-626
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户练习
- en: Refer to the notebook in [*Chapter 6*](B17792_06.xhtml#_idTextAnchor079), *Low-Code
    Options for Building ML Models*, in this book’s GitHub repository for a hands-on
    exercise around training a BQML model. In this exercise, you will use one of the
    public datasets available in BigQuery to train a model to predict the likelihood
    of a customer defaulting on their loan next month.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本书 GitHub 仓库中 [*第 6 章*](B17792_06.xhtml#_idTextAnchor079) 的笔记本，*构建 ML 模型的低代码选项*，以进行围绕训练
    BQML 模型的实际操作练习。在这个练习中，您将使用 BigQuery 中可用的公共数据集之一来训练一个模型，预测客户下个月违约的可能性。
- en: Summary
  id: totrans-628
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: BQML is a powerful tool for data scientists and analysts who want to train ML
    models with ease while using a low-code option to build and deploy models in GCP.
    With BQML, users can leverage the power of BigQuery to quickly and easily create
    models without needing to write complex code.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: BQML 是一种强大的工具，适用于希望轻松训练机器学习模型且使用低代码选项在 GCP 中构建和部署模型的数据科学家和分析师。使用 BQML，用户可以利用
    BigQuery 的强大功能，快速轻松地创建模型，而无需编写复杂的代码。
- en: In this chapter, we explored the features and benefits of BQML. We saw how it
    provides a simple and intuitive interface for training models using SQL queries.
    We also explored some of the key features of BQML, including the ability to perform
    data preprocessing and feature engineering directly within BigQuery, as well as
    the ability to evaluate model performance through native evaluation functions.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 BQML 的功能和优势。我们看到了它如何通过 SQL 查询提供简单直观的界面来训练模型。我们还探讨了 BQML 的关键特性，包括在
    BigQuery 中直接执行数据预处理和特征工程的能力，以及通过原生评估函数评估模型性能的能力。
- en: One of the key advantages of BQML is its integration with BigQuery, which makes
    it easy to scale and manage large datasets. This makes it a great option for companies
    and organizations that are dealing with massive amounts of data and need to quickly
    build and deploy models.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: BQML的一个关键优点是它与BigQuery的集成，这使得它易于扩展和管理大数据集。这使得它成为处理大量数据并需要快速构建和部署模型的公司和组织的一个很好的选择。
- en: Another advantage of BQML is its support for a wide range of ML models, including
    linear regression, logistic regression, k-means clustering, and more. This makes
    it a versatile tool that can be used for a variety of use cases, from predicting
    customer churn to clustering data for analysis.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: BQML的另一个优点是它支持广泛的ML模型，包括线性回归、逻辑回归、k-means聚类等。这使得它成为一个多功能的工具，可以用于各种用例，从预测客户流失到聚类数据进行分析。
- en: We also discussed some of the limitations of BQML. For example, while it provides
    a low-code option for building and deploying models, it may not be suitable for
    more complex use cases that require custom models or extensive feature engineering.
    Additionally, while BQML provides a range of metrics for evaluating model performance,
    users may need to do additional analysis to fully understand the effectiveness
    of their models.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了BQML的一些局限性。例如，虽然它提供了低代码选项来构建和部署模型，但它可能不适合需要自定义模型或大量特征工程更复杂的使用场景。此外，虽然BQML提供了一系列用于评估模型性能的指标，但用户可能需要进行额外的分析才能完全理解他们模型的有效性。
- en: Despite these limitations, BQML is a powerful tool for data scientists and analysts
    who want to quickly and easily build and deploy ML models. Its integration with
    BigQuery and other GCP services makes it a great option for companies and organizations
    that need to work with large amounts of data, while its support for a wide range
    of models and metrics makes it a versatile tool for a variety of use cases.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些局限性，BQML仍然是数据科学家和分析人员快速轻松构建和部署ML模型的有力工具。它与BigQuery和其他GCP服务的集成使其成为需要处理大量数据的公司和组织的一个很好的选择，而其对广泛模型和指标的支持使其成为各种用例的多功能工具。
- en: Overall, BQML is a valuable addition to the suite of ML tools available in GCP.
    Its low-code interface, integration with BigQuery, and support for a wide range
    of models make it a great option for data scientists and analysts who want to
    focus on their data and insights, rather than complex code and infrastructure.
    With BQML, users can quickly and easily build and deploy models, enabling them
    to extract valuable insights from their data and make data-driven decisions.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，BQML是GCP中可用的ML工具套件中的一个宝贵补充。它的低代码界面、与BigQuery的集成以及对广泛模型的支撑，使其成为数据科学家和分析人员的一个很好的选择，他们希望专注于数据和洞察，而不是复杂的代码和基础设施。使用BQML，用户可以快速轻松地构建和部署模型，从而从他们的数据中提取有价值的见解并做出数据驱动的决策。
- en: In the next chapter, we will look at how to train fully custom TensorFlow deep
    learning models on Vertex AI using its serverless training features. This chapter
    will also do a deep dive into building the model using TensorFlow, packaging it
    for submission to Vertex AI, monitoring the training progress, and evaluating
    the trained model.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何在Vertex AI上使用其无服务器训练功能来训练完全自定义的TensorFlow深度学习模型。这一章还将深入探讨使用TensorFlow构建模型、打包以提交给Vertex
    AI、监控训练进度以及评估训练后的模型。
