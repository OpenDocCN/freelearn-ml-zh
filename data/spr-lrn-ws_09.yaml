- en: 1\. Fundamentals
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 基础知识
- en: 'Activity 1.01: Implementing Pandas Functions'
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 1.01：实现 Pandas 函数
- en: Open a new Jupyter notebook.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的 Jupyter notebook。
- en: 'Use pandas to load the Titanic dataset:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pandas 加载 Titanic 数据集：
- en: import pandas as pd
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: df = pd.read_csv(r'../Datasets/titanic.csv')
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: df = pd.read_csv(r'../Datasets/titanic.csv')
- en: 'Use the head function on the dataset as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法在数据集上调用head函数：
- en: Have a look at the first 5 sample of the data
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看数据的前五个样本
- en: df.head()
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: df.head()
- en: 'The output will be as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.26: First five rows'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.26：前五行'
- en: '](img/image-C8LRLI2Q.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-C8LRLI2Q.jpg)'
- en: 'Figure 1.26: First five rows'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.26：前五行
- en: 'Use the describe function as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法调用describe函数：
- en: df.describe(include='all')
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: df.describe(include='all')
- en: 'The output will be as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.27: Output of describe()'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.27：describe()的输出'
- en: '](img/image-08I9W255.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-08I9W255.jpg)'
- en: 'Figure 1.27: Output of describe()'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.27：describe()的输出
- en: 'We do not need the Unnamed: 0 column. We can remove the column without using
    the del command, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '我们不需要Unnamed: 0列。可以通过以下方法删除该列，而无需使用del命令：'
- en: 'del df[''Unnamed: 0'']'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'del df[''Unnamed: 0'']'
- en: 'df = df[df.columns[1:]] # Use the columns'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'df = df[df.columns[1:]] # 使用列'
- en: df.head()
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: df.head()
- en: 'The output will be as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.28: First five rows after deleting the Unnamed: 0 column'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.28：删除Unnamed: 0列后的前五行'
- en: '](img/image-3IS9NYQ8.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-3IS9NYQ8.jpg)'
- en: 'Figure 1.28: First five rows after deleting the Unnamed: 0 column'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.28：删除Unnamed: 0列后的前五行'
- en: 'Compute the mean, standard deviation, minimum, and maximum values for the columns
    of the DataFrame without using describe:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 计算数据框列的平均值、标准差、最小值和最大值，无需使用describe：
- en: df.mean()
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: df.mean()
- en: 'The output will be as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.29: Output for mean()'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.29：mean()的输出'
- en: '](img/image-UT30C1VE.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-UT30C1VE.jpg)'
- en: 'Figure 1.29: Output for mean()'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.29：mean()的输出
- en: 'Now, calculate the standard deviation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，计算标准差：
- en: df.std()
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: df.std()
- en: 'The output will be as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.30: Output for std()'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.30：std()的输出'
- en: '](img/image-HM1BXAG1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-HM1BXAG1.jpg)'
- en: 'Figure 1.30: Output for std()'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.30：std()的输出
- en: 'Calculate the minimum value of the columns:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 计算列的最小值：
- en: df.min()
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: df.min()
- en: 'The output will be as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.31: Output for min()'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.31：min()的输出'
- en: '](img/image-OZ5WBQAJ.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-OZ5WBQAJ.jpg)'
- en: 'Figure 1.31: Output for min()'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.31：min()的输出
- en: Next, calculate the maximum value of the column of the dataframe.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，计算数据框中列的最大值。
- en: df.max()
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: df.max()
- en: 'The output will be as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.32: Output for max()'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.32：max()的输出'
- en: '](img/image-EM11IS7E.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-EM11IS7E.jpg)'
- en: 'Figure 1.32: Output for max()'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.32：max()的输出
- en: 'Use the quantile method for the 33, 66, and 99% quantiles, as shown in the
    following code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用33%、66%和99%的分位数方法，如下所示代码片段：
- en: df.quantile(0.33)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: df.quantile(0.33)
- en: 'The output will be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.33: Output for the 33% quantile'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.33：33%分位数的输出'
- en: '](img/image-4IN2M7WQ.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-4IN2M7WQ.jpg)'
- en: 'Figure 1.33: Output for the 33% quantile'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.33：33%分位数的输出
- en: 'Similarly, use the quantile method for 66%:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，使用66%的分位数方法：
- en: df.quantile(0.66)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: df.quantile(0.66)
- en: 'The output will be as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.34: Output for the 66% quantile'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.34：66%分位数的输出'
- en: '](img/image-Q0TROBCG.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-Q0TROBCG.jpg)'
- en: 'Figure 1.34: Output for the 66% quantile'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.34：66%分位数的输出
- en: 'Use the same method for 99%:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的方法处理99%：
- en: df.quantile(0.99)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: df.quantile(0.99)
- en: 'The output will be as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 1.35: Output for the 99% quantile'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.35：99%分位数的输出'
- en: '](img/image-7CC087HR.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-7CC087HR.jpg)'
- en: 'Figure 1.35: Output for the 99% quantile'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.35：99%分位数的输出
- en: 'Find out how many passengers were from each class using the groupby method:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用groupby方法查找每个类别的乘客数量：
- en: class_groups = df.groupby('Pclass')
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: class_groups = df.groupby('Pclass')
- en: 'for name, index in class_groups:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'for name, index in class_groups:'
- en: 'print(f''Class: {name}: {len(index)}'')'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(f''类别: {name}: {len(index)}'')'
- en: 'The output will be as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: 'Class: 1: 323'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：1：323
- en: 'Class: 2: 277'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：2：277
- en: 'Class: 3: 709'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：3：709
- en: 'Find out how many passengers were from each class by using selecting/indexing
    methods to count the members of each class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用选择/索引方法找出每个类别的乘客数量：
- en: 'for clsGrp in df.Pclass.unique():'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'for clsGrp in df.Pclass.unique():'
- en: num_class = len(df[df.Pclass == clsGrp])
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: num_class = len(df[df.Pclass == clsGrp])
- en: 'print(f''Class {clsGrp}: {num_class}'')'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(f''类别 {clsGrp}: {num_class}'')'
- en: 'The result will be as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: 'Class 3: 709'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 3：709
- en: 'Class 1: 323'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 1：323
- en: 'Class 2: 277'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 类别 2：277
- en: The answers to Step 6 and Step 7 do match.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 第 6 步和第 7 步的答案是匹配的。
- en: 'Determine who the eldest passenger in third class was:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 确定第三类中最年长的乘客：
- en: third_class = df.loc[(df.Pclass == 3)]
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: third_class = df.loc[(df.Pclass == 3)]
- en: third_class.loc[(third_class.Age == third_class.Age.max())]
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: third_class.loc[(third_class.Age == third_class.Age.max())]
- en: 'The output will be as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 1.36: Eldest passenger in third class'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.36：第三类中最年长的乘客'
- en: '](img/image-3E0I4FN3.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-3E0I4FN3.jpg)'
- en: 'Figure 1.36: Eldest passenger in third class'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.36：第三类中最年长的乘客
- en: 'For a number of machine learning problems, it is very common to scale the numerical
    values between 0 and 1\. Use the agg method with Lambda functions to scale the
    Fare and Age columns between 0 and 1:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多机器学习问题，将数值缩放至 0 和 1 之间是非常常见的做法。使用 agg 方法和 Lambda 函数将 Fare 和 Age 列缩放到 0 和
    1 之间：
- en: fare_max = df.Fare.max()
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: fare_max = df.Fare.max()
- en: age_max = df.Age.max()
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: age_max = df.Age.max()
- en: 'df.agg({''Fare'': lambda x: x / fare_max, \'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'df.agg({''Fare'': lambda x: x / fare_max, \'
- en: '''Age'': lambda x: x / age_max,}).head()'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '''Age'': lambda x: x / age_max,}).head()'
- en: 'The output will be as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 1.37: Scaling numerical values between 0 and 1'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.37：将数值缩放至 0 和 1 之间'
- en: '](img/image-B8SLI1KY.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-B8SLI1KY.jpg)'
- en: 'Figure 1.37: Scaling numerical values between 0 and 1'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.37：将数值缩放至 0 和 1 之间
- en: 'Identify the one individual entry in the dataset without a listed Fare value:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 确定数据集中没有列出票价的个人条目：
- en: df_nan_fare = df.loc[(df.Fare.isna())]
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: df_nan_fare = df.loc[(df.Fare.isna())]
- en: df_nan_fare
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: df_nan_fare
- en: 'The output will be as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 1.38: Individual without a listed fare value'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.38：没有列出票价的个人'
- en: '](img/image-FKM88B4Y.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-FKM88B4Y.jpg)'
- en: 'Figure 1.38: Individual without a listed fare value'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.38：没有列出票价的个人
- en: 'Replace the NaN values of this row in the main DataFrame with the mean Fare
    value for those corresponding to the same class and Embarked location using the
    groupby method:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 groupby 方法将此行的 NaN 值替换为与相同舱位和登船地点对应的平均票价值：
- en: embarked_class_groups = df.groupby(['Embarked', 'Pclass'])
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: embarked_class_groups = df.groupby(['Embarked', 'Pclass'])
- en: indices = embarked_class_groups\
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: indices = embarked_class_groups\
- en: .groups[(df_nan_fare.Embarked.values[0], \
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: .groups[(df_nan_fare.Embarked.values[0], \
- en: df_nan_fare.Pclass.values[0])]
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: df_nan_fare.Pclass.values[0])]
- en: mean_fare = df.iloc[indices].Fare.mean()
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: mean_fare = df.iloc[indices].Fare.mean()
- en: df.loc[(df.index == 1043), 'Fare'] = mean_fare
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: df.loc[(df.index == 1043), 'Fare'] = mean_fare
- en: df.iloc[1043]
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: df.iloc[1043]
- en: 'The output will be as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 1.39: Output for the individual without listed fare details'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.39：没有列出票价详细信息的个人输出'
- en: '](img/image-HQ9K9JV1.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-HQ9K9JV1.jpg)'
- en: 'Figure 1.39: Output for the individual without listed fare details'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.39：没有列出票价详细信息的个人输出
- en: Note
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注
- en: To access the source code for this specific section, please refer to https://packt.live/2AWHbu0.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此部分的源代码，请参阅 https://packt.live/2AWHbu0。
- en: You can also run this example online at https://packt.live/2NmAnse. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在线运行此示例，网址是 https://packt.live/2NmAnse。您必须执行整个笔记本才能获得期望的结果。
