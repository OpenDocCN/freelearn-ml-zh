- en: Chapter 3. Recommender Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。推荐系统
- en: This chapter shows some popular recommendation techniques. In addition, we will
    implement some of them in R.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了某些流行的推荐技术。此外，我们将在 R 中实现其中的一些。
- en: 'We will deal with the following techniques:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将处理以下技术：
- en: '**Collaborative filtering**: This is the branch of techniques that we will
    explore in detail. The algorithms are based on information about similar users
    or similar items. The two sub-branches are as follows:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协同过滤**：这是我们将会详细探讨的技术分支。算法基于关于相似用户或相似物品的信息。两个子分支如下：'
- en: '**Item-based collaborative filtering**: This recommends to a user the items
    that are most similar to the user''s purchases'
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于物品的协同过滤**：这会向用户推荐与用户购买最相似的物品'
- en: '**User-based collaborative filtering**: This recommends to a user the items
    that are the most preferred by similar users'
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于用户的协同过滤**：这会向用户推荐最被相似用户偏好的物品'
- en: '**Content-based filtering**: This is for each user; it defines a user profile
    and identify the items that match it.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于内容的过滤**：这是为每个用户定义的；它定义了一个用户配置文件并识别与它匹配的物品。'
- en: '**Hybrid filtering**: This combines different techniques.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合过滤**：这是结合不同技术。'
- en: '**Knowledge-based filtering**: This is uses explicit knowledge about users
    and items.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于知识的过滤**：这是使用关于用户和物品的显式知识。'
- en: R package for recommendation – recommenderlab
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐系统 R 包 – recommenderlab
- en: 'In this chapter, we will build recommender systems using `recommenderlab`,
    which is an R package for collaborative filtering. This section will present a
    quick overview of this package. First, let''s install it, if we haven''t done
    so already:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 `recommenderlab` 构建推荐系统，这是一个用于协同过滤的 R 包。本节将简要介绍这个包。首先，如果我们还没有安装它，让我们来安装它：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can load the package. Then, using the `help` function, we can take
    a look at its documentation:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以加载这个包。然后，使用 `help` 函数，我们可以查看其文档：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we run the preceding command in RStudio, a help file containing some links
    and a list of functions will open.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 RStudio 中运行前面的命令时，将打开一个包含一些链接和函数列表的帮助文件。
- en: 'The examples that you will see in this chapter contain some random components.
    In order to be able to reproduce the code obtaining the same output, we need to
    run this line:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中您将看到的示例包含一些随机成分。为了能够重现获得相同输出的代码，我们需要运行这一行：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are now ready to start exploring `recommenderlab`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已准备好开始探索 `recommenderlab`。
- en: Datasets
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集
- en: 'Like many other R packages, `recommenderlab` contains some datasets that can
    be used to play around with the functions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他 R 包一样，`recommenderlab` 包含一些可以用来尝试函数的数据集：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Jester5k, MSWeb, and MovieLense
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jester5k、MSWeb 和 MovieLense
- en: 'In our examples, we will use the `MovieLense` dataset; the data is about movies.
    The table contains the ratings that the users give to movies. Let''s load the
    data and take a look at it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将使用 `MovieLense` 数据集；数据是关于电影的。表格包含用户对电影的评分。让我们加载数据并查看一下：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each row of `MovieLense` corresponds to a user, and each column corresponds
    to a movie. There are more than *943 x 1664 = 1,500,000* combinations between
    a user and a movie. Therefore, storing the complete matrix would require more
    than 1,500,000 cells. However, not every user has watched every movie. Therefore,
    there are fewer than 100,000 ratings, and the matrix is sparse. The `recommenderlab`
    package allows us to store it in a compact way.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieLense` 的每一行对应一个用户，每一列对应一部电影。用户和电影之间有超过 *943 x 1664 = 1,500,000* 种组合。因此，存储完整的矩阵将需要超过
    1,500,000 个单元格。然而，并非每个用户都看过每部电影。因此，评分少于 100,000，矩阵是稀疏的。`recommenderlab` 包允许我们以紧凑的方式存储它。'
- en: The class for rating matrices
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评分矩阵的类
- en: 'In this section, we will explore `MovieLense` in detail:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细探讨 `MovieLense`：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `realRatingMatrix` class is defined by `recommenderlab`, and `ojectsojectsb`
    contains sparse rating matrices. Let''s take a look at the methods that we can
    apply on the objects of this class:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`realRatingMatrix` 类由 `recommenderlab` 定义，`ojectsojectsb` 包含稀疏评分矩阵。让我们看看我们可以应用于此类对象的哪些方法：'
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| `[` | `dimnames<-` | `Recommender` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `[` | `dimnames<-` | `Recommender` |'
- en: '| `binarize` | `dissimilarity` | `removeKnownRatings` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `binarize` | `dissimilarity` | `removeKnownRatings` |'
- en: '| `calcPredictionAccuracy` | `evaluationScheme` | `rowCounts` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `calcPredictionAccuracy` | `evaluationScheme` | `rowCounts` |'
- en: '| `calcPredictionAccuracy` | `getData.frame` | `rowMeans` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `calcPredictionAccuracy` | `getData.frame` | `rowMeans` |'
- en: '| `colCounts` | `getList` | `rowSds` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `colCounts` | `getList` | `rowSds` |'
- en: '| `colMeans` | `getNormalize` | `rowSums` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `colMeans` | `getNormalize` | `rowSums` |'
- en: '| `colSds` | `getRatings` | `sample` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `colSds` | `getRatings` | `sample` |'
- en: '| `colSums` | `getTopNLists` | `show` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `colSums` | `getTopNLists` | `show` |'
- en: '| `denormalize` | `image` | `similarity` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `denormalize` | `image` | `similarity` |'
- en: '| `dim` | `normalize` |   |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `dim` | `normalize` |   |'
- en: '| `dimnames` | `nratings` |   |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `dimnames` | `nratings` |   |'
- en: Some methods that are applicable to matrices have been redefined in a more optimized
    way. For instance, we can use `dim` to extract the number of rows and columns,
    and `colSums` to compute the sum of each column. In addition, there are new methods
    that are specific for recommendation systems.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一些适用于矩阵的方法已经以更优化的方式重新定义。例如，我们可以使用 `dim` 来提取行数和列数，使用 `colSums` 来计算每列的总和。此外，还有一些专门针对推荐系统的新方法。
- en: 'Usually, rating matrices are sparse matrices. For this reason, the `realRatingMatrix`
    class supports a compact storage of sparse matrices. Let''s compare the size of
    `MovieLense` with the corresponding R matrix:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，评分矩阵是稀疏矩阵。因此，`realRatingMatrix` 类支持稀疏矩阵的紧凑存储。让我们比较 `MovieLense` 与相应的 R 矩阵的大小：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can compute how many times the `recommenderlab` matrix is more compact:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以计算 `recommenderlab` 矩阵的紧凑性是原来的多少倍：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As expected, `MovieLense` occupies much less space than the equivalent standard
    R matrix. The rate is about *1:9*, and the reason is the sparsity of `MovieLense`.
    A standard R matrix object stores all the missing values as 0s, so it stores 15
    times more cells.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，`MovieLense` 占用的空间比等效的标准 R 矩阵要少得多。比率约为 *1:9*，原因是 `MovieLense` 的稀疏性。标准
    R 矩阵对象将所有缺失值存储为 0，因此它存储了 15 倍更多的单元格。
- en: Computing the similarity matrix
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算相似度矩阵
- en: Collaborative filtering algorithms are based on measuring the similarity between
    users or between items. For this purpose, `recommenderlab` contains the `similarity`
    function. The supported methods to compute similarities are `cosine`, `pearson`,
    and `jaccard`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤算法基于测量用户或项目之间的相似度。为此，`recommenderlab` 包含了 `similarity` 函数。支持的相似度计算方法有 `cosine`、`pearson`
    和 `jaccard`。
- en: 'For instance, we might want to determine how similar the first five users are
    with each other. Let''s compute this using the `cosine` distance:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能想确定前五个用户彼此之间有多相似。让我们使用 `cosine` 距离来计算这个：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `similarity_users` object contains all the dissimilarities. Let''s explore
    it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`similarity_users` 对象包含所有的不相似度。让我们来探索它：'
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As expected, `similarity_users` is an object containing distances. Since `dist`
    is a base R class, we can use it in different ways. For instance, we could use
    `hclust` to build a hierarchic clustering model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，`similarity_users` 是一个包含距离的对象。由于 `dist` 是一个基本的 R 类，我们可以以不同的方式使用它。例如，我们可以使用
    `hclust` 来构建层次聚类模型。
- en: 'We can also convert `similarity_users` into a matrix and visualize it:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 `similarity_users` 转换为矩阵并可视化它：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| 1 | 2 | 3 | 4 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2 | 3 | 4 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `0` | `0.1689` | `0.03827` | `0.06635` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `0.1689` | `0.03827` | `0.06635` |'
- en: '| `0.1689` | `0` | `0.09707` | `0.1531` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `0.1689` | `0` | `0.09707` | `0.1531` |'
- en: '| `0.03827` | `0.09707` | `0` | `0.3334` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `0.03827` | `0.09707` | `0` | `0.3334` |'
- en: '| `0.06635` | `0.1531` | `0.3334` | `0` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `0.06635` | `0.1531` | `0.3334` | `0` |'
- en: 'Using `image`, we can visualize the matrix. Each row and each column corresponds
    to a user, and each cell corresponds to the similarity between two users:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `image`，我们可以可视化矩阵。每一行和每一列对应一个用户，每个单元格对应两个用户之间的相似度：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The more red the cell is, the more similar two users are. Note that the diagonal
    is red, since it''s comparing each user with itself:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格越红，两个用户就越相似。请注意，对角线是红色的，因为它是在比较每个用户与其自身：
- en: '![Computing the similarity matrix](img/B03888_03_01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![计算相似度矩阵](img/B03888_03_01.jpg)'
- en: 'Using the same approach, we can compute and visualize the similarity between
    the first four items:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的方法，我们可以计算并可视化前四个项目之间的相似度：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|   | Toy Story (1995) | GoldenEye (1995) |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '|   | 玩具总动员 (1995) | 黄金眼 (1995) |'
- en: '| --- | --- | --- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Toy Story (1995)** | `0` | `0.4024` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| **玩具总动员 (1995)** | `0` | `0.4024` |'
- en: '| **GoldenEye (1995)** | `0.4024` | `0` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| **黄金眼 (1995)** | `0.4024` | `0` |'
- en: '| **Four Rooms (1995)** | `0.3302` | `0.2731` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| **四个房间 (1995)** | `0.3302` | `0.2731` |'
- en: '| **Get Shorty (1995)** | `0.4549` | `0.5026` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **小鬼当家 (1995)** | `0.4549` | `0.5026` |'
- en: 'The table continues as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 表格将继续如下：
- en: '|   | Four Rooms (1995) | Get Shorty (1995) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|   | 四个房间 (1995) | 小鬼当家 (1995) |'
- en: '| --- | --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Toy Story (1995)** | `0.3302` | `0.4549` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **玩具总动员 (1995)** | `0.3302` | `0.4549` |'
- en: '| **GoldenEye (1995)** | `0.2731` | `0.5026` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **黄金眼 (1995)** | `0.2731` | `0.5026` |'
- en: '| **Four Rooms (1995)** | `0` | `0.3249` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **四个房间 (1995)** | `0` | `0.3249` |'
- en: '| **Get Shorty (1995)** | `0.3249` | `0` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **Get Shorty (1995)** | `0.3249` | `0` |'
- en: 'Similar to the preceding screenshot, we can visualize the matrix using this
    image:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的截图类似，我们可以使用此图像可视化矩阵：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Computing the similarity matrix](img/B03888_03_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![计算相似度矩阵](img/B03888_03_02.jpg)'
- en: The similarity is the base of collaborative filtering models.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 相似性是协同过滤模型的基础。
- en: Recommendation models
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推荐模型
- en: 'The `recommenderlab` package contains some options for the recommendation algorithm.
    We can display the model applicable to the `realRatingMatrix` objects using `recommenderRegistry$get_entries`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`recommenderlab`包包含一些推荐算法的选项。我们可以使用`recommenderRegistry$get_entries`显示适用于`realRatingMatrix`对象的模型：'
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `recommender_models` object contains some information about the models.
    First, let''s see which models we have:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`recommender_models`对象包含有关模型的一些信息。首先，让我们看看我们有哪些模型：'
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| Models |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 模型 |'
- en: '| --- |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| `IBCF_realRatingMatrix` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `IBCF_realRatingMatrix` |'
- en: '| `PCA_realRatingMatrix` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `PCA_realRatingMatrix` |'
- en: '| `POPULAR_realRatingMatrix` |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `POPULAR_realRatingMatrix` |'
- en: '| `RANDOM_realRatingMatrix` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `RANDOM_realRatingMatrix` |'
- en: '| `SVD_realRatingMatrix` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `SVD_realRatingMatrix` |'
- en: '| `UBCF_realRatingMatrix` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `UBCF_realRatingMatrix` |'
- en: 'Let''s take a look at their descriptions:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它们的描述：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Out of them, we will use `IBCF` and `UBCF`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，我们将使用`IBCF`和`UBCF`。
- en: 'The `recommender_models` object also contains some other information, such
    as its parameters:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`recommender_models` 对象还包含一些其他信息，例如其参数：'
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '| Parameter | Default |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 默认值 |'
- en: '| --- | --- |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `k` | `30` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `k` | `30` |'
- en: '| `method` | `Cosine` |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `method` | `Cosine` |'
- en: '| `normalize` | `center` |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `normalize` | `center` |'
- en: '| `normalize_sim_matrix` | `FALSE` |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `normalize_sim_matrix` | `FALSE` |'
- en: '| `alpha` | `0.5` |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `alpha` | `0.5` |'
- en: '| `na_as_zero` | `FALSE` |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `na_as_zero` | `FALSE` |'
- en: For a more detailed description of the package and some use cases, you can take
    a look at the package vignette. You can find all the material by typing `help(package
    = "recommenderlab")`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包的更详细描述和一些用例，您可以查看包的vignette。您可以通过输入`help(package = "recommenderlab")`找到所有材料。
- en: The `recommenderlab` package is a good and flexible package to perform recommendation.
    If we combine its models with other R tools, we will have a powerful framework
    to explore the data and build recommendation models.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`recommenderlab`包是一个好且灵活的包，用于执行推荐。如果我们将其模型与其他R工具结合，我们将拥有一个强大的框架来探索数据和构建推荐模型。'
- en: In the next section, we will explore a dataset of `recommenderlab` using some
    of its tools.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用`recommenderlab`的一些工具探索其数据集。
- en: Data exploration
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据探索
- en: 'In this section, we will explore the `MovieLense` dataset. For this purpose,
    we will use `recommenderlab` to build recommender systems and `ggplot2` to visualize
    their results. Let''s load the packages and the data:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索`MovieLense`数据集。为此，我们将使用`recommenderlab`构建推荐系统，并使用`ggplot2`可视化其结果。让我们加载包和数据：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`MovieLense` is a `realRatingMatrix` object containing a dataset about movie
    ratings. Each row corresponds to a user, each column to a movie, and each value
    to a rating.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieLense`是一个包含关于电影评分数据集的`realRatingMatrix`对象。每一行对应一个用户，每一列对应一部电影，每个值对应一个评分。'
- en: Exploring the nature of the data
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索数据的性质
- en: 'Let''s take a quick look at `MovieLense`. As explained in the previous section,
    there are some generic methods that can be applied to `realRatingMatrix` objects.
    We can extract their size using `dim`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下`MovieLense`。正如前一部分所解释的，有一些通用方法可以应用于`realRatingMatrix`对象。我们可以使用`dim`提取它们的大小：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There are `943` users and `1664` movies. Since `realRatingMatrix` is an S4
    class, the components of the objects are contained in `MovieLense` slots. We can
    see all the slots using `slotNames`, which displays all the data stored within
    an object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有`943`个用户和`1664`部电影。由于`realRatingMatrix`是S4类，对象的组件包含在`MovieLense`槽中。我们可以使用`slotNames`查看所有槽，它显示对象中存储的所有数据：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`MovieLense@data` belongs to the `dgCMatrix` class that inherits from `Matrix`.
    In order to perform custom data exploration, we might need to access this slot.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieLense@data`属于从`Matrix`继承的`dgCMatrix`类。为了执行自定义数据探索，我们可能需要访问这个槽。'
- en: Exploring the values of the rating
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索评分的值
- en: 'Starting from the slot data, we can explore the matrix. Let''s take a look
    at the ratings. We can convert the matrix into a vector and explore its values:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从槽数据开始，我们可以探索矩阵。让我们看看评分。我们可以将矩阵转换为向量并探索其值：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| Rating | Occurrences |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 评分 | 出现次数 |'
- en: '| --- | --- |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `0` | `1469760` |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `0` | `1469760` |'
- en: '| `1` | `6059` |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `6059` |'
- en: '| `2` | `11307` |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `11307` |'
- en: '| `3` | `27002` |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `27002` |'
- en: '| `4` | `33947` |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `33947` |'
- en: '| `5` | `21077` |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `5` | `21077` |'
- en: 'According to the documentation, a rating equal to 0 represents a missing value,
    so we can remove them from `vector_ratings`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据文档，评分等于0表示缺失值，因此我们可以从`vector_ratings`中删除它们：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we can build a frequency plot of the ratings. In order to visualize a
    bar plot with frequencies, we can use `ggplot2`. Let''s convert them into categories
    using factor and build a quick chart:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以构建评分的频率图。为了可视化带有频率的条形图，我们可以使用`ggplot2`。让我们使用因子将它们转换为类别并构建一个快速图表：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s visualize their distribution using `qplot`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`qplot`可视化它们的分布：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following image shows the distribution of the ratings:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了评分的分布：
- en: '![Exploring the values of the rating](img/B03888_03_03.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![探索评分值](img/B03888_03_03.jpg)'
- en: Most of the ratings are above **2,** and the most common is **4**.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数评分都高于**2**，最常见的评分是**4**。
- en: Exploring which movies have been viewed
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索哪些电影被观看
- en: 'Starting with `MovieLense`, we can easily extract quick results using methods
    such as the following ones:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从`MovieLense`开始，我们可以轻松地使用以下方法等提取快速结果：
- en: '`colCounts`: This is the number of non-missing values for each column'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colCounts`：这是每列非缺失值的数量'
- en: '`colMeans`: This is the average value for each column'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colMeans`：这是每列的平均值'
- en: 'For instance, which are the most viewed movies? We can use `colCounts` for
    this purpose. First, let''s count the views for each movie:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，哪些是最受欢迎的电影？我们可以使用`colCounts`来做到这一点。首先，让我们计算每部电影的观看次数：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, we can sort the movies by number of views:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以按观看次数对电影进行排序：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we can visualize the first six rows and build a histogram:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以可视化前六行并构建直方图：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following image shows the number of views of the top movies:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了顶级电影的观看次数：
- en: '![Exploring which movies have been viewed](img/B03888_03_04.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![探索哪些电影被观看](img/B03888_03_04.jpg)'
- en: In the preceding chart, you can notice that **Star Wars (1977)** is the most
    viewed movie, exceeding the others by about 100 views.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，你可以注意到**星球大战（1977）**是最受欢迎的电影，比其他电影多出大约100次观看。
- en: Exploring the average ratings
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索平均评分
- en: 'We can identify the top-rated movies by computing the average rating of each
    of them. For this purpose, we can use `colMeans`; it automatically ignores the
    0s, since they represent missing values. Let''s take a look at the distribution
    of the average movie rating:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过计算每部电影的平均评分来识别评分最高的电影。为此，我们可以使用`colMeans`；它自动忽略0，因为它们代表缺失值。让我们看看平均电影评分的分布：
- en: '[PRE29]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s build the chart using `qplot`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`qplot`构建图表：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following image shows the distribution of the average movie rating:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了平均电影评分的分布：
- en: '![Exploring the average ratings](img/B03888_03_05.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![探索平均评分](img/B03888_03_05.jpg)'
- en: 'The highest value is around 3, and there are a few movies whose rating is either
    1 or 5\. Probably, the reason is that these movies received a rating from a few
    people only, so we shouldn''t take them into account. We can remove the movies
    whose number of views is below a defined threshold, for instance, below `100`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最高值大约是3，有几部电影的评分是1或5。可能的原因是这些电影只收到了少数人的评分，因此我们不应该考虑它们。我们可以删除观看次数低于定义阈值的电影，例如，低于`100`：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s build the chart:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建图表：
- en: '[PRE32]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following image shows the distribution of the relevant average ratings:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了相关平均评分的分布：
- en: '![Exploring the average ratings](img/B03888_03_06.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![探索平均评分](img/B03888_03_06.jpg)'
- en: All the rankings are between 2.3 and 4.5\. As expected, we removed the extremes.
    The highest value changes, and now, it is around 4.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 所有评分都在2.3到4.5之间。正如预期的那样，我们移除了极端值。最高值有所变化，现在大约是4。
- en: Visualizing the matrix
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化矩阵
- en: 'We can visualize the matrix by building a heat map whose colors represent the
    ratings. Each row of the matrix corresponds to a user, each column to a movie,
    and each cell to its rating. For this purpose, we can use the generic method:
    `image`. The `recommenderlab` package redefined the method image for `realRatingMatrix`
    objects.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过构建一个颜色代表评分的热图来可视化矩阵。矩阵的每一行对应一个用户，每一列对应一部电影，每个单元格对应其评分。为此，我们可以使用通用方法：`image`。`recommenderlab`包重新定义了`realRatingMatrix`对象的方法`image`。
- en: 'Let''s build the heatmap using `image`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`image`构建热图：
- en: '[PRE33]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following image displays the heatmap of the rating matrix:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了评分矩阵的热图：
- en: '![Visualizing the matrix](img/B03888_03_07.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![可视化矩阵](img/B03888_03_07.jpg)'
- en: We can notice a white area in the top-right region. The reason is that the row
    and columns are sorted.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在右上角注意到一个空白区域。原因是行和列已经排序。
- en: Since there are too many users and items, this chart is hard to read. We can
    build another chart zooming in on the first rows and columns.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户和项目太多，这个图表难以阅读。我们可以构建另一个图表，聚焦于前几行和列。
- en: 'Let''s build the heat map using `image`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`image`构建热图：
- en: '[PRE34]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following image shows the heatmap of the first rows and columns:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了前几行和列的热图：
- en: '![Visualizing the matrix](img/B03888_03_08.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![可视化矩阵](img/B03888_03_08.jpg)'
- en: 'Some users saw more movies than the others. However, this chart is just displaying
    some random users and items. What if, instead, we select the most relevant users
    and items? This means visualizing only the users who have seen many movies and
    the movies that have been seen by many users. To identify and select the most
    relevant users and movies, follow these steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用户比其他用户看了更多的电影。然而，这个图表只是显示了一些随机用户和项目。如果我们选择最相关的用户和项目会怎样？这意味着只可视化那些看过很多电影的用户和被很多用户观看的电影。为了识别和选择最相关的用户和电影，请按照以下步骤操作：
- en: Determine the minimum number of movies per user.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定每个用户观看电影的最小数量。
- en: Determine the minimum number of users per movie.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定每部电影观看用户的最小数量。
- en: Select the users and movies matching these criteria.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择符合这些标准的用户和电影。
- en: 'For instance, we can visualize the top percentile of users and movies. In order
    to do this, we use the `quantile` function:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以可视化用户和电影的最高百分位数。为了做到这一点，我们使用`quantile`函数：
- en: '[PRE35]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now, we can visualize the rows and columns matching the criteria.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以可视化符合标准的行和列。
- en: 'Let''s build the heat map using `image`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`image`构建热图：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following image displays the heatmap of the top users and movies:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了顶级用户和电影的热图：
- en: '![Visualizing the matrix](img/B03888_03_09.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![可视化矩阵](img/B03888_03_09.jpg)'
- en: Let's take account of the users having watched more movies. Most of them have
    seen all the top movies, and this is not surprising. We can notice some columns
    that are darker than the others. These columns represent the highest-rated movies.
    Conversely, darker rows represent users giving higher ratings. Because of this,
    we might need to normalize the data.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑那些观看电影更多的用户。他们中的大多数都看过所有顶级电影，这并不令人惊讶。我们可以注意到一些比其他列更暗的列。这些列代表评分最高的电影。相反，较暗的行代表给予更高评价的用户。因此，我们可能需要标准化数据。
- en: In this section, we have explored the data. In the next section, we will process
    and transform it in order to have the inputs for the recommendation models.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经探索了数据。在下一节中，我们将对其进行处理和转换，以便为推荐模型提供输入。
- en: Data preparation
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据准备
- en: 'This section will show you how to prepare the data to be used in recommender
    models. Follow these steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您展示如何准备用于推荐模型的数据。按照以下步骤操作：
- en: Select the relevant data.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择相关的数据。
- en: Normalize the data.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准化数据。
- en: Selecting the most relevant data
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择最相关的数据
- en: 'When we explored the data, we noticed that the table contains:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索数据时，我们注意到表格包含：
- en: Movies that have been viewed only a few times. Their ratings might be biased
    because of lack of data.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只被观看几次的电影。由于数据不足，他们的评价可能存在偏见。
- en: Users who rated only a few movies. Their ratings might be biased.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只评价了几部电影的用户。他们的评价可能存在偏见。
- en: We need to determine the minimum number of users per movie and vice versa. The
    correct solution comes from an iteration of the entire process of preparing the
    data, building a recommendation model, and validating it. Since we are implementing
    the model for the first time, we can use a rule of thumb. After having built the
    models, we can come back and modify the data preparation.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确定每部电影观看用户的最小数量，反之亦然。正确的解决方案来自于对整个数据准备、构建推荐模型和验证过程的迭代。由于我们第一次实现模型，我们可以使用一个经验法则。在构建了模型之后，我们可以回来修改数据准备。
- en: 'We will define `ratings_movies` containing the matrix that we will use. It
    takes account of:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义包含我们将使用的矩阵的`ratings_movies`。它考虑了：
- en: Users who have rated at least 50 movies
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少评价了50部电影的用户
- en: Movies that have been watched at least 100 times
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少被观看100次的电影
- en: 'The preceding points are defined in the following code:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码定义了前面的点：
- en: '[PRE37]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `ratings_movies` object contains about half of the users and a fifth of
    the movies in comparison with `MovieLense`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 与`MovieLense`相比，`ratings_movies`对象包含大约一半的用户和五分之一的电影。
- en: Exploring the most relevant data
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索最相关的数据
- en: 'Using the same approach as we did in the previous section, let''s visualize
    the top 2 percent of users and movies in the new matrix:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与上一节相同的方法，让我们在新矩阵中可视化前2%的用户和电影：
- en: '[PRE38]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s build the heatmap:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建热图：
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following image displays the heatmap of the top users and movies:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了顶级用户和电影的热图：
- en: '![Exploring the most relevant data](img/B03888_03_10.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![探索最相关的数据](img/B03888_03_10.jpg)'
- en: 'As we already noticed, some rows are darker than the others. This might mean
    that some users give higher ratings to all the movies. However, we have visualized
    the top movies only. In order to have an overview of all the users, let''s take
    a look at the distribution of the average rating by user:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所注意到的，一些行比其他行更暗。这可能意味着一些用户对所有电影都给出了更高的评分。然而，我们只可视化了顶级电影。为了全面了解所有用户，让我们看看用户平均评分的分布：
- en: '[PRE40]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Let''s visualize the distribution:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们可视化分布：
- en: '[PRE41]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following image shows the distribution of the average rating per user:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了每个用户的平均评分分布：
- en: '![Exploring the most relevant data](img/B03888_03_11.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![探索最相关的数据](img/B03888_03_11.jpg)'
- en: As suspected, the average rating varies a lot across different users.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如所怀疑的那样，平均评分在不同用户之间差异很大。
- en: Normalizing the data
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对数据进行归一化
- en: 'Having users who give high (or low) ratings to all their movies might bias
    the results. We can remove this effect by normalizing the data in such a way that
    the average rating of each user is 0\. The prebuilt `normalize` function does
    it automatically:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 给所有电影都给出高（或低）评分的用户可能会影响结果。我们可以通过将数据归一化，使得每个用户的平均评分为0来消除这种影响。预构建的`normalize`函数会自动完成这项工作：
- en: '[PRE42]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s take a look at the average rating by users:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看用户平均评分：
- en: '[PRE43]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As expected, the mean rating of each user is `0` (apart from the approximation
    error). We can visualize the new matrix using `image`. Let''s build the heat map:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，每个用户的平均评分是`0`（除了近似误差）。我们可以使用`image`可视化新矩阵。让我们构建热图：
- en: '[PRE44]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following image shows the heatmap of the top users and movies:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了顶级用户和电影的热图：
- en: '![Normalizing the data](img/B03888_03_12.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![归一化数据](img/B03888_03_12.jpg)'
- en: The first difference that we can notice is the colors, and this is because the
    data is continuous. Previously, the rating was an integer between 1 and 5\. After
    the normalization, the rating can be any number between -5 and 5.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先能注意到的不同是颜色，这是因为数据是连续的。之前，评分是介于1到5之间的整数。归一化后，评分可以是介于-5到5之间的任何数字。
- en: There are still some lines that are more blue and some that are more red. The
    reason is that we are visualizing only the top movies. We already checked that
    the average rating is 0 for each user.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有一些线更蓝，有些更红。原因是我们在可视化顶级电影。我们已经检查过每个用户的平均评分都是0。
- en: Binarizing the data
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对数据进行二值化
- en: Some recommendation models work on binary data, so we might want to binarize
    our data, that is, define a table containing only 0s and 1s. The 0s will be either
    treated as missing values or as bad ratings.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一些推荐模型在二进制数据上工作，所以我们可能想要将我们的数据二值化，即定义一个只包含0和1的表格。0将被视为缺失值或差评。
- en: 'In our case, we can either:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们可以：
- en: Define a matrix having 1 if the user rated the movie, and 0 otherwise. In this
    case, we are losing the information about the rating.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个矩阵，如果用户对电影进行了评分，则为1，否则为0。在这种情况下，我们失去了关于评分的信息。
- en: Define a matrix having 1 if the rating is above or equal to a definite threshold
    (for example, 3), and 0 otherwise. In this case, giving a bad rating to a movie
    is equivalent to not having rated it.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个矩阵，如果评分高于或等于一个特定的阈值（例如，3），则为1，否则为0。在这种情况下，给电影差评等同于没有评分。
- en: Depending on the context, one choice is more appropriate than the other.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上下文，一个选择可能比另一个更合适。
- en: 'The function to binarize the data is `binarize`. Let''s apply it to our data.
    First, let''s define a matrix equal to 1 if the movie has been watched, that is
    if its rating is at least `1`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 二值化数据的函数是`binarize`。让我们将其应用于我们的数据。首先，让我们定义一个矩阵，如果电影已被观看，即其评分至少为`1`，则为1：
- en: '[PRE45]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s take a look at the results. In this case, we will have black-and-white
    charts so that we can visualize a larger portion of users and movies, for example,
    5 percent. Similarly, let''s select this 5 percent using `quantile`. The row and
    column counts are the same as the original matrix, so we can still apply `rowCounts`
    and `colCounts` on `ratings_movies`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看结果。在这种情况下，我们将有黑白图表，这样我们就可以可视化更大一部分用户和电影，例如，5%。同样，让我们使用`quantile`选择这5%。行数和列数与原始矩阵相同，因此我们仍然可以在`ratings_movies`上应用`rowCounts`和`colCounts`：
- en: '[PRE46]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let''s build the heat map:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建热图：
- en: '[PRE47]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The following image shows the heat map of the top users and movies:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了顶级用户和电影的热图：
- en: '![Binarizing the data](img/B03888_03_13.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![二值化数据](img/B03888_03_13.jpg)'
- en: Only a few cells contain unwatched movies. This is just because we selected
    the top users and movies.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 只有少数单元格包含未观看的电影。这仅仅是因为我们选择了顶级用户和电影。
- en: 'Let''s use the same approach to compute and visualize the other binary matrix
    The cells having a rating above the threshold will have their value equal to 1
    and the other cells will be 0s:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相同的方法来计算和可视化其他二进制矩阵。高于阈值的评分的单元格将具有其值等于1，其他单元格将为0：
- en: '[PRE48]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s build the heat map:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建热图：
- en: '[PRE49]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following image shows the heatmap of the top users and movies:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了顶级用户和电影的热图：
- en: '![Binarizing the data](img/B03888_03_14.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![二值化数据](img/B03888_03_14.jpg)'
- en: As expected, we have more white cells now. Depending on the model, we can leave
    the ratings matrix as it is or normalize/binarize it.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，现在有更多的空白单元格。根据模型的不同，我们可以保持评分矩阵不变或对其进行归一化/二值化。
- en: In this section, we prepared the data to perform recommendations. In the upcoming
    sections, we will build collaborative filtering models.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们准备了数据以执行推荐。在接下来的章节中，我们将构建协同过滤模型。
- en: Item-based collaborative filtering
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于物品的协同过滤
- en: Collaborative filtering is a branch of recommendation that takes account of
    the information about different users. The word "collaborative" refers to the
    fact that users collaborate with each other to recommend items. In fact, the algorithms
    take account of user purchases and preferences. The starting point is a rating
    matrix in which rows correspond to users and columns correspond to items.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤是推荐系统的一个分支，它考虑了不同用户的信息。单词“协同”指的是用户相互协作推荐物品的事实。实际上，算法考虑了用户的购买和偏好。起点是一个评分矩阵，其中行对应于用户，列对应于物品。
- en: 'This section will show you an example of item-based collaborative filtering.
    Given a new user, the algorithm considers the user''s purchases and recommends
    similar items. The core algorithm is based on these steps:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将展示基于物品的协同过滤的一个示例。给定一个新用户，算法考虑用户的购买并推荐相似的物品。核心算法基于以下步骤：
- en: For each two items, measure how similar they are in terms of having received
    similar ratings by similar users
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每一对物品，测量它们在收到相似用户相似评分方面的相似程度
- en: For each item, identify the *k*-most similar items
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个物品，识别最相似的*k*个物品
- en: For each user, identify the items that are most similar to the user's purchases
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个用户，识别与用户购买最相似的物品
- en: In this chapter, we will see the overall approach to building an IBCF model.
    In addition, the upcoming sections will show its details.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到构建IBCF模型的整体方法。此外，接下来的章节将展示其细节。
- en: Defining the training and test sets
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义训练集和测试集
- en: We will build the model using a part of the `MovieLense` dataset (the training
    set) and apply it on the other part (the test set). Since it's not a topic of
    this chapter, we will not evaluate the model, but will only recommend movies to
    the users in the test set.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`MovieLense`数据集的一部分（训练集）来构建模型，并将其应用于另一部分（测试集）。由于这不是本章的主题，我们不会评估模型，而只会向测试集中的用户推荐电影。
- en: 'The two sets are as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是两个集合：
- en: '**Training set**: This set includes users from which the model learns'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**训练集**：这个集合包括模型从中学习的用户'
- en: '**Test set**: This set includes users to whom we recommend movies'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试集**：这个集合包括我们向其推荐电影的用户'
- en: The algorithm automatically normalizes the data, so we can use `ratings_movies`
    that contains relevant users and movies of `MovieLense`. We defined `ratings_movies`
    in the previous section as the subset of `MovieLense` users who have rated at
    least 50 movies and movies that have been rated at least 100 times.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 算法自动归一化数据，因此我们可以使用包含相关用户和`MovieLense`电影的`ratings_movies`。我们在上一节中将`ratings_movies`定义为`MovieLense`用户的子集，这些用户至少评了50部电影，以及至少被评了100次的电影。
- en: 'First, we randomly define the `which_train` vector that is `TRUE` for users
    in the training set and `FALSE` for the others. We will set the probability in
    the training set as 80 percent:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们随机定义 `which_train` 向量，对于训练集中的用户为 `TRUE`，对于其他用户为 `FALSE`。我们将训练集中的概率设置为 80%：
- en: '[PRE50]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s define the training and the test sets:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义训练集和测试集：
- en: '[PRE51]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'If we want to recommend items to each user, we could just use the *k*-fold:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想向每个用户推荐物品，我们可以使用 *k*-fold：
- en: Split the users randomly into five groups
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户随机分为五个组
- en: Use a group as a test set and the other groups as training sets
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个组作为测试集，其他组作为训练集
- en: Repeat it for each group
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对每个组重复此操作
- en: 'This is a sample code:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例代码：
- en: '[PRE52]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In order to show how this package works, we split the data into training and
    test sets manually. You can also do this automatically in `recommenderlab` using
    the `evaluationScheme` function. This function also contains some tools to evaluate
    models that we will use in the [Chapter 4](ch04.html "Chapter 4. Evaluating the
    Recommender Systems"), *Evaluating the Recommender Systems*, which is about model
    evaluation.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这个包的工作原理，我们手动将数据分为训练集和测试集。您也可以在 `recommenderlab` 中使用 `evaluationScheme`
    函数自动执行此操作。此函数还包含一些我们将用于 [第 4 章](ch04.html "第 4 章。评估推荐系统") 的工具，*评估推荐系统*，该章节是关于模型评估。
- en: Now, we have the inputs to build and validate the model.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了构建和验证模型所需的输入。
- en: Building the recommendation model
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建推荐模型
- en: 'The function to build models is `recommender` and its inputs are as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 构建模型的函数是 `recommender`，其输入如下：
- en: '**Data**: This is the training set'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**: 这是训练集'
- en: '**Method**: This is the name of the technique'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法**: 这是技术的名称'
- en: '**Parameters**: These are some optional parameters of the technique'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**: 这是技术的可选参数'
- en: 'The model is called IBCF, which stands for item-based collaborative filtering.
    Let''s take a look at its parameters:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型称为 IBCF，代表基于物品的协同过滤。让我们看看它的参数：
- en: '[PRE53]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '| Parameters | Default |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 默认值 |'
- en: '| --- | --- |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `k` | `30` |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `k` | `30` |'
- en: '| `method` | `Cosine` |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `method` | `Cosine` |'
- en: '| `normalize` | `center` |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `normalize` | `center` |'
- en: '| `normalize_sim_matrix` | `FALSE` |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `normalize_sim_matrix` | `FALSE` |'
- en: '| `alpha` | `0.5` |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `alpha` | `0.5` |'
- en: '| `na_as_zero` | `FALSE` |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `na_as_zero` | `FALSE` |'
- en: '| `minRating` | `NA` |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `minRating` | `NA` |'
- en: 'Some relevant parameters are as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 一些相关参数如下：
- en: '`k`: In the first step, the algorithm computes the similarities among each
    pair of items. Then, for each item, it identifies its *k* most similar items and
    stores it.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k`: 在第一步中，算法计算每对物品之间的相似度。然后，对于每个物品，它识别其 *k* 个最相似的物品并将其存储。'
- en: '`method`: This is the similarity function. By default, it is `Cosine`. Another
    popular option is `pearson`.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`: 这是相似度函数。默认情况下，它是 `Cosine`。另一个流行的选项是 `pearson`。'
- en: 'At the moment, we can just set them to their defaults. In order to show how
    to change parameters, we are setting `k = 30`, which is the default. We are now
    ready to build a recommender model:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只需将它们设置为默认值。为了展示如何更改参数，我们将 `k` 设置为默认值 30。我们现在准备好构建推荐模型：
- en: '[PRE54]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `recc_model` class is an object of the `Recommender` class containing the
    model.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`recc_model` 类是包含模型的 `Recommender` 类的一个对象。'
- en: Exploring the recommender model
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索推荐模型
- en: 'Using `getModel`, we can extract some details about the model, such as its
    description and parameters:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `getModel`，我们可以提取有关模型的一些详细信息，例如其描述和参数：
- en: '[PRE55]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `model_details$sim` component contains the similarity matrix. Let''s check
    its structure:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`model_details$sim` 组件包含相似度矩阵。让我们检查其结构：'
- en: '[PRE56]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'As expected, `model_details$sim` is a square matrix whose size is equal to
    the number of items. We can explore a part of it using `image`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，`model_details$sim` 是一个大小等于物品数量的正方形矩阵。我们可以使用 `image` 函数探索其一部分：
- en: '[PRE57]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Let''s build the heat map:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建热图：
- en: '[PRE58]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The following image displays heatmap of the first rows and columns:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图像显示了第一行和列的热图：
- en: '![Exploring the recommender model](img/B03888_03_15.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![探索推荐模型](img/B03888_03_15.jpg)'
- en: 'Most of the values are equal to 0\. The reason is that each row contains only
    `k` elements. Let''s check it:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数值都等于 0。原因是每行只包含 `k` 个元素。让我们检查一下：
- en: '[PRE59]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'As expected, each row has `30` elements greater than `0`. However, the matrix
    is not supposed to be symmetric. In fact, the number of non-null elements for
    each column depends on how many times the corresponding movie was included in
    the top *k* of another movie. Let''s check the distribution of the number of elements
    by column:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，每行有 `30` 个元素大于 `0`。然而，矩阵不应该是对称的。实际上，每列的非空元素数量取决于相应的电影被包含在另一个电影的前 *k* 中的次数。让我们检查元素数量的分布：
- en: '[PRE60]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Let''s build the distribution chart:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建分布图：
- en: '[PRE61]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The following image displays the distribution of the column count:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了列数的分布：
- en: '![Exploring the recommender model](img/B03888_03_16.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![探索推荐模型](img/B03888_03_16.jpg)'
- en: 'As expected, there are a few movies that are similar to many others. Let''s
    see which are the movies with the most elements:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，有一些电影与许多其他电影相似。让我们看看哪些电影包含最多的元素：
- en: '[PRE62]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '| Movie | col_sum |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 列总和 |'
- en: '| --- | --- |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Sling Blade (1996)` | `62` |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| 《飞刀手》（1996）| `62` |'
- en: '| `Usual Suspects, The (1995)` | `60` |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| 《非常嫌疑犯》（1995）| `60` |'
- en: '| `Fargo (1996)` | `58` |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| 《无间道风云》（1996）| `58` |'
- en: '| `Vertigo (1958)` | `58` |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 《眩晕》（1958）| `58` |'
- en: '| `Stargate (1994)` | `57` |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| 《星际之门》（1994）| `57` |'
- en: '| `The Godfather (1972)` | `55` |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| 《教父》（1972）| `55` |'
- en: Applying the recommender model on the test set
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在测试集上应用推荐模型
- en: 'Now, we are able to recommend movies to the users in the test set. We will
    define `n_recommended` that specifies the number of items to recommend to each
    user. This section will show you the most popular approach to computing a weighted
    sum:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们能够向测试集中的用户推荐电影。我们将定义 `n_recommended`，它指定为每个用户推荐的项目数量。本节将向您展示计算加权总和的最流行方法：
- en: '[PRE63]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'For each user, the algorithm extracts its rated movies. For each movie, it
    identifies all its similar items, starting from the similarity matrix. Then, the
    algorithm ranks each similar item in this way:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个用户，算法提取其评价过的电影。对于每部电影，它从相似度矩阵开始，识别所有相似的项目。然后，算法以这种方式对每个相似项目进行排名：
- en: Extract the user rating of each purchase associated with this item. The rating
    is used as a weight.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取与该物品相关的每个购买项目的用户评分。评分用作权重。
- en: Extract the similarity of the item with each purchase associated with this item.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取与该物品相关的每个购买项目的相似度。
- en: Multiply each weight with the related similarity.
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个权重与相关的相似度相乘。
- en: Sum everything up.
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容加总。
- en: 'Then, the algorithm identifies the top *n* recommendations:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，算法识别前 *n* 个推荐：
- en: '[PRE64]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The `recc_predicted` object contains the recommendations. Let''s take a look
    at its structure:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`recc_predicted` 对象包含推荐。让我们看看它的结构：'
- en: '[PRE65]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The slots are:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 插槽包括：
- en: '`items`: This is the list with the indices of the recommended items for each
    user'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`items`: 这是每个用户推荐项目的索引列表'
- en: '`itemLabels`: This is the name of the items'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`itemLabels`: 这是项目的名称'
- en: '`n`: This is the number of recommendations'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`: 这是推荐的数量'
- en: 'For instance, these are the recommendations for the first user:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是第一个用户的推荐：
- en: '[PRE66]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'We can extract the recommended movies from `recc_predicted@item` labels:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从 `recc_predicted@item` 标签中提取推荐电影：
- en: '[PRE67]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '| Index | Movie |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| 索引 | 电影 |'
- en: '| --- | --- |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `201` | `Schindler''s List (1993)` |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| `201` | 《辛德勒的名单》（1993）|'
- en: '| `182` | `Secrets and Lies (1996)` |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| `182` | 《秘密与谎言》（1996）|'
- en: '| `254` | `Trainspotting (1996)` |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `254` | 《猜火车》（1996）|'
- en: '| `274` | `The Deer Hunter (1978)` |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| `274` | 《猎鹿人》（1978）|'
- en: '| `193` | `L.A. Confidential (1997)` |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| `193` | 《洛城疑云》（1997）|'
- en: '| `297` | `The Manchurian Candidate (1962)` |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| `297` | 《曼克顿候选人》（1962）|'
- en: 'We can define a matrix with the recommendations for each user:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为每个用户定义一个推荐矩阵：
- en: '[PRE68]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Let''s visualize the recommendations for the first four users:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们可视化前四个用户的推荐：
- en: '[PRE69]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '| `Schindler''s List (1993)` | `Babe (1995)` |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| 《辛德勒的名单》（1993）| 《宝贝》（1995）|'
- en: '| `Secrets and Lies (1996)` | `The Usual Suspects (1995)` |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| 《秘密与谎言》（1996）| 《非常嫌疑犯》（1995）|'
- en: '| `Trainspotting (1996)` | `Taxi Driver (1976)` |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| 《猜火车》（1996）| 《出租车司机》（1976）|'
- en: '| `The Deer Hunter (1978)` | `Blade Runner (1982)` |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| 《猎鹿人》（1978）| 《银翼杀手》（1982）|'
- en: '| `L.A. Confidential (1997)` | `Welcome to the Dollhouse (1995)` |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| 《洛城疑云》（1997）| 《欢迎来到娃娃屋》（1995）|'
- en: '| `Manchurian Candidate, The (1962)` | `The Silence of the Lambs (1991)` |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| 《曼克顿候选人》（1962）| 《沉默的羔羊》（1991）|'
- en: '| `Batman Forever (1995)` | `Strictly Ballroom (1992)` |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| 《蝙蝠侠永远的》（1995）| 《严格舞会》（1992）|'
- en: '| `Stargate (1994)` | `L.A. Confidential (1997)` |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| 《星际之门》（1994）| 《洛城疑云》（1997）|'
- en: '| `Star Trek III: The Search for Spock (1984)` | `Cold Comfort Farm (1995)`
    |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| 《星际迷航III：寻找斯波克》（1984）| 《冷舒适的农场》（1995）|'
- en: '| `Tin Cup (1996)` | `12 Angry Men (1957)` |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| `Tin Cup (1996)` | `12 Angry Men (1957)` |'
- en: '| `Courage Under Fire (1996)` | `Vertigo (1958)` |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| `Courage Under Fire (1996)` | `Vertigo (1958)` |'
- en: '| `Dumbo (1941)` | `A Room with a View (1986)` |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| `Dumbo (1941)` | `A Room with a View (1986)` |'
- en: 'Now, we can identify the most recommended movies. For this purpose, we will
    define a vector with all the recommendations, and we will build a frequency plot:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以识别出最推荐的影片。为此，我们将定义一个包含所有推荐的向量，并构建一个频率图：
- en: '[PRE70]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Let''s build the distribution chart:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建分布图：
- en: '[PRE71]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The following image shows the distribution of the number of items for IBCF:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了 IBCF 中项目数量的分布：
- en: '![Applying the recommender model on the test set](img/B03888_03_17.jpg)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![在测试集上应用推荐模型](img/B03888_03_17.jpg)'
- en: 'Most of the movies have been recommended only a few times, and a few movies
    have been recommended many times. Let''s see which are the most popular movies:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数电影只被推荐过几次，而少数电影被推荐过很多次。让我们看看哪些是最受欢迎的电影：
- en: '[PRE72]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '|   | names.number_of_items_top |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '|   | names.number_of_items_top |'
- en: '| --- | --- |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Mr. Smith Goes to Washington (1939)` | `Mr. Smith Goes to Washington (1939)`
    |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| `Mr. Smith Goes to Washington (1939)` | `Mr. Smith Goes to Washington (1939)`
    |'
- en: '| `Babe (1995)` | `Babe (1995)` |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| `Babe (1995)` | `Babe (1995)` |'
- en: '| `The Maltese Falcon (1941)` | `The Maltese Falcon (1941)` |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| `The Maltese Falcon (1941)` | `The Maltese Falcon (1941)` |'
- en: '| `L.A. Confidential (1997)` | `L.A. Confidential (1997)` |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| `L.A. Confidential (1997)` | `L.A. Confidential (1997)` |'
- en: 'The preceding table continues as follows:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表格继续如下：
- en: '|   | number_of_items_top |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '|   | number_of_items_top |'
- en: '| --- | --- |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Mr. Smith Goes to Washington (1939)` | `55` |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| `Mr. Smith Goes to Washington (1939)` | `55` |'
- en: '| `Babe (1995)` | `38` |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| `Babe (1995)` | `38` |'
- en: '| `The Maltese Falcon (1941)` | `35` |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| `The Maltese Falcon (1941)` | `35` |'
- en: '| `L.A. Confidential (1997)` | `34` |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| `L.A. Confidential (1997)` | `34` |'
- en: IBCF recommends items on the basis of the similarity matrix. It's an eager-learning
    model, that is, once it's built, it doesn't need to access the initial data. For
    each item, the model stores the *k*-most similar, so the amount of information
    is small once the model is built. This is an advantage in the presence of lots
    of data.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: IBCF 基于相似性矩阵推荐项目。它是一个积极学习模型，也就是说，一旦构建完成，就不需要访问初始数据。对于每个项目，模型存储最相似的 *k* 个，因此一旦模型构建完成，信息量就很小。这在数据量很大的情况下是一个优势。
- en: In addition, this algorithm is efficient and scalable, so it works well with
    big rating matrices. Its accuracy is rather good, compared with other recommendation
    models.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，此算法高效且可扩展，因此在大评分矩阵中表现良好。与其它推荐模型相比，其准确性相当不错。
- en: 'In the next section, we will explore another branch of techniques: user-based
    collaborative filtering.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探索另一种技术分支：基于用户的协同过滤。
- en: User-based collaborative filtering
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于用户的协同过滤
- en: 'In the previous section, the algorithm was based on items and the steps to
    identify recommendations were as follows:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，算法基于项目，识别推荐步骤如下：
- en: Identify which items are similar in terms of having been purchased by the same
    people
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别哪些项目在由相同的人购买方面是相似的
- en: Recommend to a new user the items that are similar to its purchases
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向新用户推荐与其购买相似的项目
- en: 'In this section, we will use the opposite approach. First, given a new user,
    we will identify its similar users. Then, we will recommend the top-rated items
    purchased by similar users. This approach is called user-based collaborative filtering.
    For each new user, these are the steps:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用相反的方法。首先，给定一个新用户，我们将识别其相似用户。然后，我们将推荐相似用户购买的最高评分项目。这种方法称为基于用户的协同过滤。对于每个新用户，这些步骤如下：
- en: Measure how similar each user is to the new one. Like IBCF, popular similarity
    measures are correlation and cosine.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测量每个用户与新用户相似的程度。像 IBCF 一样，流行的相似性度量包括相关性和余弦相似度。
- en: 'Identify the most similar users. The options are:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别最相似的用户。选项包括：
- en: Take account of the top *k* users (*k*-nearest_neighbors)
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑最顶部的 *k* 个用户 (*k*-最近邻)
- en: Take account of the users whose similarity is above a defined threshold
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑相似度高于定义阈值的用户
- en: 'Rate the items purchased by the most similar users. The rating is the average
    rating among similar users and the approaches are:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对最相似用户的购买项目进行评分。评分是相似用户之间的平均评分，方法如下：
- en: Average rating
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均评分
- en: Weighted average rating, using the similarities as weights
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加权平均评分，使用相似性作为权重
- en: Pick the top-rated items.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择评分最高的项目。
- en: Like we did in the previous chapter, we will build a training and a test set.
    Now, we can start building the model directly.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在上一章中所做的那样，我们将构建一个训练集和一个测试集。现在，我们可以直接开始构建模型。
- en: Building the recommendation model
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建推荐模型
- en: 'The R command to build the model is the same as the previous chapter. Now,
    the technique is called UBCF:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 构建模型的R命令与上一章相同。现在，这项技术被称为UBCF：
- en: '[PRE73]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '| Parameter | Default |'
  id: totrans-420
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 默认值 |'
- en: '| --- | --- |'
  id: totrans-421
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `method` | `cosine` |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| `method` | `cosine` |'
- en: '| `nn` | `25` |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| `nn` | `25` |'
- en: '| `sample` | `FALSE` |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| `sample` | `FALSE` |'
- en: '| `normalize` | `center` |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| `normalize` | `center` |'
- en: '| `minRating` | `NA` |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| `minRating` | `NA` |'
- en: 'Some relevant parameters are:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 一些相关的参数包括：
- en: '`method`: This shows how to compute the similarity between users'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`: 这显示了如何计算用户之间的相似度'
- en: '`nn`: This shows the number of similar users'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nn`: 这显示了相似用户的数量'
- en: 'Let''s build a recommender model leaving the parameters to their defaults:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个默认参数的推荐模型：
- en: '[PRE74]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Let''s extract some details about the model using `getModel`:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`getModel`提取一些关于模型的详细信息：
- en: '[PRE75]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Let''s take a look at the components of the model:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看模型的组成部分：
- en: '[PRE76]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '| Element |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| 元素 |'
- en: '| --- |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| `description` |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| `description` |'
- en: '| `data` |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| `data` |'
- en: '| `method` |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| `method` |'
- en: '| `nn` |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| `nn` |'
- en: '| `sample` |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| `sample` |'
- en: '| `normalize` |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| `normalize` |'
- en: '| `minRating` |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| `minRating` |'
- en: 'Apart from the description and parameters of `model`, `model_details` contains
    a data slot:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`model`的描述和参数外，`model_details`还包含一个数据槽：
- en: '[PRE77]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The `model_details$data` object contains the rating matrix. The reason is that
    UBCF is a lazy-learning technique, which means that it needs to access all the
    data to perform a prediction.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`model_details$data`对象包含评分矩阵。原因是UBCF是一种懒惰学习技术，这意味着它需要访问所有数据来执行预测。'
- en: Applying the recommender model on the test set
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在测试集上应用推荐模型
- en: 'In the same way as the IBCF, we can determine the top six recommendations for
    each new user:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 与IBCF一样，我们可以确定每个新用户的六个顶级推荐：
- en: '[PRE78]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'We can define a matrix with the recommendations to the test set users:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以定义一个矩阵，包含对测试集用户的推荐：
- en: '[PRE79]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Let''s take a look at the first four users:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看前四个用户：
- en: '[PRE80]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '| `The Usual Suspects (1995)` | `Lone Star (1996)` |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| `The Usual Suspects (1995)` | `Lone Star (1996)` |'
- en: '| `The Shawshank Redemption (1994)` | `This Is Spinal Tap (1984)` |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| `The Shawshank Redemption (1994)` | `This Is Spinal Tap (1984)` |'
- en: '| `Contact (1997)` | `The Wrong Trousers (1993)` |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| `Contact (1997)` | `The Wrong Trousers (1993)` |'
- en: '| `The Godfather (1972)` | `Hoop Dreams (1994)` |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| `The Godfather (1972)` | `Hoop Dreams (1994)` |'
- en: '| `Nikita (La Femme Nikita) (1990)` | `Mighty Aphrodite (1995)` |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| `Nikita (La Femme Nikita) (1990)` | `Mighty Aphrodite (1995)` |'
- en: '| `Twelve Monkeys (1995)` | `Big Night (1996)` |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| `Twelve Monkeys (1995)` | `Big Night (1996)` |'
- en: '| `The Silence of the Lambs (1991)` | `The Usual Suspects (1995)` |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| `The Silence of the Lambs (1991)` | `The Usual Suspects (1995)` |'
- en: '| `The Shawshank Redemption (1994)` | `The Wrong Trousers (1993)` |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| `The Shawshank Redemption (1994)` | `The Wrong Trousers (1993)` |'
- en: '| `Jaws (1975)` | `Monty Python and the Holy Grail (1974)` |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| `Jaws (1975)` | `Monty Python and the Holy Grail (1974)` |'
- en: '| `Schindler''s List (1993)` | `GoodFellas (1990)` |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| `Schindler''s List (1993)` | `GoodFellas (1990)` |'
- en: '|   | `The Godfather (1972)` |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '|   | `The Godfather (1972)` |'
- en: '| `Fargo (1996)` | `2001: A Space Odyssey (1968)` |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
  zh: '| `Fargo (1996)` | `2001: A Space Odyssey (1968)` |'
- en: 'We can also compute how many times each movie got recommended and build the
    related frequency histogram:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以计算每部电影被推荐的次数，并构建相关的频率直方图：
- en: '[PRE81]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Let''s build the distribution chart:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建分布图：
- en: '[PRE82]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The following image displays the distribution of the numbers of items for UBCF:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了UBCF中项目数量的分布：
- en: '![Applying the recommender model on the test set](img/B03888_03_18.jpg)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
  zh: '![在测试集上应用推荐模型](img/B03888_03_18.jpg)'
- en: Compared with the IBCF, the distribution has a longer tail. This means that
    there are some movies that are recommended much more often than the others. The
    maximum is 29, compared with 11 for IBCF.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 与IBCF相比，分布有一个更长的尾部。这意味着有一些电影比其他电影被推荐得更多。最大值为29，而IBCF为11。
- en: 'Let''s take a look at the top titles:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看顶级标题：
- en: '[PRE83]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '|   | names.number_of_items_top |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '|   | names.number_of_items_top |'
- en: '| --- | --- |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Schindler''s List (1993)` | `Schindler''s List (1993)` |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| `Schindler''s List (1993)` | `Schindler''s List (1993)` |'
- en: '| `The Shawshank Redemption (1994)` | `The Shawshank Redemption (1994)` |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| `The Shawshank Redemption (1994)` | `The Shawshank Redemption (1994)` |'
- en: '| `The Silence of the Lambs (1991)` | `The Silence of the Lambs (1991)` |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| `The Silence of the Lambs (1991)` | `The Silence of the Lambs (1991)` |'
- en: '| `The Godfather (1972)` | `The Godfather (1972)` |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| `The Godfather (1972)` | `The Godfather (1972)` |'
- en: 'The preceding table is continued as follows:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表格继续如下：
- en: '|   | number_of_items_top |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '|   | number_of_items_top |'
- en: '| --- | --- |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Schindler''s List (1993)` | `36` |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| `辛德勒的名单 (1993)` | `36` |'
- en: '| `The Shawshank Redemption (1994)` | `34` |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| `肖申克的救赎 (1994)` | `34` |'
- en: '| `The Silence of the Lambs (1991)` | `29` |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| `沉默的羔羊 (1991)` | `29` |'
- en: '| `The Godfather (1972)` | `27` |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| `教父 (1972)` | `27` |'
- en: Comparing the results of UBCF with IBCF helps in understanding the algorithm
    better. UBCF needs to access the initial data, so it is a lazy-learning model.
    Since it needs to keep the entire database in memory, it doesn't work well in
    the presence of a big rating matrix. Also, building the similarity matrix requires
    a lot of computing power and time.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 比较UBCF和IBCF的结果有助于更好地理解算法。UBCF需要访问初始数据，因此它是一个懒惰学习模型。由于它需要将整个数据库保留在内存中，所以在大评分矩阵存在的情况下表现不佳。此外，构建相似度矩阵需要大量的计算能力和时间。
- en: However, UBCF's accuracy is proven to be slightly more accurate than IBCF, so
    it's a good option if the dataset is not too big.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，UBCF的准确性已被证明略高于IBCF，所以如果数据集不是太大，它是一个不错的选择。
- en: Collaborative filtering on binary data
  id: totrans-491
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于二值数据的协同过滤
- en: 'In the previous two sections, we built recommendation models based on user
    preferences, since the data displayed the rating for each purchase. However, this
    information is not always available. The following two scenarios can take place:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个部分中，我们基于用户偏好构建了推荐模型，因为数据显示了每次购买的评分。然而，这种信息并不总是可用。以下两种情况可能发生：
- en: We know which items have been purchased, but not their ratings
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们知道哪些物品已被购买，但不知道它们的评分
- en: For each user, we don't know which items it purchased, but we know which items
    it likes
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个用户，我们不知道它购买了哪些物品，但我们知道它喜欢哪些物品
- en: In these contexts, we can build a user-item matrix whose values would be 1 if
    the user purchased (or liked) the item, and 0 otherwise. This case is different
    from the previous cases, so it should be treated separately. Similar to the other
    cases, the techniques are item-based and user-based.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，我们可以构建一个用户-物品矩阵，如果用户购买了（或喜欢）该物品，其值将为1，否则为0。这种情况与之前的情况不同，因此应该单独处理。与其他情况类似，技术是基于物品和基于用户的。
- en: In our case, starting from `ratings_movies`, we can build a `ratings_movies_watched`
    matrix whose values will be 1 if the user viewed the movie, and 0 otherwise. We
    built it in one of the *Binarizing the data* sections.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这个例子中，从`ratings_movies`开始，我们可以构建一个`ratings_movies_watched`矩阵，如果用户观看了电影，其值将为1，否则为0。我们是在“*二值化数据*”部分之一构建的它。
- en: Data preparation
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据准备
- en: 'We can build `ratings_movies_watched` using the binarize method:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用二值化方法构建`ratings_movies_watched`：
- en: '[PRE84]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Let''s take a quick look at the data. How many movies (out of 332) did each
    user watch? Let''s build the distribution chart:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看一下数据。每个用户观看了多少部电影（共332部）？让我们构建分布图：
- en: '[PRE85]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The following image shows a distribution of movies by user:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了按用户分布的电影：
- en: '![Data preparation](img/B03888_03_19.jpg)'
  id: totrans-503
  prefs: []
  type: TYPE_IMG
  zh: '![数据准备](img/B03888_03_19.jpg)'
- en: On the average, each user watched about 100 movies, and only a few watched more
    than 200 movies.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 平均而言，每个用户观看了大约100部电影，只有少数用户观看了超过200部电影。
- en: 'In order to build a recommendation model, let''s define a training set and
    a test set:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建推荐模型，让我们定义一个训练集和一个测试集：
- en: '[PRE86]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: We are now ready to build the IBCF and UBCF models.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好构建IBCF和UBCF模型。
- en: Item-based collaborative filtering on binary data
  id: totrans-508
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于二值数据的物品推荐过滤
- en: The first step with IBCF is defining a similarity between items. In the case
    of binary data, distances such as the correlation and the cosine don't work properly.
    A good alternative is the Jaccard index. Given two items, the index is computed
    as the number of users purchasing both the items divided by the number of users
    purchasing at least one of them. Let's start from ![Item-based collaborative filtering
    on binary data](img/B03888_03_20.jpg) and ![Item-based collaborative filtering
    on binary data](img/B03888_03_21.jpg), which are the sets of users purchasing
    the first and second item, respectively. The "∩" symbol refers to the intersection
    of two sets, that is, the items contained in both. The "U" symbol refers to the
    union of two sets, that is, the items contained in at least one of them. The Jaccard
    index is the number of elements in the intersection between the two sets, divided
    by the number of elements in their union.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: IBCF 的第一步是定义项之间的相似度。在二元数据的情况下，如相关性和余弦距离等距离不适用。一个好的替代方案是 Jaccard 指数。给定两个项，该指数是购买这两个项的用户数除以至少购买其中一个项的用户数。让我们从
    ![基于项的二元数据协同过滤](img/B03888_03_20.jpg) 和 ![基于项的二元数据协同过滤](img/B03888_03_21.jpg)
    开始，它们分别是购买第一和第二项的用户集合。符号“∩”表示两个集合的交集，即两个集合都包含的项。符号“U”表示两个集合的并集，即至少包含在一个集合中的项。Jaccard
    指数是两个集合交集的元素数除以它们的并集的元素数。
- en: '![Item-based collaborative filtering on binary data](img/B03888_03_22.jpg)'
  id: totrans-510
  prefs: []
  type: TYPE_IMG
  zh: '![基于项的二元数据协同过滤](img/B03888_03_22.jpg)'
- en: 'We can build the IBCF filtering model using the same commands as in the previous
    chapters. The only difference is the input parameter method equal to `Jaccard`:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用与前面章节相同的命令构建 IBCF 过滤模型。唯一的区别是输入参数方法等于 `Jaccard`：
- en: '[PRE87]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Like in the previous sections, we can recommend six items to each of the users
    in the test set:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，我们可以向测试集中的每个用户推荐六项：
- en: '[PRE88]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Let's see the recommendations for the first four users.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看前四个用户的推荐。
- en: '[PRE89]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '| `L.A. Confidential (1997)` | `Hoop Dreams (1994)` |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| 《洛城机密 (1997)》 | 《篮球梦 (1994)》 |'
- en: '| `Evita (1996)` | `Quiz Show (1994)` |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| 《Evita (1996)》 | 《智力游戏 (1994)》 |'
- en: '| `Being There (1979)` | `Strictly Ballroom (1992)` |'
  id: totrans-519
  prefs: []
  type: TYPE_TB
  zh: '| 《存在主义 (1979)》 | 《严格舞会 (1992)》 |'
- en: '| `Chasing Amy (1997)` | `This Is Spinal Tap (1984)` |'
  id: totrans-520
  prefs: []
  type: TYPE_TB
  zh: '| 《追逐艾米 (1997)》 | 《这是脊髓塔 (1984)》 |'
- en: '| `Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb (1963)`
    | `What''s Eating Gilbert Grape (1993)` |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| 《奇爱博士或：我如何停止担忧并爱上炸弹 (1963)》 | 《好家伙 (1993)》 |'
- en: '| `The Full Monty (1997)` | `The Wrong Trousers (1993)` |'
  id: totrans-522
  prefs: []
  type: TYPE_TB
  zh: '| 《全裸蒙提 (1997)》 | 《错误的裤子 (1993)》 |'
- en: '| `Gone with the Wind (1939)` | `Cop Land (1997)` |'
  id: totrans-523
  prefs: []
  type: TYPE_TB
  zh: '| 《飘 (1939)》 | 《警察局 (1997)》 |'
- en: '| `Citizen Kane (1941)` | `Lost Highway (1997)` |'
  id: totrans-524
  prefs: []
  type: TYPE_TB
  zh: '| 《公民凯恩 (1941)》 | 《迷幻高速公路 (1997)》 |'
- en: '| `On Golden Pond (1981)` | `Kolya (1996)` |'
  id: totrans-525
  prefs: []
  type: TYPE_TB
  zh: '| 《金色池塘 (1981)》 | 《科利亚 (1996)》 |'
- en: '| `Emma (1996)` | `Secrets and Lies (1996)` |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| 《艾玛 (1996)》 | 《秘密与谎言 (1996)》 |'
- en: '| `One Flew Over the Cuckoo''s Nest (1975)` | `Everyone Says I Love You (1996)`
    |'
  id: totrans-527
  prefs: []
  type: TYPE_TB
  zh: '| 《飞越疯人院 (1975)》 | 《每个人都说我爱你 (1996)》 |'
- en: '| `The Philadelphia Story (1940)` | `Boogie Nights (1997)` |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| 《费城故事 (1940)》 | 《搏击俱乐部 (1997)》 |'
- en: The approach is similar to IBCF using a rating matrix. Since we are not taking
    account of the ratings, the result will be less accurate.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法与 IBCF 类似，使用评分矩阵。由于我们没有考虑评分，结果将不太准确。
- en: User-based collaborative filtering on binary data
  id: totrans-530
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于项的二元数据协同过滤
- en: 'Similar to IBCF, we need to use the Jaccard index for UBCF. Given two users,
    the index is computed as the number of items purchased by both the users divided
    by the number of items purchased by at least one of them. The mathematical symbols
    are the same as in the previous section:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 与 IBCF 类似，我们还需要为 UBCF 使用 Jaccard 指数。给定两个用户，该指数是两个用户都购买的项数除以至少有一个用户购买的项数。数学符号与上一节相同：
- en: '![User-based collaborative filtering on binary data](img/B03888_03_23.jpg)'
  id: totrans-532
  prefs: []
  type: TYPE_IMG
  zh: '![基于用户的二元数据协同过滤](img/B03888_03_23.jpg)'
- en: 'Let''s build the recommender model:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建推荐模型：
- en: '[PRE90]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Using the same commands as IBCF, let''s recommend six movies to each user,
    and let''s take a look at the first four users:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与 IBCF 相同的命令，为每个用户推荐六部电影，并查看前四个用户：
- en: '[PRE91]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '| `The Shawshank Redemption (1994)` | `Titanic (1997)` |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
  zh: '| 《肖申克的救赎 (1994)》 | 《泰坦尼克号 (1997)》 |'
- en: '| `Casablanca (1942)` | `Cinema Paradiso (1988)` |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| 《卡萨布兰卡 (1942)》 | 《天堂电影院 (1988)》 |'
- en: '| `Braveheart (1995)` | `Lone Star (1996)` |'
  id: totrans-539
  prefs: []
  type: TYPE_TB
  zh: '| 《勇敢的心 (1995)》 | 《孤星 (1996)》 |'
- en: '| `The Terminator (1984)` | `L.A. Confidential (1997)` |'
  id: totrans-540
  prefs: []
  type: TYPE_TB
  zh: '| 《终结者 (1984)》 | 《洛城机密 (1997)》 |'
- en: '| `The Usual Suspects (1995)` | `Singin'' in the Rain (1952)` |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| `The Usual Suspects (1995)` | `Singin'' in the Rain (1952)` |'
- en: '| `Twelve Monkeys (1995)` | `Leaving Las Vegas (1995)` |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '| `Twelve Monkeys (1995)` | `Leaving Las Vegas (1995)` |'
- en: '| `Titanic (1997)` | `Monty Python and the Holy Grail (1974)` |'
  id: totrans-543
  prefs: []
  type: TYPE_TB
  zh: '| `Titanic (1997)` | `Monty Python and the Holy Grail (1974)` |'
- en: '| `Usual Suspects, The (1995)` | `The Shawshank Redemption (1994)` |'
  id: totrans-544
  prefs: []
  type: TYPE_TB
  zh: '| `Usual Suspects, The (1995)` | `The Shawshank Redemption (1994)` |'
- en: '| `Groundhog Day (1993)` | `Schindler''s List (1993)` |'
  id: totrans-545
  prefs: []
  type: TYPE_TB
  zh: '| `Groundhog Day (1993)` | `Schindler''s List (1993)` |'
- en: '| `The Shawshank Redemption (1994)` | `Young Frankenstein (1974)` |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| `The Shawshank Redemption (1994)` | `Young Frankenstein (1974)` |'
- en: '| `The Blues Brothers (1980)` | `The Usual Suspects (1995)` |'
  id: totrans-547
  prefs: []
  type: TYPE_TB
  zh: '| `The Blues Brothers (1980)` | `The Usual Suspects (1995)` |'
- en: '| `Monty Python and the Holy Grail (1974)` | `North by Northwest (1959)` |'
  id: totrans-548
  prefs: []
  type: TYPE_TB
  zh: '| `Monty Python and the Holy Grail (1974)` | `North by Northwest (1959)` |'
- en: The results are different from IBCF.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与IBCF不同。
- en: These techniques assumed that the 0s are missing values. However, there is also
    the option to treat them as bad ratings. There is a branch of technique that deals
    with binary matrices only.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术假设0是缺失值。然而，也可以选择将它们视为不良评分。有一类技术仅处理二元矩阵。
- en: Most of the users don't give ratings to items, so there are several real-life
    cases of 0-1 matrices. That's why it's important to know how to build recommender
    systems in these contexts.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户不会对项目进行评分，因此存在几个0-1矩阵的现实生活案例。这就是为什么了解如何在这些环境中构建推荐系统很重要。
- en: Conclusions about collaborative filtering
  id: totrans-552
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协同过滤的结论
- en: This book focuses on collaborative filtering as it's the most popular branch
    of recommendation. Also, it's the only one that is supported by `recommenderlab`.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 本书专注于协同过滤，因为它是最受欢迎的推荐分支。此外，它是唯一由`recommenderlab`支持的。
- en: However, collaborative filtering is not always the most suitable technique.
    This chapter provides an overview of its limitations and some alternatives.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，协同过滤并不总是最合适的技巧。本章概述了其局限性以及一些替代方案。
- en: Limitations of collaborative filtering
  id: totrans-555
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协同过滤的局限性
- en: 'Collaborative filtering has some limitations. When dealing with new users and/or
    new items, the algorithm has these potential problems:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤有一些局限性。在处理新用户和/或新项目时，算法存在以下潜在问题：
- en: If the new user hasn't seen any movie yet, neither the IBCF nor the UBCF is
    able to recommend any item. Unless the IBCF knows the items purchased by the new
    user, it can't work. The UBCF needs to know which users have similar preferences
    to the new one, but we don't know about its ratings.
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果新用户还没有看过任何电影，那么IBCF和UBCF都无法推荐任何项目。除非IBCF知道新用户购买的项目，否则它无法工作。UBCF需要知道哪些用户与新用户有相似偏好，但我们不知道其评分。
- en: If the new item hasn't been purchased by anyone, it will never be recommended.
    IBCF matches items that have been purchased by the same users, so it won't match
    the new item with any of the others. UBCF recommends to each user items purchased
    by similar users, and no one purchased the new item. So, the algorithm won't recommend
    it to anyone.
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果新项目还没有被任何人购买，它将永远不会被推荐。IBCF匹配被相同用户购买的项目，因此它不会将新项目与任何其他项目匹配。UBCF向每个用户推荐由相似用户购买的项目，而没有人购买新项目。因此，算法不会向任何人推荐它。
- en: Then, we might not be able to include them, and this challenge is called a cold
    start problem. In order to include new users and/or items, we need to take account
    of other information such as user profiles and item descriptions.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可能无法包括它们，这个挑战被称为冷启动问题。为了包括新用户和/或新项目，我们需要考虑其他信息，例如用户资料和项目描述。
- en: Another limitation of collaborative filtering is that it takes account of rating
    matrices only. In many contexts, we have some additional information that can
    improve the recommendations. In addition, user preferences are not always available,
    or they might be incomplete.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤的另一个局限性是它只考虑评分矩阵。在许多情况下，我们有一些额外的信息可以提高推荐质量。此外，用户偏好并不总是可用，或者可能是不完整的。
- en: In the upcoming sections, we will look at some other approaches.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨一些其他方法。
- en: Content-based filtering
  id: totrans-562
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于内容的过滤
- en: Another popular branch of techniques is content-based filtering. The algorithms
    start with a description of items, and they don't need to take account of different
    users at the same time. For each user, the algorithms recommend items that are
    similar to its past purchases.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种流行的技术分支是基于内容的过滤。算法从项目的描述开始，并且不需要同时考虑不同的用户。对于每个用户，算法推荐与过去购买相似的项目。
- en: 'Here are the steps to perform a recommendation:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 执行推荐步骤如下：
- en: Define item descriptions.
  id: totrans-565
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义商品描述。
- en: Define user profiles based on purchases.
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据购买行为定义用户资料。
- en: Recommend to each user the items matching its profile
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向每个用户推荐与其资料匹配的商品
- en: User profiles are based on their purchases, so the algorithms recommend items
    similar to past purchases.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 用户资料基于他们的购买行为，因此算法推荐与过去购买相似的商品。
- en: Hybrid recommender systems
  id: totrans-569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合推荐系统
- en: In many situations, we are able to build different collaborative and content-based
    filtering models. What if we take account of all of them at the same time? In
    machine learning, the approach of combining different models usually leads to
    better results.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们能够构建不同的协同过滤和基于内容的过滤模型。如果我们同时考虑所有这些模型会怎样呢？在机器学习中，结合不同模型的策略通常会导致更好的结果。
- en: A simple example is collaborative filtering combined with information about
    users and/or items. In the case of IBCF, the distance between items can take account
    of user preferences and item descriptions at the same time. Even in UBCF, the
    distance between users can take account of their preferences and personal data.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的例子是将协同过滤与用户和/或商品的信息相结合。在IBCF的情况下，商品之间的距离可以同时考虑到用户偏好和商品描述。即使在UBCF中，用户之间的距离也可以考虑到他们的偏好和个人数据。
- en: In the case of recommendation, these models are called hybrids. There are different
    ways to combine filtering models.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 在推荐的情况下，这些模型被称为混合模型。有不同方式来组合过滤模型。
- en: 'Parallelized hybrid systems run the recommenders separately and combine their
    results. There are a few options such as the following ones:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 并行化混合系统分别运行推荐器并合并它们的结果。以下是一些选项：
- en: Define a rule to pick one of the results for each user. The rule can be based
    on the user profile and/or on the recommendation.
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个规则来为每个用户选择一个结果。这个规则可以基于用户资料和/或推荐。
- en: Compute an average of the rankings. The average can be weighted.
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算排名的平均值。平均值可以是加权的。
- en: Pipelined hybrid systems run the recommenders in sequence. The output of each
    model is an input for the next.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 管道化混合系统按顺序运行推荐器。每个模型的输出是下一个模型的输入。
- en: 'Monolithic hybrid systems integrate the approaches in the same algorithm. Some
    options are as follows:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 单一混合系统将方法集成在同一个算法中。以下是一些选项：
- en: '**Feature combination**: This can be learned from different types of inputs.
    For example, an algorithm can take account of ratings, user profiles, and item
    descriptions.'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特征组合**：这可以从不同类型的输入中学习。例如，一个算法可以考虑到评分、用户资料和商品描述。'
- en: '**Feature augmentation**: This builds the input of a recommender by combining
    different data sources.'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特征增强**：这通过结合不同的数据源来构建推荐器的输入。'
- en: Knowledge-based recommender systems
  id: totrans-580
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于知识的推荐系统
- en: There are situations where collaborative and content-based filtering don't work.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些情况下，协同过滤和基于内容的过滤不起作用。
- en: In these contexts, we can use explicit knowledge about users and products, and
    recommendation criteria. This branch of techniques is called knowledge-based.
    There are a variety of techniques, and they depend on the data and on the business
    problem. For this reason, it's hard to define some techniques that are applicable
    in different contexts.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，我们可以使用关于用户和产品的显式知识，以及推荐标准。这一技术分支被称为基于知识的。有各种各样的技术，并且它们依赖于数据和业务问题。因此，很难定义适用于不同情境的一些技术。
- en: Summary
  id: totrans-583
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Among the different techniques for recommendation, collaborative filtering is
    the easiest to implement. In addition, content-based filtering algorithms depend
    on the context, and it's still possible to build them in R.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 在推荐的不同技术中，协同过滤是最容易实现的。此外，基于内容的过滤算法依赖于上下文，并且仍然可以在R中构建它们。
- en: This chapter showed you different approaches to recommendation by focusing on
    collaborative filtering. The next chapter will show you how to test and evaluate
    the recommendation techniques.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过关注协同过滤展示了不同的推荐方法。下一章将展示如何测试和评估推荐技术。
