- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: The Role of DevOps in Building Intelligent MSA Enterprise Systems
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps在构建智能MSA企业系统中的作用
- en: In previous chapters, we covered what MSA is and the advantages of MSA over
    monolithic architecture. Then, we discussed, with examples, how to refactor a
    monolithic application into an MSA, and then talked about different patterns and
    techniques to enhance the performance of an MSA system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们介绍了MSA是什么，以及MSA相对于单体架构的优势。然后，我们通过示例讨论了如何将单体应用程序重构为MSA，接着又讨论了不同的模式和技巧来增强MSA系统的性能。
- en: We also discussed the different ML and DL algorithms with hands-on examples,
    how they can be optimized, and how these ML and DL algorithms can help further
    enhance the stability, resilience, and supportability of an MSA system in order
    to build a “smart MSA” or “intelligent MSA” system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了不同的机器学习和深度学习算法，通过实际案例展示了如何优化它们，以及这些机器学习和深度学习算法如何有助于进一步增强MSA系统的稳定性、弹性和可支持性，以便构建“智能MSA”或“智能MSA”系统。
- en: Over the next few chapters, we will further enhance our ABC-MSA system and try
    to apply what has been learned so far using some hands-on installations and code
    examples. However, before we do so, we need to discuss the different concepts
    of DevOps in this chapter, and how to apply the DevOps process to building and
    running an MSA system.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将进一步增强我们的ABC-MSA系统，并尝试通过一些实际安装和代码示例应用到目前为止所学到的知识。然而，在我们这样做之前，我们需要在本章中讨论DevOps的不同概念，以及如何将DevOps流程应用于构建和运行MSA系统。
- en: In [*Chapter 1*](B18934_01.xhtml#_idTextAnchor014), we briefly talked about
    DevOps in MSA. In this chapter, we will expand on the subject and dive into the
    details of the role of DevOps in building intelligent MSA.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第一章*](B18934_01.xhtml#_idTextAnchor014)中，我们简要介绍了MSA中的DevOps。在本章中，我们将扩展这个主题，深入探讨DevOps在构建智能MSA中的作用。
- en: 'The following topics are covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: DevOps and organizational structure alignment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps与组织结构对齐
- en: DevOps processes in enterprise MSA system operations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业MSA系统运维中的DevOps流程
- en: Applying DevOps from the beginning to operations and maintenance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一开始就将DevOps应用于运维和维护
- en: DevOps and organizational structure alignment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps与组织结构对齐
- en: In a traditional software development organization, the software delivery process
    is matured and built according to how that traditional organization is structured.
    Typically, we have a business team that defines the core business specifications
    and requirements, followed by another team of architects that builds how the system
    is supposed to be structured. In the traditional software model, we also have
    design engineers who write the functional specs, a development team responsible
    for writing the code, a QA team to test the code quality, then a release team,
    an operations team for post-release operations, a support team, and so on.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的软件开发组织中，软件交付流程已经成熟，并且是根据该传统组织的结构构建的。通常，我们有一个业务团队定义核心业务规范和需求，随后是另一组架构师团队构建系统的结构。在传统的软件模型中，我们还有设计工程师编写功能规范，一个负责编写代码的开发团队，一个负责测试代码质量的QA团队，然后是发布团队、发布后的运维团队、支持团队等等。
- en: '![Figure 8.1: Traditional development structure](img/B18934_08_1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1：传统开发结构](img/B18934_08_1.jpg)'
- en: 'Figure 8.1: Traditional development structure'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：传统开发结构
- en: With all these teams involved in the pipeline in the traditional software release
    cycle, mostly sequential hand-offs between teams, silos, dependencies in between,
    cross-communication issues, and the possibility of finger-pointing during the
    process, the release cycle can take weeks or months to finish. For an MSA, this
    is not acceptable.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的软件发布周期中，所有这些团队都参与其中，大多数是团队之间的顺序交接，存在隔阂、依赖关系，跨沟通问题，以及在过程中可能出现的推诿责任，发布周期可能需要数周或数月才能完成。对于MSA来说，这是不可接受的。
- en: Important note
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The whole purpose of MSA is to simplify, speed up, and optimize software releases
    and updates. Applying the traditional methodology to MSA system development just
    doesn’t work and defeats the purpose of adopting an MSA to begin with.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: MSA的整个目的在于简化、加速和优化软件的发布和更新。将传统方法应用于MSA系统开发根本不起作用，也违背了最初采用MSA的目的。
- en: DevOps
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps
- en: DevOps is one of the major processes adopted in modern software development
    organizations to help streamline the release process and optimize it so that an
    organization can make multiple seamless release updates every day with no service
    interruption whatsoever.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是现代软件开发组织中采用的主要流程之一，旨在帮助简化发布流程并优化它，以便组织每天可以无任何服务中断地进行多次无缝发布更新。
- en: DevOps is a combination of processes that allow you to take an application from
    development to operation smoothly. Enterprises need dedicated and well-defined
    DevOps processes to manage their solution development, hosting, and operations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是一组流程的组合，允许您将应用程序从开发到运营平稳过渡。企业需要专门的、定义明确的DevOps流程来管理他们的解决方案开发、托管和运营。
- en: The primary need of a DevOps team is to implement engineering techniques in
    managing the operations of applications. While this sounds simple to do, several
    mundane and random activities are carried out by the operations teams. Streamlining
    these tasks is the biggest challenge in adopting DevOps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps团队的主要需求是实现工程技术在管理应用程序操作中的应用。虽然这听起来很简单，但运营团队会执行许多日常和随机活动。简化这些任务是采用DevOps的最大挑战。
- en: '![Figure 8.2: Teams working together in a DevOps fashion](img/B18934_08_2.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2：以DevOps方式共同工作的团队](img/B18934_08_2.jpg)'
- en: 'Figure 8.2: Teams working together in a DevOps fashion'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：以DevOps方式共同工作的团队
- en: The primary responsibility of the development team is to build the application.
    However, they also need to take care of other aspects of the application, such
    as the application performance, usage analytics, code quality, activity logging,
    and solving code-level errors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队的主要责任是构建应用程序。然而，他们还需要关注应用程序的其他方面，例如应用程序性能、使用分析、代码质量、活动日志和解决代码级别的错误。
- en: On the other hand, the operations team faces a completely different set of problems.
    Their concerns include managing the availability of the applications, ensuring
    performance through higher scalability, and improving the monitoring of the solution
    ecosystem, the allocation of resources, and the overall system analytics. DevOps
    processes handle all of these concerns for all parties involved in the process.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，运营团队面临着完全不同的问题。他们的关注点包括管理应用程序的可用性，通过更高的可扩展性确保性能，并改进解决方案生态系统、资源分配和整体系统分析。DevOps流程处理所有参与方的所有这些关注点。
- en: '![Figure 8.3: DevOps life cycle](img/B18934_08_3.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3：DevOps生命周期](img/B18934_08_3.jpg)'
- en: 'Figure 8.3: DevOps life cycle'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：DevOps生命周期
- en: '*Figure 8**.3* is similar to what we discussed in *Figure 1**.11*. One new
    thing to add here is that the **PLAN** stage is where the software roadmap is
    defined and gets broken down into major requirements, called **epics**. These
    epics are broken down into a collection of short end user requirements, called
    **user stories**. More info on that will come in the next section.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8.3* 与我们之前在 *图1.11* 中讨论的内容相似。这里新增的一点是，**计划**阶段是定义软件路线图并将其分解为主要需求，称为**史诗**。这些史诗被分解为一系列短端用户需求，称为**用户故事**。更多相关信息将在下一节中介绍。'
- en: Well, OK then, if an organization is to adopt an MSA, they should embrace a
    DevOps culture as well.Simple, right? Not quite!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那么，如果一个组织要采用MSA，他们应该接受DevOps文化。简单，对吧？并不完全是这样！
- en: Adopting a DevOps culture within a traditional organizational structure would
    have many misalignments that are guaranteed to hinder the DevOps cycle. The efficiency
    and speed of your release cycle will be as fast as the slowest process in your
    cycle. The software development organization itself has to shift its culture to
    align with DevOps, not the other way around. Many other methodologies and technologies
    will need to be adopted as part of the new shift to DevOps. The organizational
    structure itself may also need to be tweaked to align with the new DevOps methodologies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的组织结构中采用DevOps文化将会有许多不匹配，这肯定会阻碍DevOps周期。您的发布周期效率将取决于周期中最慢的过程。软件开发组织本身必须转变其文化以与DevOps保持一致，而不是相反。许多其他方法和技术也需要作为新DevOps转变的一部分被采用。组织结构本身可能也需要调整以适应新的DevOps方法。
- en: The DevOps team structure
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps团队结构
- en: Setting up a DevOps team is the first step toward organizational transformation.
    However, you cannot expect to have a fully-fledged DevOps team without considering
    the existing organizational structure and how the organization is aligned with
    the existing development cycle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 建立DevOps团队是组织转型的第一步。然而，如果不考虑现有的组织结构和组织如何与现有开发周期保持一致，你不能期望拥有一个完整的DevOps团队。
- en: It is imperative to have an interim phase in which the development and operations
    teams can function reasonably within the existing traditional organization. Both
    traditional Dev and Ops teams then slowly morph themselves into a true DevOps
    structure as the organization modernizes its structure to fit into the new culture.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在现有的传统组织中，让开发和运维团队能够合理运作的过渡阶段是必不可少的。随着组织结构现代化以适应新的文化，传统的开发和运维团队将逐渐转变为真正的DevOps结构。
- en: One of the recommended approaches in the organizational transformation scenario
    is to develop a small DevOps team to work as a link between the existing development
    team and the operations team. The DevOps team’s main objective in this particular
    case is to cross-function between both Dev and Ops teams to map deliverables in
    between, slowly familiarize both teams with the new methodology, and start applying
    basic DevOps methodologies within both teams so that they can be unified in the
    future.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织转型场景中，推荐的方法之一是建立一个小的DevOps团队，作为现有开发团队和运维团队之间的桥梁。在这个特定情况下，DevOps团队的主要目标是跨职能地在开发和运维团队之间进行协调，映射交付成果，逐渐使两个团队熟悉新的方法论，并在两个团队中开始应用基本的DevOps方法论，以便他们可以在未来实现统一。
- en: '![Figure 8.4: The DevOps team as a link between Dev and Ops during the organizational
    transition](img/B18934_08_4.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4：在组织转型期间，DevOps团队作为开发和运维之间的桥梁](img/B18934_08_4.jpg)'
- en: 'Figure 8.4: The DevOps team as a link between Dev and Ops during the organizational
    transition'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4：在组织转型期间，DevOps团队作为开发和运维之间的桥梁
- en: Team communication, collaboration, energy, trust, and a solid understanding
    of the entire development cycle are all paramount to the new DevOps team’s success.
    Therefore, you must identify the right skills and people who can push the activities
    of the DevOps team forward. These skills may include, but are not limited to,
    coding skills, mastering DevOps and **Continuous Integration/Continuous Development**
    (**CI/CD**) tools, and automation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 团队沟通、协作、活力、信任以及对整个开发周期的深入了解对于新DevOps团队的成功至关重要。因此，你必须识别出能够推动DevOps团队前进的正确技能和人员。这些技能可能包括但不限于编码技能、掌握DevOps和**持续集成/持续开发**（**CI/CD**）工具，以及自动化。
- en: As the organizational structure and the teams mature and become more familiar
    with the new methodologies, merging the old Dev, old Ops, and the interim DevOps
    teams into a single new DevOps team becomes essential. Staying in the interim
    stage too long is likely to create even more disruptions than using the traditional
    development cycle for developing the MSA system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织结构和团队成熟，并对新方法论更加熟悉，将旧的Dev、旧的Ops和过渡期的DevOps团队合并为一个单一的新的DevOps团队变得至关重要。在过渡阶段停留时间过长可能会比使用传统开发周期来开发MSA系统造成更多的干扰。
- en: The size of the DevOps team can be as small as 3 engineers, and as large as
    12, depending on the organization’s size, existing structure, and the effort being
    put into the organizational transformation. Usually, a number between 3 and 12
    is ideal. Having a larger team is likely to create more challenges than benefits
    and start negatively impacting the team’s overall performance.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps团队的大小可以从3名工程师小到12名工程师，这取决于组织的规模、现有结构和投入的组织转型努力。通常，3到12人之间的数量是理想的。拥有一个更大的团队可能会带来更多挑战而不是好处，并开始对团队的整体表现产生负面影响。
- en: Begin the process of transformation in a step-by-step manner, starting with
    infrastructure codification, the automation of infrastructure provisioning, source
    code version control, infrastructure monitoring, code build automation, deployment
    automation, test orchestration, cloud service management, and so on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以逐步的方式进行转型过程，从基础设施编码开始，包括基础设施供应自动化、源代码版本控制、基础设施监控、代码构建自动化、部署自动化、测试编排、云服务管理等等。
- en: We know now how the organizational structure is relevant and important when
    embracing DevOps. We still need to understand some other details on the processes
    that will complement DevOps in order to achieve our goal of developing an efficient,
    high-quality MSA system with a short time-to-market and seamless updates.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道，在采用DevOps时，组织结构的相关性和重要性。我们仍需要了解一些其他细节，这些细节将补充DevOps，以便实现我们开发一个高效、高质量、上市时间短且更新无缝的MSA系统的目标。
- en: In the following section, we will examine some other considerations that need
    to be taken into account when developing an MSA system.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将检查在开发MSA系统时需要考虑的其他一些因素。
- en: DevOps processes in enterprise MSA system operations
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业MSA系统操作中的DevOps流程
- en: Microservices development is a fast-paced process and requires all other development
    processes to run at the same pace. Right from the beginning of the development
    of the MSA system, source code management and configuration management are needed
    to provide the correct support to the DevOps team. This is followed by code scans
    and unit test orchestration in the development environment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务开发是一个快速的过程，需要所有其他开发过程以相同的速度运行。从MSA系统的开发一开始，就需要源代码管理和配置管理来为DevOps团队提供正确的支持。这随后是在开发环境中的代码扫描和单元测试编排。
- en: Having specific standard methodologies and best practices applied among the
    different team members is essential to manage the efficiency and fast pace of
    the development cycle. The following discusses what **the Agile methodology of
    development** is and how it helps in DevOps operations, and the importance of
    automation in DevOps.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的团队成员之间应用特定的标准方法和最佳实践对于管理开发周期的效率和快速节奏至关重要。以下将讨论**敏捷开发方法**是什么以及它如何帮助DevOps操作，以及自动化在DevOps中的重要性。
- en: The Agile methodology of development
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发敏捷方法
- en: Defining and accomplishing DevOps processes go hand in hand with adopting a
    development methodology that can fully support and leverage the power of DevOps.
    Although there are many ways to apply DevOps methodologies within your organization,
    the Agile methodology is the one best suited for DevOps.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 定义和实现DevOps流程与采用能够完全支持和利用DevOps力量的开发方法密不可分。尽管在您的组织中应用DevOps方法有多种方式，但敏捷方法是最佳选择。
- en: The Agile development methodology breaks down the main requirements into small
    consumable changes – stories and epics. These small, consumable increments help
    the team achieve short wins throughout the journey of handling the project from
    start to end.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发方法将主要需求分解为可消费的小变化——故事和史诗。这些小而可消费的增量帮助团队在整个从开始到结束处理项目的旅程中实现短期胜利。
- en: 'As shown in *Figure 8**.5*, the Agile team members meet periodically, typically
    every week or two, to plan, define, and agree on the epics and stories. These
    requirements are then put into a backlog and, until the next Agile team meeting,
    the team members work to deliver the requirements from that backlog:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图8.5*所示，敏捷团队成员定期会面，通常是每周或每两周，以规划、定义和同意史诗和故事。然后，将这些需求放入待办事项列表中，直到下一次敏捷团队会议，团队成员将努力从待办事项列表中交付需求：
- en: '![Figure 8.5: Sprint cycle in Agile development](img/B18934_08_5.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5：敏捷开发中的冲刺周期](img/B18934_08_5.jpg)'
- en: 'Figure 8.5: Sprint cycle in Agile development'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5：敏捷开发中的冲刺周期
- en: In Agile development, the weekly or biweekly recurring meetings are called **Sprint
    Planning Meetings**, and the time between these meetings when developers are working
    on the backlog is called a **sprint**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷开发中，每周或每两周定期召开的会议被称为**冲刺规划会议**，而开发人员在处理待办事项之间的这段时间被称为**冲刺**。
- en: In order for team members to check on the status of each defined epic and story,
    they usually meet daily to examine the sprint backlog and refine whatever needs
    to be refined to ensure timely delivery. This daily meeting is called a **Daily
    Scrum**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让团队成员检查每个定义好的史诗和故事的状态，他们通常每天都会开会检查冲刺待办事项列表，并细化需要细化的任何内容，以确保及时交付。这种每日会议被称为**每日站会**。
- en: The Agile team handles continuously evolving user stories and requirements within
    a sprint cycle.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷团队在冲刺周期内处理不断演变的故事和要求。
- en: 'In an endeavor to deliver a high-quality product at a fast pace and low cost,
    Agile teams apply the following principles:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速、低成本地交付高质量的产品，敏捷团队应用以下原则：
- en: No blocking time for day-end activities, such as building and deploying the
    latest code
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有阻碍日终活动的时间，例如构建和部署最新代码
- en: Immediate feedback on the code quality and functional quality of the latest
    code
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对最新代码的质量和功能质量的即时反馈
- en: Strong control, precision monitoring, and continuous improvement of the daily
    activities of the development team
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对开发团队日常活动的严格控制、精确监控和持续改进
- en: Faster decision-making for accepting new stories, releasing developed stories,
    and mitigating risks
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对接受新故事、发布开发故事和缓解风险的决策速度更快
- en: A reduced feedback loop with the testers, end users, and customers
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与测试人员、最终用户和客户的反馈循环缩短
- en: Regular review and introspection of the development and delivery processes
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审查和反思开发和交付流程
- en: A development team abiding by the Agile manifesto and following all the Agile
    principles should always look for ways to remove unwanted roadblocks from their
    process model.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循敏捷宣言并遵循所有敏捷原则的开发团队应始终寻找从其流程模型中移除不必要障碍的方法。
- en: The Agile methodology of development can be applied to develop and deliver all
    types of software projects; however, it is more suited to the development of microservices-based
    applications. It is important to view the scope and structure of microservices
    to align them with Agile and DevOps practices.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 开发方法论的敏捷方法可以应用于开发和交付所有类型的软件项目；然而，它更适合于基于微服务的应用程序的开发。重要的是要考虑微服务的范围和结构，以便与敏捷和DevOps实践相一致。
- en: One of the most important pillars of the Agile and DevOps process is the use
    of on-demand, needs-based resources. This is usually catered to by the use of
    a cloud-based infrastructure. All the resources required by the Agile teams developing
    microservices need to be provisioned promptly and in the right quantity or with
    enough capacity. Cloud infrastructure is best suited to these requirements. Resources
    can be scaled up and down based on need and demand.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷和DevOps流程最重要的支柱之一是使用按需、基于需求的资源。这通常通过使用基于云的基础设施来实现。开发微服务的敏捷团队所需的所有资源都需要及时、正确数量或足够容量地提供。云基础设施最适合这些需求。资源可以根据需求和需求进行扩展和缩减。
- en: On-demand cloud workloads needed during the DevOps cycles are not necessarily
    deployed on the organization’s private infrastructure; they may very well be deployed
    using a public cloud provider, or they may be deployed in a hybrid cloud fashion.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps周期中需要的按需云工作负载不一定部署在组织的私有基础设施上；它们可能非常可能通过公共云提供商部署，或者以混合云的方式部署。
- en: Automation
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化
- en: With the increase in the complexity of the IT infrastructure and MSA adoption
    and the demand for an Agile development cycle and short time-to-market, the need
    to streamline the infrastructure management processes becomes the most pressing
    need for any organization. A big part of managing an MSA’s infrastructure, DevOps,
    CI/CD, and Agile development is automation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 随着IT基础设施的复杂性和MSA采用率的增加，以及对敏捷开发周期和短时间上市的需求，简化基础设施管理流程的需求成为任何组织最紧迫的需求。管理MSA基础设施、DevOps、CI/CD和敏捷开发的一个很大部分是自动化。
- en: 'Automation provides immense benefits to modern organizations. A few of these
    benefits include, but are not limited to, the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化给现代组织带来了巨大的好处。其中一些好处包括但不限于以下内容：
- en: '**Better human resource utilization**: With automation in place, staff can
    focus on other activities that may not be automatable, hence optimizing the use
    of the organization’s workforce, scaling better on other projects, and distributing
    responsibilities according to the available and required skill sets.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更优的人力资源利用**：有了自动化，员工可以专注于其他可能无法自动化的活动，从而优化组织的人力资源使用，更好地在其他项目上进行扩展，并根据可用的和所需的技能集分配责任。'
- en: '**Better time-to-market and better business agility**: An automated process
    can certainly save a lot of time that would be otherwise consumed by manual repetitive
    work and potential dependencies. A job that may traditionally take days can be
    done in minutes when automation is in place.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的上市时间和更好的业务敏捷性**：自动化流程无疑可以节省大量时间，这些时间原本会被手动重复工作和潜在的依赖性所消耗。在自动化实施的情况下，一项可能传统上需要几天才能完成的工作可以在几分钟内完成。'
- en: '**Higher reliability and greater business continuity**: Complex and time-consuming
    tasks are simplified into simple keystrokes or mouse clicks. Accordingly, human
    error is significantly minimized, and operational reliability is largely increased.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更高的可靠性和更大的业务连续性**：复杂和耗时的任务简化为简单的按键或鼠标点击。相应地，人为错误显著减少，运营可靠性大幅提高。'
- en: '**Better compliance**: Compliance can be built into automation tools, providing
    better policy enforcement with minimum effort. Compliance includes industry compliance,
    best practices, and organizational standards as well. Industry standards may include
    the **General Data Protection Regulation** (**GDPR**), **Payment Card Industry
    Data Security Standard** (**PCI DSS**), **Health Insurance Portability and Accountability
    Act** (**HIPAA**), and **Safeguard Computer Security Evaluation** **Matrix** (**SCSEM**).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的合规性**：合规性可以集成到自动化工具中，以最小的努力提供更好的政策执行。合规性包括行业合规性、最佳实践和组织标准。行业标准可能包括**通用数据保护条例**（**GDPR**）、**支付卡行业数据安全标准**（**PCI
    DSS**）、**健康保险可携带性和问责法案**（**HIPAA**）和**计算机安全保护评估矩阵**（**SCSEM**）。'
- en: Automation is often used for the fast-paced and high-quality delivery of applications.
    DevOps is the key process that helps automate various phases of development and
    delivery. In fact, DevOps is the culture that helps organizations avoid repeated,
    time-consuming manual steps and efforts. There are various tools, frameworks,
    and processes within the ambit of DevOps that are needed for successful automation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化常用于快速和高品质的应用交付。DevOps是帮助自动化开发交付各个阶段的关键过程。实际上，DevOps是一种文化，帮助组织避免重复的、耗时的人工步骤和努力。DevOps范围内有各种工具、框架和流程，这些都是成功自动化所必需的。
- en: Most of the challenges within DevOps and MSA operations cannot be addressed
    manually – hence, the need for automation in DevOps and MSA is extremely high.
    Automation is needed in every area of delivery, from the time the microservice
    is developed to the time the microservice is deployed in the production environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps和MSA操作中的大多数挑战都无法手动解决——因此，在DevOps和MSA中自动化需求极高。从微服务开发到部署在生产环境中的每个交付环节都需要自动化。
- en: '![Figure 8.6: The four pillars of DevOps](img/B18934_08_6.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6：DevOps的四个支柱](img/B18934_08_6.jpg)'
- en: 'Figure 8.6: The four pillars of DevOps'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：DevOps的四个支柱
- en: 'In essence, modern enterprise system development needs DevOps to be able to
    respond to the dynamic and constantly growing needs of organizations, and DevOps
    depends heavily on four pillars: **MSA**, **Agile Development**, **CI/CD**, and
    **Automation**. These four pillars, as shown in the preceding diagram, play a
    significant part in DevOps success, and hence, in the success of modern enterprise
    system development.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，现代企业系统开发需要DevOps来应对组织动态和不断增长的需求，而DevOps在很大程度上依赖于四个支柱：**MSA**、**敏捷开发**、**CI/CD**和**自动化**。如图所示，这四个支柱在DevOps成功中起着重要作用，因此，在现代企业系统开发的成功中也起着重要作用。
- en: Moreover, as we will discuss later in this chapter, AI applications are very
    hard to test and manage manually, and automation plays a big part in managing
    the entire DevOps cycle of AI applications.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如我们将在本章后面讨论的，人工智能应用非常难以手动测试和管理，自动化在管理人工智能应用的整个DevOps周期中起着至关重要的作用。
- en: Applying DevOps from the start to operations and maintenance
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从一开始就将DevOps应用于运维和维护
- en: Every step of a microservices rollout requires a corresponding DevOps step.
    The confluence of the microservices development process with the DevOps process
    helps empower the Dev and Ops teams. The following is a detailed look at different
    facets of the DevOps process.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务部署的每一步都需要相应的DevOps步骤。微服务开发过程与DevOps过程的结合有助于赋予开发和运维团队权力。以下是对DevOps过程不同方面的详细探讨。
- en: Source code version control
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源代码版本控制
- en: 'The Agile teams working on microservices require specific version control to
    be in place. Three aspects of version control need to be carefully defined for
    each microservice:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务上工作的敏捷团队需要实施特定的版本控制。对于每个微服务，需要仔细定义版本控制的三个方面：
- en: The setup and management of version control tools, such as Git, SVN, CVS, and
    Mercurial.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制工具（如Git、SVN、CVS和Mercurial）的设置和管理。
- en: The version format and nomenclature for the application, such as a format to
    indicate the application version, the major-change version, the minor-change version,
    and the build or patch number – for example, version 2.3.11.7.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的版本格式和命名规范，例如表示应用程序版本的格式、主要更改版本、次要更改版本以及构建或补丁号——例如，版本2.3.11.7。
- en: The branching strategy for the source code. This is extremely important for
    microservices development with multiple teams working on separate microservices.
    Teams need to create separate repositories for each microservice and fork out
    different branches for each major or minor enhancement.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码的分支策略。这对于由多个团队分别开发不同微服务的微服务开发来说至关重要。团队需要为每个微服务创建单独的仓库，并为每个主要或次要增强创建不同的分支。
- en: Configuration management and everything as a code
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置管理和一切作为代码
- en: Configuration management is the practice of managing changes systematically
    across various environments so that the functional and technical performance of
    the system is at its best. This includes all the environments needed to develop,
    test, deploy, and run the MSA system components.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理是一种系统性地管理跨各种环境变化的实践，以确保系统的功能和性能处于最佳状态。这包括开发、测试、部署和运行MSA系统组件所需的所有环境。
- en: With so many moving parts in an MSA enterprise system, it is essential to identify
    which parts of the system need their configuration to be maintained and managed.
    Once these parts have been identified, their configuration will need to be controlled
    and regularly audited to maintain the overall health of the entire MSA system.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在MSA企业系统中，有如此多的动态部分，确定哪些系统部分需要维护和管理其配置至关重要。一旦确定了这些部分，它们的配置就需要得到控制并定期审计，以保持整个MSA系统的整体健康。
- en: As the DevOps process matures, and as the MSA system components mature, things
    become very complex to manage and configure manually, and automation becomes critical
    for smooth and successful configuration management.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 随着DevOps流程的成熟以及MSA系统组件的成熟，手动管理和配置变得越来越复杂，自动化对于顺利和成功地进行配置管理变得至关重要。
- en: Configuration management tools can automatically and seamlessly manage the different
    aspects of the system components. These tools make adjustments as needed during
    runtime and whenever else, and in accordance with the version of the application,
    the type of change, and the system load.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理工具可以自动且无缝地管理系统组件的不同方面。这些工具在运行时以及任何时候根据需要做出调整，并按照应用程序的版本、更改类型和系统负载进行操作。
- en: One of the objectives of DevOps is to codify all the aspects of development
    as well as deployment, including the infrastructure and the configuration. The
    entire environment can be built from the ground up and quickly provisioned using
    **Infrastructure-as-a-Code** (**IaaC**) and **Configuration-as-a-Code** (**CaaC**).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的一个目标是将开发以及部署的所有方面进行编码化，包括基础设施和配置。整个环境可以从头开始构建，并使用**基础设施即代码**（**IaaC**）和**配置即代码**（**CaaC**）快速部署。
- en: IaaC and CaaC are essential components of configuration management. Both are
    descriptive files typically written in languages such as Ansible, Terraform, Puppet,
    Chef, or CloudFormation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: IaaC和CaaC是配置管理的必要组件。两者通常都是描述性文件，通常用Ansible、Terraform、Puppet、Chef或CloudFormation等语言编写。
- en: With IaaC and CaaC, DevOps teams can easily spin up new workloads for different
    purposes. Workloads can, for example, be configured for testing, specify the properties
    of each workload based on the test cases involved, and control deviations from
    the main workload parameters.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IaaC和CaaC，DevOps团队可以轻松地为不同目的启动新的工作负载。例如，可以根据测试用例配置工作负载，指定每个工作负载的属性，并控制与主要工作负载参数的偏差。
- en: CI/CD
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI/CD
- en: As pointed out earlier in [*Chapter 1*](B18934_01.xhtml#_idTextAnchor014), CI/CD
    is an integral part of DevOps and plays the most important role in releasing MSA
    system updates. CI/CD ensures that the code is immediately and periodically built
    and pushed into the CI/CD pipeline for quick testing and feedback.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文在[*第一章*](B18934_01.xhtml#_idTextAnchor014)中指出的，CI/CD是DevOps的一个组成部分，在发布MSA系统更新中扮演着最重要的角色。CI/CD确保代码立即且定期构建并推送到CI/CD管道，以便快速测试和反馈。
- en: As shown in the following CI/CD pipeline diagram, developers focus primarily
    on working on the sprint backlog and push the code updates to the team repository,
    and it gets downloaded from there to the CI server.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下CI/CD管道图所示，开发者主要专注于处理冲刺待办事项，并将代码更新推送到团队仓库，然后从那里下载到CI服务器。
- en: '![Figure 8.7: CI/CD pipeline and process flow](img/B18934_08_7.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7：CI/CD管道和流程](img/B18934_08_7.jpg)'
- en: 'Figure 8.7: CI/CD pipeline and process flow'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7：CI/CD管道和流程
- en: The CI server automatically runs preset test cases against the code and then
    pushes the code to the testers upon it passing all the test cases. Should any
    of the automated tests fail, the code doesn’t move further along the pipeline,
    and an error report of all the test failures is sent back to the developers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: CI服务器会自动对代码运行预设的测试用例，然后在通过所有测试用例后推送代码到测试人员。如果任何自动化测试失败，代码不会继续沿着管道前进，并将所有测试失败的错误报告发送回开发者。
- en: In contrast to the traditional development cycle, in which developers may find
    out about their code test results days or weeks after their code has been submitted
    for testing, in CI/CD, developers will get a report of their code problems within
    minutes. This early visibility into code errors gives developers the chance to
    immediately work on fixing these errors while working on the original code. Hence,
    they can continuously enhance the code for release and deployment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的开发周期相比，在传统开发周期中，开发者可能要在代码提交测试后几天或几周后才能得知代码的测试结果，而在CI/CD中，开发者将在几分钟内收到代码问题的报告。这种对代码错误的早期可见性给了开发者立即在编写原始代码的同时修复这些错误的机会。因此，他们可以持续改进代码以进行发布和部署。
- en: Upon the code successfully passing all CI server tests, the code is tested further
    by the DevOps team testers. Testers then either push the code to release and deployment
    if no errors are found or return it for further fixes and enhancements.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码成功通过所有CI服务器测试后，DevOps团队测试人员将进一步测试代码。如果未发现错误，测试人员将代码推送到发布和部署，或者将其退回以进行进一步的修复和改进。
- en: This CI/CD pipeline enables developers to make frequent code merges; do unit
    testing, integration testing, code scans, and smoke testing; release; and deploy
    multiple times every single day – something that is not remotely possible using
    a traditional development cycle.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CI/CD管道使开发者能够频繁地进行代码合并；进行单元测试、集成测试、代码扫描和冒烟测试；每天多次发布和部署——这在传统的开发周期中几乎是不可能的。
- en: The DevOps team needs to identify a tool that can manage the entire CI/CD pipeline.
    DevOps helps add hooks and steps to include external executables and scripts for
    performing additional activities during the code build and deployment. Some of
    the most common and widely used CI/CD tools include Jenkins, Bamboo, and CircleCI.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps团队需要确定一个可以管理整个CI/CD管道的工具。DevOps有助于添加钩子和步骤，以在代码构建和部署期间执行额外的活动，包括外部可执行文件和脚本。一些最常见和广泛使用的CI/CD工具包括Jenkins、Bamboo和CircleCI。
- en: Code quality assurance
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码质量保证
- en: Ensuring high-quality code, both in terms of coding standards and security vulnerabilities,
    is another important activity within DevOps. This is in addition to ensuring the
    accuracy of the application’s business logic itself.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 确保代码质量，无论是从编码标准还是安全漏洞的角度来看，都是DevOps中的重要活动之一。这还包括确保应用程序本身业务逻辑的准确性。
- en: Code quality touches upon the concept of static and dynamic analysis of the
    code. Static analysis of the code is performed on the code itself before it gets
    executed. It is meant to uncover code smells, dirty code, vulnerable libraries,
    malicious openings in the code, and violations of code standards or best practices.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 代码质量涉及到代码的静态和动态分析概念。代码的静态分析在代码执行之前进行。它的目的是揭示代码异味、脏代码、易受攻击的库、代码中的恶意漏洞以及违反代码标准或最佳实践。
- en: Dynamic code analysis is performed on the application during or after its execution.
    It is meant to uncover runtime errors due to the load, unexpected input, or unexpected
    runtime conditions in general.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 动态代码分析在应用程序执行期间或之后进行。它的目的是揭示由于负载、意外输入或一般意外运行条件导致的运行时错误。
- en: Many tools that help perform code scans as part of CI/CD are available. These
    include, but are not limited to, SonarQube, Fortify SCA, and Raxis.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工具可以帮助在CI/CD中执行代码扫描。这些工具包括但不限于SonarQube、Fortify SCA和Raxis。
- en: Important note
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Testing AI applications is more challenging than testing regular applications.
    Certain aspects of AI applications do not exist in regular applications.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 测试AI应用程序比测试常规应用程序更具挑战性。AI应用程序的某些方面在常规应用程序中不存在。
- en: AI applications are non-deterministic – how they will behave in real situations
    is somewhat uncertain. Accordingly, expecting a specific outcome during AI application
    testing may not be viable. It may very well happen that the application being
    tested produces different outcomes with the same input or test criteria.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: AI应用是非确定性的——它们在实际情况下会如何表现有些不确定。因此，在AI应用测试期间期望特定的结果可能并不可行。完全有可能发生的情况是，正在测试的应用在相同的输入或测试标准下产生不同的结果。
- en: Most AI applications are as good as their training data quality, which makes
    AI applications subject to training data bias or unconscious bias. Imagine, for
    example, you are writing an AI module to predict home prices in any part of the
    United States, but your training data is 90% from a specific region within a specific
    state. Your AI model will accordingly be biased toward the area from which 90%
    of the training data came, so testing the AI application may require running tests
    against the training data itself. This may sound easy in this home price prediction
    case, but how would you make sense of other pieces of training data in more complex
    situations?
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数AI应用的质量与其训练数据质量相当，这使得AI应用容易受到训练数据偏差或无意识偏差的影响。例如，假设你正在编写一个AI模块来预测美国任何地区的房价，但你的训练数据90%来自一个特定州内的特定地区。你的AI模型将相应地偏向于90%训练数据来源的地区，因此测试AI应用可能需要针对训练数据进行测试。这在房价预测案例中可能听起来很简单，但在更复杂的情况下，你如何理解其他训练数据呢？
- en: Let’s assume that we can accurately test AI/DL applications despite all the
    training data challenges and their non-deterministic behavior. AI/DL applications
    constantly learn, train, and change their behavior, so by the time the code is
    running in production, the application is already learning and changing its behavior.
    The tests that have been completed a day or a couple of days earlier may not be
    valid anymore.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 假设尽管存在所有这些训练数据挑战及其非确定性行为，我们仍然可以准确地测试AI/深度学习（DL）应用。AI/深度学习应用不断学习、训练和改变其行为，因此当代码在生产环境中运行时，应用已经在学习和改变其行为。一天或几天前完成的测试可能已经不再有效。
- en: There are, of course, ways to overcome all these challenges. First of all, you
    will need to curate and validate the training data. You may need to perform both
    automated and manual tasks to validate the training data, including checking for
    data biases, data skews, distribution levels, and so on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有方法可以克服所有这些挑战。首先，你需要对训练数据进行整理和验证。你可能需要执行自动和手动任务来验证训练数据，包括检查数据偏差、数据倾斜、分布水平等。
- en: We will also need to test the AI algorithm and how the regression model performs
    against different sets of test data. The variance and mean square error of the
    model will also need to be examined and analyzed.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要测试AI算法以及回归模型对不同测试数据集的表现。模型的方差和均方误差也需要被检查和分析。
- en: AI application testing tools are available on the market today and grow in number
    every day. The quality of these tools is constantly improving and can be a huge
    help to DevOps teams. AI testing tools are usually specialized based on the AI
    algorithms being used. Examples of different AI test tools include, but are not
    limited to, Applitools, Sauce Labs, and Testim.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 目前市场上已有AI应用测试工具，并且每天都在增加。这些工具的质量在不断提高，并且可以为DevOps团队提供巨大的帮助。AI测试工具通常根据所使用的AI算法进行专门化。不同的AI测试工具的例子包括但不限于Applitools、Sauce
    Labs和Testim。
- en: Monitoring
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控
- en: With the advent of DevOps, standard monitoring has upgraded to continuous monitoring
    and covers the entire development cycle, from planning to deployment and operations.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 随着DevOps的出现，标准监控已升级为持续监控，并涵盖了整个开发周期，从规划到部署和运营。
- en: Monitoring covers different aspects of the DevOps process and the components
    needed for the entire application to be developed, tested, deployed, and released,
    as well as for post-release operations to ensue. This includes infrastructure
    monitoring and the application itself.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 监控涵盖了DevOps流程的不同方面以及整个应用程序开发、测试、部署和发布所需的组件，以及发布后的运营。这包括基础设施监控和应用程序本身。
- en: Infrastructure monitoring includes the on-premises infrastructure, virtual cloud
    environments, networks, communications, and security. Application monitoring,
    on the other hand, involves performance, scalability, availability, and reliability.
    Resource monitoring includes the management and distribution of resources across
    multiple pod replicas within and beyond the physical or virtual workloads.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施监控包括本地基础设施、虚拟云环境、网络、通信和安全。另一方面，应用程序监控涉及性能、可伸缩性、可用性和可靠性。资源监控包括在物理或虚拟工作负载内部和外部多个Pod副本中管理和分配资源。
- en: DevOps monitoring helps team members respond to any operational issues that
    arise during the DevOps pre-release or post-release cycles, hence enabling the
    DevOps team to be able to rectify, readjust, and make any necessary changes during
    the CI/CD pipeline.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps监控帮助团队成员响应DevOps预发布或发布周期中出现的任何运营问题，从而使DevOps团队能够在CI/CD管道中纠正、调整并做出任何必要的更改。
- en: Ideally, monitoring alerts trigger automatic actions to try to respond and fix
    a problem that has been detected. However, knowing that’s not always possible,
    manual intervention is usually needed. Monitoring helps the DevOps team shift
    left to earlier stages in the development cycle to enhance their test cases, and
    accordingly, increase the application quality and minimize operational problems
    later on in the development cycle.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，监控警报会触发自动操作，尝试响应和修复已检测到的问题。然而，知道这并不总是可能的，通常需要手动干预。监控有助于DevOps团队将测试用例向开发周期的早期阶段转移，从而提高应用程序质量并减少开发周期晚期的运营问题。
- en: AI algorithms, as discussed earlier in [*Chapter 7*](B18934_07.xhtml#_idTextAnchor079),
    and as we will give more examples of later in this book, can detect any application
    behavior anomalies and automatically try to self-heal to prevent application operations
    from being disrupted.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的[*第7章*](B18934_07.xhtml#_idTextAnchor079)中讨论的AI算法，以及我们将在本书后面给出更多示例，可以检测任何应用程序行为异常，并自动尝试自我修复，以防止应用程序操作中断。
- en: There are many environment-specific tools available for DevOps monitoring, including
    Nagios, Prometheus, Splunk, Dynatrace, and AWS CloudWatch for AWS cloud environments.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps监控方面，有许多针对特定环境的工具可用，包括Nagios、Prometheus、Splunk、Dynatrace以及适用于AWS云环境的AWS
    CloudWatch。
- en: Disaster management
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灾难管理
- en: Disaster management is an important yet often overlooked part of the DevOps
    process. In most cases, application recovery is seen as an extended part of the
    deployment process. In the cloud, it is generally considered to be an offshoot
    of configuring availability zones and regions for hosting an application instead
    of a full-fledged environment challenge.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 灾难管理是DevOps流程中的重要部分，但往往被忽视。在大多数情况下，应用程序恢复被视为部署过程的扩展部分。在云中，它通常被视为配置应用程序托管区域和区域以配置可用性的一个分支，而不是一个全面的环境挑战。
- en: In the case of microservices, identifying a disaster is a greater challenge
    than averting, mitigating, or managing it. Luckily, the CI/CD environment itself
    can be leveraged to test and simulate disaster scenarios. Moreover, the use of
    external repositories can be leveraged to recover code down to specific version
    numbers.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务的情况下，识别灾难比避免、减轻或管理它更具挑战性。幸运的是，CI/CD环境本身可以被利用来测试和模拟灾难场景。此外，利用外部仓库可以恢复到特定的版本号。
- en: Nevertheless, setting up a completely separate set of environment replicas in
    different geographical locations, setting automatic failover, and load balancers
    in between can be great ways of maintaining business continuity and an uninterrupted
    CI/CD pipeline.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，在不同的地理位置设置一组完全独立的副本环境，设置自动故障转移和中间的负载均衡器，可以成为维护业务连续性和不间断的CI/CD管道的绝佳方式。
- en: Using IaaC and CaaC tools to automate recovery is extremely helpful in bringing
    your applications and systems back online in minimal time in case of interruption.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IaaC和CaaC工具来自动化恢复，在发生中断的情况下，可以在最短的时间内将应用程序和系统恢复在线，这非常有帮助。
- en: You still need to define an incident response playbook as part of your DevOps.
    This playbook should include a detailed plan of what should be executed in each
    scenario. For example, a response to a natural disaster is likely different from
    a response to a data breach incident. The playbook needs to have different scenarios
    and a list of roles and procedures that need to be taken to prevent or minimize
    system interruptions or data loss.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然需要定义一个事件响应手册作为 DevOps 的一部分。这个手册应包括在每个场景中应执行的具体计划。例如，对自然灾害的响应可能与对数据泄露事件的响应不同。该手册需要包含不同的场景以及需要采取的角色和程序列表，以防止或最小化系统中断或数据丢失。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'For MSA systems to achieve the goals for which they were created, a certain
    set of methodologies will need to go hand in hand with developing an MSA system.
    In this chapter, we discussed a few of the most critical practices to embrace
    when developing an MSA system: the Agile methodology of development, DevOps processes
    and practices, and CI/CD pipeline management.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现 MSA 系统创建的目标，需要与开发 MSA 系统相结合的一定方法。在本章中，我们讨论了在开发 MSA 系统时需要采纳的一些最关键实践：敏捷开发方法、DevOps
    流程和实践，以及 CI/CD 管道管理。
- en: We also discussed how important it is to set up a DevOps team for managing microservices.
    We have given examples of tools to use to apply and manage DevOps when building
    our MSA system.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了建立 DevOps 团队来管理微服务的重要性。我们提供了在构建我们的 MSA 系统时应用和管理 DevOps 的工具示例。
- en: In the next chapter, we will take our first step in building an intelligent
    MSA system. We will talk about Docker, what it is, and why it’s relevant. We will
    also create isolated and independent virtual environments using Docker and then
    link these environments (or containers) together to deliver a simple functional
    part of our MSA system.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将迈出构建智能 MSA 系统的第一步。我们将讨论 Docker，它是什么，以及为什么它相关。我们还将使用 Docker 创建隔离和独立的虚拟环境，然后将这些环境（或容器）连接起来，以提供我们
    MSA 系统的一个简单功能部分。
