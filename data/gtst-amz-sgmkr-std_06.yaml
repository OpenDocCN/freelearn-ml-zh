- en: '*Chapter 4*: Building a Feature Repository with SageMaker Feature Store'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：使用SageMaker Feature Store构建特征存储库'
- en: A feature store allows you to store features for **machine learning** (**ML**)
    training and inference. It serves as a central repository for teams collaborating
    on ML use cases to prevent duplicating and confusing efforts when creating features.
    Amazon SageMaker Feature Store makes storing and accessing training and inference
    data in the cloud easier, faster, and reproducible. With a SageMaker Feature Store
    instance built for your ML life cycle, you will be able to manage features, which
    are always evolving, and use them for training and inference with the confidence
    that you are using the right ones. You will also be able to collaborate with your
    colleagues more effectively by having a single source of truth when it comes to
    ML features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 特征存储允许您存储用于**机器学习**（**ML**）训练和推理的特征。它作为协作团队在ML用例中创建特征时的中央存储库，以防止重复和混淆的努力。Amazon
    SageMaker Feature Store使在云中存储和访问训练和推理数据变得更加容易、快速且可重复。通过为您的ML生命周期构建的SageMaker Feature
    Store实例，您将能够管理始终在演变的特征，并使用它们进行训练和推理，从而有信心使用正确的特征。您还将能够通过拥有关于ML特征的单一事实来源，与您的同事更有效地协作。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the concept of a feature store
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解特征存储的概念
- en: Getting started with SageMaker Feature Store
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用SageMaker Feature Store
- en: Accessing features from SageMaker Feature Store
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从SageMaker Feature Store访问特征
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you need to access the code in [https://github.com/PacktPublishing/Getting-Started-with-Amazon-SageMaker-Studio/tree/main/chapter04](https://github.com/PacktPublishing/Getting-Started-with-Amazon-SageMaker-Studio/tree/main/chapter04).
    You need to make sure your IAM execution role has the `AmazonSageMakerFeatureStoreAccess`
    policy.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要访问[https://github.com/PacktPublishing/Getting-Started-with-Amazon-SageMaker-Studio/tree/main/chapter04](https://github.com/PacktPublishing/Getting-Started-with-Amazon-SageMaker-Studio/tree/main/chapter04)中的代码。您需要确保您的IAM执行角色具有`AmazonSageMakerFeatureStoreAccess`策略。
- en: Understanding the concept of a feature store
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解特征存储的概念
- en: 'Consider the following scenario: you are a data scientist working on an ML
    project in the automotive industry with a fellow data scientist and a few data
    engineers. You are responsible for modeling vehicle fuel efficiency, while your
    fellow data scientist is responsible for modeling vehicle performance. Both of
    you are using data coming from car manufacturers that your company is working
    with that is preprocessed and stored in the cloud by the data engineers in the
    team as input to the models.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下场景：您是一位在汽车行业从事ML项目的数据科学家，与另一位数据科学家和几位数据工程师一起工作。您负责建模车辆燃油效率，而您的同事负责建模车辆性能。你们两人都使用来自汽车制造商的数据，这些数据由团队中的数据工程师在云中预处理并存储，作为模型的输入。
- en: The data is stored in disparate sources, such as Amazon S3, Amazon **Relational
    Database Service** (**RDS**), and a data lake built on AWS, depending on the nature
    of the source data. You and your fellow data scientist have been reaching out
    separately to the data engineering team to get the data processed in certain ways
    that work best for your respective modeling exercises. You do not realize that
    your fellow data scientist's models actually share some common features, but a
    new set of features is created and maintained in both of your workspaces.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储在不同的来源，例如Amazon S3、Amazon **关系数据库服务**（**RDS**）以及建立在AWS上的数据湖，具体取决于源数据的性质。您和您的数据科学家同事分别联系数据工程团队，以获取以最适合您各自建模练习的方式处理的数据。您没有意识到您的数据科学家同事的模型实际上共享一些共同的特征，但在您和您的工作空间中都创建并维护了一套新的特征。
- en: As the project goes on, the data engineering team is reporting that it has become
    a challenge to manage the constantly growing data and feature footprint. It is
    also cumbersome for you to track versions of features when there is a change in
    the data processing pipeline and/or the car manufacturers amend and update the
    catalogs. You find yourself in a constant struggle keeping track of what models
    are trained with what set or versions of features from a multitude of tables and
    files for your code and notebooks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着项目的进行，数据工程团队报告称，管理不断增长的数据和特征足迹已成为一项挑战。当数据处理管道发生变化，或者汽车制造商修改和更新目录时，跟踪特征版本也变得繁琐。你发现自己一直在努力追踪哪些模型使用了哪些特征集或版本，这些特征来自众多表格和文件，用于你的代码和笔记。
- en: 'Here''s a summary of the challenges that the team is facing:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对团队面临挑战的总结：
- en: Data and features are not centrally stored, even though there is a central data
    engineering team.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管有一个中央数据工程团队，但数据和特征并没有集中存储。
- en: The data scientists do not have visibility and knowledge of features that are
    created and used by each other; therefore, the default is to create your own.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据科学家没有看到彼此创建和使用的特征，因此默认情况下是创建自己的。
- en: Consequently, data and features are duplicated, burdening the data engineering
    team.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，数据和特征被重复，给数据工程团队带来了负担。
- en: An update to the feature means another copy of data that someone needs to manage.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征的更新意味着需要有人管理的数据的另一个副本。
- en: Model and data lineage are difficult to maintain over the iteration of the ML
    life cycle.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在机器学习生命周期的迭代中，模型和数据血缘难以维护。
- en: A feature store is a relatively new concept in an ML life cycle that is purposefully
    designed to address the challenges observed in the preceding scenario. The goal
    of a feature store is to have a centralized store *for all features*, *for all
    models*, *for training and inference*, and *for all times*. *For all features*
    means that we want to have features from various sources to funnel into one central
    place and to be able to find them easily. *For all models* means that we want
    teams building various models to use the features from only one central place.
    *For training and inference* means that we want to retrieve the same features
    for training and for hosting purposes while meeting different runtime requirements
    in training and inference applications. *For all times* means that we want to
    keep versions of features for their entire lifetime, regardless of updates and
    changes in one single feature store, so that data scientists can access different
    versions of the features for different time slices.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 特征存储是机器学习生命周期中的一个相对较新的概念，它旨在解决前述场景中观察到的挑战。特征存储的目标是拥有一个集中存储所有特征的存储库，用于所有模型，用于训练和推理，以及用于所有时间。*所有特征*意味着我们希望将来自不同来源的特征汇集到一个中心位置，并能够轻松找到它们。*所有模型*意味着我们希望构建各种模型的团队只从一个中心位置使用特征。*训练和推理*意味着我们希望在训练和托管目的时检索相同的特征，同时满足训练和推理应用中不同的运行时要求。*所有时间*意味着我们希望保留特征的整个生命周期版本，无论单个特征存储库中单个特征的更新和变化如何，以便数据科学家可以访问不同时间段的特征版本。
- en: Let's look at the key components and concepts in SageMaker Feature Store that
    make it possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看SageMaker特征存储中的关键组件和概念，这些组件和概念使其成为可能。
- en: Understanding an online store
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解在线商店
- en: An online store is a feature storage option in SageMaker Feature Store that
    is designed to stay *online* at all times. *Online* means that the store should
    behave like an online application, one that responds to data read/write access
    requests immediately. *Immediately* can be subjective, but in technical terms,
    it means low response latency so that users do not feel the lapse. In addition
    to low latency, another aspect that makes the online store "online" is the high
    throughput of transactions that it can serve at the same time. Imagine hundreds
    of thousands of users visiting your application; you do not want to disappoint
    your awesome customers. You want your online application to be capable of handling
    traffic with high throughput and low latency.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在SageMaker特征存储中，在线商店是一种特征存储选项，旨在始终处于*在线*状态。*在线*意味着该存储库应该表现得像一个在线应用程序，能够立即响应用户的数据读写访问请求。"立即"可能具有主观性，但在技术术语中，这意味着低响应延迟，以便用户不会感到延迟。除了低延迟之外，另一个使在线商店"在线"的方面是它可以同时处理的交易高吞吐量。想象一下，有数十万用户访问你的应用程序；你不想让你的优秀客户失望。你希望你的在线应用程序能够以高吞吐量和低延迟处理流量。
- en: Why do we need an online store that has low latency? In many ML use cases, the
    ML inference needs to respond to a user's action on the system *immediately* to
    provide the inference results back to the user. The inference process typically
    includes querying features for a particular data point and sending the features
    as a payload to the ML model. For example, an auto insurance online quote application
    has an ML model that takes a driver's information to predict their risk level
    and suggest a quote. This application needs to pull vehicle-related features from
    a feature store based on the car make provided by the user. You'd expect a modern
    application to return a quote immediately. Therefore, an ideal architecture should
    keep the latency of both pulling features from a feature store and making an ML
    inference low. We can't have a system where the ML model responds immediately
    but takes seconds or minutes to gather features from various databases and locations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要一个低延迟的在线商店？在许多机器学习用例中，机器学习推理需要立即响应用户在系统上的操作，并将推理结果返回给用户。推理过程通常包括查询特定数据点的特征，并将特征作为有效载荷发送到机器学习模型。例如，一个在线汽车保险报价应用程序有一个机器学习模型，它接受驾驶员信息来预测他们的风险水平并提出报价。该应用程序需要根据用户提供的汽车制造商从特征商店中提取与车辆相关的特征。您期望现代应用程序能够立即返回报价。因此，理想的架构应该将从特征商店提取特征和进行机器学习推理的延迟都保持得非常低。我们不能有一个机器学习模型可以立即响应，但需要几秒钟或几分钟来从各种数据库和位置收集特征的系统。
- en: Understanding an offline store
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解离线商店
- en: An offline store in SageMaker Feature Store is designed to provide much more
    versatile functionality by keeping all the records over time for use. You will
    be able to access features at any given condition and time for a variety of use
    cases. But this comes at the cost of higher-latency response times for requests
    to an offline store, because the offline store uses slower and less expensive
    storage.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker Feature Store 中的离线商店旨在通过保留所有记录以供使用来提供更灵活的功能。您将能够根据各种用例在任何给定条件和时间访问特征。但这也带来了对离线商店请求的更高延迟响应时间，因为离线商店使用较慢且成本较低的存储。
- en: An offline store complements the online store for ML use cases where low latency
    isn't a requirement. For example, when building an ML training dataset to reproduce
    a particular model for compliance purposes, you need to access historic features
    in order to build a model that was created in the past. ML training is typically
    not expected to complete within seconds anyway, so you don't necessarily need
    sub-second performance when querying a feature store for training data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 离线商店补充了在线商店，对于不需要低延迟的机器学习用例非常有用。例如，当构建用于合规目的的机器学习训练数据集以重现特定模型时，您需要访问历史特征以构建过去创建的模型。通常，机器学习训练并不期望在几秒钟内完成，因此在查询特征商店以获取训练数据时，您不一定需要亚秒级性能。
- en: Now that we've got a good understanding of the key components and concepts in
    SageMaker Feature Store, let's get hands-on with a use case.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对 SageMaker Feature Store 中的关键组件和概念有了很好的理解，让我们通过一个用例来实际操作一下。
- en: Getting started with SageMaker Feature Store
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 SageMaker Feature Store
- en: 'Following the scenario we described earlier, we are a data science team in
    a company in the automotive industry. We are working on a fuel efficiency dataset
    to create ML models. Let''s use an Auto MPG dataset from UCI ([https://archive.ics.uci.edu/ml/datasets/Auto+MPG](https://archive.ics.uci.edu/ml/datasets/Auto+MPG)),
    which is a collection of vehicle data and fuel efficiency (measured by miles per
    gallon) by make from 1970 to 1982, to demonstrate the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 按照我们之前描述的场景，我们是一家汽车行业公司的数据科学团队。我们正在处理一个燃油效率数据集以创建机器学习模型。让我们使用 UCI 的 Auto MPG
    数据集（[https://archive.ics.uci.edu/ml/datasets/Auto+MPG](https://archive.ics.uci.edu/ml/datasets/Auto+MPG)），这是一个从
    1970 年到 1982 年按制造商收集的车辆数据和燃油效率（以每加仑英里数衡量）的集合，来演示以下内容：
- en: How to ingest features into a feature store
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将特征摄入到特征商店
- en: How to access features from an online store and an offline store
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从在线商店和离线商店访问特征
- en: How to update the features year over year and access features using versioning
    (time travel)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何逐年更新功能并使用版本控制（时间旅行）访问功能
- en: 'As a prerequisite, please navigate to the code repository and open the `chapter04/01-sagemaker_feature_store.ipynb`
    notebook. First, execute the notebook until the following code to read the data
    from the source into a pandas DataFrame:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为先决条件，请导航到代码仓库并打开 `chapter04/01-sagemaker_feature_store.ipynb` 笔记本。首先，执行笔记本直到以下代码，从源数据读取到
    pandas DataFrame：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Additionally, we convert the data type to `string` for the `car_name` column,
    which is required by SageMaker Feature Store. We will describe what this means
    later in the *Creating a feature group* section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将 `car_name` 列的数据类型转换为 `string`，这是 SageMaker Feature Store 所要求的。我们将在 *创建特征组*
    部分稍后描述这意味着什么。
- en: 'We are going to split the DataFrames by year in order to later ingest them
    to simulate the feature updates over the years. Therefore, it is easier to convert
    the type for one DataFrame now. The following cell creates a dictionary to hold
    DataFrames by year and adds a new `event_time` column to encode the time of feature
    creation. We simulate it by adding a Unix epoch time at 8:00 am on January 1 in
    each respective year using Python''s `datetime` library:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按年份拆分 DataFrame，以便稍后模拟特征随年份的更新。因此，现在转换一个 DataFrame 的类型会更简单。以下单元格创建一个字典来保存按年份的
    DataFrame，并添加一个新的 `event_time` 列来编码特征创建的时间。我们通过在每个相应的年份使用 Python 的 `datetime`
    库在上午 8:00 添加 Unix 纪元时间来模拟它：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: A feature that denotes event time, `event_time` in this example, is required
    for any feature table that goes into a feature group in SageMaker Feature Store.
    This allows us to perform time travel and versioning of the features by time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 任何要进入 SageMaker Feature Store 中特征组的特征表都需要一个表示事件时间的特征，例如本例中的 `event_time`。这允许我们通过时间进行特征的时间旅行和版本控制。
- en: Next, we will start interacting with SageMaker Feature Store.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将开始与 SageMaker Feature Store 交互。
- en: Creating a feature group
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建特征组
- en: A **feature group** in SageMaker Feature Store defines the metadata, feature
    definition, unique identifier for the data entries, and other SageMaker Feature
    Store configurations.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SageMaker Feature Store 中的 **特征组** 定义了元数据、特征定义、数据条目的唯一标识符以及其他 SageMaker Feature
    Store 配置。
- en: There are two ways to create a feature group – using the SageMaker Python SDK
    or the Studio UI.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 创建特征组有两种方式 - 使用 SageMaker Python SDK 或 Studio UI。
- en: 'By following these steps (also in the notebook), we can create a feature group
    in SageMaker Feature Store using the SageMaker Python SDK:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤（也在笔记本中），我们可以使用 SageMaker Python SDK 在 SageMaker Feature Store 中创建一个特征组：
- en: 'Firstly, we create a SageMaker feature group named `auto-mpg-<timestamp>` with
    the `FeatureGroup` class:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用 `FeatureGroup` 类创建一个名为 `auto-mpg-<timestamp>` 的 SageMaker 特征组：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, we need to make the SageMaker feature group aware of the data schema and
    definition. `feature_group.load_feature_definitions()` is an API to load the schema
    and definition from a pandas DataFrame. The API automatically detects the data
    type. We also need to make sure that the features in the DataFrame are configured
    to have the data types supported by SageMaker Feature Store.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要让 SageMaker 特征组了解数据架构和定义。`feature_group.load_feature_definitions()`
    是一个 API，用于从 pandas DataFrame 中加载架构和定义。API 会自动检测数据类型。我们还需要确保 DataFrame 中的特征配置为具有
    SageMaker Feature Store 支持的数据类型。
- en: Important Note
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: The data types supported by SageMaker Feature Store are `data` column with strings
    as the `object` type for backward-compatibility reasons. With pandas 1.0 onwards,
    you can explicitly request to use the `string` type for columns containing strings.
    SageMaker Feature Store works with the `string` type from pandas, not the `object`
    type. The acceptable data type for the `event_time` column is either `string`
    or `fractional`. For the `string` type, event time has to be in the ISO-8601 format
    in UTC time with the *yyyy-MM-dd'T'HH:mm:ssZ* or *yyyy-MM-dd'T'HH:mm:ss.SSSZ*
    patterns. For the `fractional` type, the values are expected to be in seconds
    from Unix epoch time with millisecond precision. In our example, we used Unix
    epoch time returned by the `datetime` library.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SageMaker Feature Store 支持的数据类型是 `data` 列，其中字符串作为 `object` 类型，这是为了向后兼容。从 pandas
    1.0 版本开始，您可以明确请求使用 `string` 类型来表示包含字符串的列。SageMaker Feature Store 与 pandas 的 `string`
    类型一起工作，而不是 `object` 类型。对于 `event_time` 列，可接受的数据类型是 `string` 或 `fractional`。对于
    `string` 类型，事件时间必须以 ISO-8601 格式在 UTC 时间中，格式为 *yyyy-MM-dd'T'HH:mm:ssZ* 或 *yyyy-MM-dd'T'HH:mm:ss.SSSZ*。对于
    `fractional` 类型，值应从 Unix 纪元时间开始，以毫秒精度表示。在我们的示例中，我们使用了 `datetime` 库返回的 Unix 纪元时间。
- en: 'We load the feature definition from the first DataFrame. You will see the definition
    and data types loaded into `feature_group` in the output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从第一个 DataFrame 中加载特征定义。您将在输出中看到加载到 `feature_group` 中的定义和数据类型：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After the definition is loaded, we can create `feature group` in the system:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义加载后，我们可以在系统中创建 `feature group`：
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `create()` function, the following is configured for the feature group:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `create()` 函数中，为特征组配置以下内容：
- en: We specify an S3 bucket location to the `s3_uri` argument to indicate that we
    want to set up an offline store at this location for the feature group. We could
    set it to `False` to disable the offline store.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将S3存储桶位置指定给`s3_uri`参数，以表示我们想在当前位置为特征组设置离线存储。我们可以将其设置为`False`以禁用离线存储。
- en: We set `enable_online_store` to `True` to create an online store for the feature
    group. Set it to `False` if you do not need an online store and avoid unnecessary
    charges.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`enable_online_store`设置为`True`以为特征组创建在线存储。如果您不需要在线存储，请将其设置为`False`以避免不必要的费用。
- en: We indicate that the record identifier is the `car_name` column and the `event_time`
    feature is the `event_time` column in the feature group.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指出记录标识符是特征组中的`car_name`列，而`event_time`特征是`event_time`列。
- en: 'This creation is an asynchronous operation and takes a couple of seconds. The
    `check_feature_group_status()` function in the next cell checks the status every
    5 seconds and returns the cell once the feature group is created successfully.
    You can also see a list of feature groups in the Studio UI in the **SageMaker
    component and** **registry** tab in the left sidebar, as shown in *Figure 4.1*.
    If you click on the feature group in the list, you can see all the information
    associated with the feature group, a description, a feature definition, and example
    queries:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个创建操作是一个异步操作，需要几秒钟。下一个单元格中的`check_feature_group_status()`函数每5秒检查一次状态，并在特征组成功创建后返回单元格。您还可以在左侧侧边栏的**SageMaker组件**和**注册**选项卡中查看Studio
    UI中的特征组列表，如图*图4.1*所示。如果您点击列表中的特征组，您可以看到与特征组相关的所有信息，包括描述、特征定义和示例查询：
- en: '![Figure 4.1 – Viewing the feature group in the SageMaker Studio UI'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 在SageMaker Studio UI中查看特征组'
- en: '](img/B17447_05_001.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_001.jpg)'
- en: Figure 4.1 – Viewing the feature group in the SageMaker Studio UI
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 在SageMaker Studio UI中查看特征组
- en: 'Alternatively, you can also create a feature group from the UI. Because we
    have the data already in a pandas DataFrame, it was straightforward to load the
    definition using the SDK. The following steps demonstrate how to create a feature
    group in Studio UI:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以从UI创建特征组。因为我们已经有数据在pandas DataFrame中，所以使用SDK加载定义非常直接。以下步骤演示了如何在Studio
    UI中创建特征组：
- en: Click on **Create feature group**, as shown in *Figure 4.1*.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建特征组**，如图*图4.1*所示。
- en: 'In the first step, as shown in *Figure 4.2*, enter the feature group name,
    a description, and configurations for the online and offline stores. For the offline
    store, we put in an S3 bucket location to store the offline store data and an
    IAM Role ARN that has permission to access the bucket. In this example, we will
    use the SageMaker execution role that is also attached to the SageMaker Studio
    user profile. You can see the full ARN from the `role` variable in the notebook.
    For the **DATA CATALOG** options, let''s check the **Auto create AWS Glue table**
    box and either have SageMaker assign names in the three fields or assign names
    ourselves. Click **Continue**:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一步，如图*图4.2*所示，输入特征组名称、描述以及在线和离线存储的配置。对于离线存储，我们输入一个S3存储桶位置以存储离线存储数据，以及一个具有访问存储桶权限的IAM角色ARN。在这个例子中，我们将使用也附加到SageMaker
    Studio用户配置文件的SageMaker执行角色。您可以从笔记本中的`role`变量中看到完整的ARN。对于**数据目录**选项，让我们勾选**自动创建AWS
    Glue表**复选框，或者让SageMaker在三个字段中分配名称，或者我们自己分配名称。点击**继续**：
- en: '![Figure 4.2 – Configuring a feature group in the Studio UI'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2 – 在Studio UI中配置特征组'
- en: '](img/B17447_05_002.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_002.jpg)'
- en: Figure 4.2 – Configuring a feature group in the Studio UI
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 在Studio UI中配置特征组
- en: In the second step, we need to create the feature definition. We can use **JSON
    editor** to paste in definition in bulk, as shown in *Figure 4.3:*
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二步中，我们需要创建特征定义。我们可以使用**JSON编辑器**批量粘贴定义，如图*图4.3:*所示。
- en: '![Figure 4.3 – Editing the feature definitions in JSON editor'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3 – 在JSON编辑器中编辑特征定义'
- en: '](img/B17447_05_003.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_003.jpg)'
- en: Figure 4.3 – Editing the feature definitions in JSON editor
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 在JSON编辑器中编辑特征定义
- en: 'Or we can use the **Table** tab to edit the feature with an easy-to-use drop-down
    list, as shown in *Figure 4.4*. Click **Continue** once you''ve finished:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，我们可以使用**表格**选项卡通过易于使用的下拉列表编辑特征，如图*图4.4*所示。完成编辑后，点击**继续**：
- en: '![Figure 4.4 – Editing the feature definitions in Table'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.4 – 在表格中编辑特征定义'
- en: '](img/B17447_05_004.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_004.jpg)'
- en: Figure 4.4 – Editing the feature definitions in Table
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 在表格中编辑特征定义
- en: 'In the third step, as shown in *Figure 4.5*, we need to choose a feature to
    be a record identifier (`car_name`) and another feature to identify event time
    (`event_time`). Click **Continue** to proceed:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第三步，如图*图4.5*所示，我们需要选择一个特征作为记录标识符（`car_name`）和另一个特征来标识事件时间（`event_time`）。点击**继续**以进行下一步：
- en: '![Figure 4.5 – Selecting a record identifier and event time feature'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.5 – 选择记录标识符和事件时间特征'
- en: '](img/B17447_05_005.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_005.jpg)'
- en: Figure 4.5 – Selecting a record identifier and event time feature
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 – 选择记录标识符和事件时间特征
- en: Then, we can optionally add tags to the feature group. Click **Create feature
    group** to continue.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以选择性地为特征组添加标签。点击**创建特征组**以继续。
- en: Important Note
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: I demonstrated two ways of creating a feature group. We will only need one to
    proceed. Let's come back to the notebook and use the feature group created from
    the SageMaker Python SDK.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我演示了创建特征组的两种方法。我们只需要其中一种即可继续。让我们回到笔记本，并使用从SageMaker Python SDK创建的特征组。
- en: Once your feature group is created, we are ready to proceed to ingest data to
    the feature group.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了特征组，我们就可以继续将数据摄取到特征组中。
- en: Ingesting data to SageMaker Feature Store
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数据摄取到SageMaker Feature Store
- en: You can ingest data into the SageMaker Feature Store feature group in a batch
    or streaming fashion. There is an API in the `sagemaker.feature_store` SDK that
    allows us to ingest pandas DataFrames asynchronously and in batch fashion. For
    streaming ingestion, the `sagemaker-featurestore-runtime` API makes it easy to
    put a single record with low latency into a feature group. These two approaches
    to make feature ingestion flexible can be implemented in different parts of the
    ML life cycle.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以以批量或流式方式将数据摄取到SageMaker Feature Store特征组中。`sagemaker.feature_store` SDK中有一个API，允许我们以异步和批量方式摄取pandas
    DataFrame。对于流式摄取，`sagemaker-featurestore-runtime` API使得将单个记录以低延迟放入特征组变得简单。这两种使特征摄取灵活的方法可以在ML生命周期的不同部分实现。
- en: A data engineer or scientist can create a feature group and ingest the first
    batch of data, which is typically the case in the exploratory phase, using batch
    ingestion. Once a model is built and is ready to serve, it is critical to think
    about capturing new data and ingesting it into the feature store so that you can
    iterate over the model retraining with an enriched dataset. If your data come
    in batches, you can use batch ingestion that allow ingestion large amount of data
    efficiently. Alternatively, if your model is deployed as part of a real-time application,
    you can use the streaming ingestion approach. In this section, we will see how
    both batch and streaming ingestion work.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 数据工程师或科学家可以使用批量摄取创建特征组并摄取第一批数据，这在探索阶段通常是这种情况。一旦构建了模型并准备提供服务，就必须考虑捕获新数据并将其摄取到特征存储中，以便可以使用丰富数据集迭代模型重新训练。如果你的数据以批量形式到来，你可以使用允许高效摄取大量数据的批量摄取。或者，如果你的模型作为实时应用程序的一部分部署，你可以使用流式摄取方法。在本节中，我们将了解批量摄取和流式摄取是如何工作的。
- en: 'In our example, we are simulating data update annually, as we have chopped
    the dataset by year into multiple DataFrames with distinct `event_time` values
    for each year''s data. We can ingest each DataFrame in a batch with the following
    code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们模拟了每年数据更新的情况，因为我们已经将数据集按年份切割成多个DataFrame，每个年份的数据都有不同的`event_time`值。我们可以使用以下代码批量摄取每个DataFrame：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will loop through all the DataFrames in the `d_df` dictionary and call the
    `feature_group.ingest()` method to ingest each DataFrame. You can control the
    ingestion runtime with the `max_workers` and `max_processes` arguments where the
    `max_processes` number of processes will be created to ingest different partitions
    of the DataFrame in parallel, each with the `max_worker` threads. The `wait=True`
    argument in `.ingest()` waits for the ingestion of a DataFrame to finish before
    proceeding.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遍历`d_df`字典中的所有DataFrame，并调用`feature_group.ingest()`方法来摄取每个DataFrame。你可以使用`max_workers`和`max_processes`参数来控制摄取运行时间，其中`max_processes`数量的进程将并行创建以摄取DataFrame的不同分区，每个分区使用`max_worker`线程。`.ingest()`中的`wait=True`参数在继续之前等待DataFrame的摄取完成。
- en: Important Note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: While the SageMaker Python SDK allows you to create feature groups, work with
    feature definitions, ingest data, and query data from the offline store, the `sagemaker-featurestore-runtime`
    `boto3` SDK allows you to interact (`Get` and `Put`) with the online store. Features
    are available in the online store immediately after ingestion, whereas it takes
    some time to make features available in the offline store.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SageMaker Python SDK允许你创建特征组，处理特征定义，导入数据，并从离线存储查询数据，但`sagemaker-featurestore-runtime`
    `boto3` SDK允许你与在线存储进行交互（`Get`和`Put`）。特征在导入后立即在在线存储中可用，而在离线存储中使特征可用需要一些时间。
- en: 'After the ingestion, we can quickly verify it by pulling a sample record from
    the online store, as shown in the following code block, using the `get_record`
    function from the `sagemaker-featurestore-runtime` `boto3` API:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 导入后，我们可以通过从在线存储中拉取一个样本记录来快速验证它，如下面的代码块所示，使用来自`sagemaker-featurestore-runtime`
    `boto3` API的`get_record`函数：
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To ingest features for a record in a streaming fashion, we could use the `put_record`
    API from the `sagemaker-featurestore-runtime` `boto3` API to ingest a single data
    record, as shown in the following snippet. This API provides low latency that
    is typically required by a streaming application. Note that `record` is a list
    of dictionaries with a `FeatureName` and `ValueAsString` pair for each feature
    in a record:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要以流式处理方式导入记录中的特征，我们可以使用`sagemaker-featurestore-runtime` `boto3` API中的`put_record`
    API来导入单个数据记录，如下面的代码片段所示。此API提供了流式应用程序通常所需的低延迟。请注意，`record`是一个字典列表，其中每个特征都有一个`FeatureName`和`ValueAsString`对的`FeatureName`：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you have enabled both online and offline stores, as per our example, SageMaker
    automatically synchronizes features from an online store to an offline store.
    When we update the feature group with annual data, SageMaker appends the latest
    values to the offline store to give you a full history of values over time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经启用了在线和离线存储，如我们的示例所示，SageMaker会自动将在线存储中的特征同步到离线存储。当我们用年度数据更新特征组时，SageMaker会将最新值追加到离线存储，以提供随时间变化的值的完整历史记录。
- en: We have walked through how to ingest features into a feature group in SageMaker
    Feature Store in both batch and streaming fashion using the SageMaker Python SDK
    and the `sagemaker-featurestore-runtime` `boto3` API respectively. Let's now take
    a look at another way of ingesting features into SageMaker Feature Store – from
    **SageMaker Data Wrangler**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了如何使用SageMaker Python SDK和`sagemaker-featurestore-runtime` `boto3` API分别以批量和流式处理方式将特征导入到SageMaker特征存储中的特征组。现在让我们看看将特征导入到SageMaker特征存储的另一种方式
    – 从**SageMaker Data Wrangler**。
- en: Ingesting from SageMaker Data Wrangler
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从SageMaker Data Wrangler导入
- en: 'If you have read [*Chapter 3*](B17447_03_ePub_RK.xhtml#_idTextAnchor043), *Data
    Preparation with SageMaker Data Wrangler*, you may recall that at the end of the
    journey with SageMaker Data Wrangler, there is an option to export data to SageMaker
    Feature Store. SageMaker Data Wrangler creates a notebook with all the code automatically
    so that you can simply execute the cells to ingest data to a feature group. In
    the notebook, it shows you how SageMaker enables the ingestion by applying **Amazon
    SageMaker Processing**, which integrates with SageMaker Feature Store as an output
    destination. To do this, follow these steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经阅读了[*第3章*](B17447_03_ePub_RK.xhtml#_idTextAnchor043)中的*使用SageMaker Data
    Wrangler进行数据准备*，你可能还记得，在使用SageMaker Data Wrangler的旅程结束时，有一个选项可以将数据导出到SageMaker特征存储。SageMaker
    Data Wrangler会自动创建一个笔记本，其中包含所有代码，这样你就可以简单地执行单元格来将数据导入到特征组中。在笔记本中，它展示了SageMaker如何通过应用**Amazon
    SageMaker Processing**来启用导入，该应用将SageMaker特征存储作为输出目的地进行集成。要执行此操作，请按照以下步骤进行：
- en: Open the `flow` file created in [*Chapter 3*](B17447_03_ePub_RK.xhtml#_idTextAnchor043),
    *Data Preparation with SageMaker Data Wrangler*.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开在[*第3章*](B17447_03_ePub_RK.xhtml#_idTextAnchor043)中创建的`flow`文件，*使用SageMaker
    Data Wrangler进行数据准备*。
- en: Go to the **Export** tab to select the last transformation step in the flow.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**导出**选项卡以选择流程中的最后一个转换步骤。
- en: 'Click the **Export step** button in the top right, as shown in *Figure 4.6*,
    and choose **Feature Store**:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**导出步骤**按钮，如图4.6所示，并选择**特征存储**：
- en: '![Figure 4.6 – Exporting transformed data to SageMaker Feature Store from SageMaker
    Data Wrangler'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.6 – 从SageMaker Data Wrangler将转换后的数据导出到SageMaker特征存储'
- en: '](img/B17447_05_006.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_006.jpg)'
- en: Figure 4.6 – Exporting transformed data to SageMaker Feature Store from SageMaker
    Data Wrangler
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 – 从SageMaker Data Wrangler将转换后的数据导出到SageMaker特征存储
- en: A new notebook will pop up. Follow and execute the cells to start a SageMaker
    Processing job.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将弹出一个新的笔记本。遵循并执行单元格以启动 SageMaker Processing 作业。
- en: At the end of processing, a new feature group will be created and available
    in SageMaker Feature Store.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 处理结束后，将创建一个新的功能组，并在 SageMaker 功能存储中可用。
- en: After we have created a feature group and ingested features to it, we can move
    on to see how we can interact with the feature store.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建功能组并将功能导入其中之后，我们可以继续了解我们如何与功能存储进行交互。
- en: Accessing features from SageMaker Feature Store
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 SageMaker 功能存储中访问功能
- en: Features in a feature store can be accessed programmatically when you are building
    a training dataset for ML modeling, and when your application is making inferences
    against a model and is in need of features that are associated with a data point.
    We will walk through these scenarios to show you how to access features from SageMaker
    Feature Store.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当您构建用于机器学习建模的训练数据集时，以及当您的应用程序对模型进行推理并需要与数据点相关的功能时，可以在功能存储中通过编程方式访问功能。我们将通过这些场景向您展示如何从
    SageMaker 功能存储中访问功能。
- en: Accessing a feature group in the Studio UI
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Studio UI 中访问功能组
- en: 'In the Studio UI, you can quickly browse through the feature groups in the
    account on the feature store page. In *Figure 4.1*, you can see a list of feature
    groups. You can double-click on the line to access further details, such as **Feature
    group summary**, **Description**, **Feature definitions**, and **Feature group
    tags**, as shown in *Figure 4.7*:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Studio UI 中，您可以在功能存储页面快速浏览账户中的功能组。在*图 4.1*中，您可以看到功能组的列表。您可以通过双击行来访问更多详细信息，例如**功能组摘要**、**描述**、**功能定义**和**功能组标签**，如图*图
    4.7*所示：
- en: '![Figure 4.7 – Detailed information of a feature group in the Studio UI'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7 – Studio UI 中功能组的详细信息'
- en: '](img/B17447_05_007.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_007.jpg)'
- en: Figure 4.7 – Detailed information of a feature group in the Studio UI
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – Studio UI 中功能组的详细信息
- en: 'Once you and your team start to use SageMaker Feature Store in more projects,
    you will have many feature groups in the account. You can use the search bar in
    the feature group list to search for a feature group of interest:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您和您的团队开始在更多项目中使用 SageMaker 功能存储，您将在账户中拥有许多功能组。您可以使用功能组列表中的搜索栏搜索感兴趣的功能组：
- en: '![Figure 4.8 – Searching for a feature group in the Studio UI'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8 – 在 Studio UI 中搜索功能组'
- en: '](img/B17447_05_008.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_008.jpg)'
- en: Figure 4.8 – Searching for a feature group in the Studio UI
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 在 Studio UI 中搜索功能组
- en: 'To use the search bar, as shown in *Figure 4.8*, do the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用搜索栏，如图*图 4.8*所示，请执行以下操作：
- en: Type in the name of the column you want to search, for example, `short description`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您要搜索的列名，例如，`简短描述`。
- en: Type in the search keyword; for example, I want to find out which feature group
    description contains the word `horsepower`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入搜索关键词；例如，我想找出哪个功能组的描述包含单词`马力`。
- en: The filter is then applied, resulting in only one feature group that satisfies
    the search criteria.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后应用过滤器，结果只显示满足搜索条件的一个功能组。
- en: You can search by **Tags** or **Feature group name** as well.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过**标签**或**功能组名称**进行搜索。
- en: 'Searching by tags is a flexible and powerful tool. In the **Feature group tags**
    tab, you can add tags on the fly with additional information that will help you
    identify a feature group. For example, in *Figure 4.9*, I can add up to 50 tags
    to a feature group to help me organize and search:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过标签搜索是一种灵活且强大的工具。在**功能组标签**选项卡中，您可以即时添加带有附加信息的标签，这将帮助您识别功能组。例如，在*图 4.9*中，我可以为功能组添加多达
    50 个标签，以帮助我组织和搜索：
- en: '![Figure 4.9 – Adding tags to a feature group in the Studio UI'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9 – 在 Studio UI 中为功能组添加标签'
- en: '](img/B17447_05_009.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_009.jpg)'
- en: Figure 4.9 – Adding tags to a feature group in the Studio UI
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 在 Studio UI 中为功能组添加标签
- en: The feature store page in the Studio helps us to identify the right feature
    group and learn more about feature definition and other configurations before
    we access the features programmatically. In the next section, we will learn how
    to access the features.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Studio 中的功能存储页面帮助我们识别正确的功能组，并在我们以编程方式访问功能之前了解更多关于功能定义和其他配置的信息。在下一节中，我们将学习如何访问功能。
- en: Accessing an offline store – building a dataset for analysis and training
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问离线存储 – 为分析和训练构建数据集
- en: When building a training dataset, we typically need to be able to access a large
    number of features, access features of a specific time or version, and combine
    information from multiple feature groups. The offline store is designed to support
    such activities.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建训练数据集时，我们通常需要能够访问大量特征，访问特定时间或版本的特性，以及从多个特征组中组合信息。离线存储旨在支持此类活动。
- en: 'After ingesting features to a feature group, SageMaker Feature Store stages
    the data into an S3 bucket, creates a data catalog in the **AWS Glue Catalog**,
    registers the catalog in **Amazon Athena**, exposes a simple API for a SQL-based
    query, and returns a pandas DataFrame. We can use the following snippet to turn
    a query into a pandas DataFrame:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在将特征添加到特征组后，SageMaker Feature Store会将数据存入一个S3桶中，在**AWS Glue Catalog**中创建一个数据目录，在**Amazon
    Athena**中注册该目录，提供一个基于SQL的简单API进行查询，并返回一个pandas DataFrame。我们可以使用以下代码片段将查询转换为pandas
    DataFrame：
- en: '[PRE8]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this snippet, we use the `athena_query()` method from a feature group to
    create an `AthenaQuery` class instance, which allows us to run a query, saves
    the query output into an S3 location, and returns a pandas DataFrame. `table_name`
    refers to the name of the Athena table that we can use in the query string. Here,
    our query selects all rows and columns from the feature table. You can take a
    look at the returned `dataset`, which has 398 entries, and note that besides the
    features that we have defined, there are three additional columns – `write_time`,
    `api_invocation_time`, and `is_deleted`. These three are also not seen in the
    output of `featurestore_runtime.get_record()`. They are created specifically for
    the offline store to enable better governance around the features and versioning.
    We will see how they can be used later.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码片段中，我们使用特征组的`athena_query()`方法创建一个`AthenaQuery`类实例，这允许我们运行查询，将查询输出保存到S3位置，并返回一个pandas
    DataFrame。`table_name`指的是我们可以在查询字符串中使用的Athena表名。在这里，我们的查询选择了特征表中的所有行和列。您可以查看返回的`dataset`，它包含398个条目，并注意除了我们定义的特征外，还有三个额外的列
    – `write_time`、`api_invocation_time`和`is_deleted`。这三个在`featurestore_runtime.get_record()`的输出中也没有看到。它们是专门为离线存储创建的，以实现更好的特征管理和版本控制。我们将在稍后看到它们如何被使用。
- en: 'Now we understand how to interact and query against the feature store. Let''s
    consider this use case: we want to build training data using all vehicles built
    before 1979\. Our query would look like the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何与特征存储进行交互和查询。让我们考虑这个用例：我们希望使用1979年之前所有制造的车辆来构建训练数据。我们的查询将如下所示：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If we run the query, we get a DataFrame (`dataset_2`) of 280 entries, which
    is a subset of the full table (398).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行查询，我们将得到一个包含280个条目的DataFrame（`dataset_2`），这是完整表（398）的一个子集。
- en: 'Consider another scenario: we would like to build training data using all vehicles
    built before 1979 but considering only the specs from the latest model year. We
    can build a point-in-time query, as shown in the following code block. This is
    also called time travel (going back in time to get the features from that point):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑另一种场景：我们希望使用1979年之前所有制造的车辆来构建训练数据，但只考虑最新型号年的规格。我们可以构建一个点时间查询，如下面的代码块所示。这也被称为时间旅行（回到过去获取该点的特征）：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With this query, we get a DataFrame of 212 entries (`dataset_3`). We can compare
    the entries for the `amc gremlin` car in the last two DataFrames, as shown in
    *Figure 4.10*:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此查询，我们得到一个包含212个条目（`dataset_3`）的DataFrame。我们可以比较最后两个DataFrame中`amc gremlin`汽车的条目，如图4.10所示：
- en: '![Figure 4.10 – A point-in-time query (dataset_3) returns the latest data for
    a vehicle as of 1979 instead of all entries prior to 1979 (dataset_2)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.10 – 点时间查询（dataset_3）返回了截至1979年的车辆最新数据，而不是1979年之前的所有条目（dataset_2）'
- en: '](img/B17447_05_010.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_05_010.jpg)'
- en: Figure 4.10 – A point-in-time query (dataset_3) returns the latest data for
    a vehicle as of 1979 instead of all entries prior to 1979 (dataset_2)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10 – 点时间查询（dataset_3）返回了截至1979年的车辆最新数据，而不是1979年之前的所有条目（dataset_2）
- en: 'Thanks to the detailed time attribute that is stored in SageMaker Feature Store
    along with the features, we can perform sophisticated versioning and point-in-time
    queries against a feature group. We can see that `dataset_3` contains only one
    entry for the vehicle, whereas `dataset_2` has all the historical entries for
    the vehicle:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了存储在SageMaker Feature Store中的详细时间属性以及特征，我们可以对特征组执行复杂的版本控制和点时间查询。我们可以看到`dataset_3`只包含一个车辆的条目，而`dataset_2`包含了该车辆的所有历史条目：
- en: '![Figure 4.11 – Example queries that can help you perform common tasks with
    the offline store of a feature group'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.11 – 帮助您使用特征组离线商店执行常见任务的示例查询'
- en: '](img/B17447_05_011.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17447_05_011.jpg]'
- en: Figure 4.11 – Example queries that can help you perform common tasks with the
    offline store of a feature group
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11 – 帮助您使用特征组离线商店执行常见任务的示例查询
- en: The offline store in SageMaker Feature Store can be very versatile. In the Feature
    Store UI, you can find a couple of query examples against the offline store on
    the **Sample query** tab, as shown in *Figure 4.11*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker Feature Store中的离线商店可以非常灵活。在特征商店UI中，您可以在*样本查询*标签页上找到针对离线商店的几个查询示例，如图*4.11*所示。
- en: Now, let's switch our focus to accessing features from the online store.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将注意力转向从在线商店访问功能。
- en: Accessing online store – low-latency feature retrieval
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问在线商店 – 低延迟特征检索
- en: 'SageMaker Feature Store''s online store capability offers single-digit millisecond
    latency and high throughput. This is suitable for use cases where the feature
    is ingested to the cloud with a streaming architecture and the model inference
    is of a real-time and streaming nature. Accessing the online store of a feature
    group can be achieved with the `sagemaker-featurestore-runtime` `boto3` API, which
    is also what we used to verify the feature ingestion in the *Ingesting data to
    SageMaker Feature Store* section:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker Feature Store的在线商店功能提供低至个位数的毫秒延迟和高吞吐量。这适用于将特征以流式架构摄入云中，并且模型推理具有实时和流式特性的用例。通过`sagemaker-featurestore-runtime`
    `boto3` API可以访问特征组的在线商店，这也是我们在*将数据摄入SageMaker Feature Store*部分所使用的：
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We take `amc gremlin` as an example vehicle to retrieve the features. We use
    the `get_record` API from `boto3` to access the features for the vehicle. The
    output of the API (`amc_gremlin`) is a Python dictionary. The feature values are
    returned in the `Record` field. If you look closely, you will note that the `model_year`
    value for the vehicle is `75`. This shows that the online store keeps only the
    latest entry.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以`amc gremlin`作为示例车辆来检索特征。我们使用`boto3`的`get_record` API来访问车辆的特性。API的输出（`amc_gremlin`）是一个Python字典。特征值在`Record`字段中返回。如果您仔细观察，您会注意到车辆的`model_year`值为`75`。这表明在线商店只保留最新的条目。
- en: 'We can also use the `batch_get_record` API to retrieve multiple records and
    features in a batch. We can retrieve multiple records with a list of car names
    and select a subset of features with a list of features that we need. If `FeatureNames`
    is not provided, all features are returned:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`batch_get_record` API批量检索多个记录和特征。我们可以通过一个车辆名称列表检索多个记录，并通过一个所需特征的列表选择特征子集。如果不提供`FeatureNames`，则返回所有特征：
- en: '[PRE12]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can run these lines of code in your web applications to retrieve features
    for ML inference with single-digit millisecond latency. With SageMaker Feature
    Store, you can quickly retrieve features of a given data index quickly and make
    ML inference in the cloud.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在您的Web应用程序中运行这些代码行以以个位数的毫秒延迟检索特征，用于ML推理。使用SageMaker Feature Store，您可以快速检索给定数据索引的特征，并在云中进行ML推理。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the concept of a feature store from an ML
    perspective. We described the functionality of Amazon SageMaker Feature Store
    and walked through several feature store use cases when developing an ML model
    using a public automotive dataset. In the example code, we showed you how to create
    a feature group in SageMaker Feature Store and how to ingest and update features
    and data to a feature group. We also showed you how to access features from the
    offline store for model training purposes and how to perform a point-in-time (time
    travel) feature query, which is useful when you need to access features in the
    past. Finally, we showed you how to access features from the online store for
    ML inference purposes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从ML的角度学习了特征存储的概念。我们描述了Amazon SageMaker Feature Store的功能，并介绍了在开发ML模型时使用公共汽车用数据集的几个特征存储用例。在示例代码中，我们向您展示了如何在SageMaker
    Feature Store中创建特征组，以及如何将特征和数据摄入特征组。我们还向您展示了如何为模型训练目的从离线商店访问特征，以及如何执行点时间（时间旅行）特征查询，这在需要访问过去特征时非常有用。最后，我们向您展示了如何为ML推理目的从在线商店访问特征。
- en: In the next chapter, we will move into the topic of building and training ML
    models with the SageMaker Studio IDE. Building and training ML models can be challenging
    in a typical ML life cycle, as it is time-consuming and is compute resource-intensive.
    You will learn ways to build and train ML models with ease using the SageMaker
    Studio IDE.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进入使用 SageMaker Studio IDE 构建和训练机器学习模型的主题。在典型的机器学习生命周期中，构建和训练机器学习模型可能会具有挑战性，因为它耗时且计算资源密集。您将学习如何使用
    SageMaker Studio IDE 轻松构建和训练机器学习模型。
