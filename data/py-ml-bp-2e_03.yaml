- en: Build an App to Find Cheap Airfares
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个查找便宜机票的应用程序
- en: Let's talk about mistakes. They're part of life; everyone makes them—even airlines.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈错误。它们是生活的一部分；每个人都会犯错误——包括航空公司。
- en: In 2014, I happened to be reading my Twitter feed one afternoon when one of
    the accounts I follow tweeted that a major US airline had fares to Europe that
    were significantly below what would be expected. At the time, the cheapest fare
    from New York to Vienna was around $800, but the advertised fares for a select
    number of dates were between $350 and $450\. This seemed too good to be true.
    But it wasn't. I had lucked upon what's known in the industry as a *mistake fare*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，某天下午我正好在浏览我的Twitter动态，看到我关注的一个账户发推称某家美国主要航空公司出售的欧洲机票价格远低于预期。当时，从纽约到维也纳的最低票价大约为800美元，但某些日期的广告票价却在350美元到450美元之间。这听起来好像太好以至于不真实。但事实并非如此。我幸运地碰到了业内所称的*错误票价*。
- en: In the super-secretive society of travel hackers and mileage junkies, it's well-known
    that airlines occasionally—and accidentally—post fares that exclude fuel surcharges.
    And remarkably, this isn't the only type of mistake they make. You might expect
    advanced algorithms would be updating fares for each flight, taking into account
    an enormous number of factors. And for the most part, you'd be right. But due
    to legacy systems and the complexity of dealing with multiple carriers and multiple
    jurisdictions, mistakes do sometimes occur.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在旅行黑客和常旅客的超级机密圈子里，大家都知道航空公司偶尔会—而且是意外地—发布不包括燃油附加费的票价。更令人惊讶的是，这并不是他们唯一犯的错误。你可能会认为，先进的算法会为每个航班更新票价，考虑到大量的因素。大多数情况下，你的想法是对的。但由于传统系统的限制以及处理多个航空公司和多个法域的复杂性，错误有时确实会发生。
- en: 'Here is a list of some of these more recent mistake fares:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些最近的错误票价列表：
- en: In 2007, United Airlines sold business fare tickets from San Francisco to New
    Zealand for $1,500
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2007年，联合航空公司将从旧金山飞往新西兰的商务舱机票售卖为1500美元
- en: In 2013, Delta sold economy fare tickets from multiple US cities to Hawaii for
    $6.90
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2013年，达美航空公司将从多个美国城市飞往夏威夷的经济舱票价定为6.90美元
- en: In 2015, American Airlines sold business class fares to China from Washington,
    DC for $450
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2015年，美国航空公司从华盛顿特区到中国的商务舱票价为450美元
- en: Now that you know these fares exist, how can you get in on them? Machine learning,
    of course! Since they typically last just a few hours before they disappear, we're
    going to build an application that continually monitors fare pricing, checking
    for anomalous prices that will generate an alert we can quickly act on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道这些票价的存在，那你该怎么利用它们呢？当然是机器学习！由于这些票价通常只持续几个小时就会消失，我们将构建一个应用程序，持续监控票价变化，检查是否有异常价格，从而生成一个可以迅速采取行动的警报。
- en: 'Here''s what we''ll cover in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容包括：
- en: Sourcing airfare pricing on the web
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网上获取机票定价
- en: Retrieving fare data with advanced web scraping techniques
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用先进的网页抓取技术获取票价数据
- en: Parsing the DOM to extract prices
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析DOM以提取价格
- en: Identifying outlier fares with anomaly detection techniques
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用异常检测技术识别异常票价
- en: Sending real-time text alerts with IFTTT
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IFTTT发送实时文本警报
- en: Sourcing airfare pricing data
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取机票定价数据
- en: 'Fortunately, sourcing airfare data is somewhat easier that real estate data.
    There are a number of providers of this data, as well as paid and unpaid APIs.
    One challenging aspect of retrieving the data is that it requires a number of
    web requests. In the previous edition of this book, we outlined how to scrape
    data from Google''s **Flight Explorer** page. This was the ideal presentation
    for seeing weeks of pricing data on one page for multiple cities. Unfortunately,
    that page has now been removed, and Google now provides a more typical search
    interface that requires the user to input the departure city, the destination
    city, start date, and end date. One fortunate feature that remains is the ability
    to input an entire region rather than a specific city. We''ll make use of this
    in our scraping. An example of this can be seen in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，获取机票数据比获取房地产数据要容易一些。有许多提供这类数据的服务商，且有付费和免费的API。一项挑战是，获取数据需要进行多个网页请求。在本书的前一版中，我们概述了如何从Google的**Flight
    Explorer**页面抓取数据。这是查看多个城市的数周票价数据的理想方式。不幸的是，该页面现在已被移除，Google现在提供的是一个更为典型的搜索界面，用户需要输入出发城市、目的城市、起始日期和结束日期。一个幸运的特性是，仍然可以输入整个区域而不是具体的城市。我们将在抓取中使用这一点。下面的截图可以作为一个示例：
- en: '![](img/02d0154d-8231-47b0-ad25-e8e5ed48eb86.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02d0154d-8231-47b0-ad25-e8e5ed48eb86.png)'
- en: As you can see, we have input `New York` as our departure city and simply put
    `Asia` as our destination. This returns pricing for all the top cities in Asia
    (as well as the Middle East, for some reason). This is great news as we want to
    capture as many prices in one web request as possible.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们输入了`New York`作为出发城市，并简单地将`Asia`作为目的地。这将返回所有亚洲（以及中东地区，出于某些原因）的主要城市的票价。这是一个好消息，因为我们希望在一个网页请求中捕获尽可能多的票价。
- en: While the interface still has some features that make it easier to scrape this
    data, we'll need to use some more advanced techniques than we've used in the past.
    We'll discuss that next.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然界面仍然具有一些使得抓取数据更容易的功能，但我们需要使用一些比过去更高级的技术。接下来我们将讨论这些技术。
- en: Retrieving fare data with advanced web scraping
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高级网页抓取技术获取票价数据
- en: In previous chapters, we've seen how to use the `Requests` library to retrieve
    web pages. As I've said before, it is a fantastic tool, but unfortunately, it
    won't work for us here. The page we want to scrape is entirely AJAX-based. **Asynchronous
    JavaScript** (**AJAX**) is a method for retrieving data from a server without
    having to reload the page. What this means for us is that we'll need to use a
    browser to retrieve the data. While that might sound like it would require an
    enormous amount of overhead, there are two libraries that, when used together,
    make it a lightweight task.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们已经学习了如何使用`Requests`库来获取网页。如我之前所说，它是一个很棒的工具，但不幸的是，在这里我们无法使用它。我们想抓取的页面完全基于AJAX。**异步
    JavaScript** (**AJAX**) 是一种从服务器获取数据的方法，无需重新加载页面。这对我们意味着，我们需要使用浏览器来获取数据。虽然这听起来可能需要大量的开销，但有两个库，如果一起使用，可以使这个任务变得轻便。
- en: The two libraries are Selenium and ChromeDriver. Selenium is a powerful tool
    for automating web browsers, and ChromeDriver is a browser. Why use ChromeDriver
    rather than Firefox or Chrome itself? ChromeDriver is what's known as a **headless
    browser**. This means it has no user interface. This keeps it lean, making it
    ideal for what we're trying to do.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个库分别是Selenium和ChromeDriver。Selenium是一个强大的网页浏览器自动化工具，而ChromeDriver是一个浏览器。为什么使用ChromeDriver而不是Firefox或Chrome本身呢？ChromeDriver是一种被称为**无头浏览器**的工具。这意味着它没有用户界面。这使得它更加精简，十分适合我们要做的事情。
- en: To install ChromeDriver, you can download the binaries or source from [https://sites.google.com/a/chromium.org/chromedriver/downloads](https://sites.google.com/a/chromium.org/chromedriver/downloads).
    As for Selenium, it can be pip installed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装ChromeDriver，您可以从[https://sites.google.com/a/chromium.org/chromedriver/downloads](https://sites.google.com/a/chromium.org/chromedriver/downloads)下载二进制文件或源代码。至于Selenium，它可以通过pip安装。
- en: We'll also need another library called `BeautifulSoup` to parse the data from
    the page. If you don't have that installed, you should `pip install` that now
    as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个名为`BeautifulSoup`的库，用于解析页面中的数据。如果您尚未安装它，应该立即使用`pip install`安装它。
- en: 'With that done, let''s get started. We''ll start out within the Jupyter Notebook.
    This works best for exploratory analysis. Later, when we''ve completed our exploration,
    we''ll move on to working in a text editor for the code we want to deploy. This
    is done in following steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些之后，我们开始吧。我们将在Jupyter Notebook中开始，这对于探索性分析效果最好。稍后，当我们完成探索后，将转向文本编辑器编写我们要部署的代码。以下是操作步骤：
- en: 'First, we import our routine libraries, as shown in the following code snippet:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入常用库，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, make sure you have installed `BeautifulSoup` and `Selenium`, and downloaded
    `ChromeDriver`, as mentioned previously. We''ll import those now in a new cell:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，请确保您已经安装了`BeautifulSoup`和`Selenium`，并下载了`ChromeDriver`，如前所述。我们现在将在新单元格中导入它们：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that I have referenced the path on my machine where I have downloaded
    `ChromeDriver`. Note that you will have to replace that line with the path on
    your own machine.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我已经引用了我机器上下载的`ChromeDriver`路径。请记住，您需要将该路径替换为您自己机器上的路径。
- en: Creating a link
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建链接
- en: 'Now, remarkably, we have everything we need to begin our airline fare scraping,
    with one exception: we need the URL. For this exercise, I''m going to focus on
    flights leaving from NYC and flying to Europe. Since we don''t want to pull down
    massive quantities of data and risk being blocked, we are going to just pull data
    for non-stop flights that depart on Saturday and return on the following Saturday.
    You are, of course, free to change this to whatever fares you''d like to target,
    but we''ll use this for our sample project.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，值得注意的是，我们已经拥有开始进行航班票价抓取所需的所有内容，只有一个例外：我们需要 URL。在这个练习中，我将专注于从纽约市（NYC）出发飞往欧洲的航班。由于我们不希望下载大量数据并冒着被封锁的风险，我们将仅提取从纽约出发的直飞航班数据，这些航班在周六起飞，次周六返回。当然，你可以根据自己的需求修改目标航班，但我们将以此作为示例项目。
- en: 'The next step is to fill out the form in Google Flights. Make sure to choose
    a future date. Once you have input your data and hit Search, copy the URL string
    from your browser bar, as seen in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是填写 Google Flights 表单。确保选择一个未来的日期。一旦输入数据并点击搜索，从浏览器地址栏复制 URL 字符串，如以下截图所示：
- en: '![](img/508213ef-1d4f-4d8d-8dd3-59d5b186d821.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/508213ef-1d4f-4d8d-8dd3-59d5b186d821.png)'
- en: 'The URL I copied is for flights that depart on `2018-12-01` and return on `2018-12-08`.
    Those dates can be seen in the search string. If you choose different dates, you
    should see those reflected in the string you copy. Let''s code this now:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我复制的 URL 是 2018 年 12 月 1 日起飞并于 2018 年 12 月 8 日返回的航班。可以在搜索字符串中看到这些日期。如果你选择不同的日期，复制的字符串中应该会反映这些变化。现在我们来编写代码：
- en: 'Let''s input that string and save it as the variable `sats`, as seen in the
    following block of code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们输入该字符串并将其保存为变量 `sats`，如以下代码块所示：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we''ll test that we can successfully retrieve the content that we see
    on the page. We''ll test that with the following line of code, which utilizes
    `selenium`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将测试能否成功提取页面上看到的内容。我们将使用以下代码行来进行测试，这段代码使用了 `selenium`：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That one line of code was all we needed to retrieve the page. We can validate
    that this was successful with a couple of additional lines of code.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一行代码就足够我们获取页面了。我们可以通过添加几行额外的代码来验证获取是否成功。
- en: 'First, let''s check the title of the page:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们检查页面的标题：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The resulting output can be seen as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出如下所示：
- en: '![](img/8098a33d-ea16-401c-b538-808ac5644ecc.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8098a33d-ea16-401c-b538-808ac5644ecc.png)'
- en: 'It looks like we were able to get the correct page. Let''s now check to see
    whether we captured everything we were seeking. We can do that by taking a screenshot
    of the page. We do that with the following line of code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们成功获取了正确的页面。现在让我们检查一下是否抓取了我们所需要的所有内容。我们可以通过截取页面的截图来检查。我们通过以下代码行来实现：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Again, the path I used to save the screenshot was based on my machine; you
    will need to reference a path on your own machine. As you should see based on
    the following output, we were able to successfully get all the content of the
    page:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我保存截图的路径是基于我的机器的；你需要在自己的机器上引用一个路径。如以下输出所示，我们成功获取了页面的所有内容：
- en: '![](img/ad72822c-a619-48ff-8154-d6736d5f8c59.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad72822c-a619-48ff-8154-d6736d5f8c59.png)'
- en: Since we appear to have all the page data we were seeking, we will now move
    on to how to pull individual data points from the page. To do that, first, we'll
    need to learn about the **Document Object Model** (**DOM**).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们似乎已经获取了所需的页面数据，接下来我们将介绍如何从页面中提取个别数据点。为此，首先，我们需要了解 **文档对象模型** (**DOM**)。
- en: Parsing the DOM to extract pricing data
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析 DOM 以提取定价数据
- en: The DOM is the collection of elements that comprise a web page. It includes
    HTML tags such as `body` and `div`, as well as the classes and IDs embedded within
    these tags.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: DOM 是组成网页的元素集合。它包括 HTML 标签，如 `body` 和 `div`，以及嵌入在这些标签中的类和 ID。
- en: 'Let''s take a look at the DOM for our Google page:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 Google 页面上的 DOM：
- en: 'To see it, right-click on the page and click on Inspect. This should be the
    same for Firefox or Chrome. This will open the developer tab that allows you to
    see the page source information, as demonstrated in the following screenshot:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看它，请右键点击页面并选择“检查”。在 Firefox 或 Chrome 中应该是一样的。这将打开开发者工具标签，允许你查看页面源代码，如以下截图所示：
- en: '![](img/b0a6fcbc-0afa-421d-9664-23f9242afb5d.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0a6fcbc-0afa-421d-9664-23f9242afb5d.png)'
- en: 'Once this is open, choose the element selector in the upper left-hand corner,
    and click on an element to jump to that element in the page source code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开页面后，选择左上角的元素选择器，点击一个元素以跳转到该元素在页面源代码中的位置：
- en: '![](img/eb476064-5fec-4898-9022-582df358a0e5.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb476064-5fec-4898-9022-582df358a0e5.png)'
- en: 'The element that we are concerned with is the box that contains the flight
    information. This can be seen in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们关注的元素是包含航班信息的框。这可以通过下面的截图看到：
- en: '![](img/545cff57-fc62-4ec7-8698-f204cb72cd2b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/545cff57-fc62-4ec7-8698-f204cb72cd2b.png)'
- en: If you look closely at the element, you will notice that it is an element called
    a `div`. This div has an attribute called `class`. The is a long string of random
    numbers and letters in this `class`, but you will also notice that it contains
    the string `info-container`. We can use this information to retrieve all the `div`
    elements that have flight information for each city. We'll do that in a minute,
    but for now, let's discuss the parsing process.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仔细查看元素，你会注意到它是一个名为`div`的元素。这个`div`有一个名为`class`的属性。这个`class`是由一长串随机的数字和字母组成的，但你会注意到它包含了字符串`info-container`。我们可以利用这一信息来提取所有包含航班信息的`div`元素。我们稍后会进行操作，现在先讨论一下解析过程。
- en: Parsing
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析
- en: 'To begin our parsing, we will need to use the library we mentioned earlier
    called `BeautifulSoup`. We imported it earlier, so now we just need to pass the
    page source into `BeautifulSoup`. We do that by means of the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始解析，我们需要使用前面提到的`BeautifulSoup`库。我们已经导入了这个库，现在只需要将页面源代码传递给`BeautifulSoup`。我们可以通过以下代码来实现：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that the browser object contains a `page_source` attribute. That is all
    the HTML we retrieved with our `get` request earlier. The other parameter passed
    into `BeautifulSoup` is the parsing library it will use. Here, we will stick with
    `html5lib`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，浏览器对象包含`page_source`属性。这是我们之前用`get`请求检索到的所有HTML内容。传递给`BeautifulSoup`的另一个参数是它将使用的解析库。在这里，我们将使用`html5lib`。
- en: Now, once the content of the page has been passed to `BeautifulSoup`, we want
    to start to extract the elements of interest. That's where the `div` elements
    with the `info-container` class come in. We are going to retrieve those. Each
    one corresponds to a single city.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦页面内容被传递给`BeautifulSoup`，我们就可以开始提取感兴趣的元素了。这时，`div`元素和`info-container`类就派上了用场。我们将提取这些元素。每个`div`元素代表一个城市。
- en: 'Let''s retrieve them, but we''ll just look at the first one:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先提取第一个`div`：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output for the preceding code is shown as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下所示：
- en: '![](img/9a502333-31f6-438b-a335-bc17013ed6da.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a502333-31f6-438b-a335-bc17013ed6da.png)'
- en: In the preceding code, we used the `select` method on our `soup` object. The
    select method allows us to use CSS selectors to reference the elements of interest.
    Here, we have specified that we want divs that have a `class` attribute that contains
    somewhere within the class name the string `info-container`. There is excellent
    documentation on BeautifulSoup that explains these CSS selectors and other methods,
    and is available at [https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors)[.](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在`soup`对象上使用了`select`方法。`select`方法允许我们使用CSS选择器来引用感兴趣的元素。在这里，我们指定了要选择包含字符串`info-container`的`class`属性的`div`元素。有关BeautifulSoup的CSS选择器和其他方法的详细文档，可以在[https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors)找到。
- en: 'Looking at the preceding output, notice that buried deep within the markup,
    there is the name of the destination city (`London`) and the fare price (`$440`).
    Since we just want the data and not all the surrounding markup, we''ll need to
    create code to iterate over each `info-container` divs and pull out the city and
    the fare:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 查看前面的输出时，请注意，在标记中深埋着目的地城市名称（`London`）和票价（`$440`）。由于我们只需要数据而非所有的HTML标记，我们需要编写代码来遍历每个`info-container`的`div`，并提取城市和票价：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code results in the following output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下所示：
- en: '![](img/227c0fc3-e4b5-4be8-9fee-cee005f602c8.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/227c0fc3-e4b5-4be8-9fee-cee005f602c8.png)'
- en: Since it looks as if we were able to successfully retrieve the fares for each
    city, let's now move on to constructing a full scrape and parse for a large number
    of fares.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们似乎已经成功地获取了每个城市的票价，现在让我们继续构建一个完整的抓取和解析程序，以处理大量的票价数据。
- en: We are now going to attempt to retrieve the lowest cost, non-stop fares from
    NYC to Europe for a 26-week period. I'm using a start date of December 01, 2018,
    but obviously, if you are reading this after that date, make sure to adjust your
    dates accordingly.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将尝试获取从纽约市到欧洲的最低价、直飞航班票价，时间跨度为26周。我使用的开始日期是2018年12月1日，但显然，如果你是在这个日期之后阅读本文，确保相应地调整你的日期。
- en: 'The first thing we''ll need is to bring in some additional imports. We do that
    in the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要做的是引入一些额外的导入语句。我们在以下代码中完成这一操作：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we''ll construct the remainder of our scraping code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建剩余的抓取代码：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That's a fair amount of code, so we'll unpack what is going on line by line.
    The first two lines just create our start and end dates that we'll use. The next
    two lines convert those date strings into `datetime` objects. This will be used
    later on when we want to add a week to each using `timedelta`. The last line before
    the `for` loop simply creates a dictionary that will hold our parsed data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码量比较大，所以我们将逐行分析。前两行仅仅是创建我们将要使用的开始和结束日期。接下来的两行将这些日期字符串转换为`datetime`对象。这将在以后使用`timedelta`时加入一周。`for`循环前的最后一行仅仅是创建一个字典，用于存储我们解析后的数据。
- en: The next line begins a `for` loop. Inside this loop that will run `26` iterations,
    we convert our `datetime` object back into a string so that we can pass it into
    the URL that we will call with our browser object. Also, notice that on each iteration
    we populate our fare dictionary with the start date. We then create our URL using
    the date strings we created.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行开始了一个`for`循环。在这个将运行26次的循环内，我们将`datetime`对象转换回字符串，以便将其传递到我们将用浏览器对象调用的URL中。同时，注意到每次迭代时，我们都会用开始日期填充票价字典。然后，我们使用创建的日期字符串来构建URL。
- en: Next, we insert a random pause using the `numpy.random` function and the Python
    `sleep` function. This is simply to prevent us from appearing to be a bot and
    overtaxing the site.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`numpy.random`函数和Python的`sleep`函数插入一个随机的暂停。这只是为了避免我们看起来像是一个机器人，并防止对网站造成过大负担。
- en: We then retrieve the page with our browser object, pass it into `BeautifulSoup`
    for parsing, select the `info-container` divs, and then parse and update our fare
    dictionary. Finally, we add one week to our start and end dates so that the next
    iteration goes one week forward in time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们用浏览器对象获取页面，将其传递给`BeautifulSoup`进行解析，选择`info-container` divs，然后解析并更新我们的票价字典。最后，我们将开始和结束日期各加上一周，以便下一次迭代能够向前推进一周。
- en: 'Now, let''s look at the data in our fare dictionary:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们查看我们票价字典中的数据：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code results in the following output:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码生成了以下输出：
- en: '![](img/e9b602b2-0979-4af4-9a8c-56a3e365b8d1.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9b602b2-0979-4af4-9a8c-56a3e365b8d1.png)'
- en: As you can see, we have a dictionary with date as the primary key, and then
    sub dictionaries with city/fare pairings.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有一个以日期为主键的字典，然后是包含城市和票价配对的子字典。
- en: 'Now, let''s dive into one city to examine the data. We''ll begin with `Berlin`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解一个城市的数据。我们从`柏林`开始：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code results in the following output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码生成了以下输出：
- en: '![](img/49d0b34a-49e4-427e-9c09-a8ff18caed94.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49d0b34a-49e4-427e-9c09-a8ff18caed94.png)'
- en: 'One thing we notice right away is that we''ll need to clean up the airfares
    so that we can work with them. We''ll need to remove the dollar sign and the commas
    and convert them into integers. We do that in the following code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们立即注意到的一件事是，我们需要清理票价数据，以便进行处理。我们需要移除美元符号和逗号，并将其转换为整数。我们在以下代码中完成这一操作：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code results in the following output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码生成了以下输出：
- en: '![](img/66d482dd-d12a-4f6e-8dc3-890c8be649df.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66d482dd-d12a-4f6e-8dc3-890c8be649df.png)'
- en: Remember, the output shown in the preceding code is only for Berlin, as we are
    just examining one city at the moment.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，上述代码的输出仅适用于柏林，因为我们现在只是在检查一个城市的数据。
- en: 'Now, let''s plot that data:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们绘制这些数据：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code generates the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码生成了以下输出：
- en: '![](img/be3ca9f2-8abf-40bd-a4dd-65a07befade6.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be3ca9f2-8abf-40bd-a4dd-65a07befade6.png)'
- en: Notice that we have 26 consecutive weeks of data, in this case, for non-stop
    flights from NYC to Berlin leaving on Saturday and returning the following Saturday.
    There appears to be a fair amount of variation in these fares. Just eyeballing
    the data, it appears that there might be two outliers on the high end toward the
    beginning of the period and the end.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们有26个连续的周的数据，在这种情况下，从纽约到柏林的直飞航班，周六出发，次周六返回。这些票价存在相当大的变化。仅凭眼观数据，看起来在期间的开始和结束处可能有两个高端的异常值。
- en: 'Now, let''s take a look at another city. To do this, we simply need to return
    to our code and change the `city_key` variable. We can then rerun the cells below
    it. We''ll do that in the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看另一个城市。为此，我们只需返回我们的代码并更改`city_key`变量。然后我们可以重新运行下面的单元格。我们将在以下代码中执行此操作：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This results in the following output:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致以下输出：
- en: '![](img/3a956cce-cbe3-49c6-b3b9-0349f9c553df.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a956cce-cbe3-49c6-b3b9-0349f9c553df.png)'
- en: 'We''ll need to remove the dollar sign and the commas and convert them into
    integers. We do that in the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要去掉美元符号和逗号，并将它们转换为整数。我们在以下代码中执行此操作：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code results in the following output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成以下输出：
- en: '![](img/5ea4b5e6-56ee-4bf5-b88d-48542d881c79.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ea4b5e6-56ee-4bf5-b88d-48542d881c79.png)'
- en: 'Now, let''s plot that data:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们绘制这些数据：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code results in the following output:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成以下输出：
- en: '![](img/472f83cb-3c53-4e46-a29d-8218243f70da.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/472f83cb-3c53-4e46-a29d-8218243f70da.png)'
- en: Here, we can see even wider variations, with fares ranging from under $600 to
    over $1,200\. Those cheap fares on the left are exactly the type of fares we'd
    like to know about. We are going to want to create an outlier detection system
    that will tell us about these bargain fares. We'll move on and discuss that now.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到更广泛的变化，票价从低于$600到超过$1,200不等。左侧的廉价票价正是我们想了解的类型。我们将要创建一个异常值检测系统，告诉我们这些便宜的票价。我们将继续讨论这个问题。
- en: Identifying outlier fares with anomaly detection techniques
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用异常检测技术识别异常票价
- en: There are various rigorous definitions of outliers, but for our purposes, an
    **outlier** is any extreme value that is far from the other observations in the
    dataset. There are numerous techniques, both parametric and non-parametric, that
    are used to identify outliers; example algorithms include **density-based spatial
    clustering of applications with noise** (**DBSCAN**), isolation forests, and Grubbs'
    Test. Typically, the type of data determines the type of algorithm that is used.
    For example, some algorithms do better on multivariate data than univariate data.
    Here, we are dealing with univariate time-series data, so we'll want to choose
    an algorithm that handles that well.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种严格的异常值定义，但对于我们的目的，**异常值**是指远离数据集中其他观测值的极端值。有许多用于识别异常值的技术，包括**基于密度的空间聚类应用（DBSCAN）**、孤立森林和格鲁布斯测试，这些算法的例子。通常，数据类型决定了使用的算法类型。例如，某些算法在多变量数据上表现更好，而在单变量数据上表现不错。在这里，我们处理的是单变量时间序列数据，因此我们希望选择一个能很好处理这种数据的算法。
- en: If you aren't familiar with the term *time series*, it simply means data that
    is recorded at regular intervals, such as the daily closing price of a stock.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对*时间序列*这个术语不熟悉，它简单地意味着以固定间隔记录的数据，比如股票的每日收盘价。
- en: The algorithm that we are going to use for our data is called **Generalized
    Extreme Studentized Deviate** (**Generalized ESD**) test for outliers. This algorithm
    is well suited for our data, since it is univariate and approximately normal.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用于我们的数据的算法称为**广义极端学生化偏差检验**（**Generalized ESD**）异常值检验。由于我们的数据是单变量且近似正态分布，这个算法非常适合我们的数据。
- en: 'There are several tests we can use to ensure that our data is approximately
    normally distributed, but we can also visually inspect our data for normality
    using a normal probability plot. We''ll do that now for Moscow city data using
    some functionality from the SciPy library:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用几种方法来确保我们的数据近似正态分布，但我们还可以使用正态概率图来直观检查我们的数据的正态性。现在，我们将为莫斯科城市数据使用来自SciPy库的一些功能执行此操作：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding code generates the following output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成以下输出：
- en: '![](img/128bbbd5-12c0-4e06-be04-3d6f32717512.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/128bbbd5-12c0-4e06-be04-3d6f32717512.png)'
- en: When assessing a **normal probability** or **quantile-quantile** (**Q-Q**) **plot**,
    we are looking for the data to be as close to the straight line as possible to
    reveal normality. Data that veers off in one direction or another, or with a strong
    S shape, argues against normal data. Here, we have a fairly low number of data
    points, and those that we do have are fairly balanced around the diagonal. If
    we had more data, it is likely that we would more closely approximate the diagonal.
    This should work well enough for our purposes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估**正态概率**或**分位数-分位数**（**Q-Q**）**图**时，我们希望数据尽可能靠近直线，以揭示正态性。数据如果向一个方向偏离，或者呈现出明显的S形，则表明数据不符合正态分布。这里，我们的数据点较少，且已有的数据点大致平衡分布在对角线上。如果我们有更多数据，可能会更接近对角线。这个结果应该足够满足我们的需求。
- en: We'll now move on to our outlier detection code. We are going to be utilizing
    another library for this called `PyAstronomy`. If you don't have it, it can easily
    be pip installed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将进入异常值检测代码部分。我们将使用另一个库——`PyAstronomy`。如果你没有这个库，可以通过pip安装。
- en: 'Let''s look at the code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let's discuss what the preceding code does. The first line is simply our import.
    Following that, we implement our generalized ESD algorithm. The parameters are
    our fare prices, then the maximum number of outliers (here, we chose `3`), the
    significance level (alpha, at `0.025`), and finally a Boolean to specify that
    we want the full output. With respect to the significance level, the lower the
    value, the less sensitive the algorithm and the fewer false positives will be
    generated.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来讨论一下前面的代码做了什么。第一行只是我们的导入。接下来，我们实现了通用的ESD算法。参数是我们的票价，然后是最大异常值数量（在这里，我们选择了`3`），显著性水平（alpha，值为`0.025`），最后是一个布尔值，用于指定我们希望获得完整输出。关于显著性水平，值越低，算法的敏感性越低，产生的假阳性越少。
- en: The next two lines simply print out data related to the `R` and `Lambda` values.
    These are utilized in the determination of whether a data point is an outlier.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行仅仅是打印出与`R`和`Lambda`值相关的数据。这些数据用于判断一个数据点是否为异常值。
- en: Finally, the remainder of the code is simply for generating the scatter plot
    and coloring those fares that are outliers red.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，代码的其余部分仅用于生成散点图，并将异常值的票价标记为红色。
- en: 'The preceding code generates the following output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码生成了以下输出：
- en: '![](img/0a02c3e2-6605-45a9-9bac-8ec7430039b3.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a02c3e2-6605-45a9-9bac-8ec7430039b3.png)'
- en: Again, this data is for Moscow. Make sure you changed your `city_key` variable
    to reflect that to ensure you get that data. Notice that despite all the variations,
    there are no outliers in the data.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，这些数据是针对莫斯科的。确保你已经更改了`city_key`变量，以便获取相关数据。注意，尽管数据中存在一些变化，但并没有异常值。
- en: 'Now, let''s run it for Milan as well. We''ll go back up and change our `city_key`
    variable and run the cells below that to update everything, as demonstrated in
    the following diagram:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们也为米兰运行这个代码。我们将返回上面，修改`city_key`变量，然后运行下面的单元格以更新所有内容，正如下图所示：
- en: '![](img/670a1a91-fc27-4831-83ad-1a78f54e0d10.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/670a1a91-fc27-4831-83ad-1a78f54e0d10.png)'
- en: Notice that this time, we have three outliers, and these are fares that are
    under $600 when the mean fare looks to be over $900, so this looks like a win
    for us.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这一次我们发现有三个异常值，这些票价低于$600，而平均票价似乎超过了$900，所以这对我们来说是个好结果。
- en: 'Let''s try another city. This time, we''ll look at Athens by updating the `city_key` variable
    and running the subsequent cells:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试另一个城市。这一次，我们将通过更新`city_key`变量来查看雅典的数据，并运行随后的单元格：
- en: '![](img/080ba74c-e3d1-44b6-a9e2-0f156a14ae69.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/080ba74c-e3d1-44b6-a9e2-0f156a14ae69.png)'
- en: Notice that again, we have three outliers, but that this time, they are extreme
    fares to the upside. Since we are only interested in getting alerts for cheap
    fares, we can build in a mechanism to only alert us when the fare outlier is less
    than the mean fare.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这一次我们有三个异常值，但它们是极高的票价。由于我们只对便宜票价的异常值感兴趣，我们可以设置一个机制，仅当异常票价低于平均票价时才会发出警报。
- en: 'Now, we''ll now create some code to handle this element:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一些代码来处理这一元素：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When we run the code for Athens, it will generate no output. When run for Milan,
    it generates the following output:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为雅典运行代码时，它不会生成任何输出。而为米兰运行时，它会生成以下输出：
- en: '![](img/24a54489-3428-4263-8be8-1bbaaf435f90.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24a54489-3428-4263-8be8-1bbaaf435f90.png)'
- en: So, now, we have created a system to scrape the data, parse it, and identify
    the outliers. Let's move on and create a fully-fledged application that can alert
    us in real time.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在，我们已经创建了一个系统来抓取数据，解析它，并识别异常值。接下来我们将创建一个完整的应用程序，在实时中警告我们。
- en: Keep in mind that we just did a very preliminary analysis on our outlier detection
    model. In the real world, it would likely take a much more thorough series of
    tests to identify whether we had selected workable parameters for our model.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们刚刚对我们的异常值检测模型进行了初步分析。在实际应用中，可能需要进行更加彻底的一系列测试，以确认我们是否为模型选择了可行的参数。
- en: Sending real-time alerts using IFTTT
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IFTTT 发送实时提醒
- en: 'To have a chance at getting these cheap fares, we''re going to need to know
    in nearly real time when they happen. To accomplish this, we''ll use a service
    called **If This Then That** (**IFTTT**). This free service allows you to connect
    a huge number of services with a series of triggers and actions. Want to save
    as many pictures as you like on Instagram to your iPhone photos? Want to get an
    email every time a particular person tweets? Want your Facebook updates posted
    to Twitter? IFTTT can do all of this. Go through the following steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有机会获得这些便宜的票价，我们需要几乎实时地知道它们何时发生。为此，我们将使用一个名为 **If This Then That**（**IFTTT**）的服务。这个免费的服务允许你通过一系列的触发器和动作将大量服务连接起来。想将
    Instagram 上的所有照片保存到你的 iPhone 照片库吗？想每次某个人发推文时收到邮件通知吗？想将你的 Facebook 更新发布到 Twitter
    吗？IFTTT 可以做到这一切。请按照以下步骤操作：
- en: The first step is to sign up for an account at [http://www.ifttt.com](https://ifttt.com/).
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是访问 [http://www.ifttt.com](https://ifttt.com/) 注册账户。
- en: Once you've done that, you'll need to sign up for the Maker channel, [https://ifttt.com/maker_webhooks](https://ifttt.com/maker_webhooks),
    and the SMS channel, [https://ifttt.com/sms](https://ifttt.com/sms).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成，你需要注册 Maker 渠道，[https://ifttt.com/maker_webhooks](https://ifttt.com/maker_webhooks)，以及
    SMS 渠道，[https://ifttt.com/sms](https://ifttt.com/sms)。
- en: Maker allows you to create IFTTT recipes by sending and receiving HTTP requests.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Maker 允许你通过发送和接收 HTTP 请求来创建 IFTTT 配方。
- en: 'Once you''ve created an account and activated the Maker and SMS channels, click
    My Applets from the home page, and then click New Applet:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你创建了账户并激活了 Maker 和 SMS 渠道，点击主页上的我的 Applets，然后点击新建 Applet：
- en: '![](img/3382cd71-d1f7-44ac-9377-d89b4187a378.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3382cd71-d1f7-44ac-9377-d89b4187a378.png)'
- en: 'Then, click on this, as shown in the following screenshot:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击此项，如下图所示：
- en: '![](img/b632a0c0-06f0-458f-8523-16b088845c3b.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b632a0c0-06f0-458f-8523-16b088845c3b.png)'
- en: 'Then, search for `webhooks` and click Receive a web request:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，搜索 `webhooks` 并点击接收一个 Web 请求：
- en: '![](img/342a78ef-d23c-4862-8377-31740b0a6523.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/342a78ef-d23c-4862-8377-31740b0a6523.png)'
- en: 'Then, we''ll create an event called `cheap_fares`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个名为 `cheap_fares` 的事件：
- en: '![](img/7c3025ec-fa02-4d77-a752-05e364451d77.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c3025ec-fa02-4d77-a752-05e364451d77.png)'
- en: 'Once you fill out the event name, click Create trigger. Next, we''ll set up
    the +that:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写事件名称后，点击创建触发器。接下来，我们将设置 +that：
- en: '![](img/3fd8b525-d386-4614-900f-7ac084c380ba.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fd8b525-d386-4614-900f-7ac084c380ba.png)'
- en: 'Click that, and then search for `SMS` and select it:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击那，然后搜索 `SMS` 并选择它：
- en: '![](img/b99706b9-ff75-41fa-b134-4b538bb21ff3.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b99706b9-ff75-41fa-b134-4b538bb21ff3.png)'
- en: 'Then, choose Send me an SMS:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择发送短信给我：
- en: '![](img/290c915e-fb68-4fda-8eae-b07ab23f8d40.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/290c915e-fb68-4fda-8eae-b07ab23f8d40.png)'
- en: 'After that, we''ll customize our message:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们将自定义我们的消息：
- en: '![](img/0f5f71ef-2098-4701-9293-66f152f7eba2.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f5f71ef-2098-4701-9293-66f152f7eba2.png)'
- en: 'Once this is complete, click on Finish to wrap-up the setup:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，点击完成以结束设置：
- en: '![](img/277b926f-3ec4-4dd2-8790-0efdeb1943e7.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/277b926f-3ec4-4dd2-8790-0efdeb1943e7.png)'
- en: To test the setup, go to [http://www.ifttt.com/maker_webhooks](https://ifttt.com/maker_webhooks)
    and click on Settings. You should see your account information that includes a
    URL with a secret key. Copy and paste that URL into your browser. It should have
    a form with your secret key and a place to fill in the values that correspond
    to your city and price.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试设置，访问 [http://www.ifttt.com/maker_webhooks](https://ifttt.com/maker_webhooks)
    并点击设置。你应该能看到包含带有秘密密钥的 URL 的账户信息。复制并粘贴该 URL 到浏览器中。它应该包含一个表单，包含你的秘密密钥和填写城市和价格的字段。
- en: 'Fill in cheap_fares for event, and place the city and fare into value1 and
    value2, respectively:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 填写 cheap_fares 作为事件，并将城市和票价分别放入 value1 和 value2：
- en: '![](img/07a5bbd4-c648-4a74-a2ac-bfb96c1abfce.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07a5bbd4-c648-4a74-a2ac-bfb96c1abfce.png)'
- en: Finally, click Test It, and you should receive a text message in just a few
    seconds.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击测试，它应该在几秒钟内收到一条短信。
- en: Now that we have all the pieces in place, it's time to pull it all together
    into a single script that will monitor fares 24/7.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所有的部分都准备好了，是时候将它们整合成一个监控票价24/7的单一脚本了。
- en: Putting it all together
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: Up until this point, we've worked within the Jupyter Notebook, but now, in order
    to deploy our app, we'll move on to working in a text editor. The notebook is
    excellent for exploratory analysis and visualization, but running a background
    job is best done within a simple `.py` file. So, let's get started.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在Jupyter Notebook中工作，但现在，为了部署我们的应用程序，我们将转到文本编辑器中工作。Notebook非常适合探索性分析和可视化，但运行后台任务最好是在简单的`.py`文件中完成。所以，开始吧。
- en: 'We''ll begin with our imports. You may need to `pip install` a few of these
    if you don''t already have them installed:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从导入开始。如果你还没有安装这些库，可能需要通过`pip install`安装一些：
- en: '[PRE21]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we''ll create a function that pulls down the data and runs our algorithm:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个函数，拉取数据并运行我们的算法：
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we''ll include a scheduler. This will run our code every 60 minutes:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将加入一个调度器。它将每60分钟运行一次我们的代码：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And that should do it. We can now save this as `fare_alerter.py`, and run it
    from the command line. You will need to pass in three arguments. The first is
    the city, the second is the start date, and the final one is the end date. An
    example is as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该就够了。现在我们可以将其保存为`fare_alerter.py`，并通过命令行运行它。你需要传入三个参数。第一个是城市，第二个是开始日期，最后一个是结束日期。示例如下：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The script will continue running and check fares every 60 minutes. If a mistake
    fare occurs, we'll be one of the first to know!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本将继续运行，每60分钟检查一次票价。如果发生错误票价，我们将是最先得知的之一！
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We've covered a lot of ground in this chapter. We've learned how to find the
    best airfare data on the web, how to work with the DOM to find the elements we
    want to parse, how to identify outliers, and finally, how to send text alerts
    from our code using web requests through IFTTT. While what we've covered here
    is for airfares, nearly everything we've done could be reused for any type of
    pricing you'd like to be alerted to.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们涵盖了很多内容。我们学会了如何在网上找到最佳的机票数据，如何通过DOM操作找到我们要解析的元素，如何识别异常值，最后，如何通过IFTTT通过网页请求发送文本提醒。虽然我们这里讲的是机票，但几乎所有的内容都可以应用于任何你希望收到提醒的定价类型。
- en: If you do decide to use it for airfares though, I hope it provides you with
    many happy travels!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定使用它来查询机票价格，希望它能为你带来愉快的旅行！
