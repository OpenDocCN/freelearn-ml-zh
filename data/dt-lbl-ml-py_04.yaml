- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Exploring Image Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索图像数据
- en: In this chapter, we will learn how to explore image data using various packages
    and libraries in Python. We will also see how to visualize images using Matplotlib
    and analyze image properties using NumPy.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Python中的各种包和库来探索图像数据。我们还将看到如何使用Matplotlib可视化图像，以及如何使用NumPy分析图像属性。
- en: Image data is widely used in machine learning, computer vision, and object detection
    across various real-world applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图像数据在机器学习、计算机视觉和物体检测的各个实际应用中得到了广泛的应用。
- en: The chapter is divided into three key sections covering visualizing image data,
    analyzing image size and aspect ratios, and performing transformations on images.
    Each section focuses on a specific aspect of image data analysis, providing practical
    insights and techniques to extract valuable information.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为三个关键部分，涵盖了可视化图像数据、分析图像尺寸和宽高比，以及在对图像进行变换。每一部分都专注于图像数据分析的特定方面，提供了实用的见解和技术，以提取有价值的信息。
- en: In the first section, *Visualizing image data*, we will utilize the Matplotlib,
    Seaborn, **Python Imaging Library** (**PIL**), and NumPy libraries and explore
    techniques such as plotting histograms of pixel values for grayscale images, visualizing
    color channels in RGB images, adding annotations to enhance image interpretation,
    and performing image segmentation. Additionally, we will dive into feature extraction
    using the **Histogram of Oriented Gradients** (**HOG**). Through practical examples
    and hands-on exercises, this section equips you with essential skills for visually
    analyzing and interpreting image data using Python libraries. Whether you’re a
    beginner or seeking to deepen your image processing expertise, this section provides
    valuable insights and practical knowledge.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，*可视化图像数据*中，我们将利用Matplotlib、Seaborn、**Python图像库**（**PIL**）和NumPy库，并探索诸如为灰度图像绘制像素值直方图、可视化RGB图像中的颜色通道、添加注释以增强图像解释，以及执行图像分割等技术。此外，我们还将深入探讨使用**方向梯度直方图**（**HOG**）进行特征提取。通过实际示例和动手练习，本部分将为您提供使用Python库进行视觉分析和解释图像数据的基本技能。无论您是初学者还是希望深化图像处理专业知识，本部分都提供了有价值的见解和实用知识。
- en: Moving on to the second *Analyzing image size and aspect ratio* section, we
    delve into the importance of understanding the dimensions and proportions of images.
    We demonstrate how Python libraries such as **Python Imaging Library** (**PIL**)
    and OpenCV can be utilized to extract and analyze image size and aspect ratios.
    By studying these attributes, we can derive meaningful insights about the composition
    and structure of images, which can inform data-labeling decisions and contribute
    to accurate classification or object detection tasks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来进入第二部分*分析图像尺寸和宽高比*，我们深入探讨了理解图像尺寸和比例的重要性。我们展示了如何利用Python库如**Python图像库**（**PIL**）和OpenCV提取和分析图像尺寸和宽高比。通过研究这些属性，我们可以得出关于图像组成和结构的有意义的见解，这可以指导数据标注决策，并有助于准确分类或物体检测任务。
- en: The final *Performing transformations on images* section explores the concept
    of data augmentation through transformations. We delve into how various image
    transformations, such as rotations, translations, and shearing, can be applied
    using libraries such as OpenCV and scikit-image. These transformations not only
    enhance the diversity and size of the dataset but also enable the creation of
    augmented images that capture different orientations, perspectives, or variations.
    We discuss how these transformed images can be leveraged for data labeling and
    improving model performance.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的*对图像进行变换*部分探讨了通过变换进行数据增强的概念。我们深入探讨了如何使用OpenCV和scikit-image等库应用各种图像变换，如旋转、平移和剪切。这些变换不仅增强了数据集的多样性和规模，还允许创建捕捉不同方向、视角或变化的增强图像。我们讨论了如何利用这些变换后的图像进行数据标注和提升模型性能。
- en: Throughout the chapter, we emphasize the practical implementation of these techniques
    using Python. By leveraging the rich ecosystem of image processing libraries and
    visualization tools, we empower readers to perform exploratory data analysis specifically
    tailored for image datasets. The insights gained from visualizing image data,
    analyzing size and aspect ratios, and performing transformations lay a strong
    foundation for effective data labeling and building robust machine learning models.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们强调使用Python实现这些技术的实际应用。通过利用图像处理库和可视化工具丰富的生态系统，我们使读者能够执行针对图像数据集的探索性数据分析。从可视化图像数据、分析尺寸和纵横比以及执行转换中获得的认识，为有效的数据标注和构建稳健的机器学习模型奠定了坚实的基础。
- en: Whether you are an aspiring data scientist, an image processing enthusiast,
    or a professional looking to enhance your data labeling skills, this chapter provides
    valuable guidance and hands-on examples to explore, analyze, and label image data
    effectively using Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是希望成为数据科学家、图像处理爱好者，还是希望提高数据标注技能的专业人士，本章都提供了宝贵的指导和实际示例，以探索、分析和使用Python有效地标注图像数据。
- en: 'By the end of this chapter, we will have covered the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将涵盖以下主题：
- en: Visualizing image data
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化图像数据
- en: Analyzing image size and aspect ratios
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析图像尺寸和纵横比
- en: Performing transformations on images
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对图像执行转换操作
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, you’ll need VS Code, Keras, CV2, and OpenCV. A Python notebook
    with the example code used in this chapter can be downloaded from [https://github.com/PacktPublishing/Data-Labeling-in-Machine-Learning-with-Python/tree/main/code//Ch04](https://github.com/PacktPublishing/Data-Labeling-in-Machine-Learning-with-Python/tree/main/code//Ch04).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要VS Code、Keras、CV2和OpenCV。本章使用的示例代码的Python笔记本可以从[https://github.com/PacktPublishing/Data-Labeling-in-Machine-Learning-with-Python/tree/main/code//Ch04](https://github.com/PacktPublishing/Data-Labeling-in-Machine-Learning-with-Python/tree/main/code//Ch04)下载。
- en: You will find the results of all code blocks in the notebook in this GitHub
    repository. As well as this, you will need the environment setup outlined in the
    *Preface* of the book.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本GitHub仓库中的笔记本中找到所有代码块的结果。此外，您还需要在书的**前言**中概述的环境设置。
- en: Visualizing image data using Matplotlib in Python
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python中的Matplotlib可视化图像数据
- en: In this section, we explore the power of visualization tools and techniques
    to gain meaningful insights into the characteristics and patterns of image data.
    Using Python libraries such as Matplotlib and Seaborn, we learn how to create
    visualizations that showcase image distributions, class imbalances, color distributions,
    and other essential features. By visualizing the image data, we can uncover hidden
    patterns, detect anomalies, and make informed decisions for data labeling.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨可视化工具和技术的作用，以深入了解图像数据的特性和模式。通过使用Python库，如Matplotlib和Seaborn，我们学习如何创建展示图像分布、类别不平衡、颜色分布和其他关键特征的可视化。通过可视化图像数据，我们可以揭示隐藏的模式，检测异常，并为数据标注做出明智的决策。
- en: '**Exploratory Data Analysis** (**EDA**) is an important step in the process
    of building computer vision models. In EDA, we analyze the image data to understand
    its characteristics and identify patterns and relationships that can inform our
    modeling decisions.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**探索性数据分析**（**EDA**）是构建计算机视觉模型过程中的重要步骤。在EDA中，我们分析图像数据，以了解其特性，并识别可以指导我们的建模决策的模式和关系。'
- en: 'Some real-world examples of image data analysis and AI applications are as
    follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一些图像数据分析和应用的真实世界示例如下：
- en: '**Autonomous vehicles**: Image data plays a crucial role in enabling autonomous
    vehicles to perceive their surroundings. Cameras mounted on vehicles capture images
    of the road and surroundings, and machine learning algorithms analyze these images
    to detect and recognize objects such as pedestrians, vehicles, and traffic signs.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动驾驶汽车**：图像数据在使自动驾驶汽车感知周围环境方面发挥着至关重要的作用。安装在车辆上的摄像头捕捉道路和周围环境的图像，机器学习算法分析这些图像以检测和识别行人、车辆和交通标志等对象。'
- en: '**Medical image analysis**: In the field of medical imaging, machine learning
    is used for tasks such as tumor detection, organ segmentation, and disease diagnosis.
    Radiological images, such as X-rays, MRIs, and CT scans, are analyzed to identify
    anomalies and assist healthcare professionals in making informed decisions.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**医学图像分析**：在医学成像领域，机器学习被用于肿瘤检测、器官分割和疾病诊断等任务。放射学图像，如X射线、MRI和CT扫描，被分析以识别异常并协助医疗保健专业人员做出明智的决定。'
- en: '**Retail and e-commerce**: Object detection is employed in retail for inventory
    management and customer experience improvement. For example, automated checkout
    systems use computer vision to recognize and tally products in a shopping cart,
    enhancing the efficiency of the checkout process.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**零售和电子商务**：在零售业中，目标检测被用于库存管理和客户体验改进。例如，自动结账系统使用计算机视觉来识别和统计购物车中的产品，从而提高结账过程的效率。'
- en: '**Security and surveillance**: Image data is utilized in security systems for
    surveillance and threat detection. Machine learning models can analyze video feeds
    to identify and alert authorities about suspicious activities, intruders, or unusual
    behavior in public spaces.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和监控**：图像数据在安全系统中用于监控和威胁检测。机器学习模型可以分析视频流以识别并向当局发出关于公共场所可疑活动、入侵者或异常行为的警报。'
- en: '**Facial recognition**: Facial recognition technology relies on image data
    to identify and verify individuals. This is used in various applications, including
    smartphone authentication, access control systems, and law enforcement for criminal
    identification.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面部识别**：面部识别技术依赖于图像数据来识别和验证个人。这被用于各种应用，包括智能手机认证、访问控制系统和执法部门的犯罪识别。'
- en: '**Augmented Reality (AR)**: AR applications overlay digital information onto
    the real world. Image data is essential for tracking and recognizing objects and
    surfaces, enabling realistic and interactive AR experiences.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强现实（AR）**：AR应用将数字信息叠加到现实世界中。图像数据对于跟踪和识别物体和表面至关重要，从而实现真实和交互式的AR体验。'
- en: '**Quality control in manufacturing**: Computer vision is employed in manufacturing
    to inspect products for defects and ensure quality. Automated systems analyze
    images of products on assembly lines, identifying any deviations from the desired
    specifications.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制造业质量控制**：计算机视觉在制造业中用于检查产品缺陷并确保质量。自动化系统分析装配线上的产品图像，以识别任何与预期规格的偏差。'
- en: '**Satellite image analysis**: Satellite imagery is used for various purposes,
    including land cover classification, environmental monitoring, and disaster response.
    Machine learning algorithms can analyze satellite images to identify changes in
    landscapes, detect deforestation, or assess the impact of natural disasters.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卫星图像分析**：卫星图像被用于多种目的，包括土地覆盖分类、环境监测和灾害响应。机器学习算法可以分析卫星图像以识别景观变化、检测森林砍伐或评估自然灾害的影响。'
- en: These examples illustrate the diverse applications of image data in machine
    learning, computer vision, and object detection, showcasing its significance in
    solving real-world problems across different domains.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子展示了图像数据在机器学习、计算机视觉和目标检测中的多样化应用，展示了它在解决不同领域现实世界问题中的重要性。
- en: The following are some steps to follow when conducting EDA for image data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行图像数据的EDA（探索性数据分析）时，以下是一些需要遵循的步骤。
- en: Loading the data
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据
- en: The first step in any EDA process is to load the image data into your **Integrated
    Development Environment** (**IDE**) workspace, such as VS Code, Jupyter Notebook,
    or any other Python editor. Depending on the format of the data, you may need
    to use a library such as OpenCV or PIL to read in the images.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 任何EDA过程的第一个步骤是将图像数据加载到您的**集成开发环境（IDE）**工作区中，例如VS Code、Jupyter Notebook或任何其他Python编辑器。根据数据格式，您可能需要使用OpenCV或PIL等库来读取图像。
- en: Checking the dimensions
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查尺寸
- en: The next step is to check the dimensions of the images. Image dimensions can
    affect the performance of your model, as larger images require more memory and
    computation. You should also check that all the images have the same dimensions,
    as this is a requirement for most computer vision models. If the images are not
    of the same size, then preprocessing is required to convert them to the same size.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是检查图像的尺寸。图像尺寸可能会影响您模型的表现，因为较大的图像需要更多的内存和计算。您还应确保所有图像具有相同的尺寸，因为这是大多数计算机视觉模型的要求。如果图像尺寸不同，则需要预处理以将它们转换为相同的尺寸。
- en: Visualizing the data
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化数据
- en: Visualization is a powerful tool for understanding image data. You can use the
    Matplotlib or Seaborn libraries to visualize the data in various ways. You can
    plot histograms of pixel values to see their distributions or use scatter plots
    to visualize the relationship between pixel values. We will cover this later in
    this chapter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化是理解图像数据的有力工具。您可以使用Matplotlib或Seaborn库以各种方式可视化数据。您可以通过绘制像素值的直方图来查看它们的分布，或使用散点图来可视化像素值之间的关系。我们将在本章后面介绍这一点。
- en: Checking for outliers
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查异常值
- en: Outliers can have a significant impact on your model’s performance. You should
    check for outliers in your image data by plotting boxplots and examining the distribution
    of pixel values. In the context of image data, outliers are data points (in this
    case, images) that significantly deviate from the expected or normal distribution
    of the dataset. Outliers in image data are images that have distinct characteristics
    or patterns that are different from the majority of images in the dataset. Images
    with pixel values that are much higher or lower than the typical range for the
    dataset can be considered outliers. These extreme values might be due to sensor
    malfunctions, data corruption, or other anomalies. Images with color distributions
    that significantly differ from the expected color distributions of the dataset
    can be considered outliers. These might be images with unusual color casts, saturation,
    or intensity.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 异常值会对您模型的性能产生重大影响。您应该通过绘制箱线图和检查像素值的分布来检查图像数据中的异常值。在图像数据的上下文中，异常值是（在这种情况下，图像）与数据集预期或正常分布显著偏离的数据点。图像数据中的异常值是具有与数据集中大多数图像不同的独特特征或模式的图像。像素值远高于或低于数据集典型范围的图像可以被认为是异常值。这些极端值可能是由于传感器故障、数据损坏或其他异常引起的。颜色分布与数据集预期颜色分布显著不同的图像也可以被认为是异常值。这些可能是具有不寻常的色彩色调、饱和度或强度的图像。
- en: Performing data preprocessing
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行数据预处理
- en: Preprocessing is an important step in EDA, as it can help to reduce noise and
    improve the quality of the images. Common preprocessing techniques include resizing,
    normalization, data augmentation, image segmentation, and feature extraction.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理是EDA中的重要步骤，因为它可以帮助减少噪声并提高图像质量。常见的预处理技术包括调整大小、归一化、数据增强、图像分割和特征提取。
- en: In image data, preprocessing involves several steps.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像数据中，预处理涉及多个步骤。
- en: 1\. Image resizing
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1. 图像调整大小
- en: The first step in preprocessing image data is resizing the images. Image resizing
    is essential because we need all the images to be of the same size. If we do not
    make sure to resize the images, we may end up with images of different sizes,
    which can lead to issues during training.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理图像数据的第一个步骤是调整图像大小。图像调整大小是必要的，因为我们需要所有图像具有相同的大小。如果我们不确保调整图像大小，我们可能会得到不同大小的图像，这可能导致训练期间出现问题。
- en: 2\. Image normalization
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2. 图像归一化
- en: The next step in preprocessing image data is normalization. Normalization is
    essential because it helps to reduce the effect of lighting and color variations
    on the images. Normalization involves scaling the pixel values of the images to
    a specific range. The most common method of normalization is to scale the pixel
    values to the range [0,1]. Scaling pixel values to the range [0, 1] during image
    dataset normalization has several significant advantages and implications that
    make it a common and effective practice in various image processing and machine
    learning tasks. Here’s why this range is significant. Normalizing images to a
    common range ensures that all pixel values across different images have the same
    scale. This makes it easier for algorithms to compare and process images, as they
    don’t need to deal with varying pixel value ranges. The range [0, 1] is well suited
    for numerical stability in computations. Many machine learning algorithms and
    image processing techniques work best when dealing with values that are not too
    large or too small. Scaling to [0, 1] helps prevent numerical instability and
    issues such as exploding gradients during training.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理图像数据的下一步是归一化。归一化是必不可少的，因为它有助于减少光照和颜色变化对图像的影响。归一化涉及将图像的像素值缩放到特定范围。最常见的归一化方法是将像素值缩放到[0,1]的范围。在图像数据集归一化期间将像素值缩放到[0,
    1]范围具有几个重要的优势和影响，使其成为各种图像处理和机器学习任务中常见且有效的实践。以下是为什么这个范围是重要的原因。将图像归一化到公共范围确保了不同图像中的所有像素值具有相同的尺度。这使得算法更容易比较和处理图像，因为它们不需要处理变化的像素值范围。[0,
    1]的范围非常适合计算中的数值稳定性。许多机器学习算法和图像处理技术在处理不是太大或太小的值时表现最佳。将像素值缩放到[0, 1]有助于防止数值不稳定和训练期间梯度爆炸等问题。
- en: 3\. Image augmentation
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3. 图像增强
- en: Image augmentation is a technique used to increase the size of the training
    dataset by creating additional images. Image augmentation involves applying various
    transformations to the original images, such as rotation, flipping, zooming, and
    shearing. It is used in image classification and object detection tasks. Image
    augmentation is essential because it helps to reduce overfitting and improves
    the generalization of the model. Overfitting is a common problem in machine learning
    and deep learning where a model learns the training data so well that it starts
    capturing noise and random fluctuations in the data instead of the underlying
    patterns. It helps produce robust models. Excessive augmentation can lead to unrealistic
    models or overfitting, which can result in reduced generalization ability, limiting
    the model’s usefulness in real-world scenarios.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图像增强是一种通过创建额外的图像来增加训练数据集大小的技术。图像增强涉及对原始图像应用各种转换，如旋转、翻转、缩放和剪切。它在图像分类和目标检测任务中使用。图像增强是必不可少的，因为它有助于减少过拟合并提高模型的泛化能力。过拟合是机器学习和深度学习中常见的问题，其中模型对训练数据学习得太好，以至于开始捕捉噪声和数据的随机波动，而不是底层模式。它有助于产生鲁棒的模型。过度的增强可能导致不切实际的模型或过拟合，这可能导致泛化能力降低，限制模型在现实场景中的实用性。
- en: 'Adding more training data is one way to help reduce overfitting. However, in
    many situations, collecting a large amount of new, diverse data can be impractical
    or expensive. This is where data augmentation comes in. Data augmentation involves
    applying various transformations to the existing training data to artificially
    increase its size and diversity. Here’s how data augmentation helps reduce overfitting,
    particularly in the context of image datasets:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 增加更多训练数据是帮助减少过拟合的一种方法。然而，在许多情况下，收集大量新的、多样化的数据可能不切实际或成本高昂。这就是数据增强发挥作用的地方。数据增强涉及对现有训练数据应用各种转换，以人工增加其大小和多样性。以下是数据增强如何帮助减少过拟合，尤其是在图像数据集的背景下：
- en: '**Improved generalization**: Augmentation helps the model generalize better
    to unseen data by exposing it to a diverse range of transformations. This can
    enhance the model’s ability to handle variations in object appearance.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高泛化能力**：增强通过使模型接触到各种转换来帮助它更好地泛化到未见过的数据。这可以增强模型处理物体外观变化的能力。'
- en: '**Robustness to variations**: Models trained with augmented data are often
    more robust to changes in lighting, orientation, and other factors that may be
    present in real-world scenarios.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对变化的鲁棒性**：使用增强数据训练的模型通常对光照、方向和其他可能在现实场景中出现的因素的变化具有更强的鲁棒性。'
- en: '**Data efficiency**: Augmentation allows for the creation of a larger effective
    training dataset without collecting additional labeled samples. This can be particularly
    beneficial when the available labeled data is limited.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据效率**: 增强允许在不收集额外标记样本的情况下创建更大的有效训练数据集。当可用的标记数据有限时，这可能特别有益。'
- en: '**Mitigating overfitting**: Augmentation introduces variability, helping to
    prevent overfitting. Models trained on augmented data are less likely to memorize
    specific training examples and are more likely to learn generalizable features.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓解过拟合**: 增强引入了可变性，有助于防止过拟合。在增强数据上训练的模型不太可能记住特定的训练示例，更有可能学习到可泛化的特征。'
- en: '**Considerations**: While augmentation is generally beneficial, it’s essential
    to apply transformations that make sense for the specific task. For example, randomly
    flipping images horizontally makes sense for many tasks, but randomly rotating
    images might not be suitable for tasks with strict orientation requirements.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注意事项**: 虽然增强通常有益，但必须应用对特定任务有意义的变换。例如，水平翻转图像对于许多任务来说是合理的，但随机旋转图像可能不适合对方向有严格要求的任务。'
- en: 4\. Image segmentation
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4. 图像分割
- en: Image segmentation is the process of dividing an image into multiple meaningful
    segments or regions. Image segmentation is essential in medical image analysis,
    where we need to identify the different organs or tissues in the image. Image
    segmentation is also used in object detection, where we need to identify the different
    objects in an image.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分割是将图像分割成多个有意义的段或区域的过程。在医学图像分析中，图像分割是必不可少的，我们需要在图像中识别不同的器官或组织。图像分割也用于目标检测，我们需要在图像中识别不同的对象。
- en: 5\. Feature extraction
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5. 特征提取
- en: Feature extraction is the process of extracting relevant features or information
    from the image data. Feature extraction is essential because it helps to reduce
    the dimensionality of the image data, which can improve the performance of machine
    learning algorithms. Feature extraction involves applying various filters to the
    images, such as edge detection, texture analysis, and color segmentation. Examples
    of color features are color histograms that represent the distribution of color
    intensities in an image. Similarly, shape features include the Hough transform
    that detects and represents shapes such as lines and circles.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 特征提取是从图像数据中提取相关特征或信息的过程。特征提取是必不可少的，因为它有助于降低图像数据的维度，这可以提高机器学习算法的性能。特征提取涉及对图像应用各种过滤器，如边缘检测、纹理分析和颜色分割。颜色特征的例子是颜色直方图，它表示图像中颜色强度的分布。同样，形状特征包括霍夫变换，它可以检测和表示线条和圆形等形状。
- en: To summarize, data exploration and preprocessing are essential steps in the
    machine learning pipeline. In image data, we need to resize the images, normalize
    the pixel values, apply image augmentation, perform image segmentation, and extract
    relevant features from the images. By following these preprocessing steps, we
    can improve the performance of the machine learning algorithm and achieve better
    results.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，数据探索和预处理是机器学习流程中的关键步骤。在图像数据中，我们需要调整图像大小、归一化像素值、应用图像增强、执行图像分割，并从图像中提取相关特征。通过遵循这些预处理步骤，我们可以提高机器学习算法的性能，并实现更好的结果。
- en: Checking for class imbalance
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查类别不平衡
- en: In many image classification problems, the classes may not be evenly represented
    in the dataset. You should check for class imbalance by counting the number of
    images in each class and visualizing the distribution of classes. If there is
    an imbalance, we augment the minority class data by applying transformations such
    as rotations, flips, crops, and color variations. This increases the diversity
    of the minority class without needing to generate entirely new samples.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多图像分类问题中，类别在数据集中可能没有均匀表示。你应该通过计算每个类别的图像数量并可视化类别的分布来检查类别不平衡。如果存在不平衡，我们通过应用旋转、翻转、裁剪和颜色变化等变换来增强少数类数据。这增加了少数类的多样性，而无需生成全新的样本。
- en: Identifying patterns and relationships
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别模式和关系
- en: The goal of EDA is to identify patterns and relationships in the data that can
    inform your modeling decisions. You can use techniques such as clustering to identify
    patterns in the data or examine the relationship between different features using
    scatter plots or correlation matrices. Clustering, in the context of image dataset
    analysis, is a technique used to group similar images together based on their
    inherent patterns and characteristics. It’s a data exploration method that aids
    in understanding the structure of image data by identifying groups or clusters
    of images that share similar visual traits. Clustering algorithms analyze the
    visual properties of images, such as pixel values or extracted features, to group
    images that are visually similar into clusters. Images that share common visual
    traits are grouped together, forming distinct clusters.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: EDA的目标是识别数据中的模式和关系，这些模式和关系可以指导你的建模决策。你可以使用诸如聚类等技术来识别数据中的模式，或者使用散点图或相关矩阵来检查不同特征之间的关系。在图像数据集分析中，聚类是一种根据图像固有的模式和特征将相似图像分组的技术。这是一种数据探索方法，通过识别具有相似视觉特征的图像组或聚类，有助于理解图像数据的结构。聚类算法分析图像的视觉属性，如像素值或提取的特征，将视觉上相似的图像分组到聚类中。具有共同视觉特征的图像被分组在一起，形成不同的聚类。
- en: Evaluating the impact of preprocessing
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估预处理的影响
- en: Finally, you should evaluate the impact of preprocessing on your image data.
    You can compare the performance of your model on preprocessed and unprocessed
    data to determine the effectiveness of your preprocessing techniques.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你应该评估预处理对你图像数据的影响。你可以比较你的模型在预处理和未处理数据上的性能，以确定你的预处理技术的有效性。
- en: In summary, EDA is an important step in the process of building computer vision
    models. By visualizing the data, checking for outliers and class imbalance, identifying
    patterns and relationships, and evaluating the impact of preprocessing, you can
    gain a better understanding of your image data and make informed decisions about
    your modeling approach.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，EDA（探索性数据分析）是构建计算机视觉模型过程中的一个重要步骤。通过可视化数据、检查异常值和类别不平衡、识别模式和关系，以及评估预处理的影响，你可以更好地理解你的图像数据，并就你的建模方法做出明智的决策。
- en: Practice example of visualizing data
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据可视化实践示例
- en: 'Let’s see an example of visualizing image data using Matplotlib. In the following
    code, we first load the image using the PIL library:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下代码示例看看如何使用Matplotlib可视化图像数据。首先，我们使用PIL库加载图像：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then we convert it to a NumPy array using the `np.array` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`np.array`函数将其转换为NumPy数组：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, plot the result with the following commands:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令绘制结果：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We get the following result:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下结果：
- en: "![Figure 4.1\uFEFF – Visualizing image data](img/B18944_04_1.jpg)"
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – 可视化图像数据](img/B18944_04_1.jpg)'
- en: Figure 4.1 – Visualizing image data
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 可视化图像数据
- en: We then use the `imshow` function from Matplotlib to plot the image. Converting
    images to NumPy arrays during EDA offers several benefits that make data manipulation,
    analysis, and visualization more convenient and efficient. NumPy is a powerful
    numerical computing library in Python that provides support for multi-dimensional
    arrays and a wide range of mathematical operations. Converting images to NumPy
    arrays is common during EDA as NumPy arrays provide direct access to individual
    pixels in an image, making it easier to analyze pixel values and perform pixel-level
    operations. Many data analysis and visualization libraries in Python, including
    Matplotlib and scikit-learn, work seamlessly with NumPy arrays. This allows you
    to take advantage of a rich ecosystem of tools and techniques for image analysis.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用Matplotlib的`imshow`函数来绘制图像。在EDA过程中将图像转换为NumPy数组提供了几个好处，使得数据处理、分析和可视化更加方便和高效。NumPy是Python中一个强大的数值计算库，它提供了对多维数组的支持以及广泛的数学运算。在EDA过程中将图像转换为NumPy数组是常见的，因为NumPy数组可以直接访问图像中的单个像素，这使得分析像素值和执行像素级操作变得更容易。Python中的许多数据分析和可视化库，包括Matplotlib和scikit-learn，都可以无缝地与NumPy数组一起工作。这让你能够利用丰富的工具和技术生态系统来分析图像。
- en: There are many different ways to visualize image data using Matplotlib. We’ll
    now review a few commonly encountered examples.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Matplotlib可视化图像数据有许多不同的方法。现在，我们将回顾一些常见的例子。
- en: '`cmap` parameter of the `imshow` function to `''gray''`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`imshow`函数的`cmap`参数设置为`''gray''`：'
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following figure is the result of this code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图是此代码的结果：
- en: "![Figure 4.2\uFEFF – Gr\uFEFFayscale image](img/B18944_04_2.jpg)"
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – 灰度图像](img/B18944_04_2.jpg)'
- en: Figure 4.2 – Grayscale image
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 灰度图像
- en: '**Histogram of pixel values**: We can use a histogram to visualize the distribution
    of pixel values in an image. This can help us understand the overall brightness
    and contrast of the image:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**像素值直方图**：我们可以使用直方图来可视化图像中像素值的分布。这有助于我们了解图像的整体亮度和对比度：'
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The resulting graph is as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图如下：
- en: "![Figure 4.3\uFEFF – Histogram of pixel values](img/B18944_04_3.jpg)"
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 像素值直方图](img/B18944_04_3.jpg)'
- en: Figure 4.3 – Histogram of pixel values
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 像素值直方图
- en: '**Multiple images side by side**: We can use subplots to display multiple images
    side by side for comparison:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**多张图像并排显示**：我们可以使用子图并排显示多张图像以进行比较：'
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We get the stunning result as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下惊人的结果：
- en: "![Figure 4.4\uFEFF – Multiple images side by side](img/B18944_04_4.jpg)"
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 多张图像并排显示](img/B18944_04_4.jpg)'
- en: Figure 4.4 – Multiple images side by side
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 多张图像并排显示
- en: '**Color channel visualization**: For color images, we can plot each color channel
    separately to see how they contribute to the overall image. In an image dataset,
    a color channel refers to a single component of color information in each pixel
    of an image. Color images are composed of multiple color channels, where each
    channel represents a specific color aspect or color space. The combination of
    these color channels creates the full-color representation of an image. Common
    color spaces include **Red, Green, Blue** (**RGB**), **Hue, Saturation, Value**
    (**HSV**), and **Cyan, Magenta, Yellow,** **Key/Black** (**CMYK**).'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**颜色通道可视化**：对于彩色图像，我们可以分别绘制每个颜色通道，以查看它们如何对整体图像做出贡献。在图像数据集中，颜色通道指的是图像中每个像素的单个颜色信息组件。彩色图像由多个颜色通道组成，其中每个通道代表特定的颜色方面或颜色空间。这些颜色通道的组合构成了图像的全彩色表示。常见的颜色空间包括
    **红色、绿色、蓝色**（**RGB**）、**色调、饱和度、亮度**（**HSV**）和 **青色、品红色、黄色**、**关键/黑色**（**CMYK**）。'
- en: In general, RGB color channels are visualized using the appropriate colormap
    to represent their respective colors. When visualizing individual color channels
    (red, green, and blue) separately, it’s common to use colormaps that highlight
    the specific color information.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，RGB 颜色通道使用适当的颜色图来表示它们各自的颜色。当分别可视化单个颜色通道（红色、绿色和蓝色）时，通常使用突出特定颜色信息的颜色图。
- en: 'Here are typical colormaps used for visualizing individual RGB channels:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是用于可视化单个 RGB 通道的典型颜色图：
- en: '`''Reds''` colormap is often used to visualize the red channel. It ranges from
    dark to light red, with the darker values representing lower intensity and the
    lighter values representing higher intensity.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''Reds''` 颜色图常用于可视化红色通道。它从深红色到浅红色，较暗的值代表较低的强度，较亮的值代表较高的强度。'
- en: '`''Greens''` colormap is commonly used to visualize the green channel. Similar
    to `''Reds''`, it ranges from dark to light green.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''Greens''` 颜色图通常用于可视化绿色通道。类似于 `''Reds''`，它从深绿色到浅绿色。'
- en: '`''Blues''` colormap is used for visualizing the blue channel. It ranges from
    dark to light blue.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''Blues''` 颜色图用于可视化蓝色通道。它从深蓝色到浅蓝色。'
- en: 'Here’s an example of how you might visualize individual RGB channels using
    these colormaps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用这些颜色图可视化单个 RGB 通道的示例：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As a result, we see the following channels:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到以下通道：
- en: "![Figure 4.5\uFEFF – Color channel visualization](img/B18944_04_5.jpg)"
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 颜色通道可视化](img/B18944_04_5.jpg)'
- en: Figure 4.5 – Color channel visualization
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 颜色通道可视化
- en: Practice example for adding annotations to an image
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加图像注释的实践示例
- en: 'We can add annotations to an image to highlight specific regions of interest,
    such as marking key features within an image, perhaps facial landmarks on a person’s
    face (eyes, nose, mouth), to emphasize important attributes for analysis or recognition.
    Annotations can also be used to highlight regions that exhibit anomalies, defects,
    or irregularities in industrial inspection images, medical images, and quality
    control processes, along with identifying and marking specific points of interest,
    such as landmarks on a map. Let’s see annotations at work:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在图像上添加注释来突出感兴趣的区域，例如在图像中标记关键特征，可能是人脸上的面部特征（眼睛、鼻子、嘴巴），以强调分析或识别的重要属性。注释还可以用于突出工业检测图像、医学图像和质量控制过程中显示异常、缺陷或不规则性的区域，以及识别和标记特定的兴趣点，如地图上的地标。让我们看看注释的实际应用：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We get the following result as output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出结果：
- en: "![Figure 4.6\uFEFF – Image annotation](img/B18944_04_6.jpg)"
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 图像注释](img/B18944_04_6.jpg)'
- en: Figure 4.6 – Image annotation
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 图像注释
- en: These are just a few examples of the many ways that we can use Matplotlib to
    visualize image data. With some creativity and experimentation, we can create
    a wide variety of visualizations to help us understand our image data better.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是我们可以使用 Matplotlib 可视化图像数据的许多方法中的几个。通过一些创造性和实验，我们可以创建各种可视化，帮助我们更好地理解图像数据。
- en: Practice example of image segmentation
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像分割实践示例
- en: 'The following simple code snippet demonstrates how to perform basic image segmentation
    using the CIFAR-10 dataset and a simple thresholding technique:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下简单的代码片段演示了如何使用 CIFAR-10 数据集和简单的阈值技术进行基本的图像分割：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: "![Figure 4.7\uFEFF – Image segmentation](img/B18944_04_7.jpg)"
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 图像分割](img/B18944_04_7.jpg)'
- en: Figure 4.7 – Image segmentation
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 图像分割
- en: This example uses a basic thresholding technique to segment the image based
    on pixel intensity values.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用基本的阈值技术根据像素强度值对图像进行分割。
- en: Practice example for feature extraction
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征提取实践示例
- en: 'Feature extraction from an image dataset such as CIFAR-10 involves transforming
    raw image data into a set of relevant features that can be used as input for machine
    learning models. Here’s a simple example using the **Histogram of Oriented Gradients**
    (**HOG**) feature extraction technique:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从图像数据集（如 CIFAR-10）中提取特征涉及将原始图像数据转换为可用于机器学习模型的有关特征集。以下是一个使用**方向梯度直方图**（**HOG**）特征提取技术的简单示例：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We get the following output:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: "![Figure 4.8\uFEFF – HOG feature extraction](img/B18944_04_8.jpg)"
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – HOG 特征提取](img/B18944_04_8.jpg)'
- en: Figure 4.8 – HOG feature extraction
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – HOG 特征提取
- en: Imagine you have a picture, and you want to understand what’s in the picture
    by looking at the patterns of lines and edges. HOG is a way to do that by focusing
    on the directions of lines and edges in an image.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你有一张图片，你想通过观察线条和边缘的图案来理解图片中的内容。HOG 是通过关注图像中线条和边缘的方向来实现这一点的。
- en: 'In the preceding code block, the `hog` function internally performs the following
    four steps to generate the HOG image:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，`hog` 函数内部执行以下四个步骤以生成 HOG 图像：
- en: '**Divide the image into small cells**: First, the function takes the image
    and divide it into small boxes called cells. Think of these like little squares
    placed over the image.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将图像分割成小单元格**：首先，函数将图像分割成称为单元格的小方块。想象这些就像覆盖在图像上的小正方形。'
- en: '**Calculate gradients**: Inside each cell, we look at how the colors change.
    If the colors change significantly, it means there’s probably an edge or a line.
    We figure out the direction of this color change, and this is called a gradient.
    Imagine drawing little arrows to show the directions of these color changes.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计算梯度**：在每个单元格内部，我们观察颜色的变化。如果颜色变化很大，这意味着可能存在边缘或线条。我们找出这种颜色变化的方向，这被称为梯度。想象画出小箭头来表示这些颜色变化的方向。'
- en: '**Group arrows into directions**: Now, we group these little arrows with similar
    directions together. This is like saying, “Hey, there are a lot of edges going
    this way, and a lot of edges going that way.”'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将箭头分组到方向中**：现在，我们将具有相似方向的这些小箭头分组在一起。这就像说，“嘿，有很多边缘朝这个方向延伸，也有很多边缘朝那个方向延伸。”'
- en: '**Make a histogram of the directions**: A histogram is like a chart that shows
    how many times something happens. Here, we make a histogram that shows how many
    arrows are pointing in each direction. This tells us which directions of edges
    and lines are more common in that cell.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**制作方向直方图**：直方图就像一个图表，显示了某事发生的次数。在这里，我们制作一个直方图，显示了有多少箭头指向每个方向。这告诉我们该单元格中边缘和线条的哪个方向更常见。'
- en: In this section, we have seen how to visualize the image data and plot various
    features including color pixel histograms, grayscale images, RGB color channels,
    image segmentation, and annotations on images.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何可视化图像数据，并绘制各种特征，包括颜色像素直方图、灰度图像、RGB 颜色通道、图像分割和图像上的注释。
- en: In the next section, we will examine the importance of image size and aspect
    ratio distribution in image data models.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨图像大小和宽高比分布对图像数据模型的重要性。
- en: Analyzing image size and aspect ratio
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析图像大小和宽高比
- en: It is very important to understand the distribution of image sizes and aspect
    ratios in image data models.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像数据模型中理解图像大小和宽高比分布非常重要。
- en: Aspect ratio, in the context of image dataset EDA, refers to the proportional
    relationship between the width and height of an image. It’s a numerical representation
    that helps describe the shape of an image. Aspect ratio is especially important
    when working with images, as it provides insights into how elongated or compressed
    an image appears visually. Mathematically, the aspect ratio is calculated by dividing
    the width of the image by its height. It’s typically expressed as a ratio or a
    decimal value. A square image has an aspect ratio of 1:1, while a rectangular
    image would have an aspect ratio different from 1:1.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像数据集EDA的背景下，宽高比指的是图像宽度和高度之间的比例关系。这是一个数值表示，有助于描述图像的形状。宽高比在处理图像时尤为重要，因为它提供了关于图像视觉上拉长或压缩的见解。从数学上讲，宽高比是通过将图像宽度除以高度来计算的。它通常以比率或小数形式表示。正方形图像的宽高比为1:1，而矩形图像的宽高比则不同于1:1。
- en: Impact of aspect ratios on model performance
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宽高比对模型性能的影响
- en: 'Let’s understand the impact of aspect ratios on the model performance using
    the following points:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下要点来了解宽高比对模型性能的影响：
- en: '**Object recognition**: In object recognition tasks, maintaining the correct
    aspect ratio is essential for accurate detection. If the aspect ratio is distorted
    during preprocessing or augmentation, it may lead to misinterpretation of object
    shapes by the model.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标识别**：在目标识别任务中，保持正确的宽高比对于准确检测至关重要。如果在预处理或增强过程中宽高比发生扭曲，可能会导致模型对物体形状的错误解释。'
- en: '**Training stability**: Ensuring consistent aspect ratios across the training
    dataset can contribute to training stability. Models may struggle if they encounter
    variations in aspect ratios that were not present in the training data.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**训练稳定性**：确保训练数据集中宽高比的一致性可以有助于训练稳定性。如果模型遇到训练数据中未出现的宽高比变化，可能会遇到困难。'
- en: '**Bounding-box accuracy**: In object detection, bounding boxes are often defined
    by aspect ratios. Deviations from the expected aspect ratios can impact the accuracy
    of bounding box predictions.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边界框精度**：在目标检测中，边界框通常由宽高比定义。与预期宽高比的偏差可能会影响边界框预测的准确性。'
- en: 'Let’s consider a scenario where we have an image represented by a matrix with
    dimensions *M×N*, where *M* is the number of rows (height) and *N* is the number
    of columns (width). The image size, aspect ratio, and pixel aspect ratio can be
    calculated as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个场景，其中我们有一个由矩阵表示的图像，其尺寸为*M×N*，其中*M*是行数（高度），*N*是列数（宽度）。图像大小、宽高比和像素宽高比可以按以下方式计算：
- en: '`300×200`, the image size would be `300×200=60,000` pixels.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`300×200`，图像大小将是`300×200=60,000`像素。'
- en: '`300×200`, the aspect ratio would be 200/300, which simplifies to 2/3.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`300×200`，宽高比将是200/300，这简化为2/3。'
- en: '**Pixel Aspect Ratio (PAR)**: It is the ratio of the width of a pixel to its
    height. This is especially relevant when dealing with non-square pixels.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**像素宽高比（PAR）**：这是像素宽度与其高度的比例。当处理非正方形像素时，这一点尤为重要。'
- en: PAR = *Height of pixel*/*Width* *of pixel*
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PAR = *像素高度*/*像素宽度*
- en: 'Example: If the pixel aspect ratio is 3/4, it means that the width of a pixel
    is three-quarters of its height.'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：如果像素宽高比是3/4，这意味着像素的宽度是其高度的3/4。
- en: These mathematical examples provide a basic understanding of how image size,
    aspect ratio, and pixel aspect ratio can be calculated using simple formulas.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数学示例提供了如何使用简单公式计算图像大小、宽高比和像素宽高比的基本理解。
- en: 'Now, let’s delve into the concepts of padding, cropping, and aspect ratio evaluation
    metrics in the context of image data analysis in machine learning:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨在机器学习图像数据分析背景下填充、裁剪和宽高比评估指标的概念：
- en: '`200×200` pixels, and you want to apply a `3×3` convolutional filter. Without
    padding, the output size would be `198×198`. To maintain the spatial size, you
    can add a border of one pixel around the image, resulting in a `202×202` image
    after padding.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`200×200`像素，你想要应用一个`3×3`卷积滤波器。如果没有填充，输出大小将是`198×198`。为了保持空间大小，你可以在图像周围添加一个像素的边框，这样填充后的图像大小将是`202×202`。'
- en: '`300×300` pixels and you decide to crop the central region, you might end up
    with a `200×200` pixel image by removing `50` pixels from each side.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`300×300`像素，你决定裁剪中央区域，你可能会通过从每边去除`50`像素而得到一个`200×200`像素的图像。'
- en: Aspect ratio evaluation metrics are measures used to assess the similarity between
    the aspect ratio of predicted bounding boxes and the ground truth bounding boxes
    in object detection tasks. Common metrics include **Intersection over Union**
    (**IoU**) and F1 score.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纵横比评估指标是用于评估目标检测任务中预测边界框的纵横比与真实边界框的纵横比相似度的度量。常见的指标包括**交并比**（**IoU**）和F1分数。
- en: In image classification, aspect ratio evaluation metrics play a crucial role
    in gauging the accuracy of predicted bounding boxes compared to the ground truth
    bounding boxes in object detection tasks. One widely employed metric is IoU, calculated
    by dividing the area of overlap between the predicted and ground truth bounding
    boxes by the total area covered by both. The resulting IoU score ranges from `0`
    to `1`, where a score of `0` indicates no overlap, and a score of `1` signifies
    perfect alignment. Additionally, the F1 score, another common metric, combines
    precision and recall, providing a balanced assessment of the model’s performance
    in maintaining accurate aspect ratios across predicted and true bounding boxes.
    These metrics collectively offer valuable insights into the effectiveness of object
    detection models in preserving the spatial relationships of objects within an
    image.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像分类中，纵横比评估指标在衡量预测边界框与真实边界框在目标检测任务中的准确性方面起着至关重要的作用。一个广泛使用的指标是IoU，通过将预测和真实边界框之间的重叠面积除以两者覆盖的总面积来计算。得到的IoU分数范围从`0`到`1`，其中分数为`0`表示没有重叠，分数为`1`表示完美对齐。此外，F1分数，另一个常见指标，结合了精确度和召回率，为模型在保持预测和真实边界框的纵横比准确性方面的性能提供了一个平衡的评估。这些指标共同提供了关于目标检测模型在保持图像中对象空间关系有效性的宝贵见解。
- en: 'Example: Let’s say that in an object detection task, you have a ground-truth
    bounding box with an aspect ratio of `2:1` for a specific object. If your model
    predicts a bounding box with an aspect ratio of `1.5:1`, you can use IoU to measure
    how well the predicted box aligns with the ground truth. If the IoU metric is
    high, it indicates good alignment; if it’s low, there may be a mismatch in aspect
    ratios.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：假设在一个目标检测任务中，你有一个特定对象的`2:1`纵横比的真实边界框。如果你的模型预测的边界框的纵横比是`1.5:1`，你可以使用IoU来衡量预测框与真实框的对齐程度。如果IoU指标较高，表示对齐良好；如果较低，可能存在纵横比不匹配。
- en: Understanding and effectively applying padding, cropping, and aspect ratio evaluation
    metrics are crucial aspects of preprocessing and evaluating image data in machine
    learning models, particularly in tasks such as object detection where accurate
    bounding box predictions are essential.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 理解并有效地应用填充、裁剪和纵横比评估指标是预处理和评估机器学习模型中的图像数据的关键方面，尤其是在目标检测等任务中，准确的边界框预测至关重要。
- en: Image resizing
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像调整大小
- en: Image resizing is the process of changing the dimensions of an image while preserving
    its aspect ratio. It is a common preprocessing step in computer vision applications,
    including object detection, image classification, and image segmentation.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图像调整大小是改变图像尺寸的同时保持其纵横比的过程。它是计算机视觉应用中常见的预处理步骤，包括目标检测、图像分类和图像分割。
- en: 'The primary reasons for resizing images are as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 调整图像的主要原因是以下几方面：
- en: To fit the image into a specific display size or aspect ratio, such as for web
    pages or mobile applications.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了将图像适应特定的显示尺寸或纵横比，例如用于网页或移动应用。
- en: To reduce the computational complexity of processing the image, such as for
    real-time computer vision applications or when the image size is too large to
    fit into memory.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了降低处理图像的计算复杂度，例如在实时计算机视觉应用中或当图像大小太大而无法适应内存时。
- en: When resizing an image, we need to decide on a new size for the image. The new
    size can be specified in terms of pixels or as a scaling factor. In the latter
    case, we multiply the original image dimensions by a scaling factor to obtain
    the new dimensions.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调整图像大小时，我们需要为图像确定一个新的尺寸。新尺寸可以用像素或缩放因子来指定。在后一种情况下，我们将原始图像的尺寸乘以缩放因子以获得新的尺寸。
- en: 'There are two primary methods for resizing an image: interpolation and resampling:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 调整图像大小主要有两种方法：插值和重采样：
- en: Interpolation is a technique for estimating the pixel values in the resized
    image. It involves computing a weighted average of the pixel values in the original
    image surrounding the target pixel location. There are several interpolation methods
    available, including nearest neighbor, bilinear, bicubic, and Lanczos resampling.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 插值是一种估计调整大小后的图像中像素值的技术。它涉及计算围绕目标像素位置的原始图像中像素值的加权平均值。有几种插值方法可供选择，包括最近邻、双线性、双三次和
    Lanczos 重采样。
- en: Lanczos resampling is a method used in digital image processing for resizing
    or resampling images. It is a type of interpolation algorithm that aims to produce
    high-quality results, particularly when downscaling images. The Lanczos algorithm
    is named after Cornelius Lanczos, a Hungarian mathematician and physicist. The
    Lanczos resampling algorithm involves applying a sinc function (a type of mathematical
    function) to the pixel values in the original image to calculate the values of
    pixels in the resized image. This process is more complex than simple interpolation
    methods such as bilinear or bicubic, but it tends to produce better results, especially
    when reducing the size of an image.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Lanczos 重采样是一种在数字图像处理中用于调整大小或重采样图像的方法。它是一种旨在产生高质量结果的插值算法，尤其是在缩小图像时。Lanczos 算法是以匈牙利数学家和物理学家Cornelius
    Lanczos 命名的。Lanczos 重采样算法涉及将 sinc 函数（一种数学函数）应用于原始图像中的像素值，以计算调整大小后的图像中像素的值。这个过程比简单的插值方法（如双线性或双三次）更复杂，但它往往能产生更好的结果，尤其是在缩小图像尺寸时。
- en: 'The following is a simple example in Python using the Pillow library (a fork
    of PIL) to demonstrate nearest neighbor, bilinear, bicubic, and Lanczos resampling
    methods:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用 Pillow 库（PIL 的分支）的简单 Python 示例，用于演示最近邻、双线性、双三次和 Lanczos 重采样方法：
- en: '[PRE10]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We get the following output:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下输出：
- en: "![Figure 4.9\uFEFF – \uFEFFThe results of each interpolation method](img/B18944_04_X_Merged_images.jpg)"
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 每种插值方法的结果](img/B18944_04_X_Merged_images.jpg)'
- en: Figure 4.9 – The results of each interpolation method
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 每种插值方法的结果
- en: 'Let’s delve into the details of each interpolation method:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解每种插值方法的细节：
- en: '`Image.NEAREST`): This method chooses the nearest pixel value to the interpolated
    point:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image.NEAREST`): 此方法选择最接近插值点的最近像素值：'
- en: '`resample=Image.NEAREST`): Simple and fast. Often used for upscaling pixel
    art images.'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample=Image.NEAREST`): 简单且快速。通常用于放大像素艺术图像。'
- en: '**Visual effect**: Results in blocky or pixelated images, especially noticeable
    during upscaling.'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉效果**：导致块状或像素化的图像，尤其是在放大时特别明显。'
- en: '`Image.BILINEAR`): Uses a linear interpolation between the four nearest pixels:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image.BILINEAR`): 使用四个最近像素之间的线性插值：'
- en: '`resample=Image.BILINEAR`): Commonly used for general image resizing'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample=Image.BILINEAR`): 通常用于通用图像调整大小'
- en: '**Visual effect**: Smoother than nearest neighbor but may result in some loss
    of sharpness'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉效果**：比最近邻更平滑，但可能会导致一些锐度损失'
- en: '`Image.BICUBIC`): Employs a cubic polynomial for interpolation:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image.BICUBIC`): 使用三次多项式进行插值：'
- en: '`resample=Image.BICUBIC`): Typically used for high-quality downsampling'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample=Image.BICUBIC`): 通常用于高质量的下采样'
- en: '**Visual effect**: Smoother than bilinear; often used for photographic images,
    but can introduce slight blurring'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉效果**：比双线性更平滑；通常用于照片图像，但可能会引入轻微的模糊'
- en: '`Image.LANCZOS`): Applies a `sinc` function as the interpolation kernel:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image.LANCZOS`): 使用 `sinc` 函数作为插值核：'
- en: '`resample=Image.LANCZOS`): Preferred for downscaling images and maintaining
    quality.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample=Image.LANCZOS`): 适用于缩小图像并保持质量的首选方法。'
- en: '**Visual effect**: Generally produces the highest quality, especially noticeable
    in downscaling scenarios. May take longer to compute.'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉效果**：通常产生最高的质量，尤其是在缩小场景中特别明显。可能需要更长的时间来计算。'
- en: '**Choosing the** **right method**:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择正确的方法**：'
- en: '**Quality versus speed**: Nearest neighbor is the fastest but may result in
    visible artifacts. Bicubic and Lanczos are often preferred for quality, sacrificing
    a bit of speed.'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量与速度**：最近邻是最快的，但可能会导致可见的伪影。双三次和 Lanczos 通常在质量上更受青睐，但会牺牲一点速度。'
- en: '**Downscaling versus upscaling**: Bicubic and Lanczos are commonly used for
    downscaling, while bilinear might be sufficient for upscaling.'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩小与放大**：双三次和 Lanczos 通常用于缩小，而双线性可能对于放大足够。'
- en: If the images do not show noticeable differences, it could be due to factors
    such as the original image’s characteristics, the magnitude of resizing, or the
    viewer’s display capabilities. Generally, for high-quality resizing, especially
    downscaling, Lanczos interpolation tends to provide superior results. If the images
    are small or the differences subtle, the choice of method may have less impact.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果图像没有显示出明显的差异，可能是因为原始图像的特性、调整大小的幅度或查看者的显示能力等因素。一般来说，对于高质量的调整大小，尤其是缩小，Lanczos插值通常能提供更优的结果。如果图像很小或差异微妙，方法的选择可能影响较小。
- en: '**Resampling**: Resampling is the process of selecting a subset of the pixels
    from the original image to create the resized image. This method can result in
    loss of information or artifacts in the image due to the removal of pixels.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重采样**：重采样是从原始图像中选择像素子集以创建调整大小后的图像的过程。由于像素的移除，这种方法可能导致信息丢失或图像中出现伪影。'
- en: 'In Python, we can use the Pillow library for image resizing. Here is some example
    code for resizing an image using the Pillow library:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们可以使用Pillow库进行图像调整大小。以下是一些使用Pillow库调整图像大小的示例代码：
- en: '[PRE11]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We get the following result:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下结果：
- en: "![Figure 4.\uFEFF10 – Resized image (200*200)](img/B18944_04_9.jpg)"
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图4.10 – 调整大小后的图像（200*200）](img/B18944_04_9.jpg)'
- en: Figure 4.10 – Resized image (200*200)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10 – 调整大小后的图像（200*200）
- en: In the preceding code, we first open an image using the `Image.open()` function
    from the Pillow library. We then define the new size of the image as a tuple `(500,
    500)`. Finally, we call the `resize()` method on the image object with the new
    size tuple as an argument, which returns a new resized image object. We then save
    the resized image using the `save()` method with the new filename.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先使用Pillow库的`Image.open()`函数打开一个图像。然后我们定义图像的新大小为一个元组`(500, 500)`。最后，我们调用图像对象的`resize()`方法，将新大小元组作为参数，这将返回一个新的调整大小后的图像对象。然后我们使用`save()`方法以新文件名保存调整大小后的图像。
- en: 'Let’s see one more example of resizing images using Python. We first import
    the necessary libraries: `os` for file and directory operations and `cv2` for
    image loading and manipulation:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再举一个使用Python调整图像大小的例子。我们首先导入必要的库：`os`用于文件和目录操作，`cv2`用于图像加载和处理：
- en: '[PRE12]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We define the path to the image directory and get a list of all image filenames
    in the directory using a list comprehension:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义图像目录的路径，并使用列表推导式获取目录中所有图像文件名列表：
- en: '[PRE13]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We define the new size of the images using a tuple `(224, 224)` in this example.
    You can change the tuple to any other size you want:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用元组`(224, 224)`定义图像的新大小。你可以将元组更改为任何你想要的尺寸：
- en: '[PRE14]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We then resize the image as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后按照以下方式调整图像大小：
- en: '[PRE15]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here’s the output of the resized images in the relevant directory:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在相关目录中，以下是调整大小后的图像输出：
- en: "![Figure 4.1\uFEFF1 – Resized images in the directory](img/B18944_04_10.jpg)"
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1.1 – 目录中的调整大小后的图像](img/B18944_04_10.jpg)'
- en: Figure 4.11 – Resized images in the directory
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11 – 目录中的调整大小后的图像
- en: We loop through all the image files using a `for` loop. For each image file,
    we load the image using OpenCV (`cv2.imread()`), resize the image using `cv2.resize()`,
    and save the resized image with the same filename using `cv2.imwrite()`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`for`循环遍历所有图像文件。对于每个图像文件，我们使用OpenCV（`cv2.imread()`）加载图像，使用`cv2.resize()`调整图像大小，并使用`cv2.imwrite()`以相同的文件名保存调整大小后的图像。
- en: 'The `cv2.resize()` function takes three parameters: the image to resize, the
    new size of the image as a tuple `(width, height)`, and an interpolation method.
    The default interpolation method is `cv2.INTER_LINEAR`, which produces good results
    in most cases.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`cv2.resize()`函数接受三个参数：要调整大小的图像、图像的新大小作为元组`(width, height)`和插值方法。默认插值方法是`cv2.INTER_LINEAR`，在大多数情况下都能产生良好的结果。'
- en: Resizing an image is a common preprocessing step in image classification and
    object detection tasks. It is often necessary to resize images to a fixed size
    to ensure that all images have the same size and aspect ratio, which makes it
    easier to train machine learning models on the images. Resizing can also help
    to reduce the computational cost of processing images, as smaller images require
    less memory and computing resources than larger images.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像分类和目标检测任务中，调整图像大小是一个常见的预处理步骤。通常需要将图像调整到固定大小，以确保所有图像具有相同的大小和宽高比，这使得在图像上训练机器学习模型变得更容易。调整大小还可以帮助减少处理图像的计算成本，因为较小的图像比较大的图像需要更少的内存和计算资源。
- en: In summary, image resizing is the process of changing the dimensions of an image
    while preserving its aspect ratio. It is a common preprocessing step in computer
    vision applications and can be performed using interpolation or resampling techniques.
    In Python, we can use the Pillow library for image resizing.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，图像缩放是在保持其宽高比的同时改变图像尺寸的过程。它是计算机视觉应用中常见的前处理步骤，可以使用插值或重采样技术来执行。在Python中，我们可以使用Pillow库来进行图像缩放。
- en: Image normalization
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像归一化
- en: Image normalization is a preprocessing technique that is commonly used in computer
    vision applications. The goal of image normalization is to transform the pixel
    values of an image that are within a certain range or have certain statistical
    properties. Normalization is used to reduce the impact of variations in lighting
    conditions or to standardize the color or brightness of images.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图像归一化是计算机视觉应用中常用的一种预处理技术。图像归一化的目标是转换图像中位于一定范围或具有某些统计特性的像素值。归一化用于减少光照条件变化的影响，或标准化图像的颜色或亮度。
- en: Normalization techniques typically involve scaling the pixel values of an image
    to fall within a certain range or modifying the distribution of pixel values to
    have certain statistical properties. There are many different techniques for image
    normalization, and the choice of technique depends on the specific application
    and the characteristics of the image data.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 归一化技术通常涉及将图像的像素值缩放到一定范围内，或修改像素值的分布以具有某些统计特性。图像归一化有许多不同的技术，选择哪种技术取决于具体的应用和图像数据的特征。
- en: Here are some common techniques for image normalization.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些图像归一化的常见技术。
- en: '`[0, 1]` or `[-1, 1]`. This can be done using the following formula:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`[0, 1]`或`[-1, 1]`。这可以通过以下公式完成：'
- en: '[PRE16]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, `min_value` and `max_value` are the minimum and maximum pixel values in
    the image, respectively.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`min_value`和`max_value`分别是图像中的最小和最大像素值。
- en: '**Z-score normalization**: This technique modifies the distribution of pixel
    values in an image to have a mean of 0 and a standard deviation of 1\. This can
    be done using the following formula:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**Z分数归一化**：这种技术通过修改图像中像素值的分布，使其具有0均值和1标准差。这可以通过以下公式完成：'
- en: '[PRE17]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `mean_value` and `std_value` are the mean and standard deviation of the
    pixel values in the image, respectively.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`mean_value`和`std_value`分别是图像中像素值的均值和标准差。
- en: '**Histogram equalization**: This technique modifies the distribution of pixel
    values in an image to be more uniform. This can be done by computing the **cumulative
    distribution function** (**CDF**) of the pixel values and mapping the pixel values
    to new values based on the CDF:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**直方图均衡化**：这种技术通过计算像素值的**累积分布函数**（**CDF**）来使图像中像素值的分布更加均匀。这可以通过将像素值映射到基于CDF的新值来完成：'
- en: '[PRE18]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding code, we first load an image using the OpenCV library. We then
    apply histogram equalization using the `equalizeHist()` function, which returns
    a new image with a more uniform distribution of pixel values. OpenCV is a powerful
    and widely used open source library that plays a crucial role in image recognition
    and computer vision tasks. Its importance stems from its comprehensive collection
    of tools, functions, and algorithms designed to handle various aspects of image
    processing, analysis, and recognition.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先使用OpenCV库加载图像。然后，我们使用`equalizeHist()`函数应用直方图均衡化，该函数返回一个具有更均匀像素值分布的新图像。OpenCV是一个功能强大且广泛使用的开源库，在图像识别和计算机视觉任务中发挥着至关重要的作用。其重要性源于其综合的工具、函数和算法集合，旨在处理图像处理的各个方面，包括分析、识别。
- en: 'Let’s see an example of image normalization using Python. We first import the
    necessary libraries: `os` for file and directory operations, `cv2` for image loading
    and manipulation, and `numpy` for mathematical operations:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过Python的例子来看一下图像归一化的应用。我们首先导入必要的库：`os`用于文件和目录操作，`cv2`用于图像加载和处理，`numpy`用于数学运算：
- en: '[PRE19]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We define the path to the image directory and get a list of all image filenames
    in the directory using a list comprehension:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义图像目录的路径，并使用列表推导式获取目录中所有图像文件名的列表：
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We loop through all the image files using a `for` loop. For each image file,
    we load the image using OpenCV (`cv2.imread()`):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`for`循环遍历所有图像文件。对于每个图像文件，我们使用OpenCV（`cv2.imread()`）来加载图像：
- en: '[PRE21]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We convert the image to `float32` data type using `astype(np.float32)`. This
    is necessary for the next step of normalization:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`astype(np.float32)`将图像转换为`float32`数据类型。这是进行下一步归一化的必要条件：
- en: '[PRE22]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We normalize the image pixels to have zero mean and unit variance using the
    following formula: `img -= np.mean(img); img /= np.std(img)`. This is also known
    as standardization or z-score normalization. This step is important for machine
    learning models that are sensitive to the scale of input features, as it ensures
    that the pixel values have a similar scale across all images:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下公式将图像像素归一化，使其具有零均值和单位方差：`img -= np.mean(img); img /= np.std(img)`。这通常也称为标准化或z分数归一化。这一步对于对输入特征规模敏感的机器学习模型非常重要，因为它确保了所有图像的像素值具有相似的规模：
- en: '[PRE23]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we save the normalized image with the same filename using `cv2.imwrite()`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`cv2.imwrite()`以相同的文件名保存归一化后的图像：
- en: '[PRE24]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Image normalization is a critical step in many computer vision applications,
    as it can help to reduce the impact of variations in lighting conditions and standardize
    the color and brightness of images. By transforming the pixel values of an image,
    we can make it easier for machine learning algorithms to learn from the image
    data and improve the accuracy of our models.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图像归一化是许多计算机视觉应用中的关键步骤，因为它可以帮助减少光照条件变化的影响，并标准化图像的颜色和亮度。通过变换图像的像素值，我们可以使机器学习算法更容易从图像数据中学习，并提高我们模型的准确性。
- en: Performing transformations on images – image augmentation
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对图像进行变换——图像增强
- en: In the realm of image processing and deep learning, the ability to effectively
    work with image data is paramount. However, acquiring a diverse and extensive
    dataset can be a challenge. This is where the concept of image augmentation comes
    into play. Image augmentation is a transformative technique that holds the power
    to enhance the richness of a dataset without the need to amass additional images
    manually. This section delves into the intricacies of image augmentation – an
    indispensable tool for improving model performance, enhancing generalization capabilities,
    and mitigating overfitting concerns.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在图像处理和深度学习的领域，有效地处理图像数据的能力至关重要。然而，获取多样化和广泛的数据集可能是一个挑战。这就是图像增强概念发挥作用的地方。图像增强是一种变革性技术，它具有增强数据集丰富性的能力，而无需手动收集额外的图像。本节深入探讨了图像增强的复杂性——这是一个不可或缺的工具，用于提高模型性能、增强泛化能力以及缓解过拟合问题。
- en: Image augmentation is a technique for artificially increasing the size of a
    dataset by generating new training examples from existing ones. It is commonly
    used in deep learning applications to prevent overfitting and improve generalization
    performance.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图像增强是一种通过从现有数据集中生成新的训练示例来人工增加数据集大小的技术。它在深度学习应用中常用，以防止过拟合并提高泛化性能。
- en: The idea behind image augmentation is to apply a variety of transformations
    to existing images to create new, slightly modified versions of the original images.
    By doing so, we can effectively increase the size of our dataset without having
    to collect and label new images manually. For example, in medical image analysis,
    acquiring a large number of high-quality medical images with accurate annotations
    is often difficult due to patient privacy concerns and the expertise required
    for labeling. Image augmentation techniques can help to generate diverse training
    examples to train accurate diagnostic models. Another scenario is when dealing
    with rare events or anomalies, such as defects in manufacturing or diseases in
    agriculture, where collecting a sufficient number of real-world instances can
    be challenging. Image augmentation allows the generation of various scenarios
    of these rare events, improving the model’s ability to detect them.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图像增强背后的思想是对现有图像应用各种变换，以创建原始图像的新略作修改的版本。通过这样做，我们可以在不手动收集和标记新图像的情况下有效地增加数据集的大小。例如，在医学图像分析中，由于患者隐私问题和标记所需的专长，获取大量高质量且标注准确的医学图像往往很困难。图像增强技术可以帮助生成多样化的训练示例，以训练准确的诊断模型。另一种情况是处理罕见事件或异常，例如制造中的缺陷或农业中的疾病，在这些情况下，收集足够的真实世界实例可能具有挑战性。图像增强允许生成这些罕见事件的多种场景，从而提高模型检测它们的能力。
- en: 'There are several types of image augmentation techniques that can be used.
    The most commonly used techniques include the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用多种图像增强技术。最常用的技术包括以下几种：
- en: '**Rotation**: Rotating the image by a specified angle in degrees'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转**：按指定角度旋转图像'
- en: '**Flipping**: Flipping the image horizontally or vertically'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻转**：水平或垂直翻转图像'
- en: '**Zooming**: Zooming in or out on the image by a specified factor'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：按指定因子放大或缩小图像'
- en: '**Shearing**: Shearing the image in the *x* or *y* direction by a specified
    factor'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剪切**：按指定因子沿 *x* 或 *y* 方向剪切图像'
- en: '**Shifting**: Shifting the image horizontally or vertically by a specified
    number of pixels'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平移**：按指定像素数水平或垂直平移图像'
- en: These techniques can be applied in various combinations to generate a large
    number of new images from a small set of original images. For example, we can
    rotate an image by 45 degrees, flip it horizontally, and shift it vertically,
    resulting in a new image that is quite different from the original but still retains
    some of its features.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术可以以各种组合方式应用，从少量原始图像生成大量新图像。例如，我们可以将图像旋转45度，水平翻转，并垂直平移，从而生成一个与原始图像相当不同但仍然保留一些其特征的新图像。
- en: One important consideration when using image augmentation is to ensure that
    the generated images are still representative of the underlying dataset. For example,
    if we are training a model to recognize handwritten digits, we should ensure that
    the generated images are still recognizable as digits and not some random patterns.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用图像增强时，一个重要的考虑因素是确保生成的图像仍然代表底层数据集。例如，如果我们正在训练一个用于识别手写数字的模型，我们应该确保生成的图像仍然是可识别的数字，而不是一些随机模式。
- en: Overall, image augmentation is a powerful technique that can be used to increase
    the size of a dataset and improve the performance of deep learning models. The
    Keras library provides a convenient way to apply various image augmentation techniques
    to a dataset, as we will see in the following code example.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，图像增强是一种强大的技术，可以用来增加数据集的大小并提高深度学习模型的性能。Keras库提供了一种方便的方式来将各种图像增强技术应用于数据集，正如我们将在下面的代码示例中看到的那样。
- en: 'Let us see some example Python code for image augmentation. We first import
    the necessary libraries: `keras.preprocessing.image` for image augmentation and
    `os` for file and directory operations:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些用于图像增强的Python代码示例。我们首先导入必要的库：`keras.preprocessing.image` 用于图像增强和 `os`
    用于文件和目录操作：
- en: '*Step 1: Import the necessary libraries for* *image augmentation*'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 1：导入用于图像增强的必要库*'
- en: 'The following code snippet shows how to import the libraries:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了如何导入库：
- en: '[PRE25]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We define the path to the image directory as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义图像目录的路径如下：
- en: '[PRE26]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*Step 2: Create an instance* *of ImageDataGenerator*'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 2：创建 ImageDataGenerator 的实例*'
- en: 'We create an instance of the `ImageDataGenerator` class, which allows us to
    define various types of image augmentation techniques. In this example, we use
    rotation, horizontal and vertical shifts, shear, zoom, and horizontal flipping:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建 `ImageDataGenerator` 类的实例，这允许我们定义各种类型的图像增强技术。在这个例子中，我们使用旋转、水平和垂直平移、剪切、缩放和水平翻转：
- en: '[PRE27]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '*Step 3: Load each image from the directory and convert the image to* *an array*'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 3：从目录中加载每个图像并将其转换为数组*'
- en: 'We get a list of all image filenames in the directory using a list comprehension.
    We then loop through all the image files using a `for` loop. For each image file,
    we load the image using Keras’ `load_img` function and convert it to an array
    using Keras’ `img_to_array` function:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用列表推导式获取目录中所有图像文件名列表。然后，我们使用 `for` 循环遍历所有图像文件。对于每个图像文件，我们使用Keras的 `load_img`
    函数加载图像，并使用Keras的 `img_to_array` 函数将其转换为数组：
- en: '[PRE28]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We reshape the array to have a batch dimension of `1`, which is required by
    the `flow` method of the `ImageDataGenerator` class:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将数组重塑为具有 `1` 个批处理维度，这是 `ImageDataGenerator` 类的 `flow` 方法所必需的：
- en: '[PRE29]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '*Step 4: Regenerate five augmented images for each* *input image*'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 4：为每个输入图像重新生成五个增强图像*'
- en: 'We then regenerate our augmented images as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后按如下方式重新生成我们的增强图像：
- en: '[PRE30]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can see five augmented images generated for the flow in the GitHub repository
    in the directory as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub仓库的以下目录中看到为流生成的五个增强图像：
- en: "![Figure 4.1\uFEFF2 – Augmented images](img/B18944_04_11.jpg)"
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: "![图 4.1\uFEFF2 – 增强图像](img/B18944_04_11.jpg)"
- en: Figure 4.12 – Augmented images
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 增强图像
- en: We use the `flow` method to generate five augmented images for each input image.
    The `flow` method takes the array of input images, a batch size of 1, and various
    parameters defined in *step 3*. It returns a generator that generates augmented
    images on the fly. We save each augmented image with a filename prefix of `aug_`
    using the `save_to_dir`, `save_prefix`, and `save_format` parameters.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`flow`方法为每个输入图像生成五个增强图像。`flow`方法接受输入图像的数组、批大小为1以及在第*3*步中定义的各种参数。它返回一个生成器，可以即时生成增强图像。我们使用`save_to_dir`、`save_prefix`和`save_format`参数，将每个增强图像保存为以`aug_`为文件名前缀的文件。
- en: In this section, we learned how to transform a dataset using data augmentation
    and saw some commonly used data augmentation techniques for generating additional
    data for training.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用数据增强来转换数据集，并看到了一些常用的数据增强技术，用于为训练生成额外的数据。
- en: Summary
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to review images after loading an image dataset
    and explore them using a tool called Matplotlib in Python. We also found out how
    to change the size of pictures using two handy tools called PIL and OpenCV. And
    just when things were getting interesting, we discovered a cool trick called data
    augmentation that helps us make our dataset bigger and teaches our computer how
    to understand different versions of the same picture.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在加载图像数据集后审查图像，并使用Python中的Matplotlib工具进行探索。我们还发现了如何使用两个方便的工具PIL和OpenCV来更改图片大小。正当事情变得有趣时，我们发现了一个叫做数据增强的酷技巧，它帮助我们使数据集更大，并教会计算机如何理解同一图片的不同版本。
- en: But wait, there’s more to come! In the next chapter, we are going to see how
    to label our image data using Snorkel based on rules and heuristics. Get ready
    for some more fun as we dive into the world of labeling images!
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 但是等等，还有更多内容要来！在下一章中，我们将看到如何根据规则和启发式方法使用Snorkel来标记我们的图像数据。准备好享受更多乐趣，随着我们深入探索图像标记的世界！
