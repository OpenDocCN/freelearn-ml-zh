- en: Google Machine Learning APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google 机器学习 API
- en: As seen in the previous chapter, machine learning is used in a wide variety
    of applications. However, a few applications are easy to build, while a few are
    very hard to build, especially for a user who is less familiar with machine learning.
    Some of the applications that we are going to discuss in this chapter fall in
    the hard to build category, as the process of building a machine learning model
    for these applications is data intensive, resource intensive, and requires a lot
    of knowledge in the field.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所示，机器学习被广泛应用于各种应用中。然而，一些应用容易构建，而一些则非常难以构建，尤其是对于不太熟悉机器学习的用户。我们将在本章讨论的一些应用属于难以构建的类别，因为这些应用的机器学习模型构建过程数据密集、资源密集，并且需要该领域的大量知识。
- en: 'In this chapter, we will go over five machine learning APIs provided by Google
    (as of March 2018). These APIs are meant to be used out of the box, as RESTful
    APIs. For each service mentioned in the following, we will show what type of application
    can benefit from it, and how to interpret the returned results:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍谷歌（截至 2018 年 3 月）提供的五个机器学习 API。这些 API 旨在作为 RESTful API 直接使用。对于以下提到的每个服务，我们将展示哪些类型的应用程序可以从中受益，以及如何解释返回的结果：
- en: Vision has a label detection, OCR, face detection and emotions, logo,and landmark
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视觉具有标签检测、OCR、面部检测、情感、标志和地标
- en: Speech means speech-to-text
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语音意味着语音转文本
- en: NLP has entities, sentiment, and POS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NLP 有实体、情感和 POS
- en: Translation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译
- en: Video intelligence
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频智能
- en: Vision API
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视觉 API
- en: 'The Vision API lets us build quite a few applications related to vision:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉 API 允许我们构建许多与视觉相关的应用程序：
- en: Detecting labels in an image
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像中检测标签
- en: Detecting the text in an image
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像中检测文本
- en: Face detection
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面部检测
- en: Emotion detection
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情感检测
- en: Logo detection
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志检测
- en: Landmark detection
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地标检测
- en: Before we dive into building applications using the preceding, let's get a quick
    understanding of how they might be built, using face emotion detection as an example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入构建应用程序之前，让我们快速了解它们可能如何构建，以面部情感检测为例。
- en: 'The process of detecting emotions involves:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 情感检测的过程包括：
- en: Collecting a huge set of images
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集大量图像
- en: Hand-labeling images with the emotion that is likely represented in the image
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图像中可能表示的情感人工标记图像
- en: Training a **convolutional neural network** (**CNN**) (to be discussed in future
    chapters) to classify the emotion, based on an image as input
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练一个**卷积神经网络**（**CNN**）（将在未来章节中讨论）来根据图像输入分类情感
- en: While the preceding steps are heavily resource intensive (as we would need a
    lot of humans to collect and hand-label images), there are multiple other ways
    to obtain face emotion detection. We are not sure how Google is collecting and
    labeling images, but we will now consider the API that Google has built for us,
    so that, if we want to classify images into the emotions they represent, we can
    make use of that API.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前述步骤资源消耗很大（因为我们需要很多人来收集和人工标记图像），但还有多种其他方式可以获得面部情感检测。我们不确定谷歌是如何收集和标记图像的，但我们现在将考虑谷歌为我们构建的
    API，这样，如果我们想将图像分类为它们所代表的情感，我们可以利用该 API。
- en: Enabling the API
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用 API
- en: 'Before we start building applications, we first have to enable the API, as
    follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建应用程序之前，我们首先必须启用 API，如下所示：
- en: 'Search for the Google Cloud Vision API:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索 Google Cloud Vision API：
- en: '![](img/c0b69895-ef96-4500-836c-892128798f1b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c0b69895-ef96-4500-836c-892128798f1b.png)'
- en: 'Enable the Google Cloud Vision API:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 Google Cloud Vision API：
- en: '![](img/3f0fd833-0aba-4b4a-a7d6-da1cfd61f563.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3f0fd833-0aba-4b4a-a7d6-da1cfd61f563.png)'
- en: Once you click on ENABLE, the API will be enabled for the project (that is,
    My First Project), as seen in the preceding screenshot.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击 ENABLE，API 将为项目（即我的第一个项目）启用，如前一张截图所示。
- en: 'Fetch credentials for the API:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 API 凭据：
- en: '![](img/8af83174-c263-4cab-843e-e61d707c8774.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8af83174-c263-4cab-843e-e61d707c8774.png)'
- en: 'Click on Service account key after clicking on Create credentials:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建凭据后点击服务帐户密钥：
- en: '![](img/f0c5cd49-93fb-44db-aae9-12e910f22ad4.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f0c5cd49-93fb-44db-aae9-12e910f22ad4.png)'
- en: 'Click on New service account:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新建服务帐户：
- en: '![](img/e34a91c8-b9d0-4e6e-a48f-6d17ae69ff82.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e34a91c8-b9d0-4e6e-a48f-6d17ae69ff82.png)'
- en: 'Enter a service account name (in my case, `kish-gcp`) and Select a role as
    the project Owner:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入服务帐户名称（在我的情况下，`kish-gcp`）并选择项目所有者角色：
- en: '![](img/9a1e919d-a00a-4897-9b8d-fe2001b1b8f8.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9a1e919d-a00a-4897-9b8d-fe2001b1b8f8.png)'
- en: Click on Create to save the JSON file of keys.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建以保存密钥的 JSON 文件。
- en: Opening an instance
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开实例
- en: 'In order to open an instance, click on VM instances, as shown in the screenshot
    that follows, and then click on the Activate google cloud shell icon:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了打开一个实例，点击VM实例，如下面的截图所示，然后点击激活Google Cloud Shell图标：
- en: '![](img/f8df15b9-f8a2-4a24-af2b-ec2d45251d15.png)![](img/2370fe86-0ccd-48aa-8185-38b28125c7b9.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8df15b9-f8a2-4a24-af2b-ec2d45251d15.png)![](img/2370fe86-0ccd-48aa-8185-38b28125c7b9.png)'
- en: Creating an instance using Cloud Shell
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cloud Shell创建实例
- en: 'Once we click on the cloud shell icon, we create an instance as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 点击云壳图标后，我们创建了一个如下所示的实例：
- en: 'An instance is created by specifying the following code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过指定以下代码创建一个实例：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the Cloud Shell, the preceding code looks as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Cloud Shell中，前面的代码如下所示：
- en: '![](img/7b24116c-0aa3-4f1f-9458-d605dbadc306.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b24116c-0aa3-4f1f-9458-d605dbadc306.png)'
- en: 'Once you have keyed in the responses for all of the prompts, you need to Change
    port to `8081` to access Datalab, which is done as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你为所有提示输入了响应，你需要将端口更改为`8081`以访问Datalab，操作如下：
- en: '![](img/710044dc-2640-47d0-93b1-8ddbc07c34f8.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/710044dc-2640-47d0-93b1-8ddbc07c34f8.png)'
- en: 'Once you click on Change port you will get a window as follows. Enter `8081`
    and click on CHANGE AND PREVIEW to open Datalab:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击更改端口后，你会看到一个如下所示的窗口。输入`8081`并点击“更改并预览”以打开Datalab：
- en: '![](img/a2160b6a-880a-4a66-8c76-313dd4705a96.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2160b6a-880a-4a66-8c76-313dd4705a96.png)'
- en: 'This will open up Datalab, which has functionalities that enable us to write
    all types of commands: `bash`, `bigquery`, `python`, and so on.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开Datalab，它具有使我们能够编写所有类型命令的功能：`bash`、`bigquery`、`python`等等。
- en: 'Now that the requirements are set up, let''s fetch/install the requirements
    for the API:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在需求已经设置好，让我们获取/安装API的需求：
- en: 'Accessing the API keys in the previous section, we have downloaded the required
    keys. Now, let''s upload the `.json` file to Datalab by clicking on the Upload
    button:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一节中访问API密钥，我们已经下载了所需的密钥。现在，让我们通过点击上传按钮将`.json`文件上传到Datalab：
- en: '![](img/fba08f3a-b025-40eb-825f-6d338fcae55e.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fba08f3a-b025-40eb-825f-6d338fcae55e.png)'
- en: 'Once the `.json` file is uploaded, you should be able to access it through
    Datalab from here:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`.json`文件上传，你应该能够从这里通过Datalab访问它：
- en: '![](img/e4a25f51-1121-4c68-a153-369213f94930.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4a25f51-1121-4c68-a153-369213f94930.png)'
- en: 'Open a notebook; you can open a notebook in Datalab by clicking on the Notebook
    tab, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个笔记本；你可以在Datalab中通过点击笔记本标签来打开一个笔记本，如下所示：
- en: '![](img/1c1dbb14-1143-4f17-a662-b9a1d269b821.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c1dbb14-1143-4f17-a662-b9a1d269b821.png)'
- en: 'To install `google-cloud`, once you open the Notebook, change the kernel from
    python2 to python3:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装`google-cloud`，一旦你打开笔记本，将内核从python2更改为python3：
- en: '![](img/2c842bd5-f941-4f47-a91c-1a54681a9ff2.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c842bd5-f941-4f47-a91c-1a54681a9ff2.png)'
- en: 'Install the `google-cloud` package, as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式安装`google-cloud`包：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once `google-cloud` is installed, make sure that the `.json` file uploaded
    earlier is accessible in the current Python environment, by specifying the following:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了`google-cloud`，确保之前上传的`.json`文件在当前Python环境中可访问，如下所示：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In order to upload an image of interest, we will look at transferring a file
    from the local machine into the bucket, and from the bucket to Datalab.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了上传感兴趣的画面，我们将查看从本地机器到存储桶，以及从存储桶到Datalab的文件传输。
- en: 'Search for `bucket` in the Google Cloud:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Google Cloud中搜索`bucket`：
- en: '![](img/6337862a-a63e-4cf7-b6c8-6d66838c8e77.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6337862a-a63e-4cf7-b6c8-6d66838c8e77.png)'
- en: 'Now, name the bucket and create it:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，命名存储桶并创建它：
- en: '![](img/34631cf2-357f-435a-b990-77457e90d3fd.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34631cf2-357f-435a-b990-77457e90d3fd.png)'
- en: Click on Upload **files** to upload relevant files from the local machine to
    the bucket.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击上传**文件**将相关文件从本地机器上传到存储桶。
- en: '![](img/32220fa6-257a-444a-b7d2-1d24631e8a8f.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32220fa6-257a-444a-b7d2-1d24631e8a8f.jpg)'
- en: 'Once the file is uploaded to the bucket, fetch it from Datalab, as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦文件上传到存储桶，按照以下方式从Datalab获取它：
- en: '![](img/4ebd04af-3b8c-499f-873f-b44a33315867.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ebd04af-3b8c-499f-873f-b44a33315867.png)'
- en: Now, you should notice that `11.jpg` is accessible in Datalab.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该注意到`11.jpg`在Datalab中可访问。
- en: 'Now that the image to analyze is accessible in Datalab, let''s understand the
    ways to leverage the Cloud Vision API to understand images better:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要分析的画面在Datalab中可访问，让我们了解如何利用Cloud Vision API更好地理解图像：
- en: 'Import the relevant packages:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关包：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code snippet makes sure that the methods available in Vision are
    accessible in the current session.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段确保了Vision中可用的方法在当前会话中可访问。
- en: 'Invoke the service that performs Google Cloud Vision API detection tasks (such
    as face, landmark, logo, label, and text detection) over client images—`ImageAnnotator`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用在客户端图像上执行Google Cloud Vision API检测任务（如人脸、地标、标志、标签和文本检测）的服务 - `ImageAnnotator`：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Verify that the image is uploaded per expectation:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认图像已按预期上传：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](img/eda014fe-a165-4cbb-b709-d7743b54d0f0.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eda014fe-a165-4cbb-b709-d7743b54d0f0.png)'
- en: 'Invoke the `face_detection` method to fetch the relevant details of the image,
    as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`face_detection`方法以获取图像的相关详细信息，如下所示：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The responses to image annotations are as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像注释的响应如下：
- en: '![](img/b1b03a99-5a4c-43b2-8d2a-60f8a586d63d.png)![](img/59629615-6973-44ba-9585-fbf796eba63e.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b1b03a99-5a4c-43b2-8d2a-60f8a586d63d.png)![图片](img/59629615-6973-44ba-9585-fbf796eba63e.png)'
- en: 'Now that we have run our method to detect faces in the image, let''s look at
    the output - `response`. The output of `response` is a set of attributes, as described
    previously:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经运行了我们的方法来检测图像中的面部，让我们看看输出 - `response`。`response`的输出是一组属性，如前所述：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/f2c8d0a0-778a-421f-9a5a-e2e31d1f90e2.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f2c8d0a0-778a-421f-9a5a-e2e31d1f90e2.png)'
- en: 'The following are the few more points explained in detail:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些详细解释的额外点：
- en: '**Bounding polygon**: The bounding polygon is around the face. The coordinates
    of the bounding box are in the original image''s scale, as returned in `ImageParams`.
    The bounding box is computed to frame the face in accordance with human expectations.
    It is based on the landmarker results. Note that one or more *x* and/or *y* coordinates
    may not be generated in the `BoundingPoly` (the polygon will be unbounded) if
    only a partial face appears in the image to be annotated.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边界多边形**：边界多边形围绕人脸。边界框的坐标以原始图像的比例为单位，如`ImageParams`中返回的。边界框是根据人类预期计算出来的，以框定人脸。它基于人脸标记器的结果。注意，如果图像中只出现部分人脸，则`BoundingPoly`中可能不会生成一个或多个*x*和/或*y*坐标（多边形将是不封闭的）。'
- en: '**Face detection bounding polygon**: The `fd_bounding_poly` bounding polygon
    is tighter than the `BoundingPoly`, and encloses only the skin part of the face.
    Typically, it is used to eliminate the face from any image analysis that detects
    the amount of skin visible in an image.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人脸检测边界多边形**：`fd_bounding_poly`边界多边形比`BoundingPoly`更紧密，仅包围人脸的皮肤部分。通常，它用于从任何检测图像中可见皮肤数量的图像分析中消除人脸。'
- en: '**Landmarks**: Detected face landmarks.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地标**：检测到的人脸关键点。'
- en: 'There are few more terms explained in the following points:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下要点中解释了几个更多术语：
- en: '`roll_angle`: Roll angle, which indicates the amount of clockwise/anticlockwise
    rotation of the face, relative to the image . The range is [-180,180].'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roll_angle`：翻滚角，表示人脸相对于图像的顺时针/逆时针旋转量。范围是[-180,180]。'
- en: '`pan_angle`: Yaw angle, which indicates the leftward/rightward angle that the
    face is pointing, relative to the vertical plane perpendicular to the image. The
    range is [-180,180].'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pan_angle`：偏航角，表示人脸相对于垂直于图像的平面的左/右角度。范围是[-180,180]。'
- en: '`tilt_angle`: Pitch angle, which indicates the upwards/downwards angle that
    the face is pointing, relative to the image''s horizontal plane. The range is
    [-180,180].'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tilt_angle`：俯仰角，表示人脸相对于图像水平平面的向上/向下角度。范围是[-180,180]。'
- en: '`detection_confidence`: Confidence associated with the detection.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`detection_confidence`：与检测相关的置信度。'
- en: '`landmarking_confidence`: Confidence associated with the landmarking.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`landmarking_confidence`：与标记相关的置信度。'
- en: '`joy_likelihood`: Likelihood associated with the joy.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`joy_likelihood`：与快乐相关的似然性。'
- en: '`sorrow_likelihood`: Likelihood associated with the sorrow.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sorrow_likelihood`：与悲伤相关的似然性。'
- en: '`anger_likelihood`: Likelihood associated with the anger.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anger_likelihood`：与愤怒相关的似然性。'
- en: '`surprise_likelihood`: Likelihood associated with the surprise.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`surprise_likelihood`：与惊讶相关的似然性。'
- en: '`under_exposed_likelihood`: Likelihood associated with the exposed.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`under_exposed_likelihood`：与曝光相关的似然性。'
- en: '`blurred_likelihood`: Likelihood associated with the blurred.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blurred_likelihood`：与模糊相关的似然性。'
- en: '`headwear_likelihood`: Likelihood associated with the headwear.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`headwear_likelihood`：与头部佩戴物相关的似然性。'
- en: Face landmarks would further provide the locations of eyes, noses, lips, ears
    and so on.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 人脸关键点将进一步提供眼睛、鼻子、嘴唇、耳朵等位置。
- en: We should be able to make a boundary box around the face identified.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够围绕识别出的人脸绘制一个边界框。
- en: 'The output of `face_annotations` is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`face_annotations`的输出如下：'
- en: '![](img/e8b59b5a-4ea1-4e12-ba0b-a3c54a431b69.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e8b59b5a-4ea1-4e12-ba0b-a3c54a431b69.png)'
- en: 'From the preceding code, we should be able to understand the coordinates of
    the bounding box. In the code that follows, we calculate the starting point of
    the bounding box, and the corresponding width and height of the bounding box.
    Once the calculation is done, we superimpose the rectangle over the original image:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们应该能够理解边框的坐标。在接下来的代码中，我们计算边框的起始点，以及边框的相应宽度和高度。一旦计算完成，我们就在原始图像上叠加矩形：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding code is the image with a bounding box around the
    face, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码的输出是带有面部边框的图像，如下所示：
- en: '![](img/1b10cd5c-cc20-4c35-9236-765efdb5b670.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b10cd5c-cc20-4c35-9236-765efdb5b670.png)'
- en: Label detection
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签检测
- en: In the previous code snippet, we used the `face_detection` method to fetch the
    various coordinates.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用了`face_detection`方法来获取各种坐标。
- en: 'In order to understand the label of the image, we will be using the `label_detection`
    method in place of `face_detection`, as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解图像的标签，我们将使用`label_detection`方法代替`face_detection`，如下所示：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/202f4ad6-4b36-410b-aabe-88695abbd757.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/202f4ad6-4b36-410b-aabe-88695abbd757.png)'
- en: The output of label detection is a collection of labels, along with the scores
    associated with each label.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 标签检测的输出是一系列标签，以及与每个标签相关的分数。
- en: Text detection
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本检测
- en: 'The text in an image can be identified by using the `text_detection` method,
    as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`text_detection`方法来识别图像中的文本，如下所示：
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of `response_text` is as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`response_text`的输出如下：'
- en: '![](img/ad3a9fa3-3b57-4f05-a1d0-9136cc27f118.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ad3a9fa3-3b57-4f05-a1d0-9136cc27f118.png)'
- en: Note that the output of the `text_detection` method is the bounding box of the
    various text that is present in the image.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`text_detection`方法的输出是图像中存在的各种文本的边框。
- en: Also, note that the description of `text_annotations` provides the text detected
    in the image.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，`text_annotations`的描述提供了图像中检测到的文本。
- en: Logo detection
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标志检测
- en: Vision services also enable us to recognize the logo in an image by using the
    `logo_detection` method.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉服务还使我们能够通过使用`logo_detection`方法来识别图像中的标志。
- en: 'In the following code, you can see that we are able to detect the logo of `wikipedia`
    by passing the URL of the image''s location, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，你可以看到我们能够通过传递图像位置的URL来检测`wikipedia`的标志，如下所示：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the `logo_detection` method is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`logo_detection`方法的输出如下：'
- en: '![](img/6b346970-15c3-4286-8f53-ac12b3f5753c.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6b346970-15c3-4286-8f53-ac12b3f5753c.png)'
- en: Landmark detection
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地标检测
- en: Note that, in the preceding lines of code, we have specified the URL of the
    image location in the `logo_detection` method, and it resulted in a description
    of the predicted logo, and also the confidence score associated with it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在前面的代码行中，我们在`logo_detection`方法中指定了图像位置的URL，这导致了预测的标志描述，以及与其相关的置信度分数。
- en: 'Similarly, any landmark located in an image can be detected by using the `landmark_detection`
    method, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，任何位于图像中的地标都可以通过使用`landmark_detection`方法进行检测，如下所示：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the `landmark_detection` method is as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`landmark_detection`方法的输出如下：'
- en: '![](img/a58efb19-07d8-4363-9f9c-37bb2458c7b1.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a58efb19-07d8-4363-9f9c-37bb2458c7b1.png)'
- en: Cloud Translation API
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云翻译API
- en: The Cloud Translation API provides a simple, programmatic interface for translating
    an arbitrary string into any supported language, using state-of-the-art neural
    machine translation. The Translation API is highly responsive, so websites and
    applications can integrate with the Translation API for fast, dynamic translation
    of source text from the source language to a target language (for example, French
    to English). Language detection is also available for cases in which the source
    language is unknown.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 云翻译API提供了一个简单、程序化的接口，用于将任意字符串翻译成任何支持的语言，使用最先进的神经机器翻译。翻译API响应速度快，因此网站和应用程序可以集成翻译API，以实现从源语言到目标语言的快速、动态翻译（例如，从法语翻译成英语）。对于源语言未知的情况，也提供了语言检测功能。
- en: Enabling the API
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用API
- en: 'For us to be able to use Google cloud translation services, we need to enable,
    which is done as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们能够使用Google云翻译服务，我们需要启用，这可以通过以下步骤完成：
- en: 'In order to enable the Google Cloud Translation API, search for the API in
    the console:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了启用Google Cloud Translation API，在控制台中搜索该API：
- en: '![](img/b9192c37-46b7-4d04-a53a-9e9018296cb1.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b9192c37-46b7-4d04-a53a-9e9018296cb1.png)'
- en: 'Enable the Google Cloud Translation API:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用Google Cloud Translation API：
- en: '![](img/c6f06a96-ad9e-4b17-9fd2-9dc7ffa6f099.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6f06a96-ad9e-4b17-9fd2-9dc7ffa6f099.png)'
- en: 'Once the Translation API is enabled, the next step is to create credentials
    to access the API. However, note that if you have already created credentials
    for one API, they can be used for any other API. Let''s go ahead and initialize
    our instance using Cloud Shell:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启用翻译API，下一步就是创建访问API的凭证。然而，请注意，如果您已经为某个API创建了凭证，则它们可以用于任何其他API。让我们继续使用Cloud
    Shell初始化我们的实例：
- en: '![](img/5152c3b3-6194-4621-89c8-e542b9653cea.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5152c3b3-6194-4621-89c8-e542b9653cea.png)'
- en: 'Once the instance starts, we will open Datalab on port `8081`. We provide a
    path to the location of the `api-key` file as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦实例启动，我们将打开端口`8081`上的Datalab。我们提供以下路径到`api-key`文件的位置：
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The various methods to `translate` are imported by using the following statement:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下语句导入`translate`的各种方法：
- en: '[PRE14]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `client` object that creates a connection to the Cloud Translation
    service, as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`client`对象，用于连接到云翻译服务，如下所示：
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The Google Cloud Translation API has three supported methods, and they are
    `get_languages()`, `detect_language()`, and `translate()`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud翻译API有三个支持的方法，分别是`get_languages()`、`detect_language()`和`translate()`：
- en: 'The `client.get_languages()` method gives us a list of all of the available
    languages, and also their shorthand notations, as follows:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client.get_languages()`方法为我们提供了一个所有可用语言的列表，以及它们的缩写符号，如下所示：'
- en: '![](img/fff7307a-0a48-4a08-ae02-46c9dffce6fc.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fff7307a-0a48-4a08-ae02-46c9dffce6fc.png)'
- en: 'The `client.detect_language()` method detects the language that the text is
    written in:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client.detect_language()`方法检测文本所使用的语言：'
- en: '![](img/da018e49-6ab0-40a0-a710-b1c4db37929f.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da018e49-6ab0-40a0-a710-b1c4db37929f.png)'
- en: Note that in the preceding method, we have given two texts—one in Spanish, and
    the other in English. The preceding output represents the language of the text,
    along with the confidence associated with the detection of the language.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在上述方法中，我们提供了两个文本——一个是西班牙语，另一个是英语。上述输出表示文本的语言，以及与语言检测相关的置信度。
- en: 'The `client.translate()` method detects the source language and translates
    the text into English (by default), as follows:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client.translate()`方法检测源语言并将文本翻译成英语（默认），如下所示：'
- en: '![](img/53851a88-716c-4b72-9094-fe2ff2ab68db.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53851a88-716c-4b72-9094-fe2ff2ab68db.png)'
- en: 'The `client.translate()` method also gives us an option to specify the target
    language to which a text needs to be translated, as follows:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client.translate()`方法还提供了指定需要翻译成哪种目标语言的选项，如下所示：'
- en: '![](img/76b2504a-a437-471b-ba5d-01d31127dfcd.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76b2504a-a437-471b-ba5d-01d31127dfcd.png)'
- en: Natural Language API
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自然语言API
- en: The Google Cloud Natural Language API reveals the structure and meaning of text
    by offering powerful machine learning models in an easy-to-use REST API. You can
    use it to extract information about people, places, events, and much more, that
    are mentioned in text documents, news articles, or blog posts. You can also use
    it to understand the sentiment about your product on social media, or to parse
    intent from customer conversations happening in a call center or a messaging app.
    You can analyze the text uploaded in your request, or integrate it with with your
    document storage on Google Cloud storage.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud自然语言API通过提供易于使用的REST API中的强大机器学习模型来揭示文本的结构和含义。您可以使用它从文本文档、新闻文章或博客文章中提取有关人物、地点、事件等信息，还可以用它来了解社交媒体上对您产品的看法，或从呼叫中心或消息应用中的客户对话中解析意图。您还可以分析请求中上传的文本，或将其与Google
    Cloud存储上的文档存储集成。
- en: 'The Cloud Natural Language API can be found by searching for it in your console,
    as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在控制台中搜索它来找到云自然语言API，如下所示：
- en: '![](img/a3f55923-2eb1-4136-8ca5-83284d52ef7e.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3f55923-2eb1-4136-8ca5-83284d52ef7e.png)'
- en: 'The Cloud Natural Language API is enabled in the resulting page:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 云自然语言API已在生成的页面中启用：
- en: '![](img/6e269f60-6e7e-421e-a5c1-d11aeb89a1af.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e269f60-6e7e-421e-a5c1-d11aeb89a1af.png)'
- en: Similar to the Translation API, we do not have to create credentials for this
    API if at least one API is already enabled.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 与翻译API类似，如果至少已启用了一个API，则无需为该API创建凭证。
- en: Natural language processing can be useful in extracting the sentiments associated
    with various text.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言处理在提取与各种文本相关的情感方面可能很有用。
- en: Sentiment analysis inspects the given text and identifies the prevailing emotional
    opinion within the text, to determine a writer's attitude as positive, negative,
    or neutral. Sentiment analysis is performed through the `analyzeSentiment` method.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 情感分析检查给定的文本，并识别文本中的主导情感意见，以确定作者的立场是积极、消极还是中立。情感分析是通过 `analyzeSentiment` 方法进行的。
- en: 'In the following example, let''s understand how to identify the sentiment of
    a statement:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，让我们了解如何识别语句的情感：
- en: 'Import the relevant packages:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关包：
- en: '[PRE16]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Initialize the class corresponding to the language service:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化与语言服务对应的类：
- en: '[PRE17]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The Google Natural Language API has the following supported methods:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Google 自然语言 API 有以下支持的方法：
- en: '`analyzeEntities`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`analyzeEntities`'
- en: '`analyzeSentiment`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`analyzeSentiment`'
- en: '`analyzeEntitySentiment`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`analyzeEntitySentiment`'
- en: '`annotateText`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`annotateText`'
- en: '`classifyText`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`classifyText`'
- en: 'Each method uses a `Document` for representing text. Let''s explore the `analyzeSentiment`
    method in the following example:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 每个方法都使用 `Document` 来表示文本。以下示例中，让我们探索 `analyzeSentiment` 方法：
- en: '[PRE18]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that we have converted the input text into a `Document` type, and then
    analyzed the sentiment of the document.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已经将输入文本转换为 `Document` 类型，然后分析了文档的情感。
- en: The output of the sentiment score reflects the probability of a text being positive;
    the closer the score is to one, the more positive the statement is.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 情感得分的输出反映了文本为正面的概率；得分越接近一，陈述就越积极。
- en: 'Similarly, one could pass on an HTML file, as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，可以传递一个 HTML 文件，如下所示：
- en: '![](img/f48ffe89-6faa-4933-8c74-485e248c3fa1.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f48ffe89-6faa-4933-8c74-485e248c3fa1.png)'
- en: 'Files that are stored in a Google Cloud bucket can also be referenced, by changing
    the content to `gcs_content_uri`, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在 Google Cloud 存储桶中的文件也可以通过将内容更改为 `gcs_content_uri` 来引用，如下所示：
- en: '![](img/2f8354ee-51fb-4f8e-a652-096019b87500.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f8354ee-51fb-4f8e-a652-096019b87500.png)'
- en: 'The `analyze_entities()`method finds named entities (that is, proper names)
    in the text. This method returns an `AnalyzeEntitiesResponse`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`analyze_entities()` 方法在文本中找到命名实体（即专有名称）。此方法返回 `AnalyzeEntitiesResponse`：'
- en: '[PRE19]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output of the preceding loop is the named entities present in the document''s
    content, as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上述循环的输出是文档内容中存在的命名实体，如下所示：
- en: '![](img/251c1f51-1758-40d2-b0e9-e1fc626ea55e.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/251c1f51-1758-40d2-b0e9-e1fc626ea55e.png)'
- en: 'We can also extract the part of speech of each of the words in the given text
    by using the `analyze_syntax` method, as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用 `analyze_syntax` 方法提取给定文本中每个单词的词性，如下所示：
- en: 'Tokenize the document into the corresponding words that constitute the text:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文档标记化成构成文本的相应单词：
- en: '[PRE20]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The parts of speech of a `token` can then be extracted, as follows:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，可以提取 `token` 的词性，如下所示：
- en: '[PRE21]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output of the preceding code is:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '![](img/9abf115f-6c7d-4ac1-b8ed-4ce4059c4b33.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9abf115f-6c7d-4ac1-b8ed-4ce4059c4b33.png)'
- en: Note that the majority of the words are classified into the right parts of speech.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，大多数单词都被正确地分类为词性。
- en: Speech-to-text API
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语音转文本 API
- en: The Google Cloud Speech API enables developers to convert audio to text, by
    applying powerful neural network models in an easy-to-use API. The API recognizes
    over 110 languages and variants. One can transcribe the text of users dictating
    to an application's microphone, enable command-and-control through voice, or transcribe
    audio files, among many use cases.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Speech API 允许开发者通过应用易于使用的 API 中的强大神经网络模型将音频转换为文本。该 API 识别超过 110
    种语言和变体。可以将用户对应用程序麦克风的语音指令转录成文本，通过语音实现命令和控制，或者转录音频文件，等等。
- en: 'In order to enable the speech to text API, search for it in the console, as
    follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用语音转文本 API，在控制台中搜索它，如下所示：
- en: '![](img/7751f4e4-0b32-4450-a80c-d80227d2600f.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7751f4e4-0b32-4450-a80c-d80227d2600f.png)'
- en: 'In the resulting web page, enable the API, as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的网页中，启用 API，如下所示：
- en: '![](img/b74baeec-4435-4ffb-9edc-c72f0988558f.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b74baeec-4435-4ffb-9edc-c72f0988558f.png)'
- en: Similar to the APIs mentioned in the previous sections, credentials obtained
    for one API can be replicated for the other Google APIs. So, we don't have to
    create credentials separately for the speech to text API.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几节中提到的 API 类似，为其中一个 API 获得的凭证可以复制用于其他 Google API。因此，我们不需要为语音转文本 API 分别创建凭证。
- en: Once the API is enabled, let's start the Cloud Shell and Datalab, as we did
    in the previous sections.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用 API，让我们启动 Cloud Shell 和 Datalab，就像前几节中做的那样。
- en: 'In the following code, we transcribe a small audio file into text:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将一个小音频文件转录成文本：
- en: 'Import the relevant packages and the API key:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关包和API密钥：
- en: '[PRE22]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Invoke the speech service, as follows:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤调用语音服务：
- en: '[PRE23]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can specify the audio that we want to convert, as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式指定我们想要转换的音频：
- en: '[PRE24]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that **Free Lossless Audio Codec** (**FLAC**).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 注意**无损音频编解码器**（**FLAC**）。
- en: An audio file (`.wav`) can be converted to a `.flac` file by using the converter
    located at [https://audio.online-convert.com/convert-to-flac](https://audio.online-convert.com/convert-to-flac).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用位于[https://audio.online-convert.com/convert-to-flac](https://audio.online-convert.com/convert-to-flac)的转换器将音频文件（`.wav`）转换为`.flac`文件。
- en: 'The file is located in the bucket we created earlier. We specify the audio
    configuration, as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位于我们之前创建的存储桶中。我们指定音频配置，如下所示：
- en: '[PRE25]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'A response is obtained by passing the `audio` content, as well as the configuration
    specified:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递`audio`内容和指定的配置来获得响应：
- en: '[PRE26]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The results can now be accessed, as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以按照以下方式访问结果：
- en: '[PRE27]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output for this is:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这的输出如下：
- en: '![](img/82460a32-f922-4b33-a502-babcfed47d56.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/82460a32-f922-4b33-a502-babcfed47d56.png)'
- en: The `recognize` method works when the input audio file is a short (<1 minute)
    duration audio.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入音频文件是短（<1分钟）持续时间音频时，`recognize`方法才会工作。
- en: 'If the `audio` file is longer in duration, the method to be used is `long_running_recognize`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`音频`文件持续时间更长，则应使用`long_running_recognize`方法：
- en: '[PRE28]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `result` can then be accessed by specifying the following:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过指定以下内容来访问`result`：
- en: '[PRE29]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Finally, the transcription and the confidence can be obtained by printing the
    response results, as was done previously.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以通过打印响应结果来获取转录和置信度，就像之前做的那样。
- en: Video Intelligence API
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视频智能API
- en: The Cloud Video Intelligence API makes videos searchable and discoverable, by
    extracting metadata with an easy-to-use REST API. You can now search every moment
    of every video file in your catalog. It quickly annotates videos stored in Google
    Cloud storage, and helps you to identify key entities (nouns) within your videos
    and when they occur.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 云视频智能API通过使用易于使用的REST API提取元数据，使视频可搜索和可发现。现在，您可以搜索目录中每个视频文件的每一刻。它快速标注存储在Google
    Cloud存储中的视频，并帮助您识别视频中的关键实体（名词）及其出现时间。
- en: 'The Cloud Video Intelligence API can be searched for and enabled as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照以下方式搜索和启用云视频智能API：
- en: '![](img/fd03c537-4531-4616-b22e-ce7363923d6a.png)![](img/5a9ffecc-7966-4fd5-9ae7-f5d114eb5a1e.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fd03c537-4531-4616-b22e-ce7363923d6a.png)![图片](img/5a9ffecc-7966-4fd5-9ae7-f5d114eb5a1e.png)'
- en: 'We import the required packages and add the path to the `api-key`, as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式导入所需的包并添加`api-key`的路径：
- en: '[PRE30]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The method `features` enables us to specify the type of content that we want
    to detect in a video. The features available are as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`features`方法使我们能够指定我们想要在视频中检测的内容类型。可用的功能如下：'
- en: '![](img/54d48021-a4fb-496e-8b98-10cb80940baa.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54d48021-a4fb-496e-8b98-10cb80940baa.png)'
- en: 'Let''s go ahead and detect labels in the video of interest to us:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续检测我们感兴趣的视频中标签：
- en: '[PRE31]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We specify the `config` and context of the video, as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式指定视频的`config`和上下文：
- en: '[PRE32]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The video then needs to be passed from Cloud storage, as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，需要按照以下方式将视频从云存储传递过来：
- en: '[PRE33]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The result of the `annotate_video` method is accessed as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式访问`annotate_video`方法的输出：
- en: '[PRE34]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The annotation results for a video can be obtained at the:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在以下级别获得视频的注释结果：
- en: Video segment level
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频段级别
- en: Video shot level
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频镜头级别
- en: Frame level
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帧级别
- en: 'Results at the segment level, after looping through each of the various segment
    label annotations, can be obtained as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在遍历每个不同段标签注释后，可以在以下方式获得段级别结果：
- en: '[PRE35]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output of the preceding code is:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下：
- en: '![](img/9f133d48-607a-4b76-90f0-abfa9876765b.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9f133d48-607a-4b76-90f0-abfa9876765b.png)'
- en: 'Similarly, results at the shot level can be obtained as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，可以按照以下方式获得镜头级别的结果：
- en: '[PRE36]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output of the preceding lines of code is:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码行的输出如下：
- en: '![](img/8670e457-6af0-4c19-b37d-e62ff23ad8a2.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8670e457-6af0-4c19-b37d-e62ff23ad8a2.png)'
- en: 'Finally, the result at the frame level can be obtained as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以按照以下方式获得帧级别的结果：
- en: '[PRE37]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The output of the preceding lines of code is:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码行的输出如下：
- en: '![](img/8a83da6e-44f2-4ad7-aa58-b6284fc4791d.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a83da6e-44f2-4ad7-aa58-b6284fc4791d.png)'
- en: Summary
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we went through the major machine learning APIs that Google
    provides: vision, translate, NLP, speech, and video intelligence. We have learned
    how the various methods in each of the APIs enable us to replicate deep learning
    results, without having to code from scratch.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了谷歌提供的主要机器学习API：视觉、翻译、自然语言处理、语音和视频智能。我们学习了每个API中的各种方法如何使我们能够复制深度学习结果，而无需从头编写代码。
