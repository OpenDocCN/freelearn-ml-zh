- en: '*Chapter 5*: Managing Models with MLflow'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：使用 MLflow 管理模型'
- en: In this chapter, you will learn about different features for model management
    in MLflow. You will learn about the model life cycle in MLflow and we will explain
    how to integrate it with your regular development workflow and how to create custom
    models not available in MLflow. A model life cycle will be introduced alongside
    the Model Registry feature of MLflow.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解 MLflow 中模型管理的不同功能。您将了解 MLflow 中的模型生命周期，我们将解释如何将其与您的常规开发工作流程集成以及如何创建
    MLflow 中不可用的自定义模型。模型生命周期将与 MLflow 的模型注册表功能一起介绍。
- en: 'Specifically, we will look at the following sections in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们将查看以下部分：
- en: Understanding models in MLflow
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 MLflow 中的模型
- en: Exploring model flavors in MLflow
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 MLflow 中的模型风味
- en: Managing models and signature schemas
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理模型和签名模式
- en: Managing the life cycle with a model registry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型注册表管理生命周期
- en: From a workbench perspective, we would like to use MLflow to manage our models
    and implement a clear model life cycle. The addition of managed model features
    to our benchmark leveraging MLflow will step up the quality and operations of
    our **machine learning engineering** solution.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从工作台的角度来看，我们希望使用 MLflow 来管理我们的模型并实施一个清晰的模型生命周期。通过将管理模型功能添加到我们的基准测试中，利用 MLflow
    将提高我们机器学习工程解决方案的质量和运营。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要以下内容：
- en: The latest version of Docker installed on your machine. If you don’t already
    have it installed, please follow the instructions at [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的机器上安装了最新版本的 Docker。如果您还没有安装，请按照[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)中的说明进行操作。
- en: The latest version of `docker-compose` installed. Please follow the instructions
    at https://docs.docker.com/compose/install/.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新版本的 `docker-compose` 已安装。请按照 https://docs.docker.com/compose/install/ 中的说明进行操作。
- en: Access to Git in the command line and installed as described at [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令行中访问 Git 并按照[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)中描述的方式进行安装。
- en: Access to a Bash terminal (Linux or Windows).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Bash 终端（Linux 或 Windows）。
- en: Access to a browser.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问浏览器。
- en: Python 3.5+ installed.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了 Python 3.5+。
- en: The latest version of your machine learning workbench installed locally, described
    in [*Chapter 3*](B16783_03_Final_SB_epub.xhtml#_idTextAnchor066), *Your Data Science
    Workbench*.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地安装了您机器学习工作台的最新版本，如[*第三章*](B16783_03_Final_SB_epub.xhtml#_idTextAnchor066)中所述，*您的数据科学工作台*。
- en: Understanding models in MLflow
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 MLflow 中的模型
- en: 'On the MLflow platform, you have two main components available to manage models:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MLflow 平台上，您有两个主要组件可用于管理模型：
- en: '**Models**: This module manages the format, library, and standards enforcement
    module on the platform. It supports a variety of the most used machine learning
    models: sklearn, XGBoost, TensorFlow, H20, fastai, and others. It has features
    to manage output and input schemas of models and to facilitate deployment.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：此模块管理平台上的格式、库和标准执行模块。它支持最常用的多种机器学习模型：sklearn、XGBoost、TensorFlow、H20、fastai
    等。它具有管理模型输出和输入模式的功能，并便于部署。'
- en: '**Model Registry**: This module handles a model life cycle, from registering
    and tagging model metadata so it can be retrieved by relevant systems. It supports
    models in different states, for instance, live development, testing, and production.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型注册表**：此模块处理模型生命周期，从注册和标记模型元数据以便相关系统检索。它支持不同状态的模型，例如，实时开发、测试和生产。'
- en: An MLflow model is at its core a packaging format for models. The main goal
    of MLflow model packaging is to decouple the model type from the environment that
    executes the model. A good analogy of an MLflow model is that it’s a bit like
    a **Dockerfile** for a model, where you describe metadata of the model, and deployment
    tools upstream are able to interact with the model based on the specification.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 模型在本质上是一种模型打包格式。MLflow 模型打包的主要目标是使模型类型与其执行环境解耦。MLflow 模型的类比有点像模型的 **Dockerfile**，其中您描述模型的元数据，并且上游的部署工具能够根据规范与模型交互。
- en: 'As can be seen in the diagram in *Figure 5.1*, on one side you have your model
    library, for instance, TensorFlow or sklearn. At the core of MLflow, you have
    the MLflow model format, which is able to be served in a multitude of flavors
    (model formats) to cater to different types of inference tools on-premises and
    in the cloud:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如图5.1中的图所示，在一侧您有您的模型库，例如TensorFlow或sklearn。在MLflow的核心，您有MLflow模型格式，它能够以多种风味（模型格式）提供，以满足本地和云上不同类型的推理工具：
- en: '![](img/image0011.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image0011.jpg)'
- en: Figure 5.1 – MLflow models diagram
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – MLflow模型图
- en: '*Figure 5.1* was extracted from the URL [https://www.infoq.com/presentations/mlflow-databricks/#](https://www.infoq.com/presentations/mlflow-databricks/#).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.1*是从URL [https://www.infoq.com/presentations/mlflow-databricks/#](https://www.infoq.com/presentations/mlflow-databricks/#)
    提取的。'
- en: 'The central piece of the definition of MLflow models is the MLflow model file,
    as depicted in the next screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow模型定义的核心部分是MLflow模型文件，如图中下一个屏幕截图所示：
- en: '![](img/image0022.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image0022.jpg)'
- en: Figure 5.2 – An example of an MLmodel file
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – MLmodel文件的示例
- en: 'An MLmodel example can be seen in *Figure 5.2* and provides the following information:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个MLmodel示例可以在图5.2中看到，并提供以下信息：
- en: '**run_id**: This is a reference to the run of the model of the project that
    allowed the creation of the model.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行ID**：这是对项目模型运行的引用，该运行允许创建模型。'
- en: '**time_created**: The timestamp of when the model was created.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建时间**：模型创建的时间戳。'
- en: '`pyfunc` model provided by MLflow.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MLflow提供的`pyfunc`模型。
- en: '**signature**: This is the component of the MLmodel that defines the model
    signature and allows you to, in some way, type the inference process of your model.
    It allows the validation of input data that needs to match the signature of the
    model.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名**：这是MLmodel中定义模型签名并允许您以某种方式类型化模型推理过程的组件。它允许验证需要与模型签名匹配的输入数据。'
- en: 'The `pyfunc`. This function is supported in any environment that supports Python,
    providing flexibility to the deployer of the model on how best to run the model
    once logged in MLflow:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyfunc`。此函数在支持Python的任何环境中都受支持，为模型的部署者提供了在MLflow中记录模型后如何最佳运行模型的灵活性：'
- en: 'In the GitHub repo of the project, please go to the `Gradflow` folder and start
    the environment in this chapter by running the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的GitHub仓库中，请转到`Gradflow`文件夹，并按照以下命令启动本章的环境：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can run all the cells including the model cell depicted in *Figure 5.3*:![](img/image0032.jpg)
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以运行包括图5.3中显示的模型单元格在内的所有单元格：![图片](img/image0032.jpg)
- en: Figure 5.3 – An example of an MLmodel file
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.3 – MLmodel文件的示例
- en: The model in *Figure 5.3* should be very similar to the one used in [*Chapter
    4*](B16783_04_Final_SB_epub.xhtml#_idTextAnchor081)*, Experiment Management in
    MLflow*. Using `mlflow.start_run`, you can start logging your model in MLflow
    and use the innate capabilities of the platform to capture relevant details of
    the model being developed.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.3中的模型应该与[*第4章*](B16783_04_Final_SB_epub.xhtml#_idTextAnchor081)中使用的模型非常相似，即MLflow中的实验管理。使用`mlflow.start_run`，您可以在MLflow中开始记录模型，并利用平台固有的功能来捕获正在开发的模型的相关细节。
- en: You can now explore the `MLmodel` file in MLflow:![](img/image0042.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以探索MLflow中的`MLmodel`文件！![图片](img/image0042.jpg)
- en: Figure 5.4 – An example of an MLmodel file
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.4 – MLmodel文件的示例
- en: Explore the `conda` file in MLflow:![](img/image0052.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MLflow中探索`conda`文件！![图片](img/image0052.jpg)
- en: Figure 5.5 – An example of an MLmodel file
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图5.5 – MLmodel文件的示例
- en: 'Load the model as `MLflow Pyfunc` for prediction:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模型以`MLflow Pyfunc`格式加载进行预测：
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Alternatively, the model can be loaded in the native H5 Keras format and loaded
    to a completely different application, as shown in *Figure 5.4*, by using the
    `/data/model/model.h5 file`.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，模型可以以原生H5 Keras格式加载，并加载到完全不同的应用程序中，如图5.4所示，使用`/data/model/model.h5`文件。
- en: After introducing in this section the concept of models in MLflow, we will next
    delve a bit deeper into the different types of models in MLflow.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节介绍了MLflow中的模型概念之后，我们将进一步深入探讨MLflow中不同类型的模型。
- en: Exploring model flavors in MLflow
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索MLflow中的模型风味
- en: 'Model flavors in MLflow are basically the different models of different libraries
    supported by MLflow. This functionality allows MLflow to handle the model types
    with native libraries of each specific model and support some of the native functionalities
    of the models. The following list presents a selection of representative models
    to describe and illustrate the support available in MLflow:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow中的模型风味基本上是MLflow支持的不同库的不同模型。此功能允许MLflow使用每个特定模型的本地库处理模型类型，并支持一些模型的本地功能。以下列表展示了代表模型的选取，以描述和说明MLflow中可用的支持：
- en: '`mlflow.tensorflow`: TensorFlow is by far one of the most used libraries, particularly
    geared toward deep learning. MLflow integrates natively with the model format
    and the monitoring abilities by saving logs in TensorBoard formats. Auto-logging
    is supported in MLflow for TensorFlow models. The Keras model in *Figure 5.5*
    is a good example of TensorFlow support in MLflow.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mlflow.tensorflow`: TensorFlow 是迄今为止最常用的库之一，特别适合深度学习。MLflow 通过以 TensorBoard
    格式保存日志，与模型格式和监控能力进行原生集成。MLflow 支持TensorFlow模型的自动记录。'
- en: '`mlflow.h2o`: H2O is a complete machine learning platform geared toward the
    automation of models and with some overlapping features with MLflow. MLflow provides
    the ability to load (`load_model`) and log models (`log_model`) in H2O native
    format, allowing interoperability between the tools. Unfortunately, as of the
    current MLflow version, you can’t use auto-logging on `h2o` models:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mlflow.h2o`: H2O是一个面向模型自动化的完整机器学习平台，与MLflow有一些重叠的功能。MLflow提供了在H2O原生格式中加载（`load_model`）和记录模型（`log_model`）的能力，允许工具之间的互操作性。不幸的是，截至当前MLflow版本，你无法在`h2o`模型上使用自动记录：'
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`mlflow.spark`: MLflow integrates with the Apache Spark library natively through
    two main interfaces: Spark MLlib for machine learning and the MLeap platform (https://combust.github.io/mleap-docs/).
    Mleap is more of a deployment platform while MLlib is more of a library that you
    can add to your projects.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mlflow.spark`: MLflow 通过两个主要接口与Apache Spark库进行原生集成：Spark MLlib用于机器学习，以及MLeap平台（https://combust.github.io/mleap-docs/）。Mleap更像是一个部署平台，而MLlib则更像是一个你可以添加到项目中的库。'
- en: 'A very comprehensive list of flavors/formats is supported by MLflow and their
    usage and support can be read about here: [https://www.mlflow.org/docs/latest/python_api/index.html.](https://www.mlflow.org/docs/latest/python_api/index.html'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow支持非常全面的口味/格式列表，它们的用法和支持可以在这里阅读：[https://www.mlflow.org/docs/latest/python_api/index.html.](https://www.mlflow.org/docs/latest/python_api/index.html)
- en: )
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: Custom models
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义模型
- en: 'We can delve into the next excerpt of code and the custom `RandomPredictor`
    model. As long as you provide a class with an interface with the `fit` and `predict
    methods`, you can have your own custom MLflow model:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以深入探讨下一段代码和自定义的`RandomPredictor`模型。只要提供一个具有`fit`和`predict`方法接口的类，你就可以拥有自己的自定义MLflow模型：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding `class`, we basically use a random probability, and it can
    be used as a sample model in a system where you want to make sure that your model
    is better than a random model.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`class`中，我们基本上使用随机概率，它可以作为一个样本模型，用于确保你的模型比随机模型更好。
- en: In this section, we introduced different types of model flavors and the creation
    of a custom mode. We will next look at some of the schemas and signature features
    of MLflow.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了不同类型的模型风味和自定义模式的创建。接下来，我们将探讨MLflow的一些模式和签名特征。
- en: Managing model signatures and schemas
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理模型签名和模式
- en: An important feature of MLflow is to provide an abstraction for input and output
    schemas of models and the ability to validate model data during prediction and
    training.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow的一个重要特性是提供模型输入和输出模式的抽象，以及在预测和训练期间验证模型数据的能力。
- en: 'MLflow throws an error if your input does not match the schema and signature
    of the model during prediction:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的输入在预测期间不匹配模型的模式和签名，MLflow会抛出一个错误：
- en: 'We will next look at a code listing of a simple model of digit classification
    (the details of the dataset are available here: [https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits](https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits)).
    The following code flattens the image into a pandas DataFrame and fits a model
    to the dataset:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将查看一个简单的数字分类模型（数据集的详细信息可在以下链接找到：[https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits](https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits)）的代码示例。以下代码将图像展平为pandas
    DataFrame，并将模型拟合到数据集：
- en: '[PRE4]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We’ll look at the previous code listing, which you can run in a new notebook
    and navigate through the MLflow UI to investigate in more depth the MLmodel generated
    in *Figure 5.6*:![](img/image0062.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将查看之前的代码列表，您可以在新的笔记本中运行它，并通过 MLflow UI 深入调查 *图 5.6* 中生成的 MLmodel：![](img/image0062.jpg)
- en: Figure 5.6 – Sample of an MLmodel file
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.6 – MLmodel 文件示例
- en: 'The MLmodel file contains the signature in JSON of input and output files.
    For some of the flavors autologged, we will not be able to infer the signature
    automatically so you can provide the signature inline when logging the model:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MLmodel 文件包含输入和输出文件的 JSON 签名。对于一些自动记录的变体，我们可能无法自动推断签名，因此您可以在记录模型时提供签名：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous code block, the signature of the model is provided by the `infer_signature`
    method. As the model is logged through `log_model`, the signature is provided.
    One important advantage of the signatures being logged alongside the model is
    that they can serve as documentation and metadata for the model. Third-party systems
    can consume the metadata and interact with the models by validating the data or
    generating documentation for the models.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码块中，模型的签名由 `infer_signature` 方法提供。当模型通过 `log_model` 记录时，签名被提供。签名与模型一起记录的一个重要优点是它们可以作为模型的文档和元数据。第三方系统可以消费元数据并通过验证数据或为模型生成文档与模型交互。
- en: In this section, we introduced the model schema and signature features of MLflow
    models. We will now move on to the other critical module in this space, namely
    the Model Registry.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了 MLflow 模型的模式化和签名功能。现在我们将继续探讨这个空间中的另一个关键模块，即模型注册表。
- en: Introducing Model Registry
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍模型注册表
- en: '**MLflow Model Registry** is a module in MLflow that comprises a centralized
    store for Models, an API allowing the management of the life cycle of a model
    in a registry.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**MLflow 模型注册表**是 MLflow 中的一个模块，它包含一个用于存储模型的集中存储库，一个允许在注册表中管理模型生命周期的 API。'
- en: 'A typical workflow for a machine learning model developer is to acquire training
    data; clean, process, and train models; and from there on, hand over to a system
    or person that deploys the models. In very small settings, where you have one
    person responsible for this function, it is quite trivial. Challenges and friction
    start to arise when the variety and quantity of models in a team start to scale.
    A selection of common friction points raised by machine learning developers with
    regards to storing and retrieving models follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于机器学习模型开发者来说，一个典型的流程是获取训练数据；清理、处理和训练模型；然后将其交给负责部署模型的人员或系统。在非常小的环境中，如果您有一个人负责这个功能，这相当简单。当团队中模型的种类和数量开始扩展时，挑战和摩擦开始出现。以下是一些机器学习开发者提出的关于存储和检索模型的常见摩擦点：
- en: Collaboration in larger teams
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大型团队中的协作
- en: Phasing out stale models in production
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产中淘汰过时的模型
- en: The provenance of a model
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型的来源
- en: A lack of documentation for models
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型缺乏文档
- en: Identifying the correct version of a model
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别模型的正确版本
- en: How to integrate the model with deployment tools
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将模型与部署工具集成
- en: The main idea behind **MLflow Model Registry** is to provide a central store
    model in an organization where all the relevant models are stored and can be accessed
    by humans and systems. A good analogy would be a Git repository for models with
    associated relevant metadata and centralized state management for models.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**MLflow 模型注册表**背后的主要思想是在组织中提供一个中央存储模型的地方，所有相关模型都存储在此，并且可以被人类和系统访问。一个很好的类比就是具有相关元数据和模型集中状态管理的模型
    Git 仓库。'
- en: 'In the MLflow UI (available in your local environment), you should click on
    the tab on the right side of **Experiments** with the label **Models** as indicated
    by the arrow:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MLflow UI（可在您的本地环境中使用）中，您应单击 **实验** 标签右侧带有 **模型** 标签的选项卡，如箭头所示：
- en: Through this module, you are able to list all the models registered, search
    by name, or create by name. For each model, you can see the label of the latest
    version and the specific versions that are in staging or production:![](img/image0072.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过此模块，您能够列出所有已注册的模型，按名称搜索或按名称创建。对于每个模型，您可以看到最新版本的标签以及处于预发布或生产中的特定版本！[](img/image0072.jpg)
- en: Figure 5.7 – Model Registry UI
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.7 – 模型注册表 UI
- en: A new model can be created by clicking on the **Create Model** button where
    a relevant name can be given to a specific model as shown in *Figure 5.8*:![](img/image0082.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过点击 **创建模型** 按钮创建一个新模型，并为特定模型指定一个相关名称，如图 *5.8* 所示：![](img/image0082.jpg)
- en: Figure 5.8 – Model Registry UI – Create Model
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 *5.8* – 模型注册库 UI – 创建模型
- en: 'You can also create models in MLflow by running into the **Experiments** model
    and choosing one of your models, and from there, specifically deciding to register
    the model. You will have to associate your run with an existing model or create
    a new model name to associate with this particular type of model thereafter:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过进入 **实验** 模型并选择你的一个模型来在 MLflow 中创建模型，然后，具体决定注册该模型。你将必须将你的运行与现有模型关联或创建一个新模型名称，以关联此特定类型的模型：
- en: '![](img/image0092.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image0092.jpg)'
- en: Figure 5.9 – Model Tracking UI – Create New Model
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 *5.9* – 模型跟踪 UI – 创建新模型
- en: When you add a new model, MLflow automatically increases the version and labels
    this version as the latest version and everyone in the organization can query
    the registry for the latest version of a model for a given problem.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当你添加一个新模型时，MLflow 会自动增加版本号，并将此版本标记为最新版本，组织中的每个人都可以查询给定问题的模型的最新版本。
- en: Adding your best model to Model Registry
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将你的最佳模型添加到模型注册库
- en: Everything that can be done in the UI in MLflow can also be implemented through
    the MLflow API.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MLflow 的 UI 中可以执行的所有操作也可以通过 MLflow API 实现。
- en: 'We can quickly go back to our use case of stock market prediction and add our
    first baseline model to Model Registry and run the `hyperopt_optimization_logistic_regression_mlflow.ipynb
    notebook`, available in the repo of this chapter, and sort the runs according
    to the F1 score metrics in descending order as represented by *Figure 5.10*:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以快速回到我们的股票市场预测用例，并将我们的第一个基线模型添加到模型注册库，并运行本章仓库中可用的 `hyperopt_optimization_logistic_regression_mlflow.ipynb`
    笔记本，并根据图 *5.10* 所示的 F1 分数指标按降序排序运行：
- en: '![](img/image0101.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image0101.jpg)'
- en: Figure 5.10 – Selecting the best model
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 *5.10* – 选择最佳模型
- en: 'From there, you should be able to register the best model with the name `BTC
    StockPrediction` as represented in *Figure 5.11*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，你应该能够注册名为 `BTC StockPrediction` 的最佳模型，如图 *5.11* 所示：
- en: '![](img/image0111.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image0111.jpg)'
- en: Figure 5.11 – Naming your model
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 *5.11* – 命名你的模型
- en: 'By returning to the models module, you will notice, as represented in *Figure
    5.12*, your newly created model under **Version 1**:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过返回模型模块，你将注意到，如图 *5.12* 所示，你的新创建的模型位于 **版本 1** 下：
- en: '![](img/image0121.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image0121.jpg)'
- en: Figure 5.12 – Registered Models
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 *5.12* – 已注册模型
- en: Having introduced the functionalities of Model Registry, in the next section,
    we will describe a model development life cycle to help organize the management
    of your models.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了模型注册库的功能后，在下一节中，我们将描述一个模型开发生命周期，以帮助组织你的模型管理。
- en: Managing the model development life cycle
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理模型开发生命周期
- en: 'Managing the model life cycle is quite important when working in a team of
    more than one model developer. It’s quite usual for multiple model developers
    to try different models within the same project, and having a reviewer decide
    on the model that ends up going to production is quite important:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个由多个模型开发者组成的团队中工作，管理模型生命周期非常重要。在同一个项目中尝试不同模型是相当常见的，让审阅者决定最终进入生产的模型非常重要：
- en: '![](img/image0131.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image0131.jpg)'
- en: Figure 5.13 – Example of a model development life cycle
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 *5.13* – 模型开发生命周期的示例
- en: 'A model in its life cycle can undergo the following stages if using a life
    cycle similar to the one represented in *Figure 5.13*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用与图 *5.13* 所示类似的生命周期，模型在其生命周期中可以经历以下阶段：
- en: '**Development**: The state where the model developer is still exploring and
    trying out different approaches and is still trying to find a reasonable solution
    to their machine learning problem.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发**：模型开发者仍在探索和尝试不同的方法，仍在尝试找到解决他们的机器学习问题的合理解决方案。'
- en: '**Staging**: The state where the model can be tested automatically with production-type
    traffic.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预发布**：模型可以与生产类型流量自动测试的状态。'
- en: '**Production**: When the model is ready to handle real-life production traffic.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产**：当模型准备好处理现实生活中的生产流量时。'
- en: '**Archive**: When the model no longer serves the business purpose that it was
    initially developed for, it will be archived and its metadata stored for future
    reference or compliance.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存档**：当模型不再服务于其最初开发时的业务目的时，它将被存档，其元数据将存储以供将来参考或合规性使用。'
- en: 'For instance, a reviewer or supervisor, as represented in *Figure 5.14*, can
    move a model from the **Development** state to **Staging** for further deployment
    in a test environment and the model can be transitioned into production if approved
    by reviewers:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如*图5.14*所示，审稿人或主管可以将模型从**开发**状态移动到**预发布**状态，以便在测试环境中进一步部署，如果经审稿人批准，模型可以过渡到生产状态：
- en: '![](img/image0141.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image0141.jpg)'
- en: Figure 5.14 – Example of a model development life cycle
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 – 模型开发生命周期的示例
- en: 'When transitioning from a state in MLflow, you have the option to send the
    model in an existing state to the next state:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在从MLflow中的状态转换时，你有选择将处于现有状态的模型发送到下一个状态：
- en: '![](img/image0151.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image0151.jpg)'
- en: Figure 5.15 – Stage Transition in MLflow
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 – MLflow中的阶段转换
- en: The transitions from the **Staging** to **Production** stages in a mature environment
    are meant to be done automatically, as we will demonstrate in the upcoming chapters
    of the book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在成熟环境中，从**预发布**阶段到**生产**阶段的转换旨在自动进行，正如我们将在本书的后续章节中展示的那样。
- en: With this section, we have concluded the description of the features related
    to models in MLflow.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本节，我们完成了与MLflow中模型相关特性的描述。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we first introduced the Models module in MLflow and the support
    for different algorithms, from tree-based to linear to neural. We were exposed
    to the support in terms of the logging and metrics of models and the creation
    of custom metrics.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先介绍了MLflow中的模型模块及其对不同算法的支持，从基于树的到线性的再到神经网络的。我们了解了模型日志和指标的支持以及自定义指标的创作。
- en: In the last two sections, we introduced the Model Registry model and how to
    use it to implement a model life cycle to manage our models.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两节中，我们介绍了模型注册模型及其如何使用它来实现模型生命周期来管理我们的模型。
- en: In the next chapters and section of the book, we will focus on applying the
    concepts learned so far in terms of real-life systems and we will architect a
    machine learning system for production environments.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的下一章和章节中，我们将专注于将到目前为止学到的概念应用于现实系统，并将为生产环境设计一个机器学习系统。
- en: Further reading
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In order to solidify your knowledge and dive deeper into the concepts introduced
    in this chapter, you should look at the following links:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了巩固你的知识并深入了解本章中介绍的概念，你应该查看以下链接：
- en: '[https://www.mlflow.org/docs/latest/models.html](https://www.mlflow.org/docs/latest/models.html)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.mlflow.org/docs/latest/models.html](https://www.mlflow.org/docs/latest/models.html)'
- en: '[https://www.mlflow.org/docs/latest/model-registry.html](https://www.mlflow.org/docs/latest/model-registry.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.mlflow.org/docs/latest/model-registry.html](https://www.mlflow.org/docs/latest/model-registry.html)'
- en: '[https://www.slideshare.net/Hadoop_Summit/introducing-mlflow-an-open-source-platform-for-the-machine-learning-life
    cycle-for-onprem-or-in-the-cloud](https://www.slideshare.net/Hadoop_Summit/introducing-mlflow-an-open-source-platform-for-the-machine-learning-lifecycle-for-onprem-or-in-the-cloud)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.slideshare.net/Hadoop_Summit/introducing-mlflow-an-open-source-platform-for-the-machine-learning-lifecycle-for-onprem-or-in-the-cloud](https://www.slideshare.net/Hadoop_Summit/introducing-mlflow-an-open-source-platform-for-the-machine-learning-lifecycle-for-onprem-or-in-the-cloud)'
