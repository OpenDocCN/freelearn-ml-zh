- en: <st c="0">7</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">7</st>
- en: <st c="2">Performing Feature Scaling</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">执行特征缩放</st>
- en: <st c="28">Many machine learning algorithms are sensitive to the variable scale.</st>
    <st c="99">For example, the coefficients of linear models depend on the scale
    of the feature – that is, changing the feature scale will change the coefficient’s
    value.</st> <st c="256">In linear models, as well as in algorithms that depend
    on distance calculations such as clustering and principal component analysis,
    features with larger value ranges tend to dominate over features with smaller
    ranges.</st> <st c="475">Therefore, having features on a similar scale allows
    us to compare feature importance and may help algorithms converge faster, improving
    performance and</st> <st c="628">training times.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28">许多机器学习算法对变量尺度很敏感。</st> <st c="99">例如，线性模型的系数取决于特征的尺度——也就是说，改变特征尺度将改变系数的值。</st>
    <st c="256">在线性模型中，以及在依赖于距离计算的算法（如聚类和主成分分析）中，值范围较大的特征往往会比值范围较小的特征占主导地位。</st> <st
    c="475">因此，将特征设置在相似尺度上允许我们比较特征重要性，并可能有助于算法更快收敛，从而提高性能和</st> <st c="628">训练时间。</st>
- en: <st c="643">Scaling techniques, in general, divide the variables by some constant;
    therefore, it is important to highlight that the shape of the variable distribution
    does not change when we rescale the variables.</st> <st c="846">If you want to
    change the distribution shape, check out</st> [*<st c="902">Chapter 3</st>*](B22396_03.xhtml#_idTextAnchor351)<st
    c="911">,</st> *<st c="913">Transforming</st>* *<st c="926">Numerical Variables</st>*<st
    c="945">.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="643">一般来说，缩放技术是将变量除以某个常数；因此，重要的是要强调，当我们对变量进行缩放时，变量分布的形状不会改变。</st> <st
    c="846">如果您想改变分布形状，请查看</st> [*<st c="902">第3章</st>*](B22396_03.xhtml#_idTextAnchor351)<st
    c="911">，*<st c="913">转换</st>* *<st c="926">数值变量</st>*<st c="945">。</st>
- en: <st c="946">In this chapter, we will describe different methods to set features
    on a</st> <st c="1020">similar scale.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="946">在本章中，我们将描述不同的方法来设置特征在相似尺度上的值。</st>
- en: <st c="1034">This chapter will cover the</st> <st c="1063">following recipes:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1034">本章将涵盖以下内容：</st> <st c="1063">以下食谱：</st>
- en: <st c="1081">Standardizing</st> <st c="1096">the features</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1081">标准化</st> <st c="1096">特征</st>
- en: <st c="1108">Scaling to the maximum and</st> <st c="1136">minimum values</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1108">缩放到最大值和</st> <st c="1136">最小值</st>
- en: <st c="1150">Scaling with the median</st> <st c="1175">and quantiles</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1150">使用中位数和分位数进行缩放</st> <st c="1175">和</st>
- en: <st c="1188">Performing</st> <st c="1200">mean normalization</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1188">执行</st> <st c="1200">均值归一化</st>
- en: <st c="1218">Implementing maximum</st> <st c="1240">absolute scaling</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1218">实现最大</st> <st c="1240">绝对缩放</st>
- en: <st c="1256">Scaling to vector</st> <st c="1275">unit length</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1256">缩放到向量</st> <st c="1275">单位长度</st>
- en: <st c="1286">Technical requirements</st>
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1286">技术要求</st>
- en: <st c="1309">The main libraries that we use in this chapter are scikit-learn
    (</st>`<st c="1375">sklearn</st>`<st c="1383">) for scaling,</st> `<st c="1399">pandas</st>`
    <st c="1405">to handle the data, and</st> `<st c="1430">matplotlib</st>` <st c="1440">for
    plotting.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1309">在本章中，我们使用的主要库是用于缩放的 scikit-learn (</st>`<st c="1375">sklearn</st>`<st
    c="1383">)，用于处理数据的 pandas <st c="1399">，以及</st> `<st c="1430">matplotlib</st>`
    <st c="1440">用于绘图。</st>
- en: <st c="1454">S</st><st c="1456">tandardizing the features</st>
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1454">标准化特征</st>
- en: <st c="1481">Standardization</st> <st c="1497">is the process of centering the
    variable at</st> `<st c="1542">0</st>` <st c="1543">and standardizing the variance
    to</st> `<st c="1578">1</st>`<st c="1579">. To</st> <st c="1583">standardize features,
    we subtract the mean from each observation and then divide the result by the</st>
    <st c="1683">standard deviation:</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1481">标准化</st> <st c="1497">是将变量中心化到</st> `<st c="1542">0</st>` <st c="1543">并将方差标准化到</st>
    `<st c="1578">1</st>`<st c="1579">的过程。为了标准化特征，我们从每个观测值中减去均值，然后将结果除以</st> <st c="1683">标准差：</st>
- en: '![<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><msub><mi>x</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi><mi>d</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>s</mi><mi>t</mi><mi>d</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac></mrow></mrow></math>](img/25.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><msub><mi>x</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi><mi>d</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>s</mi><mi>t</mi><mi>d</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac></mrow></mrow></math>](img/25.png)'
- en: <st c="1733">The result of the preceding transformation is called</st> <st c="1785">the</st>
    **<st c="1790">z-score</st>** <st c="1797">and represents how many standard deviations
    a given observation</st> *<st c="1862">deviates</st>* <st c="1870">from</st> <st
    c="1876">the mean.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1733">前面变换的结果称为</st> <st c="1785">z 分数</st> <st c="1797">，它表示一个给定观测值相对于平均值的偏离程度。</st>
- en: <st c="1885">Standardization is generally useful when models require the variables
    to be centered at zero and data is not sparse (centering sparse data will destroy
    its sparse nature).</st> <st c="2058">On the downside, standardization is sensitive
    to outliers and the z-score does not keep the symmetric properties if the variables
    are highly skewed, as we discuss in the</st> <st c="2228">following section.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1885">标准化通常在模型需要变量以零为中心且数据不稀疏时很有用（对稀疏数据进行中心化会破坏其稀疏性）。</st> <st c="2058">缺点是，标准化对异常值敏感，并且当变量高度偏斜时，z
    分数不会保持对称属性，正如我们在下一节中讨论的那样。</st>
- en: <st c="2246">Getting ready</st>
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2246">准备中</st>
- en: <st c="2260">With standardization, the variable distribution does not change;
    what changes is the magnitude of their values, as we see in the</st> <st c="2390">following
    figure:</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2260">标准化时，变量分布不会改变；改变的是它们值的幅度，正如我们在以下图中看到的：</st> <st c="2390">图 7.1
    – 标准化前后正态和偏态变量的分布。</st>
- en: '![Figure 7.1 – Distribution of a normal and skewed variable before and after
    standardization.](img/B22396_07_1.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 标准化前后正态和偏态变量的分布](img/B22396_07_1.jpg)'
- en: <st c="2777">Figure 7.1 – Distribution of a normal and skewed variable before
    and after standardization.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2777">图 7.1 – 标准化前后正态和偏态变量的分布。</st>
- en: <st c="2868">The z-score (</st>*<st c="2882">x</st>* <st c="2884">axis in the
    bottom panels) indicates</st> <st c="2921">how many standard deviations an observation
    deviates from the mean.</st> <st c="2990">When the z-score is</st> `<st c="3010">1</st>`<st
    c="3011">, the observation lies 1 standard deviation to the right of the mean,
    whereas when the z-score is</st> `<st c="3109">-1</st>`<st c="3111">, the sample
    is 1 standard deviation to the left of</st> <st c="3163">the mean.</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2868">z 分数（</st>*<st c="2882">x</st>* <st c="2884">轴在底部面板中）表示一个观测值偏离平均值的多少个标准差。</st>
    <st c="2921">当 z 分数为</st> `<st c="3010">1</st>`<st c="3011">时，观测值位于平均值右侧 1 个标准差处，而当
    z 分数为</st> `<st c="3109">-1</st>`<st c="3111">时，样本位于平均值左侧 1 个标准差处。</st>
- en: <st c="3172">In normally distributed variables, we can estimate the probability
    of a value being greater or smaller than a given z-score, and this probability
    distribution is symmetric.</st> <st c="3346">The probability of an observation
    being smaller than a z-score of</st> `<st c="3412">-1</st>` <st c="3414">is equivalent
    to the probability of a value being greater than</st> `<st c="3478">1</st>` <st
    c="3479">(horizontal line in the bottom-left panel).</st> <st c="3524">This symmetry
    is fundamental to many statistical tests.</st> <st c="3580">In skewed distributions,
    this symmetry does not hold.</st> <st c="3634">As illustrated in the bottom-right
    panel of</st> *<st c="3678">Figure 7</st>**<st c="3686">.1</st>* <st c="3688">(horizontal
    lines), the probability of a value being smaller than</st> `<st c="3755">-1</st>`
    <st c="3757">is different from that of being greater</st> <st c="3798">than</st>
    `<st c="3803">1</st>`<st c="3804">.</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3172">在正态分布的变量中，我们可以估计一个值大于或小于给定 z 分数的概率，并且这种概率分布是对称的。</st> <st c="3346">一个观测值小于
    z 分数</st> `<st c="3412">-1</st>` <st c="3414">的概率等同于一个值大于</st> `<st c="3478">1</st>`
    <st c="3479">(左下面板中的水平线)的概率。</st> <st c="3524">这种对称性是许多统计测试的基础。</st> <st c="3580">在偏态分布中，这种对称性不成立。</st>
    <st c="3634">如图 7**<st c="3678">.1</st>**<st c="3686">.1</st>**<st c="3688">(水平线)右下面板所示，一个值小于</st>
    `<st c="3755">-1</st>` <st c="3757">的概率与大于</st> `<st c="3798">1</st>`<st c="3804">的概率不同。</st>
- en: <st c="3805">Note</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3805">注意</st>
- en: <st c="3810">The mean and the standard deviation are sensitive to outliers;
    therefore, the features may scale differently from each other in the presence
    of outliers when</st> <st c="3969">using standardization.</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 均值和标准差对异常值敏感；因此，在使用标准化时，特征可能在存在异常值的情况下以不同的方式缩放。
- en: <st c="3991">In practice, we often apply standardization ignoring the shape
    of the distribution.</st> <st c="4076">However, keep in mind that if the models
    or tests you are using make assumptions about the data’s distribution, you might
    benefit from transforming the variables before standardization, or trying a different</st>
    <st c="4284">scaling metho</st><st c="4297">d.</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，我们经常在忽略分布形状的情况下应用标准化。然而，请记住，如果您使用的模型或测试假设数据分布，您可能从在标准化之前转换变量中受益，或者尝试不同的缩放方法。
- en: <st c="4300">How to do it...</st>
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="4300">如何做到这一点...</st>
- en: <st c="4316">In this recipe, we’ll apply</st> <st c="4345">standardization to
    the variables of the California</st> <st c="4396">housing dataset:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将对加利福尼亚住房数据集的变量应用标准化：
- en: <st c="4412">Let’s begin by importing the required Python packages, classes,</st>
    <st c="4477">and functions:</st>
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先导入所需的 Python 包、类和函数：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="4667">Let’s load the California housing dataset from scikit-learn into
    a DataFrame and drop the</st> `<st c="4758">Latitude</st>` <st c="4766">and</st>
    `<st c="4771">Longitude</st>` <st c="4780">variables:</st>
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将加利福尼亚住房数据集从 scikit-learn 加载到 DataFrame 中，并删除 `<st c="4758">纬度</st>` 和 `<st
    c="4766">经度</st>` 变量：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="4919">Now, let’s divide the data into train and</st> <st c="4962">test
    sets:</st>
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将数据分为训练集和测试集：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="5062">Next, we’ll set up the</st> `<st c="5086">StandardScaler()</st>`
    <st c="5102">function from scikit-learn and fit it</st> <st c="5140">to the train
    set so that it learns each variable’s mean and</st> <st c="5201">standard deviation:</st>
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置 scikit-learn 的 `<st c="5086">StandardScaler()</st>` 函数，并将其拟合到训练集，以便它学习每个变量的均值和标准差：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="5298">Note</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5298">注意</st>
- en: <st c="5303">Scikit-learn scalers, like any scikit-learn transformer, return
    NumPy arrays by default.</st> <st c="5393">To return</st> `<st c="5403">pandas</st>`
    <st c="5409">or</st> `<st c="5413">polars</st>` <st c="5419">DataFrames, we need
    to specify the output container with the</st> `<st c="5481">set_output()</st>`
    <st c="5493">method, as we did in</st> *<st c="5515">Step 4</st>*<st c="5521">.</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-learn 的缩放器，就像任何 scikit-learn 转换器一样，默认返回 NumPy 数组。要返回 `<st c="5403">pandas</st>`
    或 `<st c="5413">polars</st>` 数据帧，我们需要使用 `<st c="5481">set_output()</st>` 方法指定输出容器，就像我们在
    *<st c="5515">步骤 4</st>* 中所做的那样。
- en: <st c="5522">Now, let’s</st> <st c="5534">standardize the train and test sets
    with the</st> <st c="5579">trained scaler:</st>
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="5522">现在，让我们使用训练好的缩放器对训练集和测试集进行标准化：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`<st c="5678">StandardScaler()</st>` <st c="5695">stores the mean and standard
    deviation learned from the training set during</st> `<st c="5772">fit()</st>`<st
    c="5777">. Let’s visualize the</st> <st c="5799">learned parameters.</st>'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="5678">StandardScaler()</st>` 在 `<st c="5772">fit()</st>` 过程中存储从训练集学习到的均值和标准差。让我们可视化学习到的参数。'
- en: <st c="5818">First, we’ll print the mean values that were learned</st> <st c="5872">by</st>
    `<st c="5875">scaler</st>`<st c="5881">:</st>
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将打印 `<st c="5875">scaler</st>` 学习到的均值：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="5896">We see the mean values of each variable in the</st> <st c="5944">following
    output:</st>
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在以下输出中看到每个变量的均值：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: scaler.scale_
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler.scale_
- en: <st c="6227">array([1.89109236e+00, 1.25962585e+01, 2.28754018e+00,                          4.52736275e-01,
    1.14954037e+03, 6.86792905e+00])</st>
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="6227">array([1.89109236e+00, 1.25962585e+01, 2.28754018e+00,                          4.52736275e-01,
    1.14954037e+03, 6.86792905e+00])</st>
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="6416">Let’s print</st> <st c="6428">the descriptive statistics from the
    original variables in the</st> <st c="6491">test set:</st>
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打印测试集中原始变量的描述性统计信息：
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="6518">In the following output, we see that the variables’ mean values
    are different from zero and the</st> <st c="6615">variance varies:</st>
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们可以看到变量的均值与零不同，并且方差有所变化：
- en: '![Figure 7.2 – Descriptive statistical parameters of the variables before scaling](img/B22396_07_2.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 缩放前变量的描述性统计参数](img/B22396_07_2.jpg)'
- en: <st c="7205">Figure 7.2 – Descriptive statistical parameters of the variables
    before scaling</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7205">图7.2 – 缩放前变量的描述性统计参数</st>
- en: <st c="7284">Let’s now print</st> <st c="7300">the descriptive statistical values
    from the</st> <st c="7345">transformed variables:</st>
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="7284">现在让我们打印</st> <st c="7300">转换变量的描述性统计值：</st>
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="7392">In the following output, we see that the variables’ mean is now
    centered at</st> `<st c="7469">0</st>` <st c="7470">and the variance is</st> <st
    c="7491">approximately</st> `<st c="7505">1</st>`<st c="7506">:</st>
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="7392">在下面的输出中，我们看到变量的均值现在集中在</st> `<st c="7469">0</st>` <st c="7470">，方差大约为</st>
    <st c="7491">1</st>`<st c="7506">：</st>
- en: '![Figure 7.3 – Descriptive statistical parameters of the scaled variables showing
    a mean of 0 and variance of approximately 1](img/B22396_07_3.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – 缩放变量的描述性统计参数，显示均值为0，方差约为1](img/B22396_07_3.jpg)'
- en: <st c="8073">Figure 7.3 – Descriptive statistical parameters of the scaled variables
    showing a mean of 0 and variance of approximately 1</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8073">图7.3 – 缩放变量的描述性统计参数，显示均值为0，方差约为1</st>
- en: <st c="8196">Note</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8196">注意</st>
- en: <st c="8201">The</st> `<st c="8206">AveRooms</st>`<st c="8214">,</st> `<st c="8216">AveBedrms</st>`<st
    c="8225">, and</st> `<st c="8231">AveOccup</st>` <st c="8239">variables are highly
    skewed, which can lead to observed values in the test set that are much greater
    or much smaller than those in the training set, and hence we see that the variance
    deviates from</st> `<st c="8438">1</st>`<st c="8439">. This is to be expected
    because standardization is sensitive to outliers and very</st> <st c="8522">skewed
    distributions.</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8201">The</st> `<st c="8206">AveRooms</st>`<st c="8214">,</st> `<st c="8216">AveBedrms</st>`<st
    c="8225">, and</st> `<st c="8231">AveOccup</st>` <st c="8239">变量高度偏斜，这可能导致测试集中的观察值远大于或远小于训练集中的值，因此我们观察到方差偏离了</st>
    `<st c="8438">1</st>`<st c="8439">。这是可以预料的，因为标准化对异常值和非常</st> <st c="8522">偏斜的分布敏感。</st>
- en: <st c="8543">We mentioned, in</st> <st c="8560">the</st> *<st c="8565">Getting
    ready</st>* <st c="8578">section, that the shape of the distribution does not
    change with standardization.</st> <st c="8661">Go ahead and corroborate that by
    executing</st> `<st c="8704">X_test.hist()</st>` <st c="8717">and then</st> `<st
    c="8727">X_test_scaled.hist()</st>` <st c="8747">to compare the variables’ distribution
    before and after</st> <st c="8804">the transformati</st><st c="8820">on.</st>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8543">我们在</st> <st c="8560">“准备”</st> <st c="8565">部分提到，分布的形状不会随着标准化而改变。</st>
    <st c="8661">继续执行</st> `<st c="8704">X_test.hist()</st>` <st c="8717">然后</st>
    `<st c="8727">X_test_scaled.hist()</st>` <st c="8747">来比较转换前后变量的分布。</st>
- en: <st c="8824">How it works...</st>
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="8824">它是如何工作的...</st>
- en: <st c="8840">In this recipe, we standardized the variables of the California
    housing dataset by utilizing scikit-learn.</st> <st c="8948">We split the data
    into train and test sets because the parameters for the standardization should
    be learned from the train set.</st> <st c="9076">This is to avoid leaking data
    from the test to the train set during the preprocessing steps and to ensure the
    test set remains naïve to all feature</st> <st c="9224">transformation processes.</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8840">在这个配方中，我们通过使用scikit-learn对加利福尼亚住房数据集的变量进行了标准化。</st> <st c="8948">我们将数据分为训练集和测试集，因为标准化的参数应该从训练集中学习。</st>
    <st c="9076">这是为了避免在预处理步骤中将测试集中的数据泄露到训练集中，并确保测试集对所有特征</st> <st c="9224">转换过程保持无知的。</st>
- en: <st c="9249">To standardize these features, we used scikit-learn’s</st> `<st
    c="9304">StandardScaler()</st>` <st c="9320">function, which is able to learn
    and store the parameters utilized in the transformation.</st> <st c="9411">Using</st>
    `<st c="9417">fit()</st>`<st c="9422">, the scaler learned each variable’s mean
    and standard deviation and stored them in its</st> `<st c="9510">mean_</st>` <st
    c="9515">and</st> `<st c="9520">scale_</st>` <st c="9526">attributes.</st> <st
    c="9539">Using</st> `<st c="9545">transform()</st>`<st c="9556">, the scaler standardized
    the variables in the train and test sets.</st> <st c="9624">The default output
    of</st> `<st c="9646">StandardScaler()</st>` <st c="9662">is a NumPy array, but
    through the</st> `<st c="9697">set_output()</st>` <st c="9709">parameter, we can
    change the output</st> <st c="9746">container to a</st> `<st c="9761">pandas</st>`
    <st c="9767">DataFrame, as we did in</st> *<st c="9792">Step 4</st>*<st c="9798">,
    or to</st> `<st c="9806">polars</st>`<st c="9812">, by</st> <st c="9817">setting</st>
    `<st c="9825">transform="polars"</st>`<st c="9843">.</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9249">为了标准化这些特征，我们使用了scikit-learn的</st> `<st c="9304">StandardScaler()</st>`
    <st c="9320">函数，该函数能够学习并存储在转换中使用的参数。</st> <st c="9411">使用</st> `<st c="9417">fit()</st>`<st
    c="9422">，缩放器学习每个变量的均值和标准差，并将它们存储在其</st> `<st c="9510">mean_</st>` <st c="9515">和</st>
    `<st c="9520">scale_</st>` <st c="9526">属性中。</st> <st c="9539">使用</st> `<st c="9545">transform()</st>`<st
    c="9556">，缩放器对训练集和测试集中的变量进行了标准化。</st> <st c="9624">`<st c="9646">StandardScaler()</st>`
    <st c="9662">的默认输出是一个NumPy数组，但通过</st> `<st c="9697">set_output()</st>` <st c="9709">参数，我们可以将输出</st>
    <st c="9746">容器更改为一个</st> `<st c="9761">pandas</st>` <st c="9767">DataFrame，就像我们在</st>
    *<st c="9792">步骤 4</st>*<st c="9798">中做的那样，或者更改为</st> `<st c="9806">polars</st>`<st
    c="9812">，通过</st> <st c="9817">设置</st> `<st c="9825">transform="polars"</st>`<st
    c="9843">。</st>
- en: <st c="9844">Note</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9844">注意</st>
- en: '`<st c="9849">StandardScaler()</st>` <st c="9866">will subtract the mean and
    divide it by the standard deviation by default.</st> <st c="9942">If we want to
    just center the distributions without standardizing the variance, we can do so
    by setting</st> `<st c="10046">with_std=False</st>` <st c="10060">when initializing
    the transformer.</st> <st c="10096">If we want to set the variance to</st> `<st
    c="10130">1</st>`<st c="10131">, without cantering the distribution, we can do
    so by setting</st> `<st c="10193">with_mean=False</st>` <st c="10208">in</st>
    *<st c="10212">Step</st> <st c="10216">4</st>*<st c="10218">.</st>'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="9849">StandardScaler()</st>` <st c="9866">默认会减去均值并除以标准差。</st> <st c="9942">如果我们只想将分布中心化而不标准化方差，我们可以在初始化转换器时设置</st>
    `<st c="10046">with_std=False</st>` <st c="10060">。</st> <st c="10096">如果我们想将方差设置为</st>
    `<st c="10130">1</st>`<st c="10131">，而不对分布进行中心化，我们可以在</st> *<st c="10212">步骤</st>
    <st c="10216">4</st>*<st c="10218">中设置</st> `<st c="10193">with_mean=False</st>`
    <st c="10208">。</st>'
- en: <st c="10219">Scaling to the maximum and minimum values</st>
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="10219">缩放到最大和最小值</st>
- en: <st c="10261">Scaling</st> <st c="10270">to the minimu</st><st c="10283">m and
    maximum values squeezes the values of</st> <st c="10328">the variables between</st>
    `<st c="10350">0</st>` <st c="10351">and</st> `<st c="10356">1</st>`<st c="10357">.
    To implement this scaling method, we subtract the minimu</st><st c="10415">m value
    from all the observations and divide the result by the value range – that is,
    the difference between the maximum and</st> <st c="10541">minimum values:</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10261">缩放到最小和最大值</st> <st c="10270">值将变量的值压缩在</st> <st c="10328">0</st>
    <st c="10350">和</st> <st c="10356">1</st> <st c="10357">之间。要实现这种缩放方法，我们从所有观测值中减去最小值，并将结果除以值范围——即最大值和</st>
    <st c="10541">最小值之间的差：</st>
- en: '![<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><msub><mi>x</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi><mi>d</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi
    mathvariant="normal">m</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>max</mi><mfenced
    open="(" close=")"><mi>x</mi></mfenced><mo>−</mo><mi mathvariant="normal">m</mi><mi
    mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac></mrow></mrow></math>](img/26.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><msub><mi>x</mi><mrow><mi>s</mi><mi>c</mi><mi>a</mi><mi{l}</mi><mi>e</mi><mi>d</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi
    mathvariant="normal">m</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>max</mi><mfenced
    open="(" close=")"><mi>x</mi></mfenced><mo>−</mo><mi mathvariant="normal">m</mi><mi
    mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac></mrow></mrow></math>](img/26.png)'
- en: <st c="10591">Scaling to the minimum and maximum is suitable for variables with
    very small standard deviations, when the models do not require data to be centered
    at zero, and when we want to preserve zero entries in sparse data, such as in
    one-hot encoded variables.</st> <st c="10845">On the downside, it is sensitive</st>
    <st c="10878">to outliers.</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10591">将变量缩放到最小值和最大值适用于标准差非常小的变量，当模型不需要数据以零为中心时，以及当我们想要保留稀疏数据中的零条目时，例如在一热编码的变量中。</st>
    <st c="10845">缺点是，它对异常值敏感</st> <st c="10878">。</st>
- en: <st c="10890">Getting ready</st>
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10890">准备就绪</st>
- en: <st c="10904">Scaling to the minimum and maximum value does not change the distribution
    of the variables, as illustrated in the</st> <st c="11019">following figure:</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10904">缩放到最小值和最大值不会改变变量的分布，如下所示：</st>
- en: '![Figure 7.4 – Distribution of a normal and skewed variable before and after
    scaling to the minimum and maximum value](img/B22396_07_4.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – 缩放到最小值和最大值之前和之后的正态分布和偏斜变量的分布](img/B22396_07_4.jpg)'
- en: <st c="11270">Figure 7.4 – Distribution of a normal and skewed variable before
    and after scaling to the minimum and maximum value</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11270">图7.4 – 缩放到最小值和最大值之前和之后的正态分布和偏斜变量的分布</st>
- en: <st c="11385">This</st> <st c="11391">scaling method standardizes the maximum
    value of the</st> <st c="11443">variables to a unit size.</st> <st c="11470">Scaling
    to the minimum and maximum value tends to be the preferred alternative to standardization,
    and it is suitable for variables with very small standard deviations and when
    we want to preserve zero entries in sparse data, such as in one-hot encoded variables,
    or variables derived from counts, such as bag of words.</st> <st c="11790">However,
    this procedure does not center the variables at zero, so if the algorithm has
    that requirement, this method might not be the</st> <st c="11924">best choice.</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11385">这种方法将变量的最大值标准化为单位大小。</st> <st c="11391">缩放到最小值和最大值通常是标准化的首选替代方案，适用于标准差非常小的变量，并且当我们想要保留稀疏数据中的零条目时，例如在一热编码的变量中，或者从计数中派生的变量，例如词袋。</st>
    <st c="11470">然而，此过程不会将变量中心化到零，因此如果算法有此要求，这种方法可能不是</st> <st c="11924">最佳选择。</st>
- en: <st c="11936">Note</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11936">注意</st>
- en: <st c="11941">Scaling to the minimum and maximum values is sensitive to outliers.</st>
    <st c="12010">If outliers are present in the training set, the scaling will squeeze
    the values toward one of the tails.</st> <st c="12116">If, on the contrary, outliers
    are in the test set, the variable will show values greater than</st> `<st c="12210">1</st>`
    <st c="12211">or smaller than</st> `<st c="12228">0</st>` <st c="12229">after
    scaling, depending on whether the outlier is on the left or</st> <st c="12296">righ</st><st
    c="12300">t tail.</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11941">缩放到最小值和最大值对异常值敏感。</st> <st c="12010">如果训练集中存在异常值，缩放会将值挤压到其中一个尾部。</st>
    <st c="12116">相反，如果测试集中存在异常值，变量在缩放后将会显示大于</st> `<st c="12210">1</st>` <st c="12211">或小于</st>
    `<st c="12228">0</st>` <st c="12229">的值，具体取决于异常值是在左侧还是</st> <st c="12296">右侧尾部。</st>
- en: <st c="12308">How to do it...</st>
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12308">如何操作...</st>
- en: <st c="12324">In this recipe, we’ll scale</st> <st c="12353">the variables of
    the California housing dataset</st> <st c="12401">to values between</st> `<st
    c="12419">0</st>` <st c="12420">and</st> `<st c="12424">1</st>`<st c="12425">:</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12324">在这个配方中，我们将</st> <st c="12353">将加利福尼亚住房数据集的变量缩放到</st> <st c="12401">0</st>
    <st c="12419">和</st> `<st c="12420">1</st>` <st c="12424">之间</st> <st c="12425">的值：</st>
- en: <st c="12426">Let’s start by importing</st> `<st c="12451">pandas</st>` <st
    c="12457">and the required classes</st> <st c="12483">and functions:</st>
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="12426">让我们首先导入</st> `<st c="12451">pandas</st>` <st c="12457">和所需的类</st>
    <st c="12483">和函数：</st>
- en: '[PRE10]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="12671">Let’s load the</st> <st c="12687">California housing dataset from
    scikit-learn into a</st> `<st c="12739">pandas</st>` <st c="12745">DataFrame,
    dropping the</st> `<st c="12770">Latitude</st>` <st c="12778">and</st> `<st c="12783">Longitude</st>`
    <st c="12792">variables:</st>
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="12671">让我们从scikit-learn中加载</st> <st c="12687">加利福尼亚住房数据集到</st> `<st c="12739">pandas</st>`
    <st c="12745">DataFrame中，删除</st> `<st c="12770">纬度</st>` <st c="12778">和</st>
    `<st c="12783">经度</st>` <st c="12792">变量：</st>
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="12932">Let’s divide the data into training and</st> <st c="12973">test
    sets:</st>
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="12932">让我们将数据分为训练集和</st> <st c="12973">测试集：</st>
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <st c="13073">Let’s set up the scaler and then fit it to the train set so that
    it learns each variable’s minimum and maximum values and the</st> <st c="13200">value
    range:</st>
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="13073">让我们设置缩放器并将其拟合到训练集，以便它学习每个变量的最小值、最大值和值范围：</st>
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="13289">Finally, let’s</st> <st c="13304">scale the variables in the train
    and test sets with the</st> <st c="13361">trained scaler:</st>
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="13289">最后，让我们</st> <st c="13304">使用训练好的缩放器缩放训练集和测试集中的变量：</st>
- en: '[PRE14]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <st c="13460">Note</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13460">注意</st>
- en: '`<st c="13465">MinMaxScale</st><st c="13477">r()</st>` <st c="13481">stores
    the maximum and minimum values and the value ranges in its</st> `<st c="13548">data_max_</st>`<st
    c="13557">,</st> `<st c="13559">min_</st>`<st c="13563">, and</st> `<st c="13569">data_range_</st>`
    <st c="13580">attributes, respectively.</st>'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="13465">MinMaxScale</st><st c="13477">r()</st>` <st c="13481">存储最大值和最小值以及值范围在其</st>
    `<st c="13548">data_max_</st>`<st c="13557">,</st> `<st c="13559">min_</st>`<st
    c="13563">, 和</st> `<st c="13569">data_range_</st>` <st c="13580">属性中，分别。</st>'
- en: <st c="13606">We can</st> <st c="13613">corroborate the minimum values of the</st>
    <st c="13651">transformed variables by executing</st> `<st c="13687">X_test_scaled.min()</st>`<st
    c="13706">, which will return the</st> <st c="13730">following output:</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行 `<st c="13687">X_test_scaled.min()</st>` 来验证变换变量的最小值，这将返回以下输出：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <st c="13968">MedInc           1.000000</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13968">MedInc           1.000000</st>
- en: <st c="13983">HouseAge        1.000000</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13983">HouseAge        1.000000</st>
- en: <st c="14001">AveRooms        1.071197</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14001">AveRooms        1.071197</st>
- en: <st c="14019">AveBedrms      0.750090</st>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14019">AveBedrms      0.750090</st>
- en: <st c="14038">Population     0.456907</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14038">Population     0.456907</st>
- en: <st c="14058">AveOccup        2.074553</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14058">AveOccup        2.074553</st>
- en: '<st c="14076">dtype: float64</st>'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="14076">dtype: float64</st>'
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: import pandas as pd
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导入 pandas as pd
- en: from sklearn.datasets import fetch_california_housing
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 `sklearn.datasets` 导入 `fetch_california_housing`
- en: from sklearn.model_selection import train_test_split
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 `sklearn.model_selection` 导入 `train_test_split`
- en: from sklearn.preprocessing import RobustScaler
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 `sklearn.preprocessing` 导入 `RobustScaler`
- en: '[PRE17]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: X, y = fetch_california_housing(
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X, y = fetch_california_housing(
- en: return_X_y=True, as_frame=True)
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return_X_y=True, as_frame=True)
- en: X.drop(labels=[     "Latitude", "Longitude"], axis=1,
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X.drop(labels=[     "Latitude", "Longitude"], axis=1,
- en: inplace=True)
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: inplace=True)
- en: '[PRE18]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: X_train, X_test, y_train, y_test = train_test_split(
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train, X_test, y_train, y_test = train_test_split(
- en: X, y, test_size=0.3, random_state=0)
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: X, y, test_size=0.3, random_state=0)
- en: '[PRE19]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: scaler = RobustScaler().set_output(
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler = RobustScaler().set_output(
- en: transform="pandas")
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: transform="pandas")
- en: scaler.fit(X_train)
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler.fit(X_train)
- en: '[PRE20]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: X_train_scaled = scaler.transform(X_train)
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train_scaled = scaler.transform(X_train)
- en: X_test_scaled = scaler.transform(X_test)
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_test_scaled = scaler.transform(X_test)
- en: '[PRE21]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: scaler.center_
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler.center_
- en: '[PRE22]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '<st c="18097">RobustScaler()</st>:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '<st c="18097">RobustScaler()</st>:'
- en: '[PRE23]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: <st c="18294">This scaling procedure does not change the variable distributions.</st>
    <st c="18362">Go ahead and compare the distribution of the variables before and
    after the transformation</st> <st c="18452">by</st> <st c="18456">using histograms.</st>
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="18294">此缩放过程不会改变变量的分布。</st> <st c="18362">继续使用直方图比较变换前后变量的分布</st> <st
    c="18452">。</st>
- en: '[PRE24]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: import pandas as pd
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导入 pandas as pd
- en: from sklearn.datasets import fetch_california_housing
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 `sklearn.datasets` 导入 `fetch_california_housing`
- en: from sklearn.model_selection import train_test_split
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 `sklearn.model_selection` 导入 `train_test_split`
- en: '[PRE25]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: X, y = fetch_california_housing(
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X, y = fetch_california_housing(
- en: return_X_y=True, as_frame=True)
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return_X_y=True, as_frame=True)
- en: X.drop(labels=[
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X.drop(labels=[
- en: '"Latitude", "Longitude"], axis=1, inplace=True)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"Latitude", "Longitude"], axis=1, inplace=True)'
- en: '[PRE26]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: X_train, X_test, y_train, y_test = train_test_split(
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train, X_test, y_train, y_test = train_test_split(
- en: X, y, test_size=0.3, random_state=0)
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: X, y, test_size=0.3, random_state=0)
- en: '[PRE27]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: means = X_train.mean(axis=0)
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: means = X_train.mean(axis=0)
- en: '[PRE28]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: <st c="21106">MedInc           3.866667</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21106">MedInc           3.866667</st>
- en: <st c="21122">HouseAge        28.618702</st>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21122">HouseAge        28.618702</st>
- en: <st c="21141">AveRooms         5.423404</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21141">AveRooms         5.423404</st>
- en: <st c="21159">AveBedrms        1.094775</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21159">AveBedrms        1.094775</st>
- en: <st c="21178">Population    1425.157323</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21178">Population    1425.157323</st>
- en: <st c="21201">AveOccup         3.040518</st>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21201">AveOccup         3.040518</st>
- en: '<st c="21219">dtype: float</st><st c="21232">64</st>'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="21219">dtype: float</st><st c="21232">64</st>'
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: ranges = X_train.max(axis=0)-X_train.min(axis=0)
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ranges = X_train.max(axis=0)-X_train.min(axis=0)
- en: '[PRE30]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: <st c="21443">MedInc</st> <st c="21450">14.500200</st>
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="21443">MedInc</st> <st c="21450">14.500200</st>
- en: <st c="21460">HouseAge         51.000000</st>
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="21460">HouseAge         51.000000</st>
- en: <st c="21479">AveRooms        131.687179</st>
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="21479">AveRooms        131.687179</st>
- en: <st c="21499">AveBedrms        33.733333</st>
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="21499">平均卧室数        33.733333</st>
- en: <st c="21519">Population    35679.000000</st>
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="21519">人口        35679.000000</st>
- en: <st c="21543">AveOccup        598.964286</st>
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="21543">平均占用        598.964286</st>
- en: '<st c="21563">dtype: float64</st>'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '<st c="21563">dtype: float64</st>'
- en: '[PRE31]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: X_train_scaled = (X_train - means) / ranges
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train_scaled = (X_train - means) / ranges
- en: X_test_scaled = (X_test - means) / ranges
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_test_scaled = (X_test - means) / ranges
- en: '[PRE32]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: from sklearn.preprocessing import (
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.preprocessing import (
- en: StandardScaler, RobustScaler
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: StandardScaler, RobustScaler
- en: )
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE33]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: scaler_mean = StandardScaler(
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler_mean = StandardScaler(
- en: with_mean=True, with_std=False,
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: with_mean=True, with_std=False,
- en: ).set_output(transform="pandas")
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ).set_output(transform="pandas")
- en: '[PRE34]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: scaler_minmax = RobustScaler(
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler_minmax = RobustScaler(
- en: with_centering=False,
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: with_centering=False,
- en: with_scaling=True,
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: with_scaling=True,
- en: quantile_range=(0, 100)
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: quantile_range=(0, 100)
- en: ).set_output(transform="pandas")
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ).set_output(transform="pandas")
- en: '[PRE35]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: scaler_mean.fit(X_train)
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler_mean.fit(X_train)
- en: scaler_minmax.fit(X_train)
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler_minmax.fit(X_train)
- en: '[PRE36]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: X_train_scaled = scaler_minmax.transform(
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train_scaled = scaler_minmax.transform(
- en: scaler_mean.transform(X_train)
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler_mean.transform(X_train)
- en: )
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '])'
- en: X_test_scaled = scaler_minmax.transform(
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_test_scaled = scaler_minmax.transform(
- en: scaler_mean.transform(X_test)
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler_mean.transform(X_test)
- en: )
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE37]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: import matplotlib.pyplot as plt
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: import pandas as pd
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: from sklearn.preprocessing import MaxAbsScaler
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.preprocessing import MaxAbsScaler
- en: '[PRE38]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: data = pd.read_csv("bag_of_words.csv")
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: data = pd.read_csv("bag_of_words.csv")
- en: '[PRE39]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: scaler = MaxAbsScaler().set_output(
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler = MaxAbsScaler().set_output(
- en: transform="pandas")
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: transform="pandas")
- en: scaler.fit(data)
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler.fit(data)
- en: '[PRE40]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: data_scaled = scaler.transform(data)
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: data_scaled = scaler.transform(data)
- en: '[PRE41]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: scaler.max_abs_
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler.max_abs_
- en: <st c="27715">array([ 7.,  6.,  2.,  2., 11.,  4.,  3.,  6., 52.,  2.])</st>
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="27715">array([ 7.,  6.,  2.,  2., 11.,  4.,  3.,  6., 52.,  2.])</st>
- en: '[PRE42]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: data.hist(bins=20, figsize=(20, 20))
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: data.hist(bins=20, figsize=(20, 20))
- en: plt.show()
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: plt.show()
- en: '[PRE43]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: data_scaled.hist(bins=20, figsize=(20, 20))
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: data_scaled.hist(bins=20, figsize=(20, 20))
- en: plt.show()
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: plt.show()
- en: '[PRE44]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: import pandas as pd
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: from sklearn.datasets import fetch_california_housing
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.datasets import fetch_california_housing
- en: from sklearn.model_selection import train_test_split
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.model_selection import train_test_split
- en: from sklearn.preprocessing import (
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.preprocessing import (
- en: MaxAbsScaler, StandardScaler)
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: MaxAbsScaler, StandardScaler)
- en: from sklearn.pipeline import Pipeline
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.pipeline import Pipeline
- en: '[PRE45]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: X, y = fetch_california_housing(
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X, y = fetch_california_housing(
- en: return_X_y=True, as_frame=True)
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return_X_y=True, as_frame=True)
- en: X.drop( labels=[ "Latitude",
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X.drop( labels=[ "纬度",
- en: '"Longitude"], axis=1, inplace=True)'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"经度"], axis=1, inplace=True)'
- en: X_train, X_test, y_train, y_test = train_test_split(
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train, X_test, y_train, y_test = train_test_split(
- en: X, y, test_size=0.3, random_state=0)
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: X, y, test_size=0.3, random_state=0)
- en: '[PRE46]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: scaler_mean = StandardScaler(
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler_mean = StandardScaler(
- en: with_mean=True, with_std=False)
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: with_mean=True, with_std=False)
- en: '[PRE47]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: scaler_maxabs = MaxAbsScaler()
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler_maxabs = MaxAbsScaler()
- en: '[PRE48]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: scaler = Pipeline([
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler = Pipeline([
- en: ("scaler_mean", scaler_mean),
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("scaler_mean", scaler_mean),
- en: ("scaler_max", scaler_maxabs),
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ("scaler_max", scaler_maxabs),
- en: ']).set_output(transform="pandas")'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']).set_output(transform="pandas")'
- en: '[PRE49]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: scaler.fit(X_train)
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler.fit(X_train)
- en: '[PRE50]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: X_train_scaled = scaler.transform(X_train)
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train_scaled = scaler.transform(X_train)
- en: X_test_scaled = scaler.transform(X_test)
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_test_scaled = scaler.transform(X_test)
- en: '[PRE51]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: import numpy as np
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import pandas as pd
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: from sklearn.datasets import fetch_california_housing
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.datasets import fetch_california_housing
- en: from sklearn.model_selection import train_test_split
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.model_selection import train_test_split
- en: from sklearn.preprocessing import Normalizer
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from sklearn.preprocessing import Normalizer
- en: '[PRE52]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: X, y = fetch_california_housing(
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X, y = fetch_california_housing(
- en: return_X_y=True, as_frame=True)
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return_X_y=True, as_frame=True)
- en: X.drop(labels=[
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X.drop(labels=[
- en: '"Latitude", "Longitude"], axis=1, inplace=True)'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"纬度", "经度"], axis=1, inplace=True)'
- en: '[PRE53]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: X_train, X_test, y_train, y_test = train_test_split(
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train, X_test, y_train, y_test = train_test_split(
- en: X, y, test_size=0.3, random_state=0)
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: X, y, test_size=0.3, random_state=0)
- en: '[PRE54]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: scaler = Normalizer(norm='l1')
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: scaler = Normalizer(norm='l1')
- en: '[PRE55]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: X_train_scaled = scaler.fit_transform(X_train)
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train_scaled = scaler.fit_transform(X_train)
- en: X_test_scaled = scaler.transform(X_test)
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_test_scaled = scaler.transform(X_test)
- en: '[PRE56]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: np.round(np.linalg.norm(X_train, ord=1, axis=1), 1)
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: np.round(np.linalg.norm(X_train, ord=1, axis=1), 1)
- en: '[PRE57]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: <st c="35330">array([ 255.3,  889.1, 1421.7, ...,  744.6, 1099.5,</st>
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="35330">array([ 255.3,  889.1, 1421.7, ...,  744.6, 1099.5,</st>
- en: <st c="35380">1048.9])</st>
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="35380">1048.9])</st>
- en: '[PRE58]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: np.round(np.linalg.norm(
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: np.round(np.linalg.norm(
- en: X_train_scaled, ord=1, axis=1), 1)
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: X_train_scaled, ord=1, axis=1), 1)
- en: '[PRE59]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: array([1., 1., 1., ..., 1., 1., 1.])
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: array([1., 1., 1., ..., 1., 1., 1.])
- en: '[PRE60]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
