- en: 6\. Ensemble Modeling
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 集成建模
- en: 'Activity 6.01: Stacking with Standalone and Ensemble Algorithms'
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 6.01：使用独立算法和集成算法的堆叠
- en: Solution
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Import the relevant libraries:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 导入相关库：
- en: import pandas as pd
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 pandas 库为 pd
- en: import numpy as np
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 numpy 为 np
- en: import seaborn as sns
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 seaborn 为 sns
- en: '%matplotlib inline'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '%matplotlib inline'
- en: import matplotlib.pyplot as plt
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 matplotlib.pyplot 为 plt
- en: from sklearn.model_selection import train_test_split
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 sklearn.model_selection 导入 train_test_split
- en: from sklearn.metrics import mean_absolute_error
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 sklearn.metrics 导入 mean_absolute_error
- en: from sklearn.model_selection import KFold
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 sklearn.model_selection 导入 KFold
- en: from sklearn.linear_model import LinearRegression
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 sklearn.linear_model 导入 LinearRegression
- en: from sklearn.tree import DecisionTreeRegressor
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 sklearn.tree 导入 DecisionTreeRegressor
- en: from sklearn.neighbors import KNeighborsRegressor
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 sklearn.neighbors 导入 KNeighborsRegressor
- en: from sklearn.ensemble import GradientBoostingRegressor, \
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 sklearn.ensemble 导入 GradientBoostingRegressor, \
- en: RandomForestRegressor
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: RandomForestRegressor
- en: 'Read the data:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 读取数据：
- en: data = pd.read_csv('boston_house_prices.csv')
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: data = pd.read_csv('boston_house_prices.csv')
- en: data.head()
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: data.head()
- en: Note
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The preceding code snippet assumes that the dataset is presented in the same
    folder as that of the exercise notebook. However, if your dataset is present in
    the Datasets folder, you need to use the following code: data = pd.read_csv(''../Datasets/boston_house_prices.csv'')'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段假设数据集与练习笔记本在同一文件夹中。然而，如果您的数据集位于 Datasets 文件夹中，您需要使用以下代码：data = pd.read_csv('../Datasets/boston_house_prices.csv')
- en: 'You will get the following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![Figure 6.15: Top rows of the Boston housing dataset'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.15：波士顿房价数据集的顶部几行'
- en: '](img/image-J3QAVKGH.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-J3QAVKGH.jpg)'
- en: 'Figure 6.15: Top rows of the Boston housing dataset'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15：波士顿房价数据集的顶部几行
- en: 'Preprocess the dataset to remove null values to prepare the data for modeling:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对数据集进行预处理，删除空值，为建模准备数据：
- en: check how many columns have less than 10 % null data
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查有多少列的空值比例小于 10%
- en: perc_missing = data.isnull().mean()*100
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: perc_missing = data.isnull().mean()*100
- en: cols = perc_missing[perc_missing < 10].index.tolist()
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: cols = perc_missing[perc_missing < 10].index.tolist()
- en: cols
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列
- en: 'You will get the following output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![Figure 6.16: Number of columns'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.16：列的数量'
- en: '](img/image-ZQI9Z8VR.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-ZQI9Z8VR.jpg)'
- en: 'Figure 6.16: Number of columns'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16：列的数量
- en: 'And then fill in the missing values, if any:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后填补缺失值（如果有的话）：
- en: data_final = data.fillna(-1)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: data_final = data.fillna(-1)
- en: 'Divide the dataset into train and validation DataFrames:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据集划分为训练集和验证集 DataFrame：
- en: train, val = train, val = train_test_split(data_final, \
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: train, val = train, val = train_test_split(data_final, \
- en: test_size=0.2, \
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: test_size=0.2, \
- en: random_state=11)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: random_state=11)
- en: x_train = train.drop(columns=['PRICE'])
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: x_train = train.drop(columns=['PRICE'])
- en: y_train = train['PRICE'].values
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: y_train = train['PRICE'].values
- en: x_val = val.drop(columns=['PRICE'])
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: x_val = val.drop(columns=['PRICE'])
- en: y_val = val['PRICE'].values
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: y_val = val['PRICE'].values
- en: 'Initialize dictionaries in which to store the train and validation MAE values:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化字典以存储训练集和验证集的 MAE 值：
- en: train_mae_values, val_mae_values = {}, {}
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: train_mae_values, val_mae_values = {}, {}
- en: 'Train a decision tree (dt) model with the following hyperparameters and save
    the scores:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下超参数训练决策树（dt）模型并保存分数：
- en: 'dt_params = {''criterion'': ''mae'', ''min_samples_leaf'': 15, \'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'dt_params = {''criterion'': ''mae'', ''min_samples_leaf'': 15, \'
- en: '''random_state'': 11}'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '''random_state'': 11}'
- en: dt = DecisionTreeRegressor(**dt_params)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: dt = DecisionTreeRegressor(**dt_params)
- en: dt.fit(x_train, y_train)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: dt.fit(x_train, y_train)
- en: dt_preds_train = dt.predict(x_train)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: dt_preds_train = dt.predict(x_train)
- en: dt_preds_val = dt.predict(x_val)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: dt_preds_val = dt.predict(x_val)
- en: train_mae_values['dt'] = mean_absolute_error(y_true=y_train, \
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: train_mae_values['dt'] = mean_absolute_error(y_true=y_train, \
- en: y_pred=dt_preds_train)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=dt_preds_train)
- en: val_mae_values['dt'] = mean_absolute_error(y_true=y_val, \
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: val_mae_values['dt'] = mean_absolute_error(y_true=y_val, \
- en: y_pred=dt_preds_val)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=dt_preds_val)
- en: 'Train a k-nearest neighbours (knn) model with the following hyperparameters
    and save the scores:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下超参数训练 k-近邻（knn）模型并保存分数：
- en: 'knn_params = {''n_neighbors'': 5}'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 'knn_params = {''n_neighbors'': 5}'
- en: knn = KNeighborsRegressor(**knn_params)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: knn = KNeighborsRegressor(**knn_params)
- en: knn.fit(x_train, y_train)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: knn.fit(x_train, y_train)
- en: knn_preds_train = knn.predict(x_train)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: knn_preds_train = knn.predict(x_train)
- en: knn_preds_val = knn.predict(x_val)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: knn_preds_val = knn.predict(x_val)
- en: train_mae_values['knn'] = mean_absolute_error(y_true=y_train, \
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: train_mae_values['knn'] = mean_absolute_error(y_true=y_train, \
- en: y_pred=knn_preds_train)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=knn_preds_train)
- en: val_mae_values['knn'] = mean_absolute_error(y_true=y_val, \
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: val_mae_values['knn'] = mean_absolute_error(y_true=y_val, \
- en: y_pred=knn_preds_val)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=knn_preds_val)
- en: 'Train a random forest (rf) model with the following hyperparameters and save
    the scores:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下超参数训练随机森林（rf）模型并保存分数：
- en: 'rf_params = {''n_estimators'': 20, ''criterion'': ''mae'', \'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'rf_params = {''n_estimators'': 20, ''criterion'': ''mae'', \'
- en: '''max_features'': ''sqrt'', ''min_samples_leaf'': 10, \'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '''max_features'': ''sqrt'', ''min_samples_leaf'': 10, \'
- en: '''random_state'': 11, ''n_jobs'': -1}'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '''random_state'': 11, ''n_jobs'': -1}'
- en: rf = RandomForestRegressor(**rf_params)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: rf = RandomForestRegressor(**rf_params)
- en: rf.fit(x_train, y_train)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: rf.fit(x_train, y_train)
- en: rf_preds_train = rf.predict(x_train)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: rf_preds_train = rf.predict(x_train)
- en: rf_preds_val = rf.predict(x_val)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: rf_preds_val = rf.predict(x_val)
- en: train_mae_values['rf'] = mean_absolute_error(y_true=y_train, \
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: train_mae_values['rf'] = mean_absolute_error(y_true=y_train, \
- en: y_pred=rf_preds_train)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=rf_preds_train)
- en: val_mae_values['rf'] = mean_absolute_error(y_true=y_val, \
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: val_mae_values['rf'] = mean_absolute_error(y_true=y_val, \
- en: y_pred=rf_preds_val)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=rf_preds_val)
- en: 'Train a gradient boosting regression (gbr) model with the following hyperparameters
    and save the scores:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 训练一个梯度提升回归（gbr）模型，使用以下超参数并保存评分：
- en: 'gbr_params = {''n_estimators'': 20, ''criterion'': ''mae'', \'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'gbr_params = {''n_estimators'': 20, ''criterion'': ''mae'', \'
- en: '''max_features'': ''sqrt'', ''min_samples_leaf'': 10, \'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '''max_features'': ''sqrt'', ''min_samples_leaf'': 10, \'
- en: '''random_state'': 11}'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '''random_state'': 11}'
- en: gbr = GradientBoostingRegressor(**gbr_params)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: gbr = GradientBoostingRegressor(**gbr_params)
- en: gbr.fit(x_train, y_train)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: gbr.fit(x_train, y_train)
- en: gbr_preds_train = gbr.predict(x_train)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: gbr_preds_train = gbr.predict(x_train)
- en: gbr_preds_val = gbr.predict(x_val)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: gbr_preds_val = gbr.predict(x_val)
- en: train_mae_values['gbr'] = mean_absolute_error(y_true=y_train, \
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: train_mae_values['gbr'] = mean_absolute_error(y_true=y_train, \
- en: y_pred=gbr_preds_train)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=gbr_preds_train)
- en: val_mae_values['gbr'] = mean_absolute_error(y_true=y_val, \
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: val_mae_values['gbr'] = mean_absolute_error(y_true=y_val, \
- en: y_pred=gbr_preds_val)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=gbr_preds_val)
- en: 'Prepare the training and validation datasets, with the four meta estimators
    having the same hyperparameters that were used in the previous steps. First, we
    build the training set:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 准备训练和验证数据集，其中四个元估计器使用与之前步骤相同的超参数。首先，构建训练集：
- en: 'num_base_predictors = len(train_mae_values) # 4'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'num_base_predictors = len(train_mae_values) # 4'
- en: x_train_with_metapreds = np.zeros((x_train.shape[0], \
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: x_train_with_metapreds = np.zeros((x_train.shape[0], \
- en: x_train.shape[1]+num_base_predictors))
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: x_train.shape[1]+num_base_predictors))
- en: x_train_with_metapreds[:, :-num_base_predictors] = x_train
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: x_train_with_metapreds[:, :-num_base_predictors] = x_train
- en: x_train_with_metapreds[:, -num_base_predictors:] = -1
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: x_train_with_metapreds[:, -num_base_predictors:] = -1
- en: kf = KFold(n_splits=5, random_state=11)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: kf = KFold(n_splits=5, random_state=11)
- en: 'for train_indices, val_indices in kf.split(x_train):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'for train_indices, val_indices in kf.split(x_train):'
- en: kfold_x_train, kfold_x_val = x_train.iloc[train_indices], \
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: kfold_x_train, kfold_x_val = x_train.iloc[train_indices], \
- en: x_train.iloc[val_indices]
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: x_train.iloc[val_indices]
- en: kfold_y_train, kfold_y_val = y_train[train_indices], \
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: kfold_y_train, kfold_y_val = y_train[train_indices], \
- en: y_train[val_indices]
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: y_train[val_indices]
- en: predictions = []
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: predictions = []
- en: dt = DecisionTreeRegressor(**dt_params)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: dt = DecisionTreeRegressor(**dt_params)
- en: dt.fit(kfold_x_train, kfold_y_train)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: dt.fit(kfold_x_train, kfold_y_train)
- en: predictions.append(dt.predict(kfold_x_val))
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: predictions.append(dt.predict(kfold_x_val))
- en: knn = KNeighborsRegressor(**knn_params)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: knn = KNeighborsRegressor(**knn_params)
- en: knn.fit(kfold_x_train, kfold_y_train)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: knn.fit(kfold_x_train, kfold_y_train)
- en: predictions.append(knn.predict(kfold_x_val))
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: predictions.append(knn.predict(kfold_x_val))
- en: gbr = GradientBoostingRegressor(**gbr_params)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: gbr = GradientBoostingRegressor(**gbr_params)
- en: rf.fit(kfold_x_train, kfold_y_train)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: rf.fit(kfold_x_train, kfold_y_train)
- en: predictions.append(rf.predict(kfold_x_val))
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: predictions.append(rf.predict(kfold_x_val))
- en: gbr = GradientBoostingRegressor(**gbr_params)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: gbr = GradientBoostingRegressor(**gbr_params)
- en: gbr.fit(kfold_x_train, kfold_y_train)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: gbr.fit(kfold_x_train, kfold_y_train)
- en: predictions.append(gbr.predict(kfold_x_val))
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: predictions.append(gbr.predict(kfold_x_val))
- en: 'for i, preds in enumerate(predictions):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i, preds in enumerate(predictions):'
- en: x_train_with_metapreds[val_indices, -(i+1)] = preds
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: x_train_with_metapreds[val_indices, -(i+1)] = preds
- en: 'Prepare the validation set:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 准备验证集：
- en: x_val_with_metapreds = np.zeros((x_val.shape[0], \
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: x_val_with_metapreds = np.zeros((x_val.shape[0], \
- en: x_val.shape[1]+num_base_predictors))
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: x_val.shape[1]+num_base_predictors))
- en: x_val_with_metapreds[:, :-num_base_predictors] = x_val
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: x_val_with_metapreds[:, :-num_base_predictors] = x_val
- en: x_val_with_metapreds[:, -num_base_predictors:] = -1
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: x_val_with_metapreds[:, -num_base_predictors:] = -1
- en: predictions = []
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: predictions = []
- en: dt = DecisionTreeRegressor(**dt_params)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: dt = DecisionTreeRegressor(**dt_params)
- en: dt.fit(x_train, y_train)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: dt.fit(x_train, y_train)
- en: predictions.append(dt.predict(x_val))
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: predictions.append(dt.predict(x_val))
- en: knn = KNeighborsRegressor(**knn_params)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: knn = KNeighborsRegressor(**knn_params)
- en: knn.fit(x_train, y_train)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: knn.fit(x_train, y_train)
- en: predictions.append(knn.predict(x_val))
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: predictions.append(knn.predict(x_val))
- en: gbr = GradientBoostingRegressor(**gbr_params)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: gbr = GradientBoostingRegressor(**gbr_params)
- en: rf.fit(x_train, y_train)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: rf.fit(x_train, y_train)
- en: predictions.append(rf.predict(x_val))
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: predictions.append(rf.predict(x_val))
- en: gbr = GradientBoostingRegressor(**gbr_params)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: gbr = GradientBoostingRegressor(**gbr_params)
- en: gbr.fit(x_train, y_train)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: gbr.fit(x_train, y_train)
- en: predictions.append(gbr.predict(x_val))
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: predictions.append(gbr.predict(x_val))
- en: 'for i, preds in enumerate(predictions):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i, preds in enumerate(predictions):'
- en: x_val_with_metapreds[:, -(i+1)] = preds
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: x_val_with_metapreds[:, -(i+1)] = preds
- en: 'Train a linear regression (lr) model as the stacked model:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 训练一个线性回归（lr）模型作为堆叠模型：
- en: lr = LinearRegression(normalize=True)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: lr = LinearRegression(normalize=True)
- en: lr.fit(x_train_with_metapreds, y_train)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: lr.fit(x_train_with_metapreds, y_train)
- en: lr_preds_train = lr.predict(x_train_with_metapreds)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: lr_preds_train = lr.predict(x_train_with_metapreds)
- en: lr_preds_val = lr.predict(x_val_with_metapreds)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: lr_preds_val = lr.predict(x_val_with_metapreds)
- en: train_mae_values['lr'] = mean_absolute_error(y_true=y_train, \
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: train_mae_values['lr'] = mean_absolute_error(y_true=y_train, \
- en: y_pred=lr_preds_train)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=lr_preds_train)
- en: val_mae_values['lr'] = mean_absolute_error(y_true=y_val, \
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: val_mae_values['lr'] = mean_absolute_error(y_true=y_val, \
- en: y_pred=lr_preds_val)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred=lr_preds_val)
- en: 'Visualize the train and validation errors for each individual model and the
    stacked model:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化每个单独模型和堆叠模型的训练和验证误差：
- en: mae_scores = pd.concat([pd.Series(train_mae_values, name='train'), \
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: mae_scores = pd.concat([pd.Series(train_mae_values, name='train'), \
- en: pd.Series(val_mae_values, name='val')], \
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: pd.Series(val_mae_values, name='val')], \
- en: axis=1)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: axis=1)
- en: mae_scores
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: mae_scores
- en: 'First, you get the following output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你会得到以下输出：
- en: '![Figure 6.17: Values of training and validation errors'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.17：训练和验证误差的值'
- en: '](img/image-YV2QPP1E.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-YV2QPP1E.jpg)'
- en: 'Figure 6.17: Values of training and validation errors'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17：训练和验证误差的值
- en: 'Now, plot the MAE scores on a bar plot using the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下代码绘制 MAE 分数的条形图：
- en: mae_scores.plot(kind='bar', figsize=(10,7))
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: mae_scores.plot(kind='bar', figsize=(10,7))
- en: plt.ylabel('MAE')
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: plt.ylabel('MAE')
- en: plt.xlabel('Model')
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: plt.xlabel('模型')
- en: plt.show()
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The final output will be as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出将如下所示：
- en: '![Figure 6.18: Visualization of training and validation errors'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.18：训练和验证误差的可视化'
- en: '](img/image-2OFCL0GD.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-2OFCL0GD.jpg)'
- en: 'Figure 6.18: Visualization of training and validation errors'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18：训练和验证误差的可视化
- en: Note
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/3fNqtMG.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考 https://packt.live/3fNqtMG。
- en: You can also run this example online at https://packt.live/2Yn2VIl. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 https://packt.live/2Yn2VIl 在线运行这个示例。你必须执行整个笔记本才能获得预期的结果。
