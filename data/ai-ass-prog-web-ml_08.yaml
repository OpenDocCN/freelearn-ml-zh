- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Build a Backend with Web APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Web API 构建后端
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: When we say Web API, it’s an application programming interface we develop that’s
    meant for the client to consume. Said API uses HTTP to communicate. A browser
    can use a Web API to expose data and functionality to other browsers and applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们说 Web API 时，它是指我们开发的应用程序编程接口，旨在供客户端使用。该 API 使用 HTTP 进行通信。浏览器可以使用 Web API
    向其他浏览器和应用程序公开数据和功能。
- en: When developing a Web API, you can use any programming language and framework
    you want. Regardless of the chosen tech, there are things you always need to consider,
    like data storage, security, authentication, authorization, documentation, testing,
    and more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Web API 时，您可以使用您想要的任何编程语言和框架。无论选择哪种技术，都有一些您始终需要考虑的事情，比如数据存储、安全、身份验证、授权、文档、测试等等。
- en: It’s with this understanding of what things we need to consider that we can
    use an AI assistant to help us build a backend.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 正是基于对需要考虑的事物的这种理解，我们可以使用 AI 助手帮助我们构建后端。
- en: 'In this chapter, we will:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn about Web APIs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Web APIs
- en: Create a Web API with Python and Flask
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 和 Flask 创建 Web API
- en: Use our AI assistant to answer questions, suggest code, and create documentation
    and tests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们的 AI 助手回答问题、建议代码以及创建文档和测试
- en: 'Business domain: e-commerce'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务领域：电子商务
- en: 'We will keep working on our e-commerce example in this chapter. This time,
    the focus is on the API. The API lets you read and write data that’s important
    in the e-commerce domain. What’s important to keep in mind as you develop this
    API is that there are a couple of important aspects to it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章继续我们的电子商务示例。这次，重点是 API。API 允许您读取和写入电子商务领域中的重要数据。在开发此 API 时，您需要记住的是，它有几个重要的方面：
- en: 'Logical domains: It’s beneficial to divide up your app into different logical
    domains. Within the context of e-commerce, that usually translates to products,
    orders, invoices, and so on.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑领域：将您的应用程序划分为不同的逻辑领域是有益的。在电子商务的背景下，这通常意味着产品、订单、发票等等。
- en: What part of the business should handle each logical domain?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪个业务部分应该处理每个逻辑领域？
- en: '**Products**: Maybe there’s a dedicated team. It’s common for the same team
    to also manage all types of discounts and campaigns that might occur.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品**：可能有一个专门的团队。同一个团队管理所有类型的折扣和可能发生的活动是很常见的。'
- en: '**Invoices and payment**: There’s usually a dedicated team that takes care
    of how the user can pay for things, for example, via credit cards, invoices, and
    other methods.'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发票和支付**：通常有一个专门的团队负责用户如何支付，例如，通过信用卡、发票和其他方式。'
- en: '**Inventory**: You need to have a certain amount of goods in stock. How do
    you know how much? You need to work with business analysts or data folk to make
    correct forecasts.'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库存**：您需要有一定的商品库存。您如何知道有多少？您需要与业务分析师或数据专家合作，做出正确的预测。'
- en: Problem and data domain
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题与数据领域
- en: 'We’ve already mentioned a few different logical domains around products, orders,
    invoices, and so on. The problems you’ll have in this domain are generally:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提到了关于产品、订单、发票等的一些不同的逻辑领域。在这个领域，您会遇到的问题通常是：
- en: 'Reading and writing: What data do you wish to read or write (or maybe both)?'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和写入：您希望读取或写入哪些数据（或者可能两者都要）？
- en: How will users access your data (all of it or maybe there will be filters applied
    to limit the output)?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户将如何访问您的数据（全部数据还是可能应用过滤器以限制输出）？
- en: 'Access and roles: You can expect that different roles will need to have access
    to your system. An administrator role should probably have access to most of the
    data, whereas a logged-in user should only be able to see the part of the data
    that belongs to them. This is not something we will address in this chapter, but
    it’s something you should consider when you build out this API.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问和角色：您可以预期不同的角色将需要访问您的系统。管理员角色可能需要访问大部分数据，而登录用户只能看到属于他们的数据部分。这不是本章要解决的问题，但在构建此
    API 时，您应该考虑这一点。
- en: Feature breakdown
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能分解
- en: Now that we understand that there are both business problems as well as data
    problems, we need to start to identify the features that we need. Once we get
    to this level of detail, it should be easier to come up with specific prompts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解到既有业务问题也有数据问题，我们需要开始识别我们需要的功能。一旦达到这个细节水平，提出具体的提示应该会更容易。
- en: 'A way to do this feature breakdown is as follows – for example, for products:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 进行这种功能分解的一种方法如下——例如，对于产品：
- en: Read all products.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读所有产品。
- en: 'Read products given a filter: Usually, you won’t want to read all products
    but maybe all products of a certain category, or maybe even limit it to a specific
    value such as 10 products or 20 products.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据过滤器阅读产品：通常，你不会想阅读所有产品，但可能只想阅读某一类别的所有产品，或者甚至限制为特定的值，例如10个产品或20个产品。
- en: 'Search for products: You should support the user looking for specific products,
    usually via a category, name, or perhaps part of a certain campaign.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索产品：你应该支持用户通过类别、名称或可能是某个特定活动的部分来寻找特定的产品。
- en: Retrieve detailed information on a specific product.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取特定产品的详细信息。
- en: I’m sure there are more features for products, but now you have an idea of what
    granular detail you should have before you continue building the API.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信产品还有更多功能，但现在你有了在继续构建API之前应该具备的详细程度的概念。
- en: Prompt strategy
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示策略
- en: In this chapter, you will see how we use both Copilot Chat and the in-editor
    mode. We will start with the Chat mode as it’s quite useful for situations where
    you want to generate starter code. It’s also quite efficient in that it lets you
    select certain lines of code and lets you update only those based on a prompt.
    Examples of the latter could be when you want to improve such code. You will see
    this use case later in the chapter when we improve a route to read from a database
    instead of reading static data from a list. There will also be cases in this chapter
    where we use the in-editor mode. This is the recommended approach when you’re
    actively typing the code and want to make smaller tweaks. In this chapter, we
    will use the “Exploratory prompt pattern” as described in *Chapter 2*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，你将看到我们如何使用Copilot Chat和编辑器内模式。我们将从Chat模式开始，因为它在需要生成起始代码的情况下非常有用。它也非常高效，因为它允许你选择某些代码行，并基于提示仅更新这些行。后者的例子可能是当你想改进这样的代码时。你将在本章后面改进读取数据库而不是从列表中读取静态数据的路由时看到这个用例。在本章中，我们还将使用编辑器内模式。当你正在积极编写代码并想进行小的调整时，这是推荐的方法。在本章中，我们将使用*第2章*中描述的“探索性提示模式”。 '
- en: Web APIs
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web API
- en: Using a Web API is a great way to ensure our front-end application has access
    to the data and functionality it needs to read and write data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Web API是确保我们的前端应用程序能够访问它读取和写入数据所需的数据和功能的一种很好的方式。
- en: 'The expectations of a Web API are:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Web API的期望是：
- en: It is accessible over the web.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以通过网络访问。
- en: It leverages HTTP protocol and HTTP verbs such as `GET`, `POST`, `PUT`, `DELETE`,
    and others to communicate intentions.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它利用HTTP协议和HTTP动词，如`GET`、`POST`、`PUT`、`DELETE`以及其他，来传达意图。
- en: What language and framework should you pick?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你应该选择什么语言和框架？
- en: In this chapter, we already decided we will use Python and Flask. But why? What
    criteria do we use to pick a language and framework?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经决定将使用Python和Flask。但为什么？我们使用什么标准来选择语言和框架？
- en: 'You can use any language and framework you want, but here are some criteria
    to consider:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何你想要的编程语言和框架，但以下是一些需要考虑的标准：
- en: What languages and frameworks do you know?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你知道哪些语言和框架？
- en: Are they easy to learn?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是否容易学习？
- en: Do they have a large community?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是否有庞大的社区？
- en: Are they free and open source?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是免费和开源的吗？
- en: How often are they updated?
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们多久更新一次？
- en: Do they have good documentation?
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是否有良好的文档？
- en: Do they have good tooling?
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是否有良好的工具？
- en: These are just some of the criteria to consider.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是需要考虑的一些标准。
- en: The reason for picking Python and Flask is that they check many of the above
    boxes (so does the Express framework for Node.js, but the objective here is to
    just show how you can build a Web API using an AI assistant, so feel free to use
    whatever web framework you prefer). Also, the point of this book is to show how
    an AI assistant can help us build a backend; with what prompts and how and the
    framework and language is not the focus.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Python和Flask的原因是它们符合许多上述条件（Node.js的Express框架也是如此，但这里的目的是仅展示如何使用AI助手构建Web API，所以请随意使用你喜欢的任何Web框架）。此外，本书的目的是展示AI助手如何帮助我们构建后端；使用什么提示、如何以及框架和语言不是重点。
- en: Planning the Web API
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划Web API
- en: 'When you plan your Web API, you should consider the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你规划Web API时，你应该考虑以下因素：
- en: What data do you want to expose? For example, products and orders.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想公开哪些数据？例如，产品和订单。
- en: What functionality do you want to expose? For example, reading order data.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想公开哪些功能？例如，读取订单数据。
- en: How will you structure your Web API?
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将如何构建你的Web API？
- en: 'Security and authentication: You need to determine not only what areas of your
    app should require the user to log in but also what parts should be restricted
    to specific user types.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性和身份验证：你需要确定不仅哪些应用区域需要用户登录，还需要哪些部分应该限制给特定用户类型。
- en: 'Storage and database: Common choices are, for example, MySQL and Postgres.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储和数据库：常见的选项，例如，MySQL 和 Postgres。
- en: Use the above points as a checklist when you plan your Web API.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当你计划你的 Web API 时，请使用上述点作为清单。
- en: Creating a Web API with Python and Flask
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 Flask 创建 Web API
- en: A key insight to working with an AI assistant is that we can use it to generate
    code, *but* we need to have a good understanding of the problem domain and the
    solution domain. This means that we should know how to create a Web API with Python
    and Flask before we ask our AI assistant to help us. Can we create it without
    an AI assistant? Yes, but we risk getting stuck and not knowing what to do next.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与人工智能助手合作的一个关键见解是，我们可以用它来生成代码，*但是*我们需要对问题域和解决方案域有良好的理解。这意味着在我们请求人工智能助手帮助我们之前，我们应该知道如何使用
    Python 和 Flask 创建一个 Web API。没有人工智能助手我们能创建它吗？是的，但我们可能会陷入困境，不知道下一步该做什么。
- en: So, how much knowledge are we talking about? If you know Python in general and
    how to build a Web API in any language, you are good to go.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们谈论的是多少知识呢？如果你对 Python 有一般了解，并且知道如何用任何语言构建 Web API，你就准备好了。
- en: Let’s begin.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始。
- en: 'Step 1: Create a new project'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一步：创建一个新项目
- en: First, we need to create a new project. If you know Python, you know using a
    virtual environment is a good idea as it isolates the project from other Python
    projects on your computer. Using a virtual environment is not required but is
    recommended as different versions of Python and packages can cause issues.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新项目。如果你知道 Python，你就知道使用虚拟环境是一个好主意，因为它可以将项目与计算机上其他 Python 项目隔离开来。使用虚拟环境不是必需的，但推荐这样做，因为不同的
    Python 版本和包可能会引起问题。
- en: Okay, so we know we need a virtual environment. How do we create one? Let’s
    rely on our AI assistant to help us remember the syntax. For the prompt below,
    you can either open a text file or use the chat functionality in GitHub Copilot.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们知道我们需要一个虚拟环境。我们该如何创建一个呢？让我们依靠我们的人工智能助手来帮助我们记住语法。对于下面的提示，你可以打开一个文本文件或者使用
    GitHub Copilot 中的聊天功能。
- en: '**[Prompt]**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: How do I create a virtual environment for Python?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何为 Python 创建虚拟环境？
- en: '**[End of prompt]**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: The in-editor experience, typing a prompt in an open text file, prefers you
    to use `q:` at the start of a sentence. If you use the Chat functionality, there’s
    no need to add `q:`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中输入提示时，在打开的文本文件中，你更喜欢在句子的开头使用 `q:`。如果你使用聊天功能，则不需要添加 `q:`。
- en: '**[Prompt response]**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: The answer is on the same row as `a:`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 答案就在 `a:` 同一行。
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**[End of response]**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'Here’s how the output can look in an `app.py` file containing both the prompt
    and the response:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在一个包含提示和响应的 `app.py` 文件中查看输出：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To use the command the AI assistant responded with, we would need to open a
    terminal, paste the command, and run it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用人工智能助手给出的命令，我们需要打开一个终端，粘贴命令并运行它。
- en: At this point, you need enough conceptual knowledge to know that you need to
    activate the virtual environment to use it. But again, let’s ask the AI assistant
    to help us.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，你需要足够的概念知识来知道你需要激活虚拟环境才能使用它。但再次，让我们请求人工智能助手帮助我们。
- en: '**[Prompt]**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: How do I activate a virtual environment for Python in Windows?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何在 Windows 中激活 Python 的虚拟环境？
- en: '**[End of prompt]**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**[快速响应]**'
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**[End of response]**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: If you are on a Mac or Linux, change the above prompt to reflect your operating
    system.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Mac 或 Linux，将上述提示更改为反映你的操作系统。
- en: 'Step 2: Install Flask'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二步：安装 Flask
- en: The conceptual knowledge you need to have is that you can install packages –
    in this case, Flask – using `pip`. Let’s ask the AI assistant to help us. Keep
    working with your `app.py` file and add your prompt as another comment.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要具备的概念知识是，你可以使用 `pip` 安装包——在这个例子中，是 Flask。让我们请求人工智能助手帮助我们。继续使用你的 `app.py`
    文件，并将你的提示作为另一条注释添加。
- en: '**[Prompt]**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: How do I install Flask with pip?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我如何使用 pip 安装 Flask？
- en: '**[End of prompt]**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**[快速响应]**'
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**[End of response]**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'Your `app.py` should now look like so:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `app.py` 现在应该看起来像这样：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you’re using your AI tool to get quick answers on how to do something, it’s
    up to you if you want to clear the text file from questions and responses.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用你的人工智能工具来快速获取如何做某事的答案时，是否清除文本文件中的问题和响应取决于你。
- en: Great, we now know how to install Flask.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，我们现在知道如何安装 Flask。
- en: 'Step 3: Create an entry point'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 步：创建入口点
- en: We need to create an entry point for our Web API. This is the file that will
    be executed when we run our Web API. For Python, you usually name this file `app.py`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的 Web API 创建一个入口点。这个文件将在我们运行 Web API 时被执行。对于 Python，你通常将这个文件命名为 `app.py`。
- en: 'Step 4: Create a Flask app'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 4 步：创建 Flask 应用
- en: At this point, we have our project, we’ve installed Flask, and we have an entry
    point file, but the application is not a Flask application yet, so let’s create
    one.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了我们的项目，我们已经安装了 Flask，并且有一个入口点文件，但该应用还不是 Flask 应用，所以让我们创建一个。
- en: Let’s ask the AI assistant to help us.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们请 AI 助手帮助我们。
- en: '**[Prompt]**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: How do I create a Flask app?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我该如何创建 Flask 应用？
- en: '**[End of prompt]**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'As usual, keep typing your questions as comments prepended with a `q:` in your
    open text file. Here’s the response from your latest prompt:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，在您的开放文本文件中，以 `q:` 开头的注释中输入您的问题。以下是您最新提示的响应：
- en: '**[Prompt response]**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**[End of response]**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: We’re not getting much back from the AI assistant. But we know we need to import
    Flask. Let’s improve the prompt.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 AI 助手那里得到的反馈不多。但我们知道我们需要导入 Flask。让我们改进提示。
- en: '**[Prompt]**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: How do I create a Flask app with a default route and a “hello” route?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我该如何创建一个具有默认路由和“hello”路由的 Flask 应用？
- en: '**[End of prompt]**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'Now you’ll see an improved prompt response. The prompt contains more explicit
    instructions to create routes and logical areas in the app:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将看到改进后的提示响应。提示包含更多明确的指令来创建应用中的路由和逻辑区域：
- en: '**[Prompt response]**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE6]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**[End of response]**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: Now we have some starting code for our Flask app.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了我们的 Flask 应用的起始代码。
- en: Next, let’s focus on the use case for our Web API – e-commerce.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们专注于我们的 Web API 的用例——电子商务。
- en: 'Use case: a Web API for an e-commerce site'
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例：电子商务网站的 Web API
- en: So far, in this book, we’ve taken you through the process of building a front-end
    application for an e-commerce site. We used an AI assistant to help us with the
    front-end application. Now, we will build a Web API for the e-commerce site.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们带您经历了为电子商务网站构建前端应用的过程。我们使用 AI 助手帮助构建前端应用。现在，我们将为电子商务网站构建 Web API。
- en: In the previous section, we used an AI assistant to help us create a Flask app.
    Now, we will use the AI assistant to help us create a Web API for an e-commerce
    site.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用 AI 助手帮助我们创建 Flask 应用。现在，我们将使用 AI 助手帮助我们创建电子商务网站的 Web API。
- en: 'Step 1: Create a Web API for an e-commerce site'
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 步：为电子商务网站创建一个 Web API
- en: 'Let’s plan this task first. Based on previous chapters, the e-commerce site
    has the following features:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先规划这个任务。根据前面的章节，电子商务网站有以下功能：
- en: '**Product catalog**: Containing the products we aim to sell.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品目录**：包含我们打算出售的产品。'
- en: '**Shopping cart**: With a shopping cart, we can add products to the cart, remove
    products from the cart, and update the quantity of products in the cart. Once
    we’re happy with the products in the cart, we can check out and have the products
    paid for and shipped.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**购物车**：有了购物车，我们可以添加产品到购物车，从购物车中移除产品，并更新购物车中产品的数量。一旦我们对购物车中的产品满意，我们就可以结账，并支付和运输产品。'
- en: '**A checkout process**: In the checkout process, we need to collect payment
    information and shipping information.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结账流程**：在结账过程中，我们需要收集支付信息和运输信息。'
- en: With the above information in mind, let’s craft a prompt for our AI assistant.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到以上信息，让我们为我们的 AI 助手制定一个提示。
- en: '**[Prompt]**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Show me code to create a Flask Web API that includes routes for a product catalog,
    shopping cart, and checkout process.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 请给我一些代码示例，用于创建一个 Flask Web API，其中包括产品目录、购物车和结账流程的路由。
- en: '**[End of prompt]**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE7]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**[End of response]**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'Okay, so we have some starting code for our Web API, but we need to improve
    it in the following ways:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们已经有了我们的 Web API 的起始代码，但我们需要以下方面进行改进：
- en: We need to return JSON instead of text.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要返回 JSON 而不是文本。
- en: We want to add code to read and write to a database.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望添加代码以读取和写入数据库。
- en: We want to add tests.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望添加测试。
- en: We want to document the Web API.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望记录 Web API。
- en: 'Step 2: Return JSON instead of text'
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 步：返回 JSON 而不是文本
- en: JSON is a common format for data. It’s a format that is easy to read and write
    for both humans and machines. To use JSON in Python, we need to import the `json`
    package. The method we will use is `jsonify()`, which is a method that will convert
    a Python dictionary to JSON.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: JSON是一种常见的数据格式。它是一种既易于人类阅读和编写，也易于机器阅读和编写的数据格式。要在Python中使用JSON，我们需要导入`json`包。我们将使用的方法是`jsonify()`，这是一个将Python字典转换为JSON的方法。
- en: Let’s see how we can use `jsonify()` in our Web API. For this operation, we
    can keep using the AI assistant as prompt comments in the code, or we can use
    GitHub Copilot’s Chat feature (this is a separate extension of GitHub Copilot).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何在我们的Web API中使用`jsonify()`。对于这个操作，我们可以继续使用AI助手作为代码中的提示注释，或者我们可以使用GitHub
    Copilot的聊天功能（这是GitHub Copilot的一个独立扩展）。
- en: 'Let’s use the latter. To use GitHub Copilot’s Chat feature (refer to this link
    for updated install instructions: [https://docs.github.com/en/copilot/github-copilot-chat/using-github-copilot-chat-in-your-ide](https://docs.github.com/en/copilot/github-copilot-chat/using-github-copilot-chat-in-your-ide)),
    we need to select the code we want to improve and click the chat icon on the left
    side of Visual Studio Code (if you are using the default orientation, where the
    icons are placed vertically – it depends what other extensions you have installed).
    Here’s the icon to look for. Ensure the GitHub Copilot Chat extension has been
    correctly installed:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用后者。要使用GitHub Copilot的聊天功能（有关更新的安装说明，请参阅此链接：[https://docs.github.com/en/copilot/github-copilot-chat/using-github-copilot-chat-in-your-ide](https://docs.github.com/en/copilot/github-copilot-chat/using-github-copilot-chat-in-your-ide))，我们需要选择我们想要改进的代码，并点击Visual
    Studio Code左侧的聊天图标（如果您使用的是默认方向，其中图标是垂直放置的——这取决于您安装的其他扩展）。这是我们要找的图标。确保GitHub Copilot
    Chat扩展已正确安装：
- en: '![Chat icon for GitHub Copilot](img/B21232_08_01.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![GitHub Copilot的聊天图标](img/B21232_08_01.png)'
- en: 'Figure 8.1: Chat icon for GitHub Copilot'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：GitHub Copilot的聊天图标
- en: Once we click the **Chat** icon, and the code selected, we can start chatting
    with GitHub Copilot. Let’s ask GitHub Copilot to help us return JSON instead of
    text.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击**聊天**图标，并选择代码，我们就可以开始与GitHub Copilot聊天。让我们让GitHub Copilot帮助我们返回JSON而不是文本。
- en: 'We add the following prompt to the chat window:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在聊天窗口中添加以下提示：
- en: '**[Prompt]**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示**]'
- en: Add code to respond with JSON for all routes.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为所有路由添加响应JSON的代码。
- en: '**[End of prompt]**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束**]'
- en: '![Prompt in Copilot chat window](img/B21232_08_02.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![Copilot聊天窗口中的提示](img/B21232_08_02.png)'
- en: 'Figure 8.2: Prompt in Copilot chat window'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：Copilot聊天窗口中的提示
- en: The chat functionality generates an answer consisting of code including the
    `jsonify()` method.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天功能生成一个包含`jsonify()`方法的代码答案。
- en: '![Copilot chat response](img/B21232_08_03.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![Copilot聊天回复](img/B21232_08_03.png)'
- en: 'Figure 8.3: Copilot Chat response'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：Copilot聊天回复
- en: 'Here’s the code generated by GitHub Copilot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GitHub Copilot生成的代码：
- en: '[PRE8]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Step 3: Add code to read and write to a database'
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步：添加代码以读取和写入数据库
- en: Okay, so we have a Web API that returns JSON. Now, we need to add code to read
    and write to a database. Let’s use the chat feature again to help us with this
    task.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们有一个返回JSON的Web API。现在，我们需要添加代码以读取和写入数据库。让我们再次使用聊天功能来帮助我们完成这个任务。
- en: '**[Prompt]**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示**]'
- en: Add code to read and write to a database and apply it to all our routes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 添加代码以读取和写入数据库，并将其应用于所有我们的路由。
- en: '**[End of prompt]**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束**]'
- en: 'Here’s the code we end up with:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的最终代码：
- en: '**[Prompt response]**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示回复**]'
- en: '[PRE9]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**[End of response]**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**[回复结束**]'
- en: 'As you can see, we get quite a lot of code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们得到了相当多的代码：
- en: Code to connect to a database – in this case, we get a connection to the common
    SQLite database.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到数据库的代码——在这种情况下，我们得到了连接到常见SQLite数据库的连接。
- en: Code that creates a table and even reads from it in the `/products` route, but
    we don’t get code to write to the database.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`/products`路由中创建表并从中读取的代码，但我们没有获取到写入数据库的代码。
- en: We don’t get code to read and write to the other routes either.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们也没有获取到读取和写入其他路由的代码。
- en: Based on the code above, we realize it’s a good start, but there are things
    we’d like to improve, so we will change the prompt to address the shortcomings.
    We need the prompt to ensure all routes read their data from a database, not just
    one.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上面的代码，我们意识到这是一个好的开始，但我们还有一些想要改进的地方，所以我们将更改提示以解决这些不足。我们需要确保所有路由都从数据库中读取数据，而不仅仅是其中一个。
- en: So, we can either adjust the code ourselves, knowing that most of the code is
    in place, or try to adjust the prompt. Let’s try the latter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们既可以自己调整代码，因为我们知道大部分代码已经就位，也可以尝试调整提示。让我们尝试后者。
- en: '**[Prompt]**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示**]'
- en: Add code to read and write to a database and apply it to all our routes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 添加读取和写入数据库的代码，并将其应用于所有路由。
- en: '**[End of prompt]**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE10]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**[End of response]**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'The improved prompt made the following changes:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 改进的提示带来了以下变化：
- en: Added database code to the `/checkout` and `/cart` routes.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已将数据库代码添加到`/checkout`和`/cart`路由。
- en: All three routes read from the products table, which is incorrect. That’s something
    we need to address in an upcoming prompt. The great news is that we can just tell
    Copilot Chat what the problem is with a prompt and expect the AI assistant to
    change the code accordingly.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有三个路由都从产品表中读取，这是不正确的。这是我们将在下一个提示中解决的问题。好消息是，我们只需通过提示告诉Copilot Chat问题所在，就可以期待AI助手相应地更改代码。
- en: The above code is better than our very first prompt but has issues still.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码比我们最初的提示要好，但仍存在问题。
- en: 'You could try to adjust the prompt in Copilot Chat, but let’s fall back on
    our other approach – namely, prompts in the code. To add these prompts, put your
    cursor in the code and add the prompt as a comment. Here are some prompts we added:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Copilot Chat中尝试调整提示，但让我们退回到我们的另一种方法——即在代码中使用提示。要添加这些提示，将光标放在代码中，并将提示作为注释添加。以下是我们添加的一些提示：
- en: '*# create tables*: We’re repeating the comment we have already used, but because
    Copilot is now aware of all the routes, it does a better job this time, suggesting
    three database tables should be created rather than just the `products` one.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*# 创建表*：我们重复了已经使用的注释，但由于Copilot现在意识到了所有路由，这次它做得更好，建议创建三个数据库表而不是只有一个`products`表。'
- en: '*# add product to cart, productId and quantity in body, create cart if needed,
    else update*: This prompt is detailed as it asks what information should be added
    to each cart entry.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*# 添加产品到购物车，在body中包含productId和quantity，如果需要则创建购物车，否则更新*：这个提示很详细，因为它询问应该将哪些信息添加到每个购物车条目中。'
- en: '*# product catalog* and *# shopping cart* are also repeated prompts (we remove
    the old prompt, and retype it to toggle a new suggestion). This time, we get Copilot
    to suggest the correct database tables to read from.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*# 产品目录* 和 *# 购物车* 也是重复的提示（我们移除旧的提示，并重新输入以切换新的建议）。这次，我们让Copilot建议正确的数据库表来读取。'
- en: 'Note below how we reshape the code with various prompts in the code as comments:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下如何通过代码中的各种提示（作为注释）来重塑代码：
- en: '[PRE11]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Is this code good enough or do we need to adjust it further?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码足够好吗？或者我们需要进一步调整？
- en: 'There’s definitely room for improvement and here’s what you should be looking
    for:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 肯定有改进的空间，以下是你应该寻找的内容：
- en: The code is not DRY (Don’t Repeat Yourself); we have a lot of duplicate code.
    We can solve this by creating a function that takes a query and returns the result.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码不是DRY（不要重复自己）；我们有大量的重复代码。我们可以通过创建一个函数来解决，该函数接受一个查询并返回结果。
- en: Authentication and authorization are missing. We should add this to the code.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺少身份验证和授权。我们应该将其添加到代码中。
- en: Documentation is missing.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺少文档。
- en: The code is not secure. We should add some security measures, especially when
    it comes to the database. As developers, having some knowledge of how to secure
    code, we can use prepared statements to prevent SQL injection attacks and also
    validate the data that we receive from the client.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码不安全。我们应该添加一些安全措施，尤其是在数据库方面。作为开发者，我们需要了解如何确保代码安全，我们可以使用预处理语句来防止SQL注入攻击，并验证我们从客户端接收的数据。
- en: 'Step 4: Improve the code'
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4步：改进代码
- en: The best way to improve the code is to use the code that we have as a starting
    point and first just try to run it. We can then see what errors we get and what
    we need to fix.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 提高代码的最佳方式是以我们已有的代码作为起点，首先尝试运行它。然后我们可以看到我们得到了什么错误以及我们需要修复什么。
- en: After that, we work on architecture and design and separate the code into different
    files.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们专注于架构和设计，并将代码分离到不同的文件中。
- en: Lastly, we add authentication and authorization and security measures.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加身份验证、授权和安全措施。
- en: Run the code
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行代码
- en: Let’s run the code. We need to set the Flask variable `FLASK_APP` to `app.py`
    and then run the app.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行代码。我们需要将Flask变量`FLASK_APP`设置为`app.py`然后运行应用程序。
- en: If you are using Windows, you need to use `set` instead of `export` to set the
    variable.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Windows，你需要使用`set`而不是`export`来设置变量。
- en: '[PRE12]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The app is working! We can now go to `http://localhost:5000` and see the message
    **Hello World!**.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序正在运行！我们现在可以访问`http://localhost:5000`并看到消息**Hello World**！。
- en: 'Going to `/products`, `/cart`, and `/checkout` also works, but we don’t have
    any data in the database yet. Let’s add some data to the database. By inserting
    the above code at the top of the file and running the app again, we can do this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`/products`、`/cart`和`/checkout`也正常，但我们数据库中还没有任何数据。让我们向数据库添加一些数据。通过在文件顶部插入上述代码并再次运行应用程序，我们可以这样做：
- en: '[PRE13]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, if you rerun the app and go to `/products`, you should see the products
    that we added as the following JSON output:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你重新运行应用程序并转到`/products`，你应该看到我们添加的产品，如下面的JSON输出所示：
- en: '[PRE14]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Refactor the code
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重构代码
- en: Great – lots of progress so far! Now let’s refactor the code and make it more
    DRY (Don’t Repeat Yourself, a term for ensuring we don’t duplicate code too much).
    We can use Copilot to help us with this.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了 - 到目前为止进展顺利！现在让我们重构代码，使其更加DRY（不要重复自己，这是一个确保我们不过度重复代码的术语）。我们可以使用Copilot来帮助我们完成这项工作。
- en: 'Provide it with the following prompt:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 提供以下提示：
- en: '**[Prompt]**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: 'Improve the code by separating the database parts into a separate module db.py
    and expose the functions as follows: get_products, get_cart, add_to_cart, checkout.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将数据库部分分离到单独的模块`db.py`中并暴露以下函数来改进代码：get_products，get_cart，add_to_cart，checkout。
- en: '**[End of prompt]**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: We get two responses, one for the `db.py` file and one for the `app.py` file.
    Let’s start with the `db.py` file.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了两个响应，一个是针对`db.py`文件的，另一个是针对`app.py`文件的。让我们从`db.py`文件开始。
- en: '**[Prompt response]**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE15]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**[End of response]**'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: We need to improve the above code a bit, as it’s using an open connection to
    the database. We should close the connection after we are done with it. Ensure
    you add code to close the connection after the commit. Also, ensure per route
    that you open and close the connection.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要稍微改进上面的代码，因为它正在使用一个打开的数据库连接。我们应该在完成操作后关闭连接。确保你在提交后添加关闭连接的代码。还要确保每个路由都打开和关闭连接。
- en: This looks good. Let’s add it to our project. We can create a new file called
    `db.py` and copy the code into it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不错。让我们将其添加到我们的项目中。我们可以创建一个名为`db.py`的新文件并将代码复制到其中。
- en: 'Next, let’s see what it suggested for the `app.py` file:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看它对`app.py`文件的建议：
- en: '[PRE16]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, it has separated the database code into the `db.py` file and
    has also added the imports for the `db.py` file. Let’s copy this code into our
    `app.py` file and replace its content.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它已经将数据库代码分离到`db.py`文件中，并且还添加了对`db.py`文件的导入。让我们将此代码复制到我们的`app.py`文件中，并替换其内容。
- en: Does it work? Let’s run the app and see. It runs without any errors, and we
    get JSON output when we go to `/products`, `/cart`, and `/checkout`. If you want,
    you can also make a `POST` request to `/cart` to write cart content – great!
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 它工作了吗？让我们运行应用程序并看看。它没有错误地运行，当我们转到`/products`、`/cart`和`/checkout`时，我们得到了JSON输出。如果你想的话，你还可以向`/cart`发送一个`POST`请求来写入购物车内容
    - 太棒了！
- en: 'Step 5: Document the API'
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5步：记录API
- en: 'We can use Copilot Chat to help us document the API. Let’s provide it with
    the following prompt:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Copilot Chat来帮助我们记录API。让我们提供以下提示：
- en: '**[Prompt]**'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: 'Document the API using Swagger. The API should have the following endpoints:
    GET /products, GET /cart, POST /cart/add, POST /checkout.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Swagger记录API。API应该有以下端点：GET /products，GET /cart，POST /cart/add，POST /checkout。
- en: '**[End of prompt]**'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: Swagger or OpenAPI standard is a way to document your API routes. These route
    specifications can then be visualized, and you get a quick overview of what your
    API can do. Additionally, there’s something called Swagger UI, a web page that
    not only lets you see what routes you have in your API but you can make requests
    and more, to ensure the API is working as it should.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger或OpenAPI标准是记录你的API路由的一种方式。这些路由规范可以被可视化，你可以快速了解你的API能做什么。此外，还有一个叫做Swagger
    UI的网页，它不仅让你可以看到你的API中有哪些路由，你还可以进行请求等操作，以确保API按预期工作。
- en: 'Here’s the output, which involves both code and documentation:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出，它涉及代码和文档：
- en: '**[Prompt response]**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE17]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**[End of response]**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'And it tells us to create the following files and folders:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 它告诉我们创建以下文件和文件夹：
- en: '[PRE18]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let’s create these files manually and copy the content into them.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们手动创建这些文件并将内容复制到它们中。
- en: '[PRE19]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'What’s missing is installing the `flassger` Swagger library:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 缺少的是安装`flassger` Swagger库：
- en: '[PRE20]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Navigate to `http://localhost:5000/apidocs/` and you should see Swagger UI.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`http://localhost:5000/apidocs/`，你应该能看到Swagger UI。
- en: '![API doc generated by Swagger](img/B21232_08_04.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![由Swagger生成的API文档](img/B21232_08_04.png)'
- en: 'Figure 8.4: API doc generated by Swagger'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4：由Swagger生成的API文档
- en: You should verify that the API works as expected by interacting with generated
    docs and ensure the routes generate the expected output.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该通过与生成的文档交互来验证 API 是否按预期工作，并确保路由生成预期的输出。
- en: It’s definitely possible to keep improving at this point but take a moment to
    realize how much we created with only prompts and a few lines of code. We have
    a working API with a database and documentation. We can now focus on improving
    the code and adding more features.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们确实有可能继续改进，但请花点时间意识到我们仅通过提示和几行代码就创造了多少东西。我们有一个带有数据库和文档的工作 API。现在我们可以专注于改进代码和添加更多功能。
- en: Assignment
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业
- en: 'Here’s the suggested assignment for this chapter: A good assignment would be
    to add more features to the API, such as:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章的建议作业：一个好的作业是向 API 添加更多功能，例如：
- en: Add a new endpoint to get a single product.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个新端点来获取单个产品。
- en: Add a new endpoint to remove a product from the cart.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个新端点来从购物车中删除产品。
- en: Add a new endpoint to update the quantity of a product in the cart.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个新端点来更新购物车中产品的数量。
- en: You can solve this by just adding the above to Copilot Chat as prompts and see
    what it generates. Expect both the code and documentation to change.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将上述内容添加到 Copilot Chat 作为提示并查看它生成的结果来解决这个问题。预期代码和文档都会有所变化。
- en: Solution
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'You can find the solution to this assignment in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT/tree/main/08](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT/tree/main/08)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库中找到这个作业的解决方案：[https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT/tree/main/08](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT/tree/main/08)
- en: Challenge
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: Improve this API by adding more features. You can use Copilot Chat to help you
    with this.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加更多功能来改进这个 API。你可以使用 Copilot Chat 来帮助你完成这项工作。
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed how to plan out our API. Then we looked at how
    we can choose Python and Flask for the job but stressed the importance of having
    contextual knowledge on how to actually build a Web API. In general, you should
    always know how to do something before you ask an AI assistant to help you with
    it, at least at a high level.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何规划我们的 API。然后我们探讨了如何选择 Python 和 Flask 来完成这项工作，但强调了在实际构建 Web API 方面拥有上下文知识的重要性。一般来说，在请求
    AI 助手帮助你之前，你应该至少在高级别上知道如何做某事。
- en: Then we ended up crafting prompts for the AI assistant to help us with the Web
    API. We ended up working with our e-commerce site and created a Web API to serve
    it.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们最终为 AI 助手制作了提示，以帮助我们处理 Web API。我们与我们的电子商务网站合作，创建了一个 Web API 来提供服务。
- en: After that, we discussed how to improve the code and add more features to the
    API.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们讨论了如何改进代码并为 API 添加更多功能。
- en: In the next chapter, we will discuss how to improve our app by adding artificial
    intelligence to it.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何通过添加人工智能来改进我们的应用程序。
- en: Join our community on Discord
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/aicode](https://packt.link/aicode)'
- en: '![](img/QR_Code510410532445718281.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code510410532445718281.png)'
