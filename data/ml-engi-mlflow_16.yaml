- en: '*Chapter 12*: Advanced Topics with MLflow'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第12章*：MLflow 的高级主题'
- en: In this chapter, we will cover advanced topics to address common situations
    and use cases whereby you can leverage your MLflow knowledge by using different
    types of models from the ones exposed in the rest of the book, to ensure a breadth
    of feature coverage and exposure to assorted topics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖高级主题，以解决常见的情境和用例，通过使用本书其他部分未公开的不同类型的模型，利用你的 MLflow 知识，确保广泛的功能覆盖和接触各种主题。
- en: 'Specifically, we will look at the following sections in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们将查看以下部分：
- en: Exploring MLflow use cases with AutoML
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AutoML 探索 MLflow 用例
- en: Intergrating MLflow with other languages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 MLflow 与其他语言集成
- en: Understanding MLflow plugins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 MLflow 插件
- en: We will represent each of the cases with a brief description of the problem
    and solutions in a pattern format—namely, a problem context and a solution approach.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以模式格式（即问题背景和解决方案方法）简要描述每个案例的问题和解决方案。
- en: The different sections of this chapter don't present continuity as they address
    different issues.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的不同部分不呈现连续性，因为它们解决不同的问题。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following prerequisites:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要以下先决条件：
- en: The latest version of Docker installed on your machine. If you don't already
    have it installed, please follow the instructions at [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的机器上安装 Docker 的最新版本。如果您还没有安装，请按照[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)中的说明进行操作。
- en: The latest version of Docker Compose installed—please follow the instructions
    at [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请安装 Docker Compose 的最新版本——请按照[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)中的说明进行操作。
- en: Access to Git in the command line, and installed as described at [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令行中访问 Git，并按照[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)中描述的方式进行安装。
- en: Access to a Bash terminal (Linux or Windows).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Bash 终端（Linux 或 Windows）。
- en: Access to a browser.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问浏览器。
- en: Python 3.5+ installed.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 3.5+。
- en: The latest version of your ML library installed locally as described in [*Chapter
    4*](B16783_04_Final_SB_epub.xhtml#_idTextAnchor081), *Experiment Management in
    MLflow*.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照第 [*4章*](B16783_04_Final_SB_epub.xhtml#_idTextAnchor081) 中描述的，在本地安装你 ML 库的最新版本，*MLflow
    中的实验管理*。
- en: Exploring MLflow use cases with AutoML
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AutoML 探索 MLflow 用例
- en: 'Executing an ML project requires a breadth of knowledge in multiple areas and,
    in a lot of cases, deep technical steps of expertise. One emergent technique to
    ease the adoption and accelerate **time to market** (**TTM**) in projects is the
    use of **automated machine learning** (**AutoML**), where some of the activities
    of the model developer are automated. It basically consists of automating steps
    in ML in a twofold approach, outlined as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 ML 项目需要多个领域的广泛知识，并且在很多情况下，需要深入的技术专业知识。一种缓解采用并加速项目**上市时间**（**TTM**）的突发技术是使用**自动化机器学习**（**AutoML**），其中模型开发者的某些活动被自动化。它基本上包括通过以下两种方式在
    ML 中自动化步骤：
- en: '**Feature selection**: Using optimization techniques (for example, Bayesian
    techniques) to select the best features as input to a model'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特征选择**：使用优化技术（例如，贝叶斯技术）选择最佳特征作为模型的输入'
- en: '**Modeling**: Automatically identifying a set of models to use by testing multiple
    algorithms using hyperparameter optimization techniques'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建模**：通过使用超参数优化技术测试多个算法，自动识别要使用的模型集'
- en: We will explore the integration of MLflow with an ML library called PyCaret
    ([https://pycaret.org/](https://pycaret.org/)) that allows us to leverage its
    AutoML techniques and log the process in MLflow so that you can automatically
    obtain the best performance for your problem.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索将 MLflow 与一个名为 PyCaret 的 ML 库（[https://pycaret.org/](https://pycaret.org/)）集成，该库允许我们利用其
    AutoML 技术并在 MLflow 中记录过程，以便您可以自动获得您问题的最佳性能。
- en: We will look next at the use case of pyStock in the book and will look at automatically
    modeling based on our training data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将接下来查看本书中 pyStock 的用例，并基于我们的训练数据自动建模。
- en: AutoML pyStock classification use case
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AutoML pyStock 分类用例
- en: 'For this section, we will work on a solution that you can follow along with
    (https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/automl_pycaret)
    with the notebook and our project dataset. We will execute the following steps
    in order to implement AutoML for our use case:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将解决一个你可以跟随的解决方案（https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/automl_pycaret）与笔记本和我们的项目数据集。我们将按照以下步骤执行，以实现我们的用例的AutoML：
- en: 'Let''s start by installing the full version of PyCaret, as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从安装PyCaret的完整版本开始，如下所示：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'First, we should import the necessary libraries, like so:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们应该导入必要的库，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we read all the training data, like this:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们读取所有训练数据，如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we set up the project data and load the input data, as follows:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置项目数据和加载输入数据，如下所示：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the output:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '![Figure 12.1 – Automatic feature inference'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图12.1 – 自动特征推断'
- en: '](img/image0018.jpg)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0018.jpg]'
- en: Figure 12.1 – Automatic feature inference
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.1 – 自动特征推断
- en: 'Then, we execute `compare_models()`, like this:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们执行`compare_models()`，如下所示：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is the output:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '![Figure 12.2 – Different types of models'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图12.2 – 不同类型的模型'
- en: '](img/image0029.jpg)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0029.jpg]'
- en: Figure 12.2 – Different types of models
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.2 – 不同类型的模型
- en: 'Select your best model by running the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令选择您最好的模型：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run MLflow to check all the models (in the following **Uniform Resource Locator**
    (**URL**): http://127.0.0.1:5000/#/experiments/1), and you should then see a screen
    like this:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行MLflow来检查所有模型（在以下**统一资源定位符**（**URL**）：http://127.0.0.1:5000/#/experiments/1），然后你应该会看到一个像这样的屏幕：
- en: '![](img/image0038.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![img/image0038.jpg]'
- en: Figure 12.3 – Models logged in MLflow
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 已记录在MLflow中的模型
- en: We will next look at implementing AutoML in a scenario where we don't have targets.
    We will need to use anomaly detection, a non-supervised ML technique.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨在没有目标的情况下实现AutoML的场景。我们需要使用异常检测，这是一种无监督的机器学习技术。
- en: AutoML – anomaly detection in fraud
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动机器学习 – 欺诈异常检测
- en: 'For this section, we will work on a solution that you can follow along with
    (https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/automl_pycaret_fraud)
    with the notebook and our project dataset. We will execute the following steps
    in order to implement AutoML for our use case:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将解决一个你可以跟随的解决方案（https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/automl_pycaret_fraud）与笔记本和我们的项目数据集。我们将按照以下步骤执行，以实现我们的用例的AutoML：
- en: 'First, we should import the libraries, like so:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们应该导入库，如下所示：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we read all the training data, like this:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们读取所有训练数据，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the output:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '![Figure 12.4 – Models automatically available in MLflow'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图12.4 – MLflow中自动可用的模型'
- en: '](img/image0049.jpg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0049.jpg]'
- en: Figure 12.4 – Models automatically available in MLflow
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.4 – MLflow中自动可用的模型
- en: 'Next, we set up the project data and load the input data, as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们设置项目数据和加载输入数据，如下所示：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we execute `compare_models()`, like this:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们执行`compare_models()`，如下所示：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is the output:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是输出：
- en: '![Figure 12.5 – Different types of models'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图12.5 – 不同类型的模型'
- en: '](img/image0057.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0057.jpg]'
- en: Figure 12.5 – Different types of models
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.5 – 不同类型的模型
- en: 'Then, execute your chosen anomaly detection model, as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，执行你选择的异常检测模型，如下所示：
- en: '[PRE10]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, run MLflow to check all the models (at the following URL: http://127.0.0.1:5000/#/experiments/1),
    and you should see a screen like this:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行MLflow来检查所有模型（在以下网址：http://127.0.0.1:5000/#/experiments/1），你应该会看到一个像这样的屏幕：
- en: '![Figure 12.6 – Models automatically available in MLflow'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.6 – MLflow中自动可用的模型'
- en: '](img/image0066.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/image0066.jpg]'
- en: Figure 12.6 – Models automatically available in MLflow
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – MLflow中自动可用的模型
- en: At this stage, you should be able to leverage the knowledge you have gained
    throughout the book to use the models identified in this book for models in production.
    We will next look at intergrating MLflow with other languages—in this case, Java.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你应该能够利用你在整本书中学到的知识来使用本书中识别的生产模型。接下来，我们将探讨如何将MLflow与其他语言集成——在这种情况下，是Java。
- en: Integrating MLflow with other languages
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将MLflow与其他语言集成
- en: MLflow is primarily a tool ingrained in the Python ecosystem in the ML space.
    At its core, MLflow components provide a **REpresentational State Transfer** (**REST**)
    interface. As long as **application programming interface** (**API**) wrappers
    are made, the underlying code is accessible from any language with REST support.
    The REST interface is extensively documented in [https://www.mlflow.org/docs/latest/rest-api.html](https://www.mlflow.org/docs/latest/rest-api.html);
    most of the integration into other languages is about providing layers to access
    the API in a concise, language-specific library.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 主要是在机器学习领域的 Python 生态系统中根植的工具。在其核心，MLflow 组件提供了一个 **表示状态传输**（**REST**）接口。只要创建了
    **应用程序编程接口**（**API**）包装器，底层代码就可以从任何支持 REST 的语言中访问。REST 接口在 [https://www.mlflow.org/docs/latest/rest-api.html](https://www.mlflow.org/docs/latest/rest-api.html)
    中有广泛的文档；与其他语言的集成大部分是提供访问 API 的简洁、特定语言的库层。
- en: MLflow Java example
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MLflow Java 示例
- en: Multiple teams in the ML space are inserted in a context where multiple languages
    are used. One of the most important platforms on large-scale distributed systems
    is **Java Virtual Machine** (**JVM**). Being able to implement systems that can
    interact with Java-based systems is paramount for a smooth integration of MLflow
    with the wider **information technology** (**IT**) infrastructure.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习领域，多个团队在多种语言的环境中工作。在大型分布式系统中，最重要的平台之一是 **Java 虚拟机**（**JVM**）。能够实现可以与基于
    Java 的系统交互的系统对于 MLflow 与更广泛的 **信息技术**（**IT**）基础设施的顺利集成至关重要。
- en: 'We will show an example of using MLflow in Java (you can have access to the
    code here: https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/psystock-java-example).
    In order to use MLflow in Java, you will have to execute the following steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示如何在 Java 中使用 MLflow 的示例（你可以在以下链接获取代码：https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/psystock-java-example）。为了在
    Java 中使用 MLflow，你必须执行以下步骤：
- en: Install Java and the Java build tool called `Maven`, as directed by [https://maven.apache.org/install.html](https://maven.apache.org/install.html).
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照指示安装 Java 和 Java 构建工具 `Maven`，链接为 [https://maven.apache.org/install.html](https://maven.apache.org/install.html)。
- en: 'Create a dependencies `pom.xml` file with the MLflow client dependency, as
    follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 MLflow 客户端依赖项的 `pom.xml` 文件，如下所示：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Implement your main class, like this:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现你的主类，如下所示：
- en: '[PRE12]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Build your project with Maven, as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方式使用 Maven 构建你的项目：
- en: '[PRE13]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Execute your Java project by running the following code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码以运行你的 Java 项目：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At this stage, MLflow is natively integrated into the Python ecosystem. It provides
    links to other ecosystems similar to what we demonstrated in this chapter with
    the JVM language. We will next explore an example in the R language.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，MLflow 本地集成到 Python 生态系统中。它提供了与其他生态系统类似的链接，就像我们在本章中用 JVM 语言演示的那样。接下来，我们将探索
    R 语言的示例。
- en: MLflow R example
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MLflow R 示例
- en: 'We will show an example of using MLflow in R using the Databricks environment
    (you can have access to the code here: [https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-example-r](https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-example-r)).
    You can import the notebook from the Databricks Community Edition environment
    and explore the code from there.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示如何在 Databricks 环境中使用 MLflow 的示例（你可以在以下链接获取代码：[https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-example-r](https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-example-r)）。你可以从
    Databricks 社区版环境中导入笔记本，并从那里探索代码。
- en: In this section, we will run a random forest classifier in R over the standard
    dataset available as an R package, called `Pima.tf` ([https://rdrr.io/cran/MASS/man/Pima.tr.html](https://rdrr.io/cran/MASS/man/Pima.tr.html)).
    This is a simple dataset with a set of biomedical features to detect whether a
    specific patient has diabetes or not.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在 R 语言的标准数据集上运行随机森林分类器，该数据集作为 R 包 `Pima.tf` 提供（[https://rdrr.io/cran/MASS/man/Pima.tr.html](https://rdrr.io/cran/MASS/man/Pima.tr.html)）。这是一个简单的数据集，包含一组生物医学特征，用于检测特定患者是否患有糖尿病。
- en: 'In order to create a notebook for your R example code, you need to execute
    the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建你的 R 示例代码的笔记本，你需要执行以下步骤：
- en: Sign up to Databricks Community Edition at [https://community.cloud.databricks.com/](https://community.cloud.databricks.com/)
    and create an account.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [https://community.cloud.databricks.com/](https://community.cloud.databricks.com/)
    上注册 Databricks 社区版，并创建一个账户。
- en: Log in to your account with your just-created credentials.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您刚刚创建的凭证登录您的账户。
- en: Create a cluster to use for your workloads. You are allowed to have clusters
    for your workloads with a limit of 15 **gigabytes** (**GB**) of **random-access
    memory** (**RAM**) and with usage for a defined period of time.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于您工作负载的集群。您可以为您的负载拥有集群，每个集群的随机存取内存（RAM）限制为 15 **GB**（**GB**），并且使用期限为定义的时间段。
- en: 'You can see an overview of the cluster-creation process in the following screenshot:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中查看集群创建过程的概述：
- en: '![Figure 12.7 – Creating a cluster in Databricks Community Edition'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 12.7 – 在 Databricks 社区版中创建集群'
- en: '](img/Image_007.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Image_007.jpg)'
- en: Figure 12.7 – Creating a cluster in Databricks Community Edition
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.7 – 在 Databricks 社区版中创建集群
- en: Create a new notebook in your Databricks platform on your landing workspace
    page by clicking on the **Create a Blank Notebook** button in the top right of
    the page, as illustrated in the following screenshot:![Figure 12.8 – Creating
    a new notebook in Databricks Community Edition
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Databricks 平台的登录工作空间页面上，通过点击页面右上角的**创建空白笔记本**按钮来创建一个新的笔记本，如图所示：![图 12.8
    – 在 Databricks 社区版中创建新的笔记本
- en: '](img/Image_008.jpg)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Image_008.jpg)'
- en: Figure 12.8 – Creating a new notebook in Databricks Community Edition
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.8 – 在 Databricks 社区版中创建新的笔记本
- en: We are now ready to start a notebook to execute a basic training job in this
    managed environment. You can start by clicking on **New Notebook** in your workspace.
    You need to set the default language as **R** and attach the notebook to your
    cluster created in the previous chapter.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已准备好在这个托管环境中启动一个笔记本来执行基本的训练作业。您可以通过点击工作空间中的**新建笔记本**来开始。您需要将默认语言设置为**R**，并将笔记本附加到上一章中创建的集群。
- en: 'You can see an overview of the notebook-creation process in the following screenshot:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中查看笔记本创建过程的概述：
- en: '![Figure 12.9 – Adding details of your new R notebook'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 12.9 – 添加您的新的 R 笔记本详情'
- en: '](img/Image_009.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Image_009.jpg)'
- en: Figure 12.9 – Adding details of your new R notebook
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.9 – 添加您的新的 R 笔记本详情
- en: 'You start on your notebook by importing the MLflow dependencies through `install.packages`
    and by instantiating the library, as follows:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从导入 MLflow 依赖项开始您的笔记本，使用`install.packages`并实例化库，如下所示：
- en: '[PRE15]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will now proceed to install extra packages with the data we will need to
    be able to execute our example. In this particular example, we will be using the
    `carrier` package to facilitate the manipulation of remote functions and log information
    about them. We will also include the `MASS` package, which contains the dataset
    we will be using in this example. The `el071` package and `randomforest` will
    be used for statistical functions and to run the prediction classifier. Here is
    the code you will need:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将使用所需的数据安装额外的包，以便能够执行我们的示例。在这个特定的例子中，我们将使用`carrier`包来简化远程函数的操作并记录有关它们的信息。我们还将包括`MASS`包，其中包含我们将在此示例中使用的数据集。`el071`包和`randomforest`将用于统计函数和运行预测分类器。以下是您需要的代码：
- en: '[PRE16]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, we will focus on starting the experiment by starting a block of code
    with this line of code: `with(mlflow_start_run(), {`. This will basically allow
    us to start logging the model parameters through the `mlflow_log_param` function.
    In the following case, we will be logging in MLflow the number of trees (`ntree`)
    and the number of features randomly sampled (`mtry`) at each split of the algorithm.
    The code is illustrated in the following snippet:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将通过以下代码行`with(mlflow_start_run(), {)`开始一个代码块来启动实验：这将基本上允许我们通过`mlflow_log_param`函数开始记录模型参数。在以下情况下，我们将在
    MLflow 中记录算法每次分割的树的数量（`ntree`）和随机采样的特征数量（`mtry`）。代码如下所示：
- en: '[PRE17]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the next two lines, we instantiate the `random forest` algorithm by specifying
    the `Pima.tr` training dataset and adding the algorithm parameters. We then predict
    using the `Pima.te` test data. The code is illustrated in the following snippet:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在接下来的两行中，我们通过指定`Pima.tr`训练数据集并添加算法参数来实例化`随机森林`算法。然后我们使用`Pima.te`测试数据进行预测。代码如下所示：
- en: '[PRE18]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now focus on calculating metrics around model performance—in this case,
    specificity and sensitivity—through the `confusionMatrix` method available in
    the `caret` package, as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以专注于通过`caret`包中可用的`confusionMatrix`方法计算模型性能周围的指标——在这种情况下，特异性和敏感性——如下所示：
- en: '[PRE19]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can now focus on uploading a confusion matrix plot based on previous metrics.
    The method in R to achieve logging of the model is `mlflow_log_artifact`. Here''s
    the code you''ll need:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以专注于上传基于先前度量的混淆矩阵图。在 R 中，记录模型的方法是 `mlflow_log_artifact`。以下是你需要使用的代码：
- en: '[PRE20]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we can serialize the model function and log it in MLflow so that it
    can be reusable from another R notebook, by using the `crate` method available
    on the `carrier` package. We end up logging the model with `mlflow_log_model`
    and closing the code with a bracket on the last line, as illustrated in the following
    code snippet:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以使用 `carrier` 包上可用的 `crate` 方法将模型函数序列化并记录到 MLflow 中，以便可以从另一个 R 笔记本中重用。我们最终使用
    `mlflow_log_model` 记录模型，并在最后一行代码后关闭括号，如下面的代码片段所示：
- en: '[PRE21]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You are now free to explore the **Experiment** tab on your environment, and
    you should have access to your model log and be able to explore the metrics and
    details of the run, as shown in the following screenshot:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以自由地探索你环境中的 **实验** 选项卡，你应该能够访问你的模型日志并探索运行的指标和细节，如下面的屏幕截图所示：
- en: '![Figure 12.10 – Models automatically available in MLflow'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.10 – MLflow 中自动可用的模型'
- en: '](img/Image0102.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Image0102.jpg]'
- en: Figure 12.10 – Models automatically available in MLflow
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.10 – MLflow 中自动可用的模型
- en: In this section, we explored examples in Java and R, extremely relevant languages
    in the ML ecosystem for both engineers and data scientists. We will now delve
    into extending MLflow functionalities through plugins.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了 Java 和 R 的示例，这两种语言在机器学习生态系统中对工程师和数据科学家都极为相关。现在，我们将深入了解通过插件扩展 MLflow
    功能。
- en: Understanding MLflow plugins
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 MLflow 插件
- en: As an ML engineer, multiple times in your project you can reach the limits of
    a framework. MLflow provides an extension system through its plugin features.
    A plugin architecture allows the extensibility and adaptability of a software
    system.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名机器学习工程师，在你的项目中，你可能会多次达到框架的限制。MLflow 通过其插件功能提供扩展系统。插件架构允许软件系统的可扩展性和适应性。
- en: 'MLflow allows the creation of the following types of plugins:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 允许创建以下类型的插件：
- en: '**Tracking store plugins**: This type of plugin controls and tweaks the store
    that you use to log your experiment metrics in a specific type of data store.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪存储插件**：此类插件控制并调整你用于在特定类型的数据存储中记录实验度量值的存储。'
- en: '`log_artifact` and `download_artifacts`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_artifact` 和 `download_artifacts`。'
- en: '`git_tags` and `repo_uri`, and other relevant elements of the context of your
    system.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git_tags` 和 `repo_uri`，以及你系统环境中的其他相关元素。'
- en: '**Model Registry store**: This feature allows you to customize where your models
    are stored; you can store them—for instance—in a **Secure File Transfer Protocol**
    (**SFTP**) system if this is the only way you might store the models of your production
    infrastructure. This feature can be advantageous in regulated environments where
    only a limited set of services and your Model Registry store need to adapt to
    the situation.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型注册存储**：此功能允许你自定义模型存储的位置；例如，如果你只能通过 **安全文件传输协议**（**SFTP**）系统存储生产基础设施中的模型，你可以使用此功能。在需要适应有限服务集和你的模型注册存储的监管环境中，此功能可能具有优势。'
- en: '**MLflow project deployment**: This type of plugin controls and tweaks how
    you deploy. In a case where your deployment is not for an environment supported
    by MLflow, you can use this feature to specialize the way you deploy.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLflow 项目部署**：此类插件控制并调整你的部署方式。在部署环境不支持 MLflow 的情况下，你可以使用此功能来专门化你的部署方式。'
- en: '**Request header provider**: Enables you to control and add extra values to
    outgoing REST requests from MLflow. One example would be if all **HyperText Transfer
    Protocol** (**HTTP**) requests needed a header key related to a security token
    in your network that integrates with the company **single sign-on** (**SSO**).'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求头提供者**：使你能够控制并向 MLflow 发出的 REST 请求添加额外值。一个例子是，如果所有 **超文本传输协议**（**HTTP**）请求都需要一个与你的网络中集成公司
    **单点登录**（**SSO**）的安全令牌相关的头键。'
- en: '**Project backend**: This gives extensibility to run MLflow in different execution
    environments. For instance, Kubernetes is a backend as well as Sagemaker, so the
    integration of MLflow and the environment where models will be deployed needs
    specific code for each situation.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目后端**：这为在不同的执行环境中运行 MLflow 提供了可扩展性。例如，Kubernetes 和 Sagemaker 都是后端，因此 MLflow
    和模型将部署的环境之间的集成需要为每种情况编写特定的代码。'
- en: 'To create a plugin, you will have to create a Python package that overrides
    a specific module in MLflow. We will develop step by step an example MLflow plugin
    from the official documentation. You can follow along with the following repository
    URL: https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-psystock-plugin.
    To run through the process, follow these next steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个插件，您必须创建一个 Python 包，该包覆盖 MLflow 中的特定模块。我们将根据官方文档逐步开发一个示例 MLflow 插件。您可以按照以下仓库
    URL 跟随：https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-psystock-plugin。要完成这个过程，请按照以下步骤进行：
- en: 'Define your plugin in the `setup.py` file. The `install_requires=["mlflow"]`
    line of code bundles MLflow with your package, being sufficient to install your
    new plugin package, and it will create a changed instance of MLflow. The code
    is illustrated in the following snippet:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `setup.py` 文件中定义您的插件。`install_requires=["mlflow"]` 这行代码将 MLflow 与您的包捆绑在一起，足以安装您的新插件包，并且它将创建一个更改后的
    MLflow 实例。代码如下所示：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Create a package namespace empty file in a folder called `mlflow-psystock-deployment/_init_.py`
    to signal the creation of a package.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为 `mlflow-psystock-deployment/_init_.py` 的文件夹中创建一个空的包命名空间文件，以表示包的创建。
- en: The next step involves overriding the creation of a file with methods that we
    want in our plugin to override the default behavior in MLflow.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步涉及通过我们想要在插件中覆盖以覆盖 MLflow 默认行为的方法来覆盖文件的创建。
- en: 'In our specific case, we will be looking at overriding the `BaseDeploymentClient`
    class in MLflow, which basically means that we need to implement all the methods.
    We will implement a set of dummy methods to illustrate the process, starting with
    the `create_deployment` and `update_deployment` methods, as follows:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的特定情况下，我们将查看覆盖 MLflow 中的 `BaseDeploymentClient` 类，这基本上意味着我们需要实现所有方法。我们将实现一系列虚拟方法来展示这个过程，从
    `create_deployment` 和 `update_deployment` 方法开始，如下所示：
- en: '[PRE23]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We then implement the `list_deployments` and `get_deployments` methods, as
    follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接着实现了 `list_deployments` 和 `get_deployments` 方法，如下所示：
- en: '[PRE24]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `run_local(name, model_uri, flavor=None, config=None)` method is the main
    method that will be executed upon instantiation of this plugin.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`run_local(name, model_uri, flavor=None, config=None)` 方法是当实例化此插件时将被执行的主要方法。'
- en: 'You can now install your plugin on top of **MLflow** by running the following
    command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以通过运行以下命令在 **MLflow** 上安装您的插件：
- en: '[PRE25]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We conclude the book with this section on extending MLflow with new functionalities,
    allowing you as an ML engineer to extend MLflow whenever it makes sense.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过本节关于通过新功能扩展 MLflow 的内容来结束本书，这允许您作为机器学习工程师在合理的时候扩展 MLflow。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we addressed some use cases, with example MLflow pipelines.
    We looked at implementing AutoML in two different scenarios. Where we don't have
    targets, we will need to use anomaly detection as an unsupervised ML technique.
    The use of non-Python-based platforms was addressed, and we concluded with how
    to extend MLflow with plugins.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些用例，并提供了示例 MLflow 管道。我们探讨了在两种不同场景下实现 AutoML，当我们没有目标时，我们需要使用异常检测作为无监督机器学习技术。我们讨论了非
    Python 基础平台的使用，并以如何通过插件扩展 MLflow 作为结论。
- en: At this stage, we have addressed a good breadth and depth of topics in the area
    of ML engineering using MLflow. Your next step is definitely to explore more,
    and leverage on your project the techniques learned in this book.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经使用 MLflow 在机器学习工程领域解决了广泛和深入的话题。您的下一步肯定是进一步探索，并在您的项目中利用本书中学到的技术。
- en: Further reading
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In order to further your knowledge, you can consult the documentation at the
    following links:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步扩展您的知识，您可以查阅以下链接中的文档：
- en: '[https://pycaret.org/about](https://pycaret.org/about)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://pycaret.org/about](https://pycaret.org/about)'
- en: '[https://www.mlflow.org/docs/latest/plugins.html](https://www.mlflow.org/docs/latest/plugins.html)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.mlflow.org/docs/latest/plugins.html](https://www.mlflow.org/docs/latest/plugins.html)'
