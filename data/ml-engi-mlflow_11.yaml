- en: '*Chapter 8*: Training Models with MLflow'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：使用MLflow训练模型'
- en: In this chapter, you will learn about creating production-ready training jobs
    with MLflow. In the bigger scope of things, we will focus on how to move from
    the training jobs in the notebook environment that we looked at in the early chapters
    to a standardized format and blueprint to create training jobs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用MLflow创建生产就绪的训练作业。在更广泛的范围内，我们将关注如何将我们在早期章节中查看的笔记本环境中的训练作业转换为标准格式和蓝图以创建训练作业。
- en: 'Specifically, we will look at the following sections in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将具体查看以下部分：
- en: Creating your training project with MLflow
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MLflow创建您的训练项目。
- en: Implementing the training job
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现训练作业。
- en: Evaluating the model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估模型
- en: Deploying the model in the Model Registry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模型注册表中部署模型。
- en: Creating a Docker image for your training job
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的训练作业创建Docker镜像。
- en: It's time to add to the pyStock **machine learning** (**ML**) platform training
    infrastructure to take **proof-of-concept** models created in the workbench developed
    in [*Chapter 3*](B16783_03_Final_SB_epub.xhtml#_idTextAnchor066), *Your Data Science
    Workbench to a Production Environment*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候向pyStock **机器学习**（**ML**）平台训练基础设施添加内容，将[*第3章*](B16783_03_Final_SB_epub.xhtml#_idTextAnchor066)中开发的工坊中创建的**概念验证**模型转移到生产环境。
- en: In this chapter, you will be developing a training project that runs periodically
    or when triggered by a dataset arrival. The main output of the training project
    is a new model that is generated as output and registered in the Model Registry
    with different details.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将开发一个定期运行或由数据集到达触发的训练项目。训练项目的主要输出是一个新模型，作为输出生成并在模型注册表中注册，具有不同的详细信息。
- en: 'Here is an overview of the training workflow:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是训练工作流程的概述：
- en: '![Figure 8.1 – Training workflow'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 – 训练工作流程'
- en: '](img/image0014.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0014.jpg)'
- en: Figure 8.1 – Training workflow
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 训练工作流程
- en: '*Figure 8.1* describes at a high level the general process, whereby a training
    dataset arrives and a training job kicks in. The training job produces a model
    that is finally evaluated and deployed in the Model Registry. Systems upstream
    are now able to deploy inference **application programming interfaces** (**APIs**)
    or batch jobs with the newly deployed model.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8.1*从高层次描述了一般过程，即训练数据集到达并启动训练作业。训练作业生成一个模型，最终在模型注册表中评估和部署。上游系统现在能够使用新部署的模型部署推理**应用程序编程接口**（**API**）或批量作业。'
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following prerequisites:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要以下先决条件：
- en: The latest version of Docker installed on your machine. If you don't already
    have it installed, please follow the instructions at [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的机器上安装了最新的Docker版本。如果您还没有安装，请按照[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)中的说明操作。
- en: The latest version of Docker Compose installed—please follow the instructions
    at [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装最新的Docker Compose版本——请按照[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)中的说明操作。
- en: Access to Git in the command line, and installed as described at [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令行中访问Git，并按照[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)中的说明进行安装。
- en: Access to a Bash terminal (Linux or Windows).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问Bash终端（Linux或Windows）。
- en: Access to a browser.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问浏览器的权限。
- en: Python 3.5+ installed.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Python 3.5+。
- en: The latest version of your ML library installed locally as described in [*Chapter
    4*](B16783_04_Final_SB_epub.xhtml#_idTextAnchor081), *Experiment Management in
    MLflow*
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如[*第4章*](B16783_04_Final_SB_epub.xhtml#_idTextAnchor081)中所述，您已在本地上安装了最新的ML库，*MLflow中的实验管理*。
- en: Creating your training project with MLflow
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MLflow创建您的训练项目。
- en: You receive a specification from a data scientist based on the **XGBoost** model
    being ready to move from a **proof-of-concept** to a production phase.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您从数据科学家那里收到一份基于**XGBoost**模型准备从**概念验证**阶段过渡到生产阶段的规范。
- en: We can review the original Jupyter notebook from which the model was registered
    initially by the data scientist, which is a starting point to start creating an
    ML engineering pipeline. After initial prototyping and training in the notebook,
    they are ready to move to production.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以回顾数据科学家最初注册模型的原版Jupyter笔记本，这是开始创建ML工程管道的起点。在笔记本中进行初步原型设计和训练后，他们就可以准备将模型投入生产了。
- en: 'Some companies go directly to productionize the notebooks themselves and this
    is definitely a possibility, but it becomes impossible for the following reasons:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司直接将笔记本自身投入生产，这当然是一种可能性，但以下原因使其变得不可能：
- en: It's hard to version notebooks.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制笔记本很困难。
- en: It's hard to unit-test the code.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试代码很困难。
- en: It's unreliable for long-running tests.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于长时间运行的测试来说，它不可靠。
- en: With these three distinct phases, we ensure reproducibility of the training
    data-generation process and visibility and clear separation of the different steps
    of the process.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这三个不同的阶段，我们确保了训练数据生成过程的可重复性，以及过程不同步骤的可见性和清晰的分离。
- en: 'We will start by organizing our MLflow project into steps and creating placeholders
    for each of the components of the pipeline, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先将我们的MLflow项目组织成步骤，并为管道的每个组件创建占位符，如下所示：
- en: 'Start a new folder in your local machine and name this `pystock-training`.
    Add the `MLProject` file, as follows:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的本地机器上创建一个新的文件夹，并将其命名为`pystock-training`。添加`MLProject`文件，如下所示：
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following `conda.yaml` file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`conda.yaml`文件：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can add now a sample `main.py` file to the folder to ensure that the basic
    structure of the project is working, as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以向文件夹中添加一个示例`main.py`文件，以确保项目的基本结构正常工作，如下所示：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Test the basic structure by running the following command:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令测试基本结构：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command will build your project based on the environment created by your
    `conda.yaml` file and run the basic project you just created. It should error
    out, as we need to add the missing files.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将根据您的`conda.yaml`文件创建的环境构建您的项目，并运行您刚刚创建的基本项目。它应该出错，因为我们需要添加缺失的文件。
- en: At this stage, we have the basic blocks of the MLflow project of the data pipeline
    that we will be building in this chapter. You will next fill in the Python file
    to train the data.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经有了本章将要构建的数据管道MLflow项目的基本块。接下来，您将填写用于训练数据的Python文件。
- en: Implementing the training job
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现训练作业
- en: We will use the training data produced in the previous chapter. The assumption
    here is that an independent job populates the data pipeline in a specific folder.
    In the book's GitHub repository, you can look at the data in https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/blob/master/Chapter08/psystock-training/data/training/data.csv.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用上一章生成的训练数据。这里的假设是独立的工作在特定文件夹中填充数据管道。在本书的GitHub仓库中，您可以在https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/blob/master/Chapter08/psystock-training/data/training/data.csv查看数据。
- en: We will now create a `train_model.py` file that will be responsible for loading
    the training data to fit and produce a model. Test predictions will be produced
    and persisted in the environment so that other steps of the workflow can use the
    data to evaluate the model.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个`train_model.py`文件，该文件将负责加载数据以拟合并生成模型。测试预测将被生成并持久化在环境中，以便工作流程的其他步骤可以使用这些数据来评估模型。
- en: 'The file produced in this section is available at the following link:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本节生成的文件可在以下链接找到：
- en: https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/blob/master/Chapter08/psystock-training/train_model.py[:](https://github.com/PacktPublishing/Machine-Learning-Engineering-with-Mlflow/blob/master/chapter_8/psytock-training/train_model.py  )
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/blob/master/Chapter08/psystock-training/train_model.py](https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/blob/master/chapter_8/psytock-training/train_model.py)'
- en: 'We will start by importing the relevant packages. In this case, we will need
    `pandas` to handle the data, `xgboost` to run the training algorithm, and—obviously—m`lflow`
    to track and log the data run. Here is the code you''ll need to do this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先导入相关的包。在这种情况下，我们需要`pandas`来处理数据，`xgboost`来运行训练算法，显然还需要`mlflow`来跟踪和记录数据运行。以下是您需要执行的代码：
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, you should add a function to execute the split of the data relying on
    `train_test_split` from `sklearn`. Our chosen split is 33/67% for testing and
    training data respectively. We specify the `random_state` parameter in order to
    make the process reproducible, as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您应该添加一个函数来执行数据的分割，该函数依赖于`sklearn`中的`train_test_split`。我们选择的分割比例是测试数据和训练数据分别为33/67%。我们指定`random_state`参数以确保过程可重复，如下所示：
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This function returns the train and test dataset and the targets for each dataset.
    We rely on the `xgboost` matrix `xgb.Dmatrix` data format to efficiently load
    the training and testing data and feed the `xgboost.train` method. The code is
    illustrated in the following snippet:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此函数返回训练和测试数据集以及每个数据集的目标。我们依赖于`xgboost`矩阵`xgb.Dmatrix`数据格式来有效地加载训练和测试数据，并馈送给`xgboost.train`方法。代码如下所示：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We also use this moment to produce test predictions using the `model.predict`
    method. Some data transformation is executed to discretize the probability of
    the stock going up or down and transform it into `0` (not going up) or `1` (going
    up), as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也利用这个时刻使用`model.predict`方法生成测试预测。一些数据转换被执行以将股票上涨或下跌的概率离散化，并将其转换为`0`（不会上涨）或`1`（上涨），如下所示：
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As a last step, we will persist the test predictions on the `result` variable.
    We drop the index so that the saved `pandas` DataFrame doesn''t include the index
    when running the `result.to_csv` command, as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后一步，我们将持久化测试预测到`result`变量中。我们删除索引，以便在运行`result.to_csv`命令时，保存的`pandas` DataFrame不包含索引，如下所示：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can look at your MLflow **user interface** (**UI**) by running the following
    command to see the metrics logged:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令查看您的MLflow **用户界面**（**UI**）以查看记录的指标：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should be able to look at your MLflow UI, available to view in the following
    screenshot, where you can see the persisted model and the different model information
    of the just-trained model:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够查看您的MLflow UI，如下面的截图所示，您可以在其中看到持久化的模型和刚刚训练的模型的不同模型信息：
- en: '![Figure 8.2 – Training model'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.2 – 训练模型'
- en: '](img/image0025.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/image0025.jpg]'
- en: Figure 8.2 – Training model
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 训练模型
- en: At this stage, we have our model saved and persisted on the artifacts of our
    MLflow installation. We will next add a new step to our workflow to produce the
    metrics of the model just produced.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经将我们的模型保存并持久化到我们的MLflow安装的工件中。接下来，我们将添加一个新的步骤到我们的工作流程中，以生成刚刚生成的模型的指标。
- en: Evaluating the model
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估模型
- en: We will now move on to collect evaluation metrics for our model, to add to the
    metadata of the model.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将收集模型的评估指标，以添加到模型的元数据中。
- en: 'We will work on the `evaluate_model.py` file. You can follow along by working
    in an empty file or by going to https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/blob/master/Chapter08/psystock-training/evaluate_model.py.
    Proceed as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将处理`evaluate_model.py`文件。您可以通过在一个空文件中工作或访问https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/blob/master/Chapter08/psystock-training/evaluate_model.py来跟随操作。按照以下步骤进行：
- en: 'Import the relevant packages—`pandas` and `mlflow—f`or reading and running
    the steps, respectively. We will rely on importing a selection of model-evaluation
    metrics available in `sklearn` for classification algorithms, as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入相关的包—`pandas`和`mlflow`—分别用于读取和运行步骤。我们将依赖于导入`sklearn`中可用的模型评估指标，用于分类算法，如下所示：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At this stage, we have imported all the functions we need for the metrics we
    need to extract in the next section.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经导入了我们需要的所有函数，以便在下一节中提取所需的指标。
- en: 'Next, you should add a `classification_metrics` function to generate metrics
    based on a `df` parameter. The assumption is that the DataFrame has two columns:
    `y_pred`, which is the target predicted by the training model, and `y_test`, which
    is the target present on the training data file. Here is the code you will need:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您应该添加一个`classification_metrics`函数来根据`df`参数生成指标。假设DataFrame有两个列：`y_pred`，这是训练模型预测的目标，以及`y_test`，这是训练数据文件中存在的目标。以下是您需要的代码：
- en: '[PRE11]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding function produces a `metrics` dictionary based on the predicted
    values and the test predictions.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的函数基于预测值和测试预测值生成一个`metrics`字典。
- en: 'After creating this function that generates the metrics, we need to use `start_run`,
    whereby we basically read the prediction test file and run the metrics. We post
    all the metrics in `mlflow.log_metrics` method to log a dictionary of multiple
    metrics at the same time. The code is illustrated in the following snippet:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建了这个生成指标的函数之后，我们需要使用`start_run`，基本上是读取预测测试文件并运行指标。我们将所有指标通过`mlflow.log_metrics`方法以日志字典的形式同时记录。代码在下面的代码片段中展示：
- en: '[PRE12]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can look again at the MLflow UI, where we can see the different metrics
    just persisted. You can view the output here:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以再次查看MLflow UI，在那里我们可以看到刚刚持久化的不同指标。您可以在以下位置查看输出：
- en: '![Figure 8.3 – Training model metrics persisted'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3 – 持久化的训练模型指标'
- en: '](img/image0035.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0035.jpg)'
- en: Figure 8.3 – Training model metrics persisted
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 持久化的训练模型指标
- en: At this stage, we have a model evaluation for our training job, providing metrics
    and information to model implementers/deployers. We will now move on to the last
    step of the training process, which is to register the model in the MLflow Model
    Registry so that it can be deployed in production.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们对训练作业进行了模型评估，为模型实现者/部署者提供了指标和信息。现在我们将继续到训练过程的最后一步，即在MLflow模型注册表中注册模型，以便它可以部署到生产环境中。
- en: Deploying the model in the Model Registry
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模型注册表中部署模型
- en: Next, you should add the `register_model.py` function to register the model
    in the Model Registry.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您应该将`register_model.py`函数添加到模型注册表中以注册模型。
- en: 'This is as simple as executing the `mlflow.register_model` method with the
    **Uniform Resource Identifier** (**URI**) of the model and the name of the model.
    Basically, a model will be created if it doesn''t already exist. If it''s already
    in the registry, a new version will be added, allowing the deployment tools to
    look at the models and trace the training jobs and metrics. It also allows a decision
    to be made as to whether to promote the model to production or not. The code you''ll
    need is illustrated in the following snippet:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像执行`mlflow.register_model`方法，传入模型的**统一资源标识符**（**URI**）和模型名称。基本上，如果模型不存在，将会创建一个模型。如果它已经在注册表中，将添加一个新的版本，使得部署工具可以查看模型并追踪训练作业和指标。它还允许做出决定，是否将模型推广到生产环境中。所需的代码在下面的代码片段中展示：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the following screenshot, the registered model is presented, and we can
    change state and move into staging or production, depending on our workflow:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，展示了已注册的模型，我们可以根据我们的工作流程更改状态并进入预发布或生产状态：
- en: '![Figure 8.4 – Registered model'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4 – 已注册模型'
- en: '](img/image0045.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0045.jpg)'
- en: Figure 8.4 – Registered model
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 已注册模型
- en: After having registered our model, we will now move on to prepare a Docker image
    of our training job that can be used in a public cloud environment or in a Kubernetes
    cluster.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册了我们的模型之后，我们现在将转向准备一个用于公共云环境或Kubernetes集群的训练作业Docker镜像。
- en: Creating a Docker image for your training job
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的训练作业创建Docker镜像
- en: 'A Docker image is, in many contexts, the most critical deliverable of a model
    developer to a more specialized systems infrastructure team in production for
    a training job. The project is contained in the following folder of the repository:
    https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter08/psystock-training-docker.
    In the following steps, we will produce a ready-to-deploy Docker image of the
    code produced:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，Docker镜像是模型开发者向生产中的更专业系统基础设施团队交付的最关键的成果之一。项目包含在以下存储库的文件夹中：https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter08/psystock-training-docker。在以下步骤中，我们将生成一个可部署的Docker镜像：
- en: 'You need to set up a Docker file in the root folder of the project, as shown
    in the following code snippet:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要在项目的根目录下设置一个Docker文件，如下面的代码片段所示：
- en: '[PRE14]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will start by building and training the image by running the following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先通过运行以下命令来构建和训练镜像：
- en: '[PRE15]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can run your image, specifying your tracking server `$TRACKING_SERVER_URI`
    value to reach [http://host.docker.internal:5000](http://host.docker.internal:5000),
    as illustrated in the following code snippet:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以运行您的镜像，指定您的跟踪服务器`$TRACKING_SERVER_URI`值以到达[http://host.docker.internal:5000](http://host.docker.internal:5000)，如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: At this stage, we have concluded all the steps of our complete training workflow.
    In the next chapter, we will proceed to deploy the different components of the
    platform in production environments, leveraging all the MLflow projects created
    so far.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经完成了完整训练工作流程的所有步骤。在下一章中，我们将继续在生产环境中部署平台的各个组件，利用迄今为止创建的所有MLflow项目。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the concepts and different features in terms
    of using MLflow to create production training processes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了使用MLflow创建生产训练过程的概念和不同功能。
- en: We started by setting up the basic blocks of the MLflow training project and
    followed along throughout the chapter to, in sequence, train a model, evaluate
    a trained model, and register a trained model. We also delved into the creation
    of a ready-to-use image for your training job.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先设置了MLflow训练项目的基本模块，并在本章中依次进行了训练模型、评估训练好的模型和注册训练好的模型。我们还深入探讨了为您的训练任务创建一个现成的图像。
- en: This was an important component of the architecture, and it will allow us to
    build an end-to-end production system for our ML system in production. In the
    next chapter, we will deploy different components and illustrate the deployment
    process of models.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们架构的一个重要组成部分，它将使我们能够为我们的生产ML系统构建一个端到端的生产系统。在下一章中，我们将部署不同的组件，并说明模型的部署过程。
- en: Further reading
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In order to further your knowledge, you can consult the official documentation
    at the following link:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步扩展您的知识，您可以参考以下链接的官方文档：
- en: '[https://www.mlflow.org/docs/latest/projects.html](https://www.mlflow.org/docs/latest/projects.html)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.mlflow.org/docs/latest/projects.html](https://www.mlflow.org/docs/latest/projects.html)'
