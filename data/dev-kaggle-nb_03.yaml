- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Starting Our Travel – Surviving the Titanic Disaster
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始我们的旅行 - 生存泰坦尼克号灾难
- en: In this chapter, we will start our journey around the data world. The first
    dataset we will analyze is from the competition *Titanic - Machine Learning from
    Disaster* (refer *Reference 1* at the end of this chapter for a link to this dataset).
    It is a rather small dataset and, because it is related to a competition, it is
    split between train and test sets.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始我们的数据世界之旅。我们将分析的第一组数据来自比赛 *泰坦尼克号 - 灾难中的机器学习*（在本章末尾的 *参考文献1* 中找到该数据集的链接）。这是一个相当小的数据集，因为它与比赛相关，所以它被分为训练集和测试集。
- en: In this chapter, besides the competition approach, we will introduce our systematic
    approach to exploratory data analysis and apply it to get familiar with the data,
    understand it in more detail, and extract useful insights. We will also provide
    a short introduction to the process of using the results of data analysis to build
    model training pipelines. Before diving into the actual data, it is useful to
    understand the context, and, ideally, define the possible objectives of the analysis.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，除了比赛方法之外，我们还将介绍我们系统化的探索性数据分析方法，并将其应用于熟悉数据、更详细地了解数据以及提取有用见解。我们还将简要介绍使用数据分析结果构建模型训练流程的过程。在深入实际数据之前，了解背景和理想情况下定义分析的可能目标是很有用的。
- en: All the code snapshots and the figures in this chapter are extracted from the
    accompanying notebook, *Titanic - start of a journey around data world* (refer
    *Reference 2*). The notebook is also available in the `Chapter-03` folder of the
    GitHub repository for the book (see *References 3* and *4*).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有的代码快照和图表都是从配套的笔记本中提取的，*泰坦尼克号 - 数据世界之旅的开始*（在本章末尾的 *参考文献2* 中找到笔记本的链接）。该笔记本也位于GitHub仓库的
    *Chapter-03* 文件夹中（见 *参考文献3* 和 *参考文献4*）。
- en: 'In a nutshell, we will do the following in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，在本章中我们将做以下事情：
- en: Find out the story behind the Titanic dataset. We will learn what happened on
    that fateful day in 1912 when the Titanic sank, and we will find out the size
    of the crew, how many passengers were aboard, and how many fatalities there were.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解泰坦尼克号数据集背后的故事。我们将学习1912年那个命运攸关的日子泰坦尼克号沉没时发生了什么，我们将了解船员的人数，有多少乘客在船上，以及有多少人死亡。
- en: Get familiar with the data, explain the meaning of the features, get a first
    view of the data quality, and explore some statistical information about the data.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉数据，解释特征的意义，了解数据质量的第一印象，并探索有关数据的某些统计信息。
- en: 'Continue the data exploration with univariate analysis after we introduce the
    graphical elements used through the analysis: a customized color palette and a
    derived color map.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们介绍通过分析使用的图形元素：定制的调色板和派生的颜色图之后，继续使用单变量分析进行数据探索。
- en: Add more insights into the data using multivariate analysis to capture complex
    interactions between the features.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多元分析添加更多见解，以捕捉特征之间的复杂交互。
- en: Perform a detailed analysis using the recorded passengers’ names, from which
    we will extract multiple features.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用记录的乘客姓名进行详细分析，从中我们将提取多个特征。
- en: Explore the richness of features using an aggregated view of feature variation.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过对特征变化的聚合视图来探索特征的丰富性。
- en: Prepare a baseline model.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备一个基线模型。
- en: A closer look at the Titanic
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仔细看看泰坦尼克号
- en: The Titanic was a British passenger ship that sank on its first voyage in the
    North Atlantic in April 1912\. The tragic event, caused by striking an iceberg,
    resulted in more than 1,500 fatalities (the estimate by US officials was 1,517
    and by the British investigating committee, it was 1,503) from the 2,224 total
    number of crew and passengers. Most of the casualties were part of the crew, followed
    by third-class passengers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 泰坦尼克号是一艘英国客轮，1912年4月在北大西洋的首航中沉没。这场悲剧是由于撞上冰山而引起的，导致2,224名船员和乘客中的1,500多人死亡（美国官员的估计为1,517人，英国调查委员会的估计为1,503人）。大多数遇难者是船员，其次是三等舱乘客。
- en: How was this possible? The Titanic was considered an unsinkable vessel when
    it was built using state-of-the-art technology in the early 20^(th) century. This
    confidence was the recipe for disaster. As we know, it did sink, as the contact
    with the iceberg damaged several water-tight compartments – enough to compromise
    its integrity. The ship was originally designed to carry 48 lifeboats but only
    20 were present on board, and most of those were carrying less than 60% of their
    full capacity when they were lowered into the water.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何发生的？泰坦尼克号在20世纪初使用最先进的技术建造时被认为是一艘永不沉没的船。这种信心正是灾难的配方。正如我们所知，它确实沉没了，因为与冰山的接触损坏了几个水密舱室——足以破坏其完整性。这艘船最初的设计是携带48艘救生艇，但船上只有20艘，而且大多数救生艇在放入水中时容量不足60%。
- en: 'The Titanic was 269 meters in length and had a maximum breadth of 28 meters.
    It had seven decks identified with letters from A to G (A and B were for first-class
    passengers, C was mostly reserved for crew, and D to G were for second- and third-class
    passengers). It also had two additional decks: the boat deck (from where the boats
    were lowered into the water) and the Orlop deck (below the waterline). Although
    third-class and second-class amenities were not as luxurious and comfortable as
    those in first-class, all classes had common leisure facilities, like a library,
    smoking rooms, and even a gymnasium. Passengers could also use open-air or indoor
    promenade areas. The Titanic was advanced in terms of comfort and amenities compared
    to other liners of the era.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 泰坦尼克号的长度为269米，最大宽度为28米。它有七个用字母A到G标识的甲板（A和B是头等舱乘客的，C主要留给船员，D到G是二等和三等舱乘客的）。它还有两个额外的甲板：甲板（救生艇从这里放入水中）和Orlop甲板（在水线下）。尽管三等和二等舱的设施不如头等舱豪华舒适，但所有舱位都有共同的休闲设施，如图书馆、吸烟室，甚至还有健身房。乘客还可以使用露天或室内散步区。与那个时代的其他客轮相比，泰坦尼克号在舒适度和设施方面都更为先进。
- en: The Titanic started its voyage from Southampton and had two other stops scheduled
    – one in Cherbourg, France, and one in Queenstown, Ireland. The passengers were
    shuttled with special trains from London and Paris to Southampton and Cherbourg,
    respectively. The crew on the Titanic consisted of around 885 people for this
    first trip. The majority of the crew were not sailors but stewards, who took care
    of the passengers, firemen, stockers, and engineers, who were in charge of the
    engines of the ship.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 泰坦尼克号从南安普顿起航，并计划了两个其他停靠点——一个在法国的瑟堡，一个在爱尔兰的昆士敦。乘客们分别乘坐从伦敦和巴黎到南安普顿和瑟堡的专用火车。这次首航中，泰坦尼克号上的船员大约有885人。船员中的大多数不是水手，而是服务员，他们照顾乘客，消防员，仓库管理员和工程师，他们负责船上的引擎。
- en: Conducting data inspection
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行数据检查
- en: 'The story of the Titanic is fascinating. For those interested in data exploration,
    the data about the tragedy is also captivating. Let’s start with a short introduction
    to the competition data. The dataset from *Titanic - Machine Learning from Disaster*
    contains three **CSV** (**comma-separated values**) files, as in many Kaggle competitions
    that you will encounter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 泰坦尼克号的传奇故事引人入胜。对于那些对数据探索感兴趣的人来说，关于这场悲剧的数据同样引人入胜。让我们先从对竞赛数据的简要介绍开始。来自 *Titanic
    - Machine Learning from Disaster* 的数据集包含三个 **CSV** （逗号分隔值）文件，正如你将在许多 Kaggle 竞赛中遇到的那样：
- en: '`train.csv`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`train.csv`'
- en: '`test.csv`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.csv`'
- en: '`sample_submission.csv`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample_submission.csv`'
- en: We will start by loading these files into a new notebook. You learned how to
    do this in the previous chapter, in the *Basic capabilities* section. You can
    also create a notebook by forking one that already exists. In our case, we will
    start a new notebook from scratch.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先将这些文件加载到一个新的笔记本中。你已经在上一章的 *基本功能* 部分学习了如何这样做。你也可以通过复制一个已存在的笔记本来创建一个新的笔记本。在我们的情况下，我们将从头开始创建一个新的笔记本。
- en: 'Usually, notebooks start with a cell in which we import packages. We will do
    the same here. In one of the next cells, we would like to read train and test
    data. In general, the CSV files that you need have similar directories as in this
    example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，笔记本从导入包的单元格开始。我们在这里也会这样做。在接下来的一个单元格中，我们希望读取训练数据和测试数据。一般来说，你需要用到的CSV文件与这个例子中的目录相似：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After we load the data, we will manually inspect it, looking at what each column
    contains – that is, samples of data. We will do this for each file in the dataset,
    but mostly, we will focus on the train and test files for now.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们加载数据后，我们将手动检查它，查看每个列包含的内容——也就是说，查看数据样本。我们将对数据集中的每个文件都这样做，但现在我们主要会关注训练和测试文件。
- en: Understanding the data
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解数据
- en: 'In *Figures 3.1* and *3.2*, we get a glimpse of a selection of values. From
    this visual inspection, we can already see some characteristics of the data. Let’s
    try to summarize them. The following columns are common to both train and test
    files:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图3.1*和*图3.2*中，我们可以看到一些值的选取。从这次视觉检查中，我们已能看出一些数据特征。让我们尝试总结它们。以下列在训练文件和测试文件中都是共同的：
- en: '`PassengerId`: A unique identifier for each patient.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`乘客ID（PassengerId）`: 每位乘客的唯一标识符。'
- en: '`Pclass`: The class in which each passenger was traveling. We know from our
    background information that possible values are 1, 2, or 3\. This can be considered
    a categorical data type. Because the order of the class conveys meaning and is
    ordered, we can consider it as ordinal or numerical.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`乘客等级（Pclass）`: 每位乘客所乘坐的等级。我们知道从我们的背景信息来看，可能的值是1、2或3。这可以被视为一个分类数据类型。因为等级的顺序传达了意义并且是有序的，所以我们可以将其视为有序或数值类型。'
- en: '`Name`: This is a text type of field. It is the full name of the passenger,
    with their family name, first name, and, in some cases, their name before marriage,
    as well as a nickname. It also contains their title regarding social class, background,
    profession, or, in some cases, royalty.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`姓名（Name）`: 这是一个文本类型的字段。这是乘客的全名，包括他们的姓氏、名字，在某些情况下，婚前名字以及昵称。它还包含他们的社会阶层、背景、职业或在某些情况下，王室的头衔。'
- en: '`Sex`: This is also a categorical field. We can assume that this was important
    information at the time, considering that they prioritized saving women and children
    first.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`性别（Sex）`: 这也是一个分类字段。考虑到当时他们优先救助妇女和儿童，我们可以假设这是重要的信息。'
- en: '`Age`: This is a numerical field. Also, their age was an important feature
    since children were prioritized for saving.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`年龄`: 这是一个数值字段。此外，他们的年龄是一个重要的特征，因为儿童被优先考虑进行救助。'
- en: '`SibSp`: This field provides the siblings or the spouse of each passenger.
    It is an indicator of the size of the family or group with which the passenger
    was traveling. This is important information since we can safely assume that one
    would not board a lifeboat without their brothers, sisters, or partner.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`兄弟姐妹或配偶数量（SibSp）`: 这个字段提供了每位乘客的兄弟姐妹或配偶信息。它是衡量乘客所旅行家庭或团体规模的一个指标。这是重要信息，因为我们可以安全地假设一个人在没有兄弟姐妹、姐妹或伴侣的情况下不会登上救生艇。'
- en: '`Parch`: This is the number of parents (for child passengers) or children (for
    parent passengers). Considering that parents would wait for all their children
    before boarding a lifeboat, this is also an important feature. Together with `SibSp`,
    `Parch` can be used to calculate the size of the family for each passenger.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`父母数量（Parch）`: 这是儿童乘客的父母数量或成人乘客的儿童数量。考虑到父母会在登船前等待所有孩子，这也是一个重要的特征。与`SibSp`（兄弟姐妹数量）一起，`Parch`可以用来计算每位乘客的家庭规模。'
- en: '`Ticket`: This is a code associated with the ticket. It is an alphanumerical
    field, neither categorical nor numerical.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`船票（Ticket）`: 这是一个与船票相关的代码。它是一个字母数字字段，既不是分类的也不是数值的。'
- en: '`Fare`: This is a numerical field. From the sample we see, we can observe that
    `Fare` values varied considerably (with one order of magnitude from class 3 to
    class 1) but we can also see that some of the passengers in the same class had
    quite different `Fare` values.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`船票价格（Fare）`: 这是一个数值字段。从样本中我们可以观察到，`Fare`值变化很大（从3等舱到1等舱有一个数量级的变化），但我们也可以看到同一舱位的乘客中有些人的`Fare`值相当不同。'
- en: '`Cabin`: This is an alphanumerical field. From the small sample that we see
    in *Figures 3.1* and *3.2*, we can see that some of the values are missing. In
    other cases, there are multiple cabins reserved for the same passenger (presumably
    a well-to-do passenger traveling with their family). The name of a cabin starts
    with a letter (C, D, E, or F). We remember that there are multiple decks on the
    Titanic so we can guess that the letter represents the deck and then that is followed
    by the cabin number on that deck.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`船舱（Cabin）`: 这是一个字母数字字段。从我们在*图3.1*和*图3.2*中看到的小样本中，我们可以看到一些值是缺失的。在其他情况下，同一乘客预订了多个船舱（可能是富裕的乘客带着家人旅行）。船舱的名称以字母开头（C、D、E或F）。我们记得泰坦尼克号有多个甲板，所以我们可以猜测字母代表甲板，然后后面跟着该甲板上的船舱号码。'
- en: '`Embarked`: This is a categorical field. In the sample here, we only see the
    letters C, S, and Q, and we already know that the Titanic started from Southampton
    and had a stop at Cherbourg, France, and one at Queenstown (today, this is called
    Cobh, the port for Cork, Ireland). We can infer that S stands for Southampton
    (the starting port), C stands for Cherbourg, and Q for Queenstown.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Embarked`：这是一个分类字段。在这里的样本中，我们只看到字母C、S和Q，我们已经知道泰坦尼克号从南安普顿出发，在法国的瑟堡停靠，并在昆士敦（今天称为科布，科克港，爱尔兰）停靠。我们可以推断S代表南安普顿（起始港口），C代表瑟堡，Q代表昆士敦。'
- en: The train file contains a `Survived` field as well, which is the target feature.
    This has either a value of `1` or `0`, where `1` means the passenger survived
    and `0` means they sadly didn’t.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 训练文件还包含一个`Survived`字段，这是目标特征。它可以是`1`或`0`的值，其中`1`表示乘客幸存，`0`表示他们不幸没有幸存。
- en: '![](img/B20963_03_01.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_01.png)'
- en: 'Figure 3.1: Sample of the train data file'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1：训练数据文件样本
- en: 'The test file does not include the target feature, as you can see in the following
    sample:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 测试文件不包括目标特征，如以下样本所示：
- en: '![](img/B20963_03_02.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_02.png)'
- en: 'Figure 3.2: Sample of the test data file'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：测试数据文件样本
- en: 'Once we have had a look at the columns in the train and test files, we can
    continue with a few additional checks to find the dimensions of the datasets and
    the feature distribution:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们查看了训练和测试文件中的列，我们就可以继续进行一些额外的检查，以找到数据集的维度和特征分布：
- en: Check the shape of each dataset (`train_df` and `test_df`), using the `shape()`
    function. This will give us the dimension of the train and test files (number
    of rows and columns).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`shape()`函数检查每个数据集（`train_df`和`test_df`）的形状。这将给出训练和测试文件（行数和列数）的维度。
- en: Run the `info()` function for each dataset. This will give us more complex information,
    such as the amount of non-null data per column, and the type of the data.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个数据集运行`info()`函数。这将给出更复杂的信息，例如每列的非空数据量以及数据类型。
- en: Run the `describe()` function for each dataset. This only applies to numerical
    data and will create a statistic on the data distribution, including minimum,
    maximum, and first 25%, 50%, and 75% values, as well as the average value and
    standard deviation.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个数据集运行`describe()`函数。这仅适用于数值数据，并将创建关于数据分布的统计，包括最小值、最大值以及前25%、50%和75%的值，以及平均值和标准差。
- en: The preceding checks give us preliminary information on the data distribution
    for the numerical values in the train and test datasets. We can continue later
    in our analysis with more sophisticated and detailed tools, but for now, you may
    consider these steps a general preliminary approach for investigating any tabular
    dataset that you put your hands on.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的检查为我们提供了关于训练和测试数据集中数值数据分布的初步信息。我们可以在分析中继续使用更复杂和详细的工具，但到目前为止，你可以将这些步骤视为调查你手头任何表格数据集的一般初步方法。
- en: Analyzing the data
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析数据
- en: By evaluating the shape of the dataset, the types of values, the number of null
    values, and the feature distribution, we will form a preliminary image of the
    dataset.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过评估数据集的形状、值类型、空值数量和特征分布，我们将形成一个关于数据集的初步印象。
- en: We can build our own tools for inspecting data statistics. I will introduce
    here three small scripts to get the missing value stats, the unique values, and
    the most frequent values.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以构建自己的工具来检查数据统计。在这里，我将介绍三个小脚本，用于获取缺失值统计、唯一值和最频繁的值。
- en: 'First, the code to retrieve missing data:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检索缺失数据的代码：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, the code to display the most frequent values:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，显示最频繁值的代码：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And finally, the code for unique values:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，唯一值的代码：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the next chapter, we will reuse these functions. On Kaggle, you can do this
    by implementing utility scripts. We will include these functions in a reusable
    utility script that will then be included in other notebooks as well.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重新使用这些函数。在Kaggle上，你可以通过实现实用脚本来实现这一点。我们将将这些函数包含在一个可重用的实用脚本中，然后将其包含在其他笔记本中。
- en: 'In the following figure, we see the result of applying the `missing_data` function
    to the train (*a*) and test (*b*) datasets:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，我们看到将`missing_data`函数应用于训练（*a*）和测试（*b*）数据集的结果：
- en: '![](img/B20963_03_03.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_03.png)'
- en: a
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: a
- en: '![](img/B20963_03_04.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_04.png)'
- en: b
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: b
- en: 'Figure 3.3: Missing values in (a) train and (b) test sets, respectively'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：（a）训练集和（b）测试集中的缺失值，分别
- en: Some of the fields, like `Age` and `Cabin`, show a considerable percentage of
    missing data, both for train and test datasets. From the inspection of the missing
    data percentage, we can also preliminarily evaluate the quality of the data with
    respect to the train-test split. If the percentages of missing values for a certain
    feature are very different in train and test data, we can already suspect that
    the splitting did not capture the overall data distribution. In our case, the
    percentages of missing values have close values for each feature in the train
    and test datasets.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一些字段，如`Age`和`Cabin`，在训练集和测试集中都显示出相当比例的缺失数据。从缺失数据百分比的检查中，我们还可以初步评估数据相对于训练-测试分割的质量。如果某个特征的缺失值百分比在训练集和测试集中差异很大，我们就可以怀疑分割没有捕捉到整体数据分布。在我们的案例中，训练集和测试集中每个特征的缺失值百分比非常接近。
- en: 'In the following figure, we can see the most frequent values for the features
    in the train (*a*) and test (*b*) datasets:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们可以看到训练集（*a*）和测试集（*b*）中特征的频繁值：
- en: '![](img/B20963_03_05.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_05.png)'
- en: a
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: a
- en: '![](img/B20963_03_06.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_06.png)'
- en: b
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: b
- en: 'Figure 3.4: Most frequent values in (a) train and (b) test sets, respectively.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：分别显示（a）训练集和（b）测试集中的最频繁值。
- en: We already can see from the preceding data that most of the people on the Titanic
    were male (and this majority is reflected in both the train and test datasets),
    and most of the passengers and crew embarked in Southampton (`S`). For features
    with more granular values, like `Age`, the most frequent value differs in train
    and test data, although the values with maximum frequency are close (`Age` value
    of `21` in train versus `24` in the test dataset). This hints at the limitations
    of using `Age` directly as a feature in a machine learning model since we can
    already observe that the overall distribution is different between train and test
    data.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的数据中，我们可以看到，泰坦尼克号上大多数人是男性（这种多数在训练集和测试集中都有所体现），大多数乘客和船员在南安普顿（`S`）登船。对于像`Age`这样的更细粒度的特征，训练集和测试集中的最频繁值不同，尽管最大频率的值很接近（训练集中的`Age`值为`21`，而测试数据集中的`Age`值为`24`）。这表明直接使用`Age`作为机器学习模型中的特征存在局限性，因为我们已经观察到训练集和测试集之间的整体分布不同。
- en: 'The following figure shows the results of applying the `unique_values` function
    to obtain the unique values stats for train and test datasets:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了应用`unique_values`函数对训练集和测试集数据集的唯一值统计结果：
- en: '![](img/B20963_03_07.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_07.png)'
- en: a
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: a
- en: '![](img/B20963_03_08.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_08.png)'
- en: b
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: b
- en: 'Figure 3.5: Unique values in (a) train and (b) test sets, respectively'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：分别显示（a）训练集和（b）测试集中的唯一值
- en: As you can see, for the categorical type of fields, all categories present in
    the train dataset are also present in the test dataset. Ideally, we would like
    the same results to show for numerical features such as `SibSp` or `Parch`. However,
    in the case of `Parch`, we can see that the number of unique values is `7` in
    train and `8` in test data.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，对于分类类型的字段，训练集中存在的所有类别也在测试集中存在。理想情况下，我们希望对于`SibSp`或`Parch`等数值特征也能得到相同的结果。然而，在`Parch`的情况下，我们可以看到训练集中的唯一值数量为`7`，而在测试数据中为`8`。
- en: In this section, we started with an initial data inspection to understand the
    dataset features, followed by checking the data quality to see whether we had
    missing values. We also conducted a statistical analysis of the features in both
    train and test datasets. Next in our data exploration, we will perform univariate
    analysis on the categorical and numerical features of the train and test datasets.
    The images with plots of various features provide more information and are easier
    to understand and interpret, even for a non-technical reader.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们首先进行了初步的数据检查，以了解数据集的特征，然后检查数据质量，以查看是否存在缺失值。我们还对训练集和测试集中的特征进行了统计分析。接下来，在我们的数据探索中，我们将对训练集和测试集的分类和数值特征进行单变量分析。包含各种特征绘图图像的图片提供了更多信息，并且更容易理解和解释，即使是对于非技术读者来说也是如此。
- en: Performing univariate analysis
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行单变量分析
- en: Before starting to build our first plots, we will set a unique color scheme
    for the notebook. Ensuring color and style unity across the entire notebook helps
    us to maintain the consistency of the presentation and ensures a well-balanced
    experience for the reader. The notebook will have a consistent presentation and
    the visuals will coherently support the notebook narrative.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建我们的第一个图表之前，我们将为笔记本设置一个独特的配色方案。确保整个笔记本的颜色和风格统一有助于我们保持演示的一致性，并确保读者有一个良好的平衡体验。笔记本将有一个一致的演示，视觉元素将连贯地支持笔记本的叙述。
- en: 'Therefore, we will define the set of colors that we will use throughout the
    notebook in our graphics. We will select a palette that will create a visual identity
    specific to our work. This can be one of the already-defined palettes or color
    sets or we can define our own palette, based on a set of colors chosen to match
    the subject. For this sea-faring (or nautical) related notebook, I chose a set
    of marine colors with several shades of blue. Based on this set of colors, I also
    defined a palette. The code for defining and displaying the palette is:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将定义在整个笔记本中使用的颜色集合。我们将选择一个调色板，以创建我们工作的特定视觉身份。这可以是已经定义的调色板或颜色集合，或者我们可以定义自己的调色板，基于一组选定的颜色以匹配主题。对于这个与航海（或航海）相关的笔记本，我选择了一组带有多种蓝色阴影的海洋颜色。基于这组颜色，我还定义了一个调色板。定义和显示调色板的代码如下：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the following figure, we show the reduced set of colors that compose our
    custom palette. The notebook color scheme uses shades of blue, from a pale clear-sky
    color to a dark ultramarine:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图表中，我们展示了组成我们自定义调色板的颜色集合。笔记本配色方案使用从浅淡的晴空色到深蓝色调的蓝色阴影：
- en: '![Chart  Description automatically generated](img/B20963_03_09.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图表描述自动生成](img/B20963_03_09.png)'
- en: 'Figure 3.6: The notebook color scheme'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：笔记本配色方案
- en: We will define two plotting functions (one for categorical, and one for continuous/numerical
    values) to represent the distribution of one feature on the same image, grouped
    by survival or grouped by the train/test set.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义两个绘图函数（一个用于分类值，另一个用于连续/数值值）来表示同一图像上某个特征的分布，按生存状态或按训练/测试集分组。
- en: 'We will concatenate train and test in a single dataset (and add a new column
    storing the original/source dataset). The functions use two of the most common
    libraries for data plotting: `matplotlib` and `seaborn`. As we will plot these
    graphs for multiple features, it is preferable to define a few plotting functions,
    so that we don’t repeat the code.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把训练数据和测试数据合并到一个数据集中（并添加一个新列来存储原始/源数据集）。这些函数使用了两个最常用的数据绘图库：`matplotlib`和`seaborn`。由于我们将为多个特征绘制这些图表，定义几个绘图函数是更好的选择，这样我们就不需要重复代码。
- en: 'In the first function, we display two sets of values using the option `hue`
    of the `countplot` function from `seaborn`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个函数中，我们使用`seaborn`的`countplot`函数的`hue`选项显示两组值：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the second function, to display feature distribution, we call `histplot`
    from `seaborn` twice – once for each feature:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个函数中，为了显示特征分布，我们两次调用`seaborn`中的`histplot`函数——一次用于每个特征：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To see the complete list of images, go to the book repository and check the
    *Titanic - start of a journey around data world* notebook (*Reference 3*). Alternatively,
    you can access the same content on Kaggle, by following this path: [https://www.kaggle.com/code/gpreda/titanic-start-of-a-journey-around-data-world](https://www.kaggle.com/code/gpreda/titanic-start-of-a-journey-around-data-world)
    (*Reference 2*).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的图像列表，请访问书籍存储库并检查“*泰坦尼克号 - 数据世界之旅的开始*”笔记本（*参考3*）。或者，您可以通过以下路径在Kaggle上访问相同的内容：[https://www.kaggle.com/code/gpreda/titanic-start-of-a-journey-around-data-world](https://www.kaggle.com/code/gpreda/titanic-start-of-a-journey-around-data-world)
    (*参考2*)。
- en: Here, we only show a small selection of images, for only two features – one
    for a categorical value and one for a numerical value. In the notebook, we represent
    the graphs for `Sex`, `Pclass`, `SibSp`, `Parch`, and `Embark`, as well as `Age`
    and `Fare`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们只展示了一小部分图像，仅针对两个特征——一个用于分类值，一个用于数值值。在笔记本中，我们表示了`Sex`、`Pclass`、`SibSp`、`Parch`和`Embark`以及`Age`和`Fare`的图表。
- en: 'We will represent each of these features in two graphs: one shows the distribution
    of the feature for all passengers, grouped by train/test. The other shows, for
    the same feature, the distribution only for train data, and the split between
    `Survived`/`Not Survived`.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用两个图表来表示这些特征中的每一个：一个图表显示了所有乘客的该特征分布，按列车/测试分组。另一个图表显示了相同特征的分布，仅针对训练数据，并显示了`Survived`/`Not
    Survived`之间的分割。
- en: 'We start with `Pclass` (which is a categorical feature), showing the distribution
    of the feature for all passengers, grouped by train/test datasets. Notice in the
    following screenshot, there are three classes, `1`, `2`, and `3`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从`Pclass`（这是一个分类特征）开始，展示了所有乘客的特征分布，按训练/测试数据集分组。注意在下面的截图里，有三个类别，`1`、`2`和`3`：
- en: '![](img/B20963_03_10.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_10.png)'
- en: 'Figure 3.7: Number of passengers per passenger class, grouped by train and
    test'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：按乘客类别分组的乘客数量，按训练和测试分组
- en: 'For the same `Pclass` feature, but only from the train set, we represent the
    data grouped by `Survived`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相同的`Pclass`特征，但仅从训练集中，我们表示按`Survived`分组的数据：
- en: '![](img/B20963_03_11.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_11.png)'
- en: 'Figure 3.8: Number of passengers per passenger class in the train set, grouped
    by Survived'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：训练集中按乘客类别分组的乘客数量，按Survived分组
- en: We follow with `Age` (which is a numerical value). In *Figure 3.9*, we show
    the histogram of `Age` in all the data (train and test), grouped by train/test.
    We are using a histogram here because this feature, although not a continuous
    number (is still discrete), has many values (from the stats we ran, it appears
    that there are at least 88 unique `Age` values), and is, from the point of view
    of our analysis, just like a continuous number.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`Age`（这是一个数值）。在*图3.9*中，我们展示了所有数据（训练和测试）中`Age`的直方图，按训练/测试分组。在这里我们使用直方图，因为这个特征虽然不是一个连续的数字（仍然是离散的），但有许多值（根据我们运行的数据统计，似乎至少有88个独特的`Age`值），并且从我们分析的角度来看，就像一个连续的数字。
- en: '![](img/B20963_03_12.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_12.png)'
- en: 'Figure 3.9: Number of passengers per Age, grouped by train and test'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：按乘客类别分组的乘客数量，按训练和测试分组
- en: '*Figure 3.10* shows the histogram of `Age` in the train set, grouped by survival
    status.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3.10*显示了训练集中`Age`的直方图，按生存状态分组。'
- en: '![](img/B20963_03_13.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_13.png)'
- en: 'Figure 3.10: Number of passengers per Age in the train set, grouped by survival
    status'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10：训练集中按Age分组的乘客数量，按生存状态分组
- en: By simple inspection of these univariate distributions for either categorical
    or continuous (numerical) data, we can already understand some interesting facts
    from the data. For example, in *Figures 3.7* and *3.8*, we can see that the ratio
    between data in the train and test sets is quite similar with respect to the distribution
    in the three classes (`1`, `2`, and `3`). At the same time, from the Survived/Not
    Survived distribution, we can see that while around 60% of first-class passengers
    survived, the split of Survived/Not Survived in second class was around 50-50%,
    while in third class, only around 25% of the passengers survived. Similarly, we
    can extract useful insights from the univariate distributions of `Sex`, `SibSp`
    (siblings or spouses), or `Parch` (number of parents or children).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单检查这些分类或连续（数值）数据的单变量分布，我们已能从数据中理解一些有趣的事实。例如，在*图3.7*和*3.8*中，我们可以看到训练集和测试集中的数据在三个类别（`1`、`2`和`3`）的分布比率相当相似。同时，从Survived/Not
    Survived分布中，我们可以看到虽然大约60%的头等舱乘客幸存，但二等舱的Survived/Not Survived比例大约是50-50%，而在三等舱中，只有大约25%的乘客幸存。同样，我们还可以从`Sex`、`SibSp`（兄弟姐妹或配偶）或`Parch`（父母或孩子的数量）的单变量分布中提取有用的见解。
- en: In some cases, we would like to build new features from existing features –
    in other words, perform feature engineering. Feature engineering involves the
    extraction and transformation of useful information from raw data. One technique
    for feature engineering is to define a new feature as a function of other features.
    We saw that `Parch` and `SibSp` together give information about families that
    were present on the Titanic. By summing up `Parch` and `SibSp` and adding `1`
    (for the actual passenger), for each passenger, we get the size of their family
    onboard the Titanic.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们希望从现有特征中构建新的特征——换句话说，进行特征工程。特征工程涉及从原始数据中提取和转换有用的信息。特征工程的一种技术是将新特征定义为其他特征的函数。我们注意到`Parch`和`SibSp`一起提供了关于在泰坦尼克号上存在的家庭的信息。通过将`Parch`和`SibSp`相加并加`1`（代表实际乘客），对于每个乘客，我们得到他们在泰坦尼克号上的家庭规模。
- en: 'In *Figure 3.11*, we can see the graph for family size, from all passengers,
    grouped by train/test datasets:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图3.11*中，我们可以看到所有乘客的家庭规模图，按训练/测试数据集分组：
- en: '![](img/B20963_03_14.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_14.png)'
- en: 'Figure 3.11: Number of passengers per family size, grouped by train and test'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11：按家庭规模分组的乘客数量，按训练和测试分组
- en: 'In the next figure, we see the graph for train data, for the same family size,
    grouped by Survived/Not Survived:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个图中，我们看到的是按Survived/Not Survived分组，相同家庭规模的训练数据图：
- en: '![](img/B20963_03_15.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_15.png)'
- en: 'Figure 3.12: Number of passengers per family size, grouped by survival status'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12：按家庭规模分组的不同年龄区间的乘客数量
- en: We can observe that prevalent is the number of single passengers (and the large
    number also highlights the high frequency of this type of passenger in third class).
    This number is then followed by families without children and single parents,
    followed by small and large families of up to 8 and even 11 members. As you can
    see, this pattern came from data analysis using an exploratory approach before
    modeling.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到，单身乘客的数量很普遍（而且这个大量也突出了这种乘客在头等舱中的高频率）。然后是家庭成员没有孩子的家庭和单身父母，接着是小型和大型家庭，成员人数最多可达8人甚至11人。正如你所看到的，这种模式来自建模前的数据探索性分析。
- en: If we look then at the survival rate, we can see that single passengers had
    a small survival rate (around 30%) while small families (with 2, 3, or 4 members)
    had a survival rate above 50%. As the size of the family became larger than 4,
    we can see that the survival rate decreased severely, with families with 8 or
    11 members having a zero survival rate.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下生存率，我们可以看到单身乘客的生存率很小（大约30%），而小型家庭（有2、3或4名成员）的生存率超过50%。随着家庭规模的增加超过4人，我们可以看到生存率严重下降，有8人或11名成员的家庭生存率为零。
- en: This might be because they were traveling in cheaper classes (we know that survival
    in third class was inferior to survival in first class) or because they spent
    too much time trying to gather all their family members before heading to the
    lifeboats. We will investigate these details a bit later in this chapter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是因为他们乘坐的是更便宜的舱位（我们知道三等舱的生存率低于头等舱）或者因为他们花费了太多时间试图在前往救生艇之前聚集所有家庭成员。我们将在本章稍后对这些细节进行一些调查。
- en: We can observe that `Age` and `Fare` are distributed values. While it is useful
    to know the exact age of a certain passenger, there is not much value when we
    build a model to include the exact age. Actually, by learning a large variety
    of ages, the model risks overfitting the training data, and its generalization
    will degrade. For analysis and modeling purposes, it makes sense to aggregate
    the age (or fare) in value intervals.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到`年龄`和`票价`是分布值。虽然知道某个乘客的确切年龄是有用的，但在构建包含确切年龄的模型时，其价值并不大。实际上，通过学习各种年龄，模型可能会过度拟合训练数据，其泛化能力将下降。为了分析和建模的目的，将年龄（或票价）聚合到价值区间是有意义的。
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following code block calculates a new feature called `Fare Interval`, where
    the values from `0` to `3` (four classes) are obtained from values of `Fare` between
    `0` and `7.91`, `7.91` and `14.454`, `14.454` and `31`, and above `31`, respectively:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码块计算了一个新的特征，称为`票价区间`，其中`0`到`3`（四个类别）的值分别来自`票价`在`0`到`7.91`、`7.91`到`14.454`、`14.454`到`31`以及高于`31`的值：
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The feature transformations for `Age` and `Fare` described above have the effect
    of regularization. In the following graph, we show the `Age` Intervals for all
    passengers, separated by train and test:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 上文所述的`年龄`和`票价`的特征转换具有正则化的效果。在下图中，我们展示了所有乘客的`年龄`区间，按训练集和测试集分开：
- en: '![](img/B20963_03_16.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_16.png)'
- en: 'Figure 3.13: Number of passengers per Age intervals, grouped by train and test'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13：按训练集和测试集分组的不同年龄区间的乘客数量
- en: 'The following figure shows the distribution of `Age` intervals for Survived
    versus Not Survived passengers:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了生存乘客与非生存乘客的`年龄`区间的分布：
- en: '![](img/B20963_03_17.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_17.png)'
- en: 'Figure 3.14: Number of passengers per Age intervals, grouped by Survived status'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14：按生存状态分组的不同年龄区间的乘客数量
- en: So far, we have analyzed individual features. We merged train and test and represented,
    on the same graph, the data split between train and test. We also showed the train
    data only for one feature, split between Survived and Not Survived, and we visualized
    a few engineered features. In the next section, we will follow by representing
    multiple features on the same graph using multivariate analysis.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经分析了单个特征。我们将训练集和测试集合并，并在同一张图上表示了训练集和测试集之间的数据分割。我们还只显示了一个特征的训练数据，分割为生存和未生存，并可视化了一些工程特征。在下一节中，我们将通过使用多元分析在同一张图上表示多个特征来继续。
- en: Performing multivariate analysis
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行多元分析
- en: We saw how, by using graphs for the distribution of each feature, we can get
    very interesting insights into the data. Then, we experimented with feature engineering
    to get useful, more relevant features. While observing variables separately can
    help us get an initial image of the data distribution, grouping values and looking
    at more than one feature at a time can reveal correlations and more insights into
    how different features interact.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，通过使用每个特征的分布图，我们可以从数据中获得非常有趣的见解。然后，我们通过特征工程来获取有用、更相关的特征。虽然单独观察变量可以帮助我们获得数据分布的初步印象，但分组值并一次观察多个特征可以揭示相关性以及不同特征如何相互作用的更多见解。
- en: Now, we will use various graphics to explore correlations of features while
    we also explore the visualization options. We will continue for now with our initial
    option of using a combination of the `matplotlib` and `seaborn` graphical libraries.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用各种图形来探索特征之间的相关性，同时我们也会探索可视化选项。我们将继续使用我们最初的选项，即结合使用`matplotlib`和`seaborn`图形库。
- en: '*Figure 3.15* shows the number of passengers per Age Interval, grouped by passenger
    class. We can see from this image that in third class, the majority of passengers
    were in the first and second Age interval (that is, between 0–16 and 16–32 years
    old), while in first class, we have the most well-balanced age groups. The most
    balanced age interval between the three classes is the third age interval.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3.15*显示了按乘客等级分组的每个年龄区间的乘客数量。我们可以从这张图片中看到，在第三等级中，大多数乘客处于第一个和第二个年龄区间（即0-16岁和16-32岁之间），而在头等舱，我们拥有最均衡的年龄组。三个等级中最均衡的年龄区间是第三个年龄区间。'
- en: '![](img/B20963_03_18.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_18.png)'
- en: 'Figure 3.15: Number of passengers per Age Interval, grouped by class'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15：按等级分组的每个年龄区间的乘客数量
- en: As we can see in the next graph in *Figure 3.16*, most passengers embarked at
    Southampton (identified by the initial **S**). Also, most of these passengers
    were of a young age, under 32 (age intervals **0** and **1**). For people embarking
    in Cherbourg (identified by the initial **C**), the age groups are more balanced.
    The passengers who embarked in Queensland (identified by the initial **Q**) were
    mostly in the first age group.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图3.16*中下一个图表所示，大多数乘客在南安普顿（以初始**S**标识）登船。这些乘客中的大多数年龄都在32岁以下（年龄区间**0**和**1**）。在瑟堡（以初始**C**标识）登船的人，年龄组更加均衡。在昆士兰州（以初始**Q**标识）登船的乘客大多处于第一个年龄组。
- en: '![](img/B20963_03_19.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_19.png)'
- en: 'Figure 3.16: Number of passengers per Age Interval, grouped by embarked port'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16：按登船港口分组的每个年龄区间的乘客数量
- en: From the following figure, we can see that with increased family size and lower
    passenger class, the likelihood of surviving decreased. The worst survival rate
    was for large families in third class, where almost no one survived. Even for
    small families, being in third class drastically reduced their likelihood of survival.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下图表中，我们可以看到，随着家庭规模的增加和乘客等级的降低，生存的可能性降低。最糟糕的生存率是三等舱大家庭，几乎没有人生还。即使是小家庭，在第三等级中也极大地降低了他们的生存可能性。
- en: '![](img/B20963_03_20.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_03_20.png)'
- en: 'Figure 3.17: Distribution of family size and passenger class (Pclass), grouped
    by Survived status'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17：家庭规模和乘客等级（Pclass）的分布，按生存状态分组
- en: We can also create composed features – for example, we can merge `Sex` and `Pclass`,
    two of the most predictive factors, into one single feature; let’s call it `Sex_Pclass`.
    The following figure shows the distribution of this new feature when we split
    the values based on survival status. Females in first and second class had a survival
    rate above 90%. In third class, females had around a 50% survival rate. Males
    in first and second class had survival rates of around 30% and 20%, respectively.
    Most of the males in third class died.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建组合特征——例如，我们可以将`Sex`和`Pclass`这两个最具预测性的因素合并成一个单一特征；让我们称它为`Sex_Pclass`。以下图表显示了根据生存状态划分值时该新特征的分布。一等和二等舱的女性生存率超过90%。在三等舱，女性的生存率约为50%。一等和二等舱的男性生存率分别约为30%和20%，三等舱的大部分男性都死了。
- en: '![Chart, bar chart  Description automatically generated](img/B20963_03_21.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图表，条形图  自动生成的描述](img/B20963_03_21.png)'
- en: 'Figure 3.18: Distribution composed feature Sex_Pclass, grouped by Survived
    status'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18：按生存状态分组的组合特征Sex_Pclass的分布
- en: After the data quality assessment, we demonstrated how to perform univariate
    analysis. Then, we gave a few examples of feature engineering for numerical data,
    and performed multivariate analysis. Next, we will explore the richness of information
    we can find in the passengers’ names. Let’s see *what is in a name*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据质量评估之后，我们展示了如何进行单变量分析。然后，我们给出了一些数值数据的特征工程示例，并进行了多元分析。接下来，我们将探索乘客姓名中可以找到的信息的丰富性。让我们看看*名字中有什么*。
- en: Extracting meaningful information from passenger names
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从乘客姓名中提取有意义的信息
- en: 'We continue now with our analysis, including analyzing the passengers’ names
    to extract meaningful information. As you will remember from the beginning of
    this chapter, the `Name` column also contains some additional information. After
    our preliminary visual analysis, it became apparent that all names follow a similar
    structure. They begin with a `Family Name`, followed by a comma, then a `Title`
    (short version, followed by a period), then a `Given Name`, and, in cases where
    a new name was acquired through marriage, the previous or `Maiden Name`. Let’s
    process the data to extract this information. The code to extract this information
    will be:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在继续我们的分析，包括分析乘客的姓名以提取有意义的信息。如您从本章开头所记得的，`姓名`列也包含一些附加信息。经过我们的初步视觉分析，很明显，所有姓名都遵循一个类似的结构。它们以`姓氏`开头，后面跟着一个逗号，然后是一个`头衔`（简短版本，后面跟着一个句号），然后是`名字`，在通过婚姻获得新名字的情况下，是之前的或`婚前名`。让我们处理数据以提取这些信息。提取这些信息的代码如下：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you might’ve noticed, we opted to use the `split` function to implement the
    extraction of `Family Name`, `Title`, `Given Name`, and `Maiden Name`. We can
    also use a more compact implementation, with regex.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经注意到的，我们选择使用`split`函数来实现`姓氏`、`头衔`、`名字`和`婚前名`的提取。我们也可以使用更紧凑的实现，使用正则表达式。
- en: 'Let’s inspect the results, by looking first at the distribution of `Title`
    and `Sex` in parallel:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过查看`头衔`和`性别`的分布来检查结果：
- en: '![](img/B20963_03_22.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_22.png)'
- en: 'Figure 3.19: Distribution of Title by Sex'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19：按性别划分的标题分布
- en: We can see that most of the titles are gender-specific, with the most frequent
    being `Miss` (with a `Mlle.` version) and `Mrs.` (with `Mme.` and `Dona.` versions)
    for females, and `Mr.` (and `Ms.` or `Don.` versions) and `Master` for males.
    Some titles are rare, like military (`Capt.`, `Col.`, `Major`, and `Jonkheer`),
    occupational (`Dr.` and `Rev.`), or nobility (`Sir`, `Lady`, and `Countess`).
    `Dr.` is the only title that is used by both genders, and we will take a closer
    look at it a bit later in this chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，大多数头衔都是性别特定的，其中最常见的是女性的`Miss`（带有`Mlle.`版本）和`Mrs.`（带有`Mme.`和`Dona.`版本），以及男性的`Mr.`（和`Ms.`或`Don.`版本）和`Master`。一些头衔很少见，如军事（`Capt.`,
    `Col.`, `Major`和`Jonkheer`）、职业（`Dr.`和`Rev.`）或贵族（`Sir`, `Lady`和`Countess`）。`Dr.`是唯一一个被两种性别使用的头衔，我们将在本章稍后对其进行更详细的探讨。
- en: 'Let’s look now at the distribution of `Title` by `Age Interval`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`头衔`按`年龄段`的分布：
- en: '![](img/B20963_03_23.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_23.png)'
- en: 'Figure 3.20: Distribution of Title by Age Interval'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20：按年龄段划分的标题分布
- en: From this new view, we can see that some of the titles are reserved for certain
    age intervals, while others are distributed across all age intervals. `Master`
    appears to be used only for males under 18 years of age, but `Mr.` is also used
    for this age interval. From what we have seen, the `Master` title was only used
    for male children traveling with their families, whereas males of a young age
    with the title `Mr.` were traveling alone and, because independent already, were
    considered young adults. The title `Miss` doesn’t respect the same pattern, since
    it is attributed equally to female children, young, or unmarried women (but less
    frequently for advanced ages). It is interesting to see that `Dr.` is a title
    well distributed in a wide range of ages.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个新视角来看，我们可以看到一些头衔是为特定年龄段保留的，而其他头衔则分布在所有年龄段。`Master`似乎只用于18岁以下的男性，但`Mr.`也用于这个年龄段。从我们所看到的，`Master`头衔仅用于与家人一起旅行的男性儿童，而年轻的男性头衔为`Mr.`的是独自旅行，因为已经独立，被视为年轻人。`Miss`头衔不遵循相同的模式，因为它同样被赋予女性儿童、年轻或未婚女性（但在较高级别时较少）。有趣的是看到`Dr.`头衔在广泛的年龄段中分布得很好。
- en: Let’s look now at a few of the large families from third class. If we sort the
    data by `Family Name`, `Family Size`, `Ticket` (to keep together those who traveled
    with the same ticket), and `Age`, we will obtain sequences of passengers from
    the same real family. The `Family Name` values with the highest occurrence are
    Andersson (11 entries), Sage (11 entries), Goodwin (8 entries), Asplund (8 entries)
    and Davies (7 entries). We don’t yet know whether they are also from the same
    family or just share the same family name. Let’s look at the data for the passengers
    who share the Andersson family name.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看第三等级中的一些大家庭。如果我们按`Family Name`（姓氏）、`Family Size`（家庭规模）、`Ticket`（车票，以保持同一车票旅行的人在一起）和`Age`（年龄）排序数据，我们将获得来自同一真实家庭的乘客序列。出现频率最高的`Family
    Name`值是安德森（11条记录）、萨格（11条记录）、古德温（Goodwin）（8条记录）、阿斯普伦德（Asplund）（8条记录）和戴维斯（Davies）（7条记录）。我们还不知道他们是否也来自同一个家庭，或者只是共享同一个姓氏。让我们看看共享安德森姓氏的乘客数据。
- en: From *Figure 3.21*, we see that there is one family called Andersson with a
    father called Anders Johan and a mother called Alfrida Konstantia, accompanied
    by their five children (four daughters and one son) with ages between 2 and 11
    years. The married women in the family are registered with their title followed
    by their husband’s name, and their maiden name added within brackets. No one from
    this family traveling in third class survived.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从*图3.21*中，我们看到有一个名叫安德森的家庭，父亲名叫安德斯·约翰（Anders Johan），母亲名叫阿尔弗里达·康斯坦蒂亚（Alfrida Konstantia），他们带着五个孩子（四个女儿和一个儿子）一起旅行，年龄在2到11岁之间。已婚的妇女在家庭中注册时，会先写上她们的头衔，然后是丈夫的名字，并在括号内加上她们的婚前名字。这个家庭中没有人在三等舱中幸存。
- en: '![A screenshot of a computer  Description automatically generated](img/B20963_03_24.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  自动生成的描述](img/B20963_03_24.png)'
- en: 'Figure 3.21: Passengers sharing the Andersson family name'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21：共享安德森姓氏的乘客
- en: Only those who traveled on the same ticket were part of the same family. This
    means that only those traveling with ticket number 347082 were part of the Andersson
    family, while the others were traveling separately. The data seems to not be very
    accurate in their cases since some of them appear to be part of a larger family
    but we cannot find their relatives.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 只有那些持有同一张车票的人才属于同一个家庭。这意味着只有持有车票号码347082的人属于安德森（Andersson）家庭，而其他人则是单独旅行的。他们的数据似乎不太准确，因为其中一些人似乎属于一个更大的家庭，但我们找不到他们的亲戚。
- en: The next largest family is Sage, as we can see from *Figure 3.22*. This was
    an 11-member family (two parents and nine children). We do not know their ages
    (apart from one of the boys’ who was 14.5 years old); we just know their names
    and the fact that there were five boys and four girls. We suppose that three of
    the boys were grown-up since their titles were `Mr.`. We only know that 9 out
    of the 11 did not survive (the other family members, for which **Survived** has
    no assigned value, are part of the test set).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的家庭群体是萨格（Sage），正如我们从*图3.22*中可以看到的那样。这是一个11口之家（两位父母和九个孩子）。我们不知道他们的年龄（除了其中一个男孩，他14.5岁）；我们只知道他们的名字，以及有五个男孩和四个女孩的事实。我们推测其中三个男孩已经成年，因为他们的头衔是`先生`。我们只知道11个人中的9个没有幸存（那些**Survived**没有指定值的其他家庭成员是测试集的一部分）。
- en: '![](img/B20963_03_25.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片B20963_03_25](img/B20963_03_25.png)'
- en: 'Figure 3.22: Passengers sharing the Sage family name'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22：共享萨格姓氏的乘客
- en: 'The stories of these families who were looking for a better life in the New
    World are moving, especially when we realize that, sadly, these large families
    with lots of children didn’t manage to save themselves. We don’t know what the
    decisive factor was: they might have waited too long until they headed for the
    boat deck, hoping to reunite, or maybe they were struggling to keep together on
    their way to the lifeboats. Either way, adding the family size information into
    the model might give us a useful feature to predict survival, since we can see
    that people in larger families had a lower chance of survival.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这些家庭在新世界中寻找更好生活的故事令人感动，尤其是当我们意识到，遗憾的是，这些有很多孩子的大家庭并没有设法自救。我们不知道决定性因素是什么：他们可能等待得太久才上甲板，希望团聚，或者也许他们在前往救生艇的路上努力保持在一起。无论如何，将家庭规模信息添加到模型中可能会给我们一个有用的特征来预测生存，因为我们可以看到，大家庭中的人生存的机会较低。
- en: 'There are also other interesting analyses we can make, with fewer predictive
    values for survival, but which can give us some more insights into the data distribution.
    The following figure shows the `Given Name` distribution (grouped by sex) for
    the overall data:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以进行一些其他有趣的统计分析，这些分析对生存的预测价值较少，但可以给我们提供更多关于数据分布的见解。以下图显示了整体数据的`Given Name`分布（按性别分组）：
- en: '![](img/B20963_03_26.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_26.png)'
- en: 'Figure 3.23: Passengers’ given names (girls/unmarried women and boys/men)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.23：乘客的给定名字（女孩/未婚女性和男孩/男性）
- en: The following figure shows the Family Name distribution overall and according
    to embarking port. We saw that most passengers embarked in Southampton (identified
    with **S**); therefore, the distribution of embarked passengers’ names in this
    port will dominate the overall case. The other two embarking ports were Cherbourg,
    France (identified with **C**) and Queenstown, Ireland (identified with **Q**).
    We can observe the prevalence of ethnic names in various embarkment ports, with
    Scandinavian in Southampton; French, Italian, Greek, and North African in Cherbourg;
    and Irish and Scottish in Queenstown.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了整体姓氏分布以及按启航港口的分布。我们注意到大多数乘客在Southampton（用**S**表示）登船；因此，该港口登船乘客的姓氏分布将主导整体情况。其他两个启航港口是法国的Cherbourg（用**C**表示）和爱尔兰的Queenstown（用**Q**表示）。我们可以观察到各种启航港口中民族名字的普遍性，在南安普顿是斯堪的纳维亚人；在Cherbourg是法国人、意大利人、希腊人和北非人；在Queenstown是爱尔兰人和苏格兰人。
- en: '![](img/B20963_03_27.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_27.png)'
- en: 'Figure 3.24: Family names grouped by embarking port'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24：按启航港口分组的姓氏
- en: In *Figure 3.25*, we see the two passengers sharing cabin **D17**. One of them
    had the title `Dr.` and was also a female. She was traveling with another female
    companion, Mrs. Swift, in first class. Both of them survived.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图3.25*中，我们看到两位共享舱位**D17**的乘客。其中一位有头衔`Dr.`，并且是女性。她与另一位女性同伴，Mrs. Swift，一起头等舱旅行。她们两人都幸存了下来。
- en: We created an engineered feature, `Title`, because Dr. Leader was both a `Mrs.`
    (we know she was married because her maiden name is also mentioned) and a `Dr.`;
    we had to choose which title to assign to her. `Dr.` was a title associated mostly
    with males (with lower survival likelihood) at that time. As a female, she would
    have had a higher survival probability. While that is matter of debate, of course,
    I mention it here just to give you a better image of the depth we can get while
    engineering the candidate features for a predictive model.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个工程特征`Title`，因为Dr. Leader既是`Mrs.`（我们知道她已婚，因为她的婚前名字也被提及）又是`Dr.`；我们必须选择给她分配哪个头衔。`Dr.`在那个时代主要与男性（生存可能性较低）相关联。作为一个女性，她会有更高的生存概率。虽然这当然是一个有争议的问题，但我在这里提到它只是为了给你一个更好的形象，说明我们在为预测模型构建候选特征时可以达到的深度。
- en: '![](img/B20963_03_28.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_03_28.png)'
- en: 'Figure 3.25: Passengers sharing cabin D17 – one of them was a female and had
    the Dr. title'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25：共享舱位D17的乘客 – 其中一位是女性，并且有Dr.头衔
- en: 'After introducing univariate and multivariate analysis and a few types of feature
    engineering, including the processing of names to extract titles, we also performed
    some detailed analysis of large families and some rare cases: very large families
    and passengers with unusual titles. In the next section, we will create a dashboard
    figure with multiple plots, each with univariate or bivariate analysis. We can
    use such complex figures to better capture the complex feature interactions, without
    loading one graph with too many features.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了单变量和多变量分析以及一些类型的特征工程，包括处理名字以提取头衔之后，我们还对大家庭和一些罕见案例进行了详细分析：非常大的家庭和具有不寻常头衔的乘客。在下一节中，我们将创建一个包含多个图表的仪表板图，每个图表都有单变量或双变量分析。我们可以使用这样的复杂图表来更好地捕捉复杂的特征交互，而不会在一个图表中加载过多的特征。
- en: Creating a dashboard showing multiple plots
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建显示多个图表的仪表板
- en: 'We have explored categorical and numerical data, as well as text data. We have
    learned how to extract various features from text data, and we built aggregated
    features from some of the numerical ones. Let’s now build two more features by
    grouping **Title** and **Family Size**. We will create two new features:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探索了分类数据、数值数据和文本数据。我们学习了如何从文本数据中提取各种特征，并从一些数值数据中构建了聚合特征。现在，让我们通过分组**头衔**和**家庭规模**来构建两个更多特征。我们将创建两个新的特征：
- en: '**Titles**: By clustering together similar titles (like `Miss` with `Mlle.`,
    or `Mrs.` and `Mme.`) or rare (like `Dona.`, `Don.`, `Capt.`, `Jonkheer`, `Rev.`,
    and `Countess`) and keeping the most frequent ones – `Mr.`, `Mrs.`, `Master`,
    and `Miss`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**：通过将相似标题（如`Miss`与`Mlle.`，或`Mrs.`和`Mme.`）或罕见的（如`Dona.`、`Don.`、`Capt.`、`Jonkheer`、`Rev.`和`Countess`）聚类在一起，并保留最频繁的几个——`Mr.`、`Mrs.`、`Master`和`Miss`'
- en: '**Family Type**: By creating three clusters from the **Family Size** values
    – **Single** for a family size of 1, **Small** for families made of up to 4 members,
    and **Large** for families with more than 4 members'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**家庭类型**：通过从**家庭大小**值创建三个聚类——**Single**表示家庭大小为1，**Small**表示由最多4名成员组成的家庭，**Large**表示有超过4名成员的家庭'
- en: 'Then, we will represent, on a single graph, several simple or derived features
    that we learned have an important predictive value. We show the passengers’ survival
    rates for `Sex`, Passenger Class (`Pclass`), `Age Interval`, `Fare Interval`,
    `Family Type`, and `Title` (clustered). The graphs also show the percentage that
    the subset (given by both the category and survived status) represents from all
    passengers:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将几个简单或派生特征（我们了解到它们具有重要的预测价值）表示在单个图表上。我们展示了乘客的生存率，包括`Sex`、乘客等级（`Pclass`）、`Age
    Interval`、`Fare Interval`、`Family Type`和`Title`（聚类）。图表还显示了子集（由类别和生存状态共同决定）占所有乘客的百分比：
- en: '![Chart, bar chart  Description automatically generated](img/B20963_03_29.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图表，条形图，自动生成描述](img/B20963_03_29.png)'
- en: 'Figure 3.26: Passenger survival rates for different features (original or derived)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26：不同特征的乘客生存率（原始或派生）
- en: With that, we have performed a step-by-step exploratory data analysis of the
    *Titanic - Machine Learning from Disaster* competition dataset. Now, with the
    knowledge we gathered about data distribution, the relationship between features,
    and the correlation between various features and the target feature (the `Survived`
    field), we will create a baseline model.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经对“泰坦尼克号——灾难中的机器学习”竞赛数据集进行了逐步的探索性数据分析。现在，凭借我们对数据分布、特征之间的关系以及各种特征与目标特征（`Survived`字段）之间的相关性的了解，我们将创建一个基线模型。
- en: Building a baseline model
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建基线模型
- en: As a result of our data analysis, we were able to identify some of the features
    with predictive value. We can now build a model by using this knowledge to select
    relevant features. We will start with a model that will use just two out of the
    many features we investigated. This is called a baseline model and it is used
    as a starting point for the incremental refinement of the solution.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们的数据分析，我们能够识别出一些具有预测价值的特征。现在，我们可以利用这些知识来选择相关特征，构建模型。我们将从一个只使用我们调查的众多特征中的两个特征的模型开始。这被称为基线模型，它被用作解决方案增量优化的起点。
- en: For the baseline model, we chose a `RandomForestClassifier` model. The model
    is simple to use, gives good results with the default parameters, and can be interpreted
    easily, using feature importance.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基线模型，我们选择了`RandomForestClassifier`模型。该模型使用简单，默认参数下就能给出良好的结果，并且可以通过特征重要性轻松解释。
- en: 'Let’s begin with the following code block to implement the model. First, we
    import a few libraries that are needed to prepare the model. Then, we convert
    the categorical data to numerical. We need to do this since the model we chose
    deals with numbers only. The operation of converting the categorical feature values
    to numbers is called label encoding. Then, we split the train dataset into train
    and validation subsets, using an 80-20% split. The model is then fitted using
    the train subset and we use the validation subset to evaluate the trained (fitted)
    model:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下代码块开始实现模型。首先，我们导入一些准备模型所需的库。然后，我们将分类数据转换为数值。我们需要这样做，因为我们选择的模型只处理数字。将分类特征值转换为数字的操作称为标签编码。然后，我们将训练数据集分成训练集和验证集，使用80-20%的分割。然后，使用训练子集对模型进行拟合，并使用验证子集来评估训练（拟合）后的模型：
- en: '[PRE11]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In *Figure 3.27*, we show the `precision`, `recall`, and `f1-score` for the
    validation set (values obtained using the `classification_report` function from
    the `sklearn.metrics` module).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在图3.27中，我们展示了验证集的`precision`、`recall`和`f1-score`（使用`sklearn.metrics`模块中的`classification_report`函数获得）。
- en: '![A screenshot of a computer  Description automatically generated](img/B20963_03_30.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，自动生成描述](img/B20963_03_30.png)'
- en: 'Figure 3.27: Classification report for the validation data for the baseline
    model trained with Sex and Pclass features'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27：使用性别和Pclass特征训练的基线模型的验证数据分类报告
- en: The preceding results obtained with this baseline model are still poor. We will
    have to refine the model using the techniques for model refinement, starting with
    the observations on training and validation errors. Based on these observations,
    we might want to improve the training first before focusing on improving model
    generalization. We might, therefore, opt for adding more features (with predictive
    values), either by selecting from existing features or creating new features via
    feature engineering, performing hyperparameter optimization, choosing a better
    classification algorithm, or combining different algorithms.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此基线模型获得的前置结果仍然很差。我们必须使用模型细化技术来细化模型，从训练和验证错误观察开始。基于这些观察，我们可能想要先改进训练，然后再专注于改进模型泛化。因此，我们可能会选择添加更多具有预测价值的特征（通过选择现有特征或通过特征工程创建新特征），执行超参数优化，选择更好的分类算法，或者结合不同的算法。
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started our journey around the data world on board the Titanic.
    We started with a preliminary statistical analysis of each feature and then continued
    with univariate analysis and feature engineering to create derived or aggregated
    features. We extracted multiple features from text, and we also created complex
    graphs to visualize multiple features at the same time and reveal their predictive
    value. We then learned how to assign a uniform visual identity for our analysis
    by using a custom color map across the notebook.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们乘坐泰坦尼克号开始了在数据世界中的旅程。我们首先对每个特征进行了初步的统计分析，然后继续进行单变量分析和特征工程，以创建派生或聚合特征。我们从文本中提取了多个特征，并且还创建了复杂的图表来同时可视化多个特征并揭示它们的预测价值。然后我们学习了如何通过在整个笔记本中使用自定义颜色图来为我们的分析分配统一的视觉身份。
- en: For some of the features – most notably, those derived from names – we performed
    a deep-dive exploration to learn about the fate of large families on the Titanic
    and about name distribution according to the embarking port. Some of the analysis
    and visualization tools are easily reusable and, in the next chapter, we will
    see how to extract them to be used as utility scripts in other notebooks as well.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些特征——最明显的是，那些从名字中派生出来的特征——我们进行了深入的探索，以了解泰坦尼克号上大家庭的命运以及根据登船港口的名字分布情况。一些分析和可视化工具很容易重用，在下一章中，我们将看到如何提取它们作为实用脚本在其他笔记本中使用。
- en: In the next chapter, we will perform a detailed exploratory data analysis on
    two datasets with geospatial data. For each of the datasets, we will start with
    a data quality assessment, and then continue with data exploration, introducing
    analysis methods, tools, and libraries specific for geographical data analysis.
    We will learn how to manipulate polygon data, and how to merge, fusion, and clip
    sets of geographical data stored as collections of polygons. We will also introduce
    various libraries for the visualization of geospatial data. After performing the
    individual analyses on both datasets, we will combine the information from the
    two datasets to build advanced maps with several layers of information from the
    two datasets.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将对包含地理数据的两个数据集进行详细的数据探索性分析。对于每个数据集，我们将从数据质量评估开始，然后继续进行数据探索，介绍针对地理数据分析的特定分析方法、工具和库。我们将学习如何操作多边形数据，以及如何合并、融合和裁剪存储为多边形集合的地理数据集。我们还将介绍用于地理数据可视化的各种库。在对两个数据集进行单独分析后，我们将结合两个数据集的信息来构建包含来自两个数据集的多层信息的先进地图。
- en: References
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Titanic - Machine Learning from Disaster, Kaggle competition: [https://www.kaggle.com/competitions/titanic](https://www.kaggle.com/competitions/titanic)'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 泰坦尼克号 - 从灾难中学习机器学习，Kaggle 比赛：[https://www.kaggle.com/competitions/titanic](https://www.kaggle.com/competitions/titanic)
- en: 'Gabriel Preda, Titanic – start of a journey around data world, Kaggle notebook:
    [https://www.kaggle.com/code/gpreda/titanic-start-of-a-journey-around-data-world](https://www.kaggle.com/code/gpreda/titanic-start-of-a-journey-around-data-world)'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gabriel Preda，泰坦尼克号 - 数据世界之旅的开始，Kaggle 笔记本：[https://www.kaggle.com/code/gpreda/titanic-start-of-a-journey-around-data-world](https://www.kaggle.com/code/gpreda/titanic-start-of-a-journey-around-data-world)
- en: 'Developing-Kaggle-Notebooks, Packt Publishing GitHub repository: [https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/)'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Developing-Kaggle-Notebooks，Packt Publishing GitHub 仓库：[https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/)
- en: 'Developing-Kaggle-Notebooks, Packt Publishing GitHub repository, Chapter 3:
    [https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/tree/main/Chapter-03](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/tree/main/Chapter-03)'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发-Kaggle 笔记本，Packt 出版 GitHub 仓库，第 3 章：[https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/tree/main/Chapter-03](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/tree/main/Chapter-03)
- en: Join our book’s Discord space
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们书籍的 Discord 空间
- en: 'Join our Discord community to meet like-minded people and learn alongside more
    than 5000 members at:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区，与志同道合的人相聚，并和超过 5000 名成员一起学习，详情请见：
- en: '[https://packt.link/kaggle](https://packt.link/kaggle)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/kaggle](https://packt.link/kaggle)'
- en: '![](img/QR_Code9220780366773140.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code9220780366773140.png)'
