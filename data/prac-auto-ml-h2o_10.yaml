- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Working with Plain Old Java Objects (POJOs)
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与普通旧 Java 对象（POJOs）一起工作
- en: Companies often use a mix of strategies that can deliver services up to the
    expected standards. In the case of services that use **Machine Learning** (**ML**),
    they need to consider how they can quickly and easily build, extract, and deploy
    their models in production without affecting their ongoing service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 公司通常使用多种策略，以满足预期的服务标准。对于使用**机器学习**（**ML**）的服务，他们需要考虑如何快速且容易地在生产中构建、提取和部署他们的模型，而不会影响他们正在进行的业务。
- en: Hence, the portability of trained models is very important. How do you take
    a model object created by your training pipeline built with a certain technology
    and use that in your prediction pipeline, which might be built using a different
    technology? Ideally, the model object should be an object that is self-contained
    and easily distributable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，训练好的模型的便携性非常重要。你是如何将使用某种技术构建的训练管道创建的模型对象用于可能使用不同技术的预测管道呢？理想情况下，模型对象应该是一个自包含且易于分发的对象。
- en: In the world of software engineering, the Java programming language has been
    known to be one of the most widely used platform-independent programming languages.
    When Java compiles a program, it converts it into platform-independent byte code
    that can be interpreted by any machine that has a **Java Virtual Machine** (**JVM**)
    installed in it. And expanding on this feature, you have **Plain Old Java Objects**
    (**POJOs**).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程的世界里，Java 编程语言一直被认为是使用最广泛的平台无关编程语言之一。当 Java 编译程序时，它会将其转换为平台无关的字节码，任何安装了**Java
    虚拟机**（**JVM**）的机器都可以解释这些字节码。在此基础上，你有了**普通旧 Java 对象**（**POJOs**）。
- en: POJOs are ordinary objects that can be run by any Java program, irrespective
    of any framework. This makes POJOs very portable when deployed to different kinds
    of machines. H2O also has provisions to extract trained models in the form of
    POJOs, which can then be used for deployment in production.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: POJOs 是普通对象，任何 Java 程序都可以运行，而不管任何框架。这使得 POJOs 在部署到不同类型的机器时非常便携。H2O 还提供了提取训练模型为
    POJOs 的功能，这些 POJOs 可以用于生产部署。
- en: In this chapter, we shall dive deep into understanding what POJOs are and how
    we can download them after successfully training a model in Python, R, and H2O
    Flow. Then, we’ll learn how to load a POJO into a simple Java program to make
    predictions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨 POJOs 是什么，以及如何在 Python、R 和 H2O Flow 中成功训练模型后下载它们。然后，我们将学习如何将 POJO
    加载到简单的 Java 程序中以进行预测。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Introduction to POJOs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POJOs 简介
- en: Extracting H2O models as POJOs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 H2O 模型提取为 POJOs
- en: Using a H2O model as a POJO
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 H2O 模型作为 POJO
- en: By the end of this chapter, you should be able to extract trained models in
    the form of POJOs using Python, R, or H2O Flow and then load these POJO models
    into your ML program to make predictions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够使用 Python、R 或 H2O Flow 提取训练好的模型，并以 POJOs 的形式加载这些模型到你的机器学习程序中进行预测。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will require the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下内容：
- en: The latest version of your preferred web browser.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您首选网络浏览器的最新版本。
- en: An **Integrated Development Environment** (**IDE**) of your choice.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您选择的**集成开发环境**（**IDE**）。
- en: (Optional) Jupyter Notebook by Project Jupyter ([https://jupyter.org/](https://jupyter.org/))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）Project Jupyter 的 Jupyter Notebook ([https://jupyter.org/](https://jupyter.org/))
- en: All the experiments conducted in this chapter are performed on Jupyter notebooks
    to provide you with better visual examples of outputs. You are free to follow
    along using the same setup or perform the same experiments in environments specific
    to the language you are using. All the code examples for this chapter can be found
    on GitHub at [https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%2010](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%2010).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中进行的所有实验都是在 Jupyter 笔记本上进行的，以提供更好的输出可视化示例。你可以自由地使用相同的设置来跟随，或者在你使用的特定语言环境中执行相同的实验。本章的所有代码示例都可以在
    GitHub 上找到：[https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%2010](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%2010)。
- en: Introduction to POJOs
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POJOs 简介
- en: '**POJO** is a term coined by Martin Fowler, Rebecca Parsons, and Josh Mackenzie
    in September 2000\. It is an ordinary Java object, but what makes it *plain old*
    is not what it should do but rather what it should not do.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**POJO** 是由 Martin Fowler、Rebecca Parsons 和 Josh Mackenzie 在 2000 年 9 月提出的术语。它是一个普通的
    Java 对象，但使其成为“平凡旧”的不是它应该做什么，而是它不应该做什么。'
- en: 'A Java object can be a POJO in the following circumstances:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下情况下，Java 对象可以是 POJO：
- en: The Java object does not extend from any class.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 对象不扩展自任何类。
- en: The Java object does not implement any interfaces.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 对象不实现任何接口。
- en: The Java object does not use any annotations from outside.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 对象不使用任何来自外部的注解。
- en: What these three restrictions lead to is a Java object that is not dependent
    on any other library or object outside of itself and is self-contained d enough
    to perform its logic on its own. You can easily embed POJOs in any Java environment
    due to their portability, and because of Java’s platform independence, they can
    be run on any machine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个限制导致的结果是一个不依赖于任何其他库或自身之外的 Java 对象，并且足够自包含以在其自身上执行其逻辑。由于它们的可移植性，你可以轻松地将 POJO
    嵌入任何 Java 环境，并且由于 Java 的平台独立性，它们可以在任何机器上运行。
- en: H2O can export trained models in the form of POJOs. These POJO models can then
    be deployed and used to make predictions on inbound data. The only dependency
    on using POJO models is the `h2o-genmodel.jar` file. This is a JAR file that is
    needed to compile and run H2O model POJOs. This JAR file is a library that contains
    the base classes and `GenModel`, a helper class to support Java-generated models,
    from which the model POJOs are derived. This same library is also responsible
    for supporting scoring by using the model POJOs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: H2O 可以以 POJO 的形式导出训练好的模型。然后，这些 POJO 模型可以被部署并用于对传入数据进行预测。使用 POJO 模型的唯一依赖是 `h2o-genmodel.jar`
    文件。这是一个必要的 JAR 文件，用于编译和运行 H2O 模型 POJO。这个 JAR 文件是一个库，包含基类和 `GenModel`，一个辅助类，用于支持由
    Java 生成的模型，模型 POJO 从中派生。这个相同的库还负责通过使用模型 POJO 进行评分。
- en: When working with model POJOs in production, you will need the `h2o-genmodel.jar`
    file to compile, deploy, and run your model POJOs. POJOs are simple Java code
    that are not tied to any particular version of H2O. However, it is still recommended
    to use the latest version of `h2o-genmodel.jar` since it can load the current
    version, as well as older versions, of your POJO. You can find detailed documentation
    regarding `h2o-genmodel.jar` at [https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml](https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中使用模型 POJO 时，您需要 `h2o-genmodel.jar` 文件来编译、部署和运行您的模型 POJO。POJO 是简单的 Java
    代码，不绑定到任何特定的 H2O 版本。然而，仍然建议使用 `h2o-genmodel.jar` 的最新版本，因为它可以加载当前版本的 POJO，以及旧版本的
    POJO。您可以在 [https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml](https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml)
    找到有关 `h2o-genmodel.jar` 的详细文档。
- en: Now that we know what POJOs are and how H2O model POJOs work, let’s learn how
    to extract trained H2O models using AutoML as POJOs by using simple examples.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 POJO 是什么以及 H2O 模型 POJO 的工作原理，让我们通过简单的示例学习如何使用 AutoML 将训练好的 H2O 模型提取为
    POJO。
- en: Extracting H2O models as POJOs
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 H2O 模型提取为 POJO
- en: Models trained using H2O’s AutoML can also be extracted as POJOs so that they
    can be deployed to your production systems.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 H2O 的 AutoML 训练的模型也可以提取为 POJO，以便将它们部署到您的生产系统中。
- en: In the following sub-sections, we shall learn how to extract the model POJOs
    using the Python and R programming languages, as well as how we can extract model
    POJOs using H2O Flow.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下子节中，我们将学习如何使用 Python 和 R 编程语言提取模型 POJO，以及如何使用 H2O Flow 提取模型 POJO。
- en: Downloading H2O models as POJOs in Python
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Python 中将 H2O 模型作为 POJO 下载
- en: Let’s see how we can extract H2O models as POJOs using a simple example in Python.
    We shall use the same Iris flower dataset we have been using so far. This dataset
    can be found at [https://archive.ics.uci.edu/ml/datasets/iris](https://archive.ics.uci.edu/ml/datasets/iris).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的 Python 示例来看看如何将 H2O 模型提取为 POJO。我们将使用迄今为止一直在使用的相同的 Iris 花数据集。此数据集可在
    [https://archive.ics.uci.edu/ml/datasets/iris](https://archive.ics.uci.edu/ml/datasets/iris)
    找到。
- en: 'Follow these steps to train models using H2O AutoML in Python. After doing
    this, you will extract the leader model and download it as a POJO:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 Python 中使用 H2O AutoML 训练模型。完成此操作后，您将提取领先模型并将其作为 POJO 下载：
- en: 'Import the `h2o` module and start your H2O server:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `h2o` 模块并启动您的 H2O 服务器：
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Import the dataset by passing the location of the dataset in your system. Execute
    the following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递系统中的数据集位置导入数据集。执行以下命令：
- en: '[PRE1]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Set the feature and label names by executing the following commands:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令设置特征和标签名称：
- en: '[PRE2]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Initialize the H2O AutoML object and set the `max_model` parameter to `10`
    and the `seed` value to `5` by executing the following commands:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令初始化 H2O AutoML 对象并将 `max_model` 参数设置为 `10`，将 `seed` 值设置为 `5`：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Trigger AutoML by passing the training dataset, the feature columns, and the
    label column as the parameters, as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递训练数据集、特征列和标签列作为参数来触发 AutoML，如下所示：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the training has finished, H2O AutoML should have trained a few models
    and ranked them based on a default ranking performance metric on a leaderboard.
    The highest ranking model on the leaderboard is called a *leader* and can be accessed
    directly by using the `aml.leader` command. Using this reference, you can download
    the leader model as a POJO by running the following command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦训练完成，H2O AutoML 应该已经训练了几个模型，并根据默认的排名性能指标在排行榜上对它们进行了排名。排行榜上排名最高的模型被称为 *领导者*，可以通过使用
    `aml.leader` 命令直接访问。使用此引用，您可以通过运行以下命令下载领导者模型作为 POJO：
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This should download a model POJO called `AutoMLModel`, as specified in the
    `jar_name` parameter, to the path specified in the `path` parameter. If the `path`
    parameter is not set, then H2O will print the model POJO’s details on the console
    instead of downloading it as a JAR file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会下载一个名为 `AutoMLModel` 的模型 POJO，如 `jar_name` 参数中指定的，到 `path` 参数中指定的路径。如果未设置
    `path` 参数，则 H2O 将在控制台上打印模型 POJO 的详细信息，而不是将其作为 JAR 文件下载。
- en: You can also view the contents of the POJO by opening the file in any editor.
    The file will contain a single public class that is named after your leader model
    and extends the `GenModel` class, which is a part of `h2o-genmodel.jar`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在任何编辑器中打开文件来查看 POJO 的内容。该文件将包含一个名为您的领导者模型并扩展 `GenModel` 类的公共类，该类是 `h2o-genmodel.jar`
    的一部分。
- en: Now that we know how we can extract a POJO model using Python, let’s see a similar
    example in the R programming language.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何使用 Python 提取 POJO 模型，让我们看看 R 编程语言中的类似示例。
- en: Downloading H2O models as POJOs in R
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 R 中下载 H2O 模型作为 POJO
- en: 'Similar to how we can extract a model from the AutoML leaderboard in Python,
    we can do the same in the R programming language. We shall use the same Iris flower
    dataset in this section. Follow these steps to train models using H2O AutoML and
    then extract the leader model to download it as a POJO:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们可以在 Python 中从 AutoML 排行榜中提取模型的方式类似，我们也可以在 R 编程语言中做到这一点。在本节中，我们将使用相同的 Iris
    花朵数据集。按照以下步骤使用 H2O AutoML 训练模型，然后提取领导者模型以将其作为 POJO 下载：
- en: 'Import the `h2o` module and spin up your H2O server:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `h2o` 模块并启动您的 H2O 服务器：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Import the dataset by passing the location of the dataset in your system. Execute
    the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递系统中的数据集位置导入数据集。执行以下命令：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Set the feature and label names by executing the following commands:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令设置特征和标签名称：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Trigger AutoML by passing the training dataset, the feature columns, and the
    label columns as parameters. Also, set `max_models` to `10` and the `seed` value
    to `5`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递训练数据集、特征列和标签列作为参数来触发 AutoML。同时，将 `max_models` 设置为 `10`，将 `seed` 值设置为 `5`：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once training is finished and you have the leaderboard, you can access the
    leader model using `aml@leaderboard`. We can also download the leader model as
    a POJO by executing the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦训练完成并且您有了排行榜，您可以使用 `aml@leaderboard` 访问领导者模型。我们还可以通过执行以下命令下载领导者模型作为 POJO：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will start downloading the `AutoMLModel` model POJO to your device at the
    specified path.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将开始将 `AutoMLModel` 模型 POJO 下载到您指定的路径上的设备。
- en: Now that we know how we can extract a POJO model in the R programming language,
    let’s see how we can do this in H2O Flow.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何在 R 编程语言中提取 POJO 模型，让我们看看如何在 H2O Flow 中做到这一点。
- en: Downloading H2O models as POJOs in H2O Flow
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 H2O Flow 中下载 H2O 模型作为 POJO
- en: Downloading model POJOs in H2O Flow is very easy. H2O allows models to be downloaded
    as POJOs by simply clicking on a button. In [*Chapter 2*](B17298_02.xhtml#_idTextAnchor038),
    *Working with H2O Flow (H2O’s Web UI)*, in the *Working with Model Training Functions
    in H2O Flow* section, you learned how to access a specific model’s information.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 H2O Flow 中下载模型 POJO 非常简单。H2O 允许通过简单地点击按钮将模型下载为 POJO。在 [*第 2 章*](B17298_02.xhtml#_idTextAnchor038)
    的 *使用 H2O Flow (H2O 的 Web UI)* 部分的 *在 H2O Flow 中使用模型训练函数* 部分，您学习了如何访问特定模型的信息。
- en: 'For every model’s information output in H2O Flow, in the **Actions** subsection,
    you have an interactive button titled **Download POJO**, as shown in the following
    screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在H2O Flow中，每个模型的输出信息在**Actions**子部分中，你都会看到一个名为**Download POJO**的交互式按钮，如下截图所示：
- en: '![Figure 10.1 – Gathering model information with the Download POJO button ](img/B17298_10_001.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 使用“Download POJO”按钮收集模型信息](img/B17298_10_001.jpg)'
- en: Figure 10.1 – Gathering model information with the Download POJO button
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 使用“Download POJO”按钮收集模型信息
- en: You can simply click the **Download POJO** button to download the model as a
    POJO. You can download all the models that have been trained by H2O using this
    interactive button in H2O Flow.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以简单地点击**Download POJO**按钮来下载模型作为POJO。你可以通过在H2O Flow中使用这个交互式按钮下载H2O训练的所有模型。
- en: Now that we have explored how we can download models as POJOs in Python, R,
    and H2O Flow, let’s learn how to use this model POJO to make predictions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了如何在Python、R和H2O Flow中下载模型为POJO，让我们学习如何使用这个模型POJO进行预测。
- en: Using a H2O model as a POJO
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用H2O模型作为POJO
- en: As mentioned in the previous section, a model POJO can be used on any platform
    that has a JVM installed. The only dependency is the `h2o-genmodel.jar` file,
    a JAR file that’s needed to compile and run the model POJO to make predictions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，模型POJO可以在任何安装了JVM的平台中使用。唯一的依赖项是`h2o-genmodel.jar`文件，这是一个JAR文件，用于编译和运行模型POJO以进行预测。
- en: So, let’s complete an experiment where we can use the model POJO along with
    the `h2o-genmodel.jar` file to understand how we can use model POJOs in any environment
    with JVM. We shall write a Java program that imports the `h2o-genmodel.jar` file
    and uses it to load the model POJO into the program. Once the model POJO has been
    loaded, we will use it to make predictions on the sample data.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们完成一个实验，我们可以使用模型POJO和`h2o-genmodel.jar`文件来了解我们如何在任何具有JVM的环境中使用模型POJO。我们将编写一个Java程序，导入`h2o-genmodel.jar`文件，并使用它将模型POJO加载到程序中。一旦模型POJO被加载，我们将使用它对样本数据进行预测。
- en: 'So, let’s start by creating a folder where we can keep the H2O POJO file needed
    for the experiment and then write some code that uses it. Follow these steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先创建一个文件夹，我们可以在这里保存实验所需的H2O POJO文件，然后编写一些使用它的代码。按照以下步骤操作：
- en: 'Open your terminal and create an empty folder by executing the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端，通过执行以下命令创建一个空文件夹：
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, copy your model POJO file to the folder by executing the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过执行以下命令将你的模型POJO文件复制到文件夹中：
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Keep in mind that you may need to mention the name of the model you downloaded,
    as well as the path where you have downloaded your model POJO file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你可能需要提及你下载的模型名称，以及你下载模型POJO文件的路径。
- en: 'Then, you need to download the `h2o-genmodel.jar` file. There are two ways
    you can do this:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要下载`h2o-genmodel.jar`文件。你有两种方法可以做到这一点：
- en: 'You can download the `h2o-genmodel.jar` file from your currently running local
    H2O server by running the following command:'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令从当前运行的本地H2O服务器下载`h2o-genmodel.jar`文件：
- en: '[PRE13]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Keep in mind you will need an actively running H2O server present on `localhost:54321`.
    If your server is running on a different port, then edit the command with the
    appropriate port number.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你需要一个正在运行的H2O服务器，该服务器位于`localhost:54321`。如果你的服务器运行在不同的端口上，请使用适当的端口号编辑命令。
- en: 'The `h2o-genmodel.jar` file is also available as a `pom.xml` file inside its
    `dependencies` tag with, preferably, the latest version:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`h2o-genmodel.jar`文件也作为`pom.xml`文件中的`dependencies`标签的一部分提供，最好是最新版本：'
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The Maven repository for this can be found here: https://mvnrepository.com/artifact/ai.h2o/h2o-genmodel.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Maven仓库可以在这里找到：https://mvnrepository.com/artifact/ai.h2o/h2o-genmodel。
- en: 'Now, let’s create a sample Java program that uses the model POJO and the `h2o-genmodel.jar`
    file to make predictions on random data values. Create a Java program called `main.java`
    by executing the following command in your terminal:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个使用模型POJO和`h2o-genmodel.jar`文件对随机数据值进行预测的样本Java程序。通过在终端中执行以下命令创建一个名为`main.java`的Java程序：
- en: '[PRE15]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This should open the `vim` editor for you to write your program in.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会为你打开`vim`编辑器，以便你可以在其中编写程序。
- en: 'Let’s start writing our Java program:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始编写我们的Java程序：
- en: 'First, import the necessary dependencies, as follows:'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导入必要的依赖项，如下所示：
- en: '[PRE16]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, create the `main` class, as follows:'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建`main`类，如下所示：
- en: '[PRE17]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Inside the `main` class, declare our model POJO’s class name, as follows:'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`类内部，声明我们的模型POJO的类名，如下所示：
- en: '[PRE18]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, create a `main` function inside the `main` class, as follows:'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`main`类内部创建一个`main`函数，如下所示：
- en: '[PRE19]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inside this `main` function, declare the `rawModel` variable as a `GenModel`
    object and initialize it by creating it as an instance of your model POJO by passing
    `modelPOJOClassName`, as follows:'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`main`函数内部，将`rawModel`变量声明为`GenModel`对象，并通过创建一个`modelPOJOClassName`实例来初始化它，如下所示：
- en: '[PRE20]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let’s wrap this `rawModel` object in an `EasyPredictModelWrapper` class.
    This class comes with easy-to-use functions that will make it easy for us to make
    predictions. Add the following code to your file:'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将这个`rawModel`对象包装在`EasyPredictModelWrapper`类中。这个类带有易于使用的函数，这将使我们的预测变得容易。将以下代码添加到你的文件中：
- en: '[PRE21]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now that we have our `modelPOJO` object loaded and wrapped in `EasyPredictModelWrapper`,
    let’s create some sample data for making predictions. Since we are using a model
    trained using the Iris dataset, let’s create a `RowData` that contains `C1`, `C2`,
    `C3`, and `C4` as features and some appropriate values. Add the following code
    to your file:'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经加载了`modelPOJO`对象并将其包装在`EasyPredictModelWrapper`中，让我们创建一些用于预测的样本数据。由于我们使用的是使用Iris数据集训练的模型，让我们创建一个包含`C1`、`C2`、`C3`和`C4`作为特征和一些适当值的`RowData`。将以下代码添加到你的文件中：
- en: '[PRE22]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we need to create a prediction handler object that we can use to store
    the prediction results. Since the Iris dataset is for a multinomial classification
    problem, we will create an appropriate multinomial prediction handler object,
    as follows:'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个预测处理对象，我们可以用它来存储预测结果。由于Iris数据集是用于多项式分类问题，我们将创建一个适当的多元预测处理对象，如下所示：
- en: '[PRE23]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: For different types of problems, you will need to use the appropriate types
    of prediction handler objects. You can find more information about this at https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不同类型的问题，你需要使用适当的预测处理对象类型。你可以在以下链接中找到更多信息：[https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml](https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml)。
- en: 'Now, let’s add some `print` statements so that we can get a clean and easy-to-understand
    output. Add the following `print` statements:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加一些`print`语句，以便我们可以得到干净且易于理解的输出。添加以下`print`语句：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`predictionResultHandler.label` will contain the predicted label value.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`predictionResultHandler.label`将包含预测的标签值。'
- en: 'Let’s also print out the different class probabilities so that we have an idea
    of what probability the label was predicted:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们也打印出不同类别的概率，这样我们就可以了解标签预测的概率是多少：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Finally, as the most important step, make sure all your braces are closed correctly
    and save the file.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，作为最重要的步骤，确保所有的大括号都正确关闭并保存文件。
- en: 'Once your file is ready, just compile the file by executing the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你的文件准备就绪，只需执行以下命令来编译文件：
- en: '[PRE26]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once compilation is successful, execute the compiled file by running the following
    command in your Terminal:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦编译成功，通过在终端运行以下命令来执行编译后的文件：
- en: '[PRE27]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should get the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 10.2 – Prediction results from the H2O model POJO implementation ](img/B17298_10_002.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – H2O模型POJO实现中的预测结果](img/B17298_10_002.jpg)'
- en: Figure 10.2 – Prediction results from the H2O model POJO implementation
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – H2O模型POJO实现中的预测结果
- en: As you can see, using the model POJO is very easy – you just need to create
    the POJO and use it in any regular Java program by implementing the `h2o-genmodel.jar`
    file.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用模型POJO非常简单——你只需要创建POJO并在任何常规Java程序中使用它，通过实现`h2o-genmodel.jar`文件。
- en: Tip
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you plan on using model POJOs in production, then it is highly recommended
    that you understand the `h2o-genmodel.jar` library in detail. This library can
    provide you with lots of features and functionality that can make your deployment
    experience easy. You can find out more about this library here: [https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml](https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划在生产中使用模型POJO，那么深入了解`h2o-genmodel.jar`库是非常推荐的。这个库可以为你提供许多功能和特性，让你的部署体验变得简单。你可以在以下链接中了解更多关于这个库的信息：[https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml](https://docs.h2o.ai/h2o/latest-stable/h2o-genmodel/javadoc/index.xhtml)。
- en: Congratulations! This chapter has helped you understand how to build, extract,
    and deploy model POJOs to make predictions on inbound data. You are now one step
    closer to using H2O in production.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！这一章已经帮助你理解了如何构建、提取和部署模型POJO以对传入数据进行预测。你现在离在生产中使用H2O又近了一步。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started by understanding what the usual problems are when
    working with an ML service in production. We understood how the portability of
    software, as well as ML models, plays an important role in seamless deployments.
    We also understood how Java’s platform independence makes it good for deployments
    and how POJOs play a role in it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先了解了在生产中使用ML服务时通常会遇到的问题。我们理解了软件以及ML模型的可移植性在无缝部署中扮演着重要角色。我们还理解了Java的平台独立性使其适合部署，以及POJO在其中扮演的角色。
- en: Then, we explored what POJOs are and how they are independently functioning
    objects in the Java domain. We also learned that H2O has provisions to extract
    models trained by AutoML in the form of POJOs, which we can use as self-contained
    ML models capable of making predictions.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨了POJO是什么以及它们如何在Java领域中作为独立运作的对象。我们还了解到，H2O提供了提取由AutoML训练的模型的功能，这些模型以POJO的形式存在，我们可以将其用作自包含的ML模型，能够进行预测。
- en: Building on top of this, we learned how to extract ML models in H2O as POJOs
    in Python, R, and H2O Flow. Once we understood how to download H2O ML models as
    POJOs, we learned how to use them to make predictions.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，我们学习了如何在H2O中以Python、R和H2O Flow的形式提取ML模型作为POJO。一旦我们了解了如何下载H2O ML模型作为POJO，我们就学习了如何使用它们进行预测。
- en: First, we understood that we need the `h2o-genmodel.jar` library and that it
    is responsible for interpreting the model POJO in Java. Then, we created an experiment
    where we downloaded the H2O model POJO and `h2o-genmodel.jar` and created a simple
    Java program that uses both of these files to make predictions on some sample
    data; this gave us some practical experience in working with model POJOs.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们了解到我们需要`h2o-genmodel.jar`库，并且它负责在Java中解释模型POJO。然后，我们创建了一个实验，其中我们下载了H2O模型POJO和`h2o-genmodel.jar`，并创建了一个简单的Java程序，该程序使用这两个文件对一些样本数据进行预测；这让我们在处理模型POJO方面获得了一些实践经验。
- en: In the next chapter, we shall explore MOJOs, objects similar to POJOs but with
    some special benefits that can also be used in production.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨MOJO，这些对象类似于POJO，但具有一些特殊的好处，也可以在生产中使用。
