- en: 5\. Classification Techniques
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 分类技术
- en: 'Activity 5.01: Ordinary Least Squares Classifier – Binary Classifier'
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 'Activity 5.01: 普通最小二乘分类器 – 二元分类器'
- en: 'Solution:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Import the required dependencies:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的依赖项：
- en: import struct
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: import struct
- en: import numpy as np
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import gzip
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: import gzip
- en: import urllib.request
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: import urllib.request
- en: import matplotlib.pyplot as plt
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: from array import array
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: from array import array
- en: from sklearn.linear_model import LinearRegression
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.linear_model import LinearRegression
- en: 'Load the MNIST data into memory:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将 MNIST 数据加载到内存中：
- en: 'with gzip.open(''../Datasets/train-images-idx3-ubyte.gz'', ''rb'') as f:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/train-images-idx3-ubyte.gz'', ''rb'') as f:'
- en: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
- en: img = np.array(array("B", f.read())).reshape((size, rows, cols))
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: img = np.array(array("B", f.read())).reshape((size, rows, cols))
- en: 'with gzip.open(''../Datasets/train-labels-idx1-ubyte.gz'', ''rb'') as f:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/train-labels-idx1-ubyte.gz'', ''rb'') as f:'
- en: magic, size = struct.unpack(">II", f.read(8))
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size = struct.unpack(">II", f.read(8))
- en: labels = np.array(array("B", f.read()))
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: labels = np.array(array("B", f.read()))
- en: 'with gzip.open(''../Datasets/t10k-images-idx3-ubyte.gz'', ''rb'') as f:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/t10k-images-idx3-ubyte.gz'', ''rb'') as f:'
- en: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
- en: img_test = np.array(array("B", f.read()))\
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: img_test = np.array(array("B", f.read()))\
- en: .reshape((size, rows, cols))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: .reshape((size, rows, cols))
- en: 'with gzip.open(''../Datasets/t10k-labels-idx1-ubyte.gz'', ''rb'') as f:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/t10k-labels-idx1-ubyte.gz'', ''rb'') as f:'
- en: magic, size = struct.unpack(">II", f.read(8))
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size = struct.unpack(">II", f.read(8))
- en: labels_test = np.array(array("B", f.read()))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: labels_test = np.array(array("B", f.read()))
- en: 'Visualize a sample of the data:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化数据样本：
- en: 'for i in range(10):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: plt.subplot(2, 5, i + 1)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: plt.subplot(2, 5, i + 1)
- en: plt.imshow(img[i], cmap='gray');
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(img[i], cmap='gray');
- en: plt.title(f'{labels[i]}');
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: plt.title(f'{labels[i]}');
- en: plt.axis('off')
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: plt.axis('off')
- en: 'The output will be as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 5.63: Sample data'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.63：样本数据'
- en: '](img/image-HVWAR7CZ.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-HVWAR7CZ.jpg)'
- en: 'Figure 5.63: Sample data'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.63：样本数据
- en: 'Construct a linear classifier model to classify the digits 0 and 1\. The model
    we are going to create is to determine whether the samples are either the digits
    0 or 1\. To do this, we first need to select only those samples:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个线性分类器模型，用于分类数字 0 和 1。我们将要创建的模型是为了判断样本是数字 0 还是数字 1。为了实现这一点，我们首先需要选择仅包含这些样本的数据：
- en: samples_0_1 = np.where((labels == 0) | (labels == 1))[0]
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: samples_0_1 = np.where((labels == 0) | (labels == 1))[0]
- en: images_0_1 = img[samples_0_1]
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: images_0_1 = img[samples_0_1]
- en: labels_0_1 = labels[samples_0_1]
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: labels_0_1 = labels[samples_0_1]
- en: samples_0_1_test = np.where((labels_test == 0) | (labels_test == 1))
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: samples_0_1_test = np.where((labels_test == 0) | (labels_test == 1))
- en: images_0_1_test = img_test[samples_0_1_test]\
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: images_0_1_test = img_test[samples_0_1_test]\
- en: .reshape((-1, rows * cols))
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: .reshape((-1, rows * cols))
- en: labels_0_1_test = labels_test[samples_0_1_test]
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: labels_0_1_test = labels_test[samples_0_1_test]
- en: 'Visualize the selected information. Here''s the code for 0:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化选定的信息。以下是数字 0 的代码：
- en: sample_0 = np.where((labels == 0))[0][0]
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: sample_0 = np.where((labels == 0))[0][0]
- en: plt.imshow(img[sample_0], cmap='gray');
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(img[sample_0], cmap='gray');
- en: 'The output will be as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 5.64: First sample data'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.64：第一个样本数据'
- en: '](img/image-IPZUMLSW.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-IPZUMLSW.jpg)'
- en: 'Figure 5.64: First sample data'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.64：第一个样本数据
- en: 'Here''s the code for 1:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是数字 1 的代码：
- en: sample_1 = np.where((labels == 1))[0][0]
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: sample_1 = np.where((labels == 1))[0][0]
- en: plt.imshow(img[sample_1], cmap='gray');
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(img[sample_1], cmap='gray');
- en: 'The output will be as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 5.65: Second sample data'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.65：第二个样本数据'
- en: '](img/image-ZJV8H2GT.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-ZJV8H2GT.jpg)'
- en: 'Figure 5.65: Second sample data'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.65：第二个样本数据
- en: 'In order to provide the image information to the model, we must first flatten
    the data out so that each image is 1 x 784 pixels in shape:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将图像信息提供给模型，我们必须先将数据展平，使每张图像的形状为 1 x 784 像素：
- en: images_0_1 = images_0_1.reshape((-1, rows * cols))
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: images_0_1 = images_0_1.reshape((-1, rows * cols))
- en: images_0_1.shape
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: images_0_1.shape
- en: 'The output will be as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: (12665, 784)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: (12665, 784)
- en: 'Let''s construct the model; use the LinearRegression API and call the fit function:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建模型；使用 LinearRegression API 并调用 fit 函数：
- en: model = LinearRegression()
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: model = LinearRegression()
- en: model.fit(X=images_0_1, y=labels_0_1)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: model.fit(X=images_0_1, y=labels_0_1)
- en: 'The output will be as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,
- en: normalize=False)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: normalize=False)
- en: 'Determine the training set accuracy:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 确定训练集准确性：
- en: model.score(X=images_0_1, y=labels_0_1)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: model.score(X=images_0_1, y=labels_0_1)
- en: 'The output will be as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '0.9705320567708795'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '0.9705320567708795'
- en: 'Determine the label predictions for each of the training samples, using a threshold
    of 0.5\. Values greater than 0.5 classify as 1, while values less than, or equal
    to, 0.5 classify as 0:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 确定每个训练样本的标签预测值，使用 0.5 的阈值。大于 0.5 的值分类为 1，而小于或等于 0.5 的值分类为 0：
- en: y_pred = model.predict(images_0_1) > 0.5
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = model.predict(images_0_1) > 0.5
- en: y_pred = y_pred.astype(int)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = y_pred.astype(int)
- en: y_pred
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred
- en: 'The output will be as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: array([0, 1, 1, ..., 1, 0, 1])
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: array([0, 1, 1, ..., 1, 0, 1])
- en: 'Compute the classification accuracy of the predicted training values versus
    the ground truth:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 计算预测训练值与实际值的分类准确率：
- en: np.sum(y_pred == labels_0_1) / len(labels_0_1)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: np.sum(y_pred == labels_0_1) / len(labels_0_1)
- en: 'The output will be as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '0.9947887879984209'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '0.9947887879984209'
- en: '10\. Compare the performance against the test set:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 10. 比较在测试集上的性能：
- en: y_pred = model.predict(images_0_1_test) > 0.5
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = model.predict(images_0_1_test) > 0.5
- en: y_pred = y_pred.astype(int)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = y_pred.astype(int)
- en: np.sum(y_pred == labels_0_1_test) / len(labels_0_1_test)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: np.sum(y_pred == labels_0_1_test) / len(labels_0_1_test)
- en: 'The output will be as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '0.9938534278959811'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '0.9938534278959811'
- en: Note
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/3emRZAk.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 https://packt.live/3emRZAk。
- en: You can also run this example online at https://packt.live/37T4bGh. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在 https://packt.live/37T4bGh 上在线运行此示例。必须执行整个笔记本才能获得预期的结果。
- en: 'Activity 5.02: KNN Multiclass Classifier'
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 5.02：KNN 多类别分类器
- en: 'Import the following packages:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 导入以下包：
- en: import struct
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: import struct
- en: import numpy as np
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import gzip
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: import gzip
- en: import urllib.request
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: import urllib.request
- en: import matplotlib.pyplot as plt
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: from array import array
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: from array import array
- en: from sklearn.neighbors import KNeighborsClassifier as KNN
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.neighbors import KNeighborsClassifier as KNN
- en: Load the MNIST data into memory.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将 MNIST 数据加载到内存中。
- en: 'Training images:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 训练图像：
- en: 'with gzip.open(''../Datasets/train-images-idx3-ubyte.gz'', ''rb'') as f:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/train-images-idx3-ubyte.gz'', ''rb'') as f:'
- en: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
- en: img = np.array(array("B", f.read())).reshape((size, rows, cols))
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: img = np.array(array("B", f.read())).reshape((size, rows, cols))
- en: 'Training labels:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 训练标签：
- en: 'with gzip.open(''../Datasets/train-labels-idx1-ubyte.gz'', ''rb'') as f:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/train-labels-idx1-ubyte.gz'', ''rb'') as f:'
- en: magic, size = struct.unpack(">II", f.read(8))
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size = struct.unpack(">II", f.read(8))
- en: labels = np.array(array("B", f.read()))
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: labels = np.array(array("B", f.read()))
- en: 'Test images:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 测试图像：
- en: 'with gzip.open(''../Datasets/t10k-images-idx3-ubyte.gz'', ''rb'') as f:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/t10k-images-idx3-ubyte.gz'', ''rb'') as f:'
- en: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
- en: img_test = np.array(array("B", f.read()))\
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: img_test = np.array(array("B", f.read()))\
- en: .reshape((size, rows, cols))
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: .reshape((size, rows, cols))
- en: 'Test labels:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 测试标签：
- en: 'with gzip.open(''../Datasets/t10k-labels-idx1-ubyte.gz'', ''rb'') as f:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/t10k-labels-idx1-ubyte.gz'', ''rb'') as f:'
- en: magic, size = struct.unpack(">II", f.read(8))
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size = struct.unpack(">II", f.read(8))
- en: labels_test = np.array(array("B", f.read()))
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: labels_test = np.array(array("B", f.read()))
- en: 'Visualize a sample of the data:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化数据样本：
- en: 'for i in range(10):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: plt.subplot(2, 5, i + 1)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: plt.subplot(2, 5, i + 1)
- en: plt.imshow(img[i], cmap='gray');
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(img[i], cmap='gray');
- en: plt.title(f'{labels[i]}');
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: plt.title(f'{labels[i]}');
- en: plt.axis('off')
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: plt.axis('off')
- en: 'The output will be as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 5.66: Sample images'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.66：样本图像'
- en: '](img/image-DA453QKK.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-DA453QKK.jpg)'
- en: 'Figure 5.66: Sample images'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.66：样本图像
- en: 'Construct a KNN classifier with k=3 to classify the MNIST dataset. Again, to
    save processing power, randomly sample 5,000 images for use in training:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 k=3 的 KNN 分类器来分类 MNIST 数据集。同样，为了节省处理能力，随机抽取 5,000 张图像用于训练：
- en: np.random.seed(0)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: np.random.seed(0)
- en: selection = np.random.choice(len(img), 5000)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: selection = np.random.choice(len(img), 5000)
- en: selected_images = img[selection]
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: selected_images = img[selection]
- en: selected_labels = labels[selection]
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: selected_labels = labels[selection]
- en: 'In order to provide the image information to the model, we must first flatten
    the data out so that each image is 1 x 784 pixels in shape:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将图像信息提供给模型，我们必须首先将数据展平，使得每个图像的形状为 1 x 784 像素：
- en: selected_images = selected_images.reshape((-1, rows * cols))
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: selected_images = selected_images.reshape((-1, rows * cols))
- en: selected_images.shape
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: selected_images.shape
- en: 'The output will be as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: (5000, 784)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: (5000, 784)
- en: 'Build the three-neighbor KNN model and fit the data to the model. Note that,
    in this activity, we are providing 784 features or dimensions to the model, not
    just 2:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 构建三邻居 KNN 模型并拟合数据到模型中。请注意，在此活动中，我们为模型提供了 784 个特征或维度，而不仅仅是 2：
- en: model = KNN(n_neighbors=3)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: model = KNN(n_neighbors=3)
- en: model.fit(X=selected_images, y=selected_labels)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: model.fit(X=selected_images, y=selected_labels)
- en: 'The output will be as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
- en: metric_params=None, n_jobs=None, n_neighbors=3, p=2,
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: metric_params=None, n_jobs=None, n_neighbors=3, p=2,
- en: weights='uniform')
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: weights='uniform')
- en: 'Determine the score against the training set:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 确定模型在训练集上的得分：
- en: model.score(X=selected_images, y=selected_labels)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: model.score(X=selected_images, y=selected_labels)
- en: 'The output will be as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '0.9692'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '0.9692'
- en: 'Display the first two predictions for the model against the training data:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 显示模型对训练数据的前两个预测结果：
- en: model.predict(selected_images)[:2]
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: model.predict(selected_images)[:2]
- en: plt.subplot(1, 2, 1)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: plt.subplot(1, 2, 1)
- en: plt.imshow(selected_images[0].reshape((28, 28)), cmap='gray');
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(selected_images[0].reshape((28, 28)), cmap='gray');
- en: plt.axis('off');
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: plt.axis('off');
- en: plt.subplot(1, 2, 2)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: plt.subplot(1, 2, 2)
- en: plt.imshow(selected_images[1].reshape((28, 28)), cmap='gray');
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(selected_images[1].reshape((28, 28)), cmap='gray');
- en: plt.axis('off');
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: plt.axis('off');
- en: 'The output will be as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 5.67: First two values of the test set'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.67：测试集的前两个值'
- en: '](img/image-PFHH0LLF.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-PFHH0LLF.jpg)'
- en: 'Figure 5.67: First two values of the test set'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.67：测试集的前两个值
- en: 'Compare the performance against the test set:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 比较模型在测试集上的表现：
- en: model.score(X=img_test.reshape((-1, rows * cols)), y=labels_test)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: model.score(X=img_test.reshape((-1, rows * cols)), y=labels_test)
- en: 'The output will be as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '0.9376'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '0.9376'
- en: Note
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/313xdlc.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考 https://packt.live/313xdlc。
- en: You can also run this example online at https://packt.live/2Nl6DMo. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 https://packt.live/2Nl6DMo 上在线运行此示例。您必须执行整个 Notebook 才能获得预期结果。
- en: 'Activity 5.03: Binary Classification Using a CART Decision Tree'
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 5.03：使用 CART 决策树进行二分类
- en: 'Solution:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 'Import the required dependencies:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的依赖项：
- en: import struct
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: import struct
- en: import numpy as np
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import pandas as pd
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import gzip
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: import gzip
- en: import urllib.request
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: import urllib.request
- en: import matplotlib.pyplot as plt
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: from array import array
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: from array import array
- en: from sklearn.model_selection import train_test_split
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.model_selection import train_test_split
- en: from sklearn.tree import DecisionTreeClassifier
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.tree import DecisionTreeClassifier
- en: 'Load the MNIST data into memory:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 加载 MNIST 数据到内存：
- en: 'with gzip.open(''../Datasets/train-images-idx3-ubyte.gz'', ''rb'') as f:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/train-images-idx3-ubyte.gz'', ''rb'') as f:'
- en: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
- en: img = np.array(array("B", f.read())).reshape((size, rows, cols))
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: img = np.array(array("B", f.read())).reshape((size, rows, cols))
- en: 'with gzip.open(''../Datasets/train-labels-idx1-ubyte.gz'', ''rb'') as f:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/train-labels-idx1-ubyte.gz'', ''rb'') as f:'
- en: magic, size = struct.unpack(">II", f.read(8))
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size = struct.unpack(">II", f.read(8))
- en: labels = np.array(array("B", f.read()))
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: labels = np.array(array("B", f.read()))
- en: 'with gzip.open(''../Datasets/t10k-images-idx3-ubyte.gz'', ''rb'') as f:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/t10k-images-idx3-ubyte.gz'', ''rb'') as f:'
- en: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size, rows, cols = struct.unpack(">IIII", f.read(16))
- en: img_test = np.array(array("B", f.read()))\
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: img_test = np.array(array("B", f.read()))\
- en: .reshape((size, rows, cols))
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: .reshape((size, rows, cols))
- en: 'with gzip.open(''../Datasets/t10k-labels-idx1-ubyte.gz'', ''rb'') as f:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'with gzip.open(''../Datasets/t10k-labels-idx1-ubyte.gz'', ''rb'') as f:'
- en: magic, size = struct.unpack(">II", f.read(8))
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: magic, size = struct.unpack(">II", f.read(8))
- en: labels_test = np.array(array("B", f.read()))
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: labels_test = np.array(array("B", f.read()))
- en: 'Visualize a sample of the data:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化数据的一个样本：
- en: 'for i in range(10):'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10):'
- en: plt.subplot(2, 5, i + 1)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: plt.subplot(2, 5, i + 1)
- en: plt.imshow(img[i], cmap='gray');
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(img[i], cmap='gray');
- en: plt.title(f'{labels[i]}');
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: plt.title(f'{labels[i]}');
- en: plt.axis('off')
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: plt.axis('off')
- en: 'The output will be as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 5.68: Sample data'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.68：样本数据'
- en: '](img/image-HVWAR7CZ.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-HVWAR7CZ.jpg)'
- en: 'Figure 5.68: Sample data'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.68：样本数据
- en: 'Construct a linear classifier model to classify the digits 0 and 1\. The model
    we are going to create is to determine whether the samples are either the digits
    0 or 1\. To do this, we first need to select only those samples:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个线性分类器模型来分类数字 0 和 1。我们将要创建的模型是确定样本是否为数字 0 或 1。为此，我们首先需要仅选择这些样本：
- en: samples_0_1 = np.where((labels == 0) | (labels == 1))[0]
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: samples_0_1 = np.where((labels == 0) | (labels == 1))[0]
- en: images_0_1 = img[samples_0_1]
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: images_0_1 = img[samples_0_1]
- en: labels_0_1 = labels[samples_0_1]
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: labels_0_1 = labels[samples_0_1]
- en: samples_0_1_test = np.where((labels_test == 0) | (labels_test == 1))
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: samples_0_1_test = np.where((labels_test == 0) | (labels_test == 1))
- en: images_0_1_test = img_test[samples_0_1_test]\
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: images_0_1_test = img_test[samples_0_1_test]\
- en: .reshape((-1, rows * cols))
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: .reshape((-1, rows * cols))
- en: labels_0_1_test = labels_test[samples_0_1_test]
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: labels_0_1_test = labels_test[samples_0_1_test]
- en: 'Visualize the selected information. Here''s the code for 0:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化选定的信息。以下是 0 的代码：
- en: sample_0 = np.where((labels == 0))[0][0]
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: sample_0 = np.where((labels == 0))[0][0]
- en: plt.imshow(img[sample_0], cmap='gray');
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(img[sample_0], cmap='gray');
- en: 'The output will be as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 5.69: First sample data'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.69：第一组样本数据'
- en: '](img/image-CC4BKBHF.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-CC4BKBHF.jpg)'
- en: 'Figure 5.69: First sample data'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.69：第一组样本数据
- en: 'Here''s the code for 1:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 1 的代码：
- en: sample_1 = np.where((labels == 1))[0][0]
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: sample_1 = np.where((labels == 1))[0][0]
- en: plt.imshow(img[sample_1], cmap='gray');
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: plt.imshow(img[sample_1], cmap='gray');
- en: 'The output will be as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 5.70: Second sample data'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.70：第二组样本数据'
- en: '](img/image-0WOP89CS.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-0WOP89CS.jpg)'
- en: 'Figure 5.70: Second sample data'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.70：第二组样本数据
- en: 'In order to provide the image information to the model, we must first flatten
    the data out so that each image is 1 x 784 pixels in shape:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将图像信息提供给模型，我们必须先将数据展平，使得每个图像的形状为 1 x 784 像素：
- en: images_0_1 = images_0_1.reshape((-1, rows * cols))
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: images_0_1 = images_0_1.reshape((-1, rows * cols))
- en: images_0_1.shape
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: images_0_1.shape
- en: 'The output will be as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: (12665, 784)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: (12665, 784)
- en: 'Let''s construct the model; use the DecisionTreeClassifier API and call the
    fit function:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建模型；使用 DecisionTreeClassifier API 并调用 fit 函数：
- en: model = DecisionTreeClassifier(random_state=123)
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: model = DecisionTreeClassifier(random_state=123)
- en: model = model.fit(X=images_0_1, y=labels_0_1)
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: model = model.fit(X=images_0_1, y=labels_0_1)
- en: model
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: model
- en: 'The output will be as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,
- en: max_features=None, max_leaf_nodes=None,
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: max_features=None, max_leaf_nodes=None,
- en: min_impurity_decrease=0.0, min_impurity_split=None,
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: min_impurity_decrease=0.0, min_impurity_split=None,
- en: min_samples_leaf=1, min_samples_split=2,
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: min_samples_leaf=1, min_samples_split=2,
- en: min_weight_fraction_leaf=0.0, presort=False,
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: min_weight_fraction_leaf=0.0, presort=False,
- en: random_state=None, splitter='best')
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: random_state=None, splitter='best')
- en: 'Determine the training set accuracy:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 确定训练集的准确率：
- en: model.score(X=images_0_1, y=labels_0_1)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: model.score(X=images_0_1, y=labels_0_1)
- en: 'The output will be as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '1.0'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '1.0'
- en: 'Determine the label predictions for each of the training samples, using a threshold
    of 0.5\. Values greater than 0.5 classify as 1, values less than or equal to 0.5,
    classify as 0:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 0.5 的阈值来确定每个训练样本的标签预测值。大于 0.5 的值分类为 1，小于或等于 0.5 的值分类为 0：
- en: y_pred = model.predict(images_0_1) > 0.5
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = model.predict(images_0_1) > 0.5
- en: y_pred = y_pred.astype(int)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = y_pred.astype(int)
- en: y_pred
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred
- en: 'Compute the classification accuracy of the predicted training values versus
    the ground truth:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 计算预测的训练值与实际值的分类准确率：
- en: np.sum(y_pred == labels_0_1) / len(labels_0_1)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: np.sum(y_pred == labels_0_1) / len(labels_0_1)
- en: 'Compare the performance against the test set:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 与测试集的表现进行比较：
- en: y_pred = model.predict(images_0_1_test) > 0.5
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = model.predict(images_0_1_test) > 0.5
- en: y_pred = y_pred.astype(int)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: y_pred = y_pred.astype(int)
- en: np.sum(y_pred == labels_0_1_test) / len(labels_0_1_test)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: np.sum(y_pred == labels_0_1_test) / len(labels_0_1_test)
- en: 'The output will be as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '0.9962174940898345'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '0.9962174940898345'
- en: Note
  id: totrans-258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/3hNUJbT.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 若要访问此特定部分的源代码，请参阅 https://packt.live/3hNUJbT。
- en: You can also run this example online at https://packt.live/2Cq5W25\. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在线运行此示例，网址：https://packt.live/2Cq5W25。您必须执行整个 Notebook 才能获得期望的结果。
- en: 'Activity 5.04: Breast Cancer Diagnosis Classification Using Artificial Neural
    Networks'
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 5.04：使用人工神经网络进行乳腺癌诊断分类
- en: 'Import the required packages. For this activity, we will require the pandas
    package for loading the data, the matplotlib package for plotting, and scikit-learn
    for creating the neural network model, as well as to split the dataset into training
    and test sets. Import all the required packages and relevant modules for these
    tasks:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的包。对于这个活动，我们将需要 pandas 包来加载数据，matplotlib 包用于绘图，scikit-learn 用于创建神经网络模型，以及将数据集分割为训练集和测试集。导入所有必要的包和相关模块以完成这些任务：
- en: import pandas as pd
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import matplotlib.pyplot as plt
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 导入matplotlib.pyplot
- en: from sklearn.neural_network import MLPClassifier
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 来自sklearn.neural_network的MLPClassifier
- en: from sklearn.model_selection import train_test_split
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 来自sklearn.model_selection的train_test_split
- en: from sklearn import preprocessing
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 来自sklearn的预处理
- en: 'Load the Breast Cancer Diagnosis dataset using pandas and examine the first
    five rows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas加载乳腺癌诊断数据集并检查前五行：
- en: df = pd.read_csv('../Datasets/breast-cancer-data.csv')
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: df = pd.read_csv('../Datasets/breast-cancer-data.csv')
- en: df.head()
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: df.head()
- en: 'The output will be as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 5.71: First five rows of the breast cancer dataset'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.71：乳腺癌数据集的前五行'
- en: '](img/image-D4G2QEWK.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-D4G2QEWK.jpg)'
- en: 'Figure 5.71: First five rows of the breast cancer dataset'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.71：乳腺癌数据集的前五行
- en: 'Additionally, dissect the dataset into input (X) and output (y) variables:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，拆分数据集为输入（X）和输出（y）变量：
- en: X, y = df[[c for c in df.columns if c != 'diagnosis']], df.diagnosis
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: X, y = df[[c for c in df.columns if c != 'diagnosis']], df.diagnosis
- en: 'The next step is feature engineering. Different columns of this dataset have
    different scales of magnitude; hence, before constructing and training a neural
    network model, we normalize the dataset. For this, we use the MinMaxScaler API
    from sklearn, which normalizes each column''s values between 0 and 1, as discussed
    in the Logistic Regression section of this chapter (see Exercise 5.03,Logistic
    Regression – Multiclass Classifier): https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是特征工程。该数据集的不同列具有不同的量级；因此，在构建和训练神经网络模型之前，我们对数据集进行归一化。为此，我们使用来自sklearn的MinMaxScaler
    API，它将每一列的值归一化到0和1之间，正如本章的逻辑回归部分所讨论的那样（请参阅练习5.03，逻辑回归–多类分类器）：https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html：
- en: 'X_array = X.values #returns a numpy array'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 'X_array = X.values # 返回一个numpy数组'
- en: min_max_scaler = preprocessing.MinMaxScaler()
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: min_max_scaler = preprocessing.MinMaxScaler()
- en: X_array_scaled = min_max_scaler.fit_transform(X_array)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: X_array_scaled = min_max_scaler.fit_transform(X_array)
- en: X = pd.DataFrame(X_array_scaled, columns=X.columns)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: X = pd.DataFrame(X_array_scaled, columns=X.columns)
- en: 'Examine the first five rows of the normalized dataset:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 检查归一化数据集的前五行：
- en: X = pd.DataFrame(X_array_scaled, columns=X.columns)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: X = pd.DataFrame(X_array_scaled, columns=X.columns)
- en: X.head()
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: X.head()
- en: 'The output will be as follows:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Figure 5.72: First five rows of the normalized dataset'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.72：归一化数据集的前五行'
- en: '](img/image-EV96V76B.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-EV96V76B.jpg)'
- en: 'Figure 5.72: First five rows of the normalized dataset'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.72：归一化数据集的前五行
- en: 'Before we can construct the model, we must first convert the diagnosis values
    into labels that can be used within the model. Replace the benign diagnosis string
    with the value 0, and the malignant diagnosis string with the value 1:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建模型之前，必须首先将诊断值转换为可以在模型中使用的标签。将“良性”诊断字符串替换为值0，将“恶性”诊断字符串替换为值1：
- en: diagnoses = ['benign', 'malignant',]
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 诊断类别 = ['良性', '恶性',]
- en: output = [diagnoses.index(diag) for diag in y]
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 = [diagnoses.index(diag) for diag in y]
- en: 'Also, in order to impartially evaluate the model, we should split the training
    dataset into a training and a validation set:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了公平地评估模型，我们应将训练数据集分割为训练集和验证集：
- en: train_X, valid_X, \
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: train_X, valid_X, \
- en: train_y, valid_y = train_test_split(X, output, \
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: train_y, valid_y = train_test_split(X, output, \
- en: test_size=0.2, random_state=123)
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: test_size=0.2, random_state=123)
- en: 'Create the model using the normalized dataset and the assigned diagnosis labels:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用归一化后的数据集和分配的诊断标签创建模型：
- en: model = MLPClassifier(solver='sgd', hidden_layer_sizes=(100,), \
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: model = MLPClassifier(solver='sgd', hidden_layer_sizes=(100,), \
- en: max_iter=1000, random_state=1, \
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: max_iter=1000, random_state=1, \
- en: learning_rate_init=.01)
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: learning_rate_init=.01)
- en: model.fit(X=train_X, y=train_y)
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: model.fit(X=train_X, y=train_y)
- en: 'The output will be as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto',
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto',
- en: beta_1=0.9, beta_2=0.999, early_stopping=False,
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: beta_1=0.9, beta_2=0.999, early_stopping=False,
- en: epsilon=1e-08, hidden_layer_sizes=(100,),
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: epsilon=1e-08, hidden_layer_sizes=(100,),
- en: learning_rate='constant',
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: learning_rate='constant',
- en: learning_rate_init=0.01, max_iter=1000, momentum=0.9,
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: learning_rate_init=0.01, max_iter=1000, momentum=0.9,
- en: n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,
- en: random_state=1, shuffle=True, solver='sgd', tol=0.0001,
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: random_state=1, shuffle=True, solver='sgd', tol=0.0001,
- en: validation_fraction=0.1, verbose=False, warm_start=False)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: validation_fraction=0.1, verbose=False, warm_start=False)
- en: 'Compute the accuracy of the model against the validation set:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 计算模型在验证集上的准确性：
- en: model.score(valid_X, valid_y)
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: model.score(valid_X, valid_y)
- en: 'The output will be as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '0.9824561403508771'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '0.9824561403508771'
- en: Note
  id: totrans-314
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/3dpNt2G.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参考 https://packt.live/3dpNt2G。
- en: You can also run this example online at https://packt.live/37OpdWM. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 https://packt.live/37OpdWM 上在线运行此示例。你必须执行整个 Notebook 才能得到期望的结果。
