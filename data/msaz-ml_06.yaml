- en: Chapter 6. Regression Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。回归模型
- en: Finally we are going to start with the machine learning algorithms. You learned
    earlier that primarily, there are two kinds of supervised machine learning algorithms
    and regression is one of them. Before you start with different regression algorithms
    and techniques available with ML Studio, we will try to know more about regression
    analysis and why it is used.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将开始介绍机器学习算法。您之前了解到，主要存在两种监督机器学习算法，回归就是其中之一。在您开始使用ML Studio中可用的不同回归算法和技术之前，我们将尝试更多地了解回归分析和为什么它被使用。
- en: Understanding regression algorithms
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解回归算法
- en: 'Consider that you live in a locality and you''ve got the following dataset
    that has all the transactions of different properties sold in the area along with
    the property details. Let''s take a look at the following table:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您居住在一个地区，并且您拥有以下数据集，其中包含该地区出售的不同物业的所有交易以及物业详情。让我们看一下以下表格：
- en: '| Property Type | Area (Sq feet) | Price ($) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 物业类型 | 面积（平方英尺） | 价格（美元） |'
- en: '| --- | --- | --- |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| D | 2000 | 500,000 |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| D | 2000 | 500,000 |'
- en: '| T | 1500 | 200,000 |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| T | 1500 | 200,000 |'
- en: '| F | 1400 | 300,000 |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| F | 1400 | 300,000 |'
- en: '| T | 1000 | 100,000 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| T | 1000 | 100,000 |'
- en: '| F | 2000 | 450,000 |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| F | 2000 | 450,000 |'
- en: '| S | 1800 | 350,000 |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| S | 1800 | 350,000 |'
- en: '| D | 2500 | 700,000 |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| D | 2500 | 700,000 |'
- en: '| F | 1500 | 350,000 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| F | 1500 | 350,000 |'
- en: Here, **D** means detached, **S** means semi detached, **T** means terraced,
    and **F** means flats/maisonettes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，**D** 表示独立式，**S** 表示半独立式，**T** 表示排屋式，**F** 表示公寓/联排别墅。
- en: Now, a flat is going to be available on the market of the size; 1,800 square
    feet. You need to predict the price at which it will be sold. This is a regression
    problem because you need to predict a number for the target variable. Here, the
    property price is the target variable and the **Property Type** and **Area** are
    the two features or dependent variables. A target variable in machine learning
    is also known as a label.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一个面积为1,800平方英尺的公寓将上市。您需要预测其出售的价格。这是一个回归问题，因为您需要预测目标变量的一个数值。在这里，物业价格是目标变量，**物业类型**和**面积**是两个特征或依赖变量。在机器学习中，目标变量也被称为标签。
- en: You need to come up with a model that will take the value for the Property Type
    and Area and output the price. Consider the model as a mathematical function *f(Property
    Type, Area) = Predicted Price*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要提出一个模型，该模型将接受物业类型和面积的价值，并输出价格。将模型视为一个数学函数 *f(物业类型, 面积) = 预测价格*。
- en: The actual price at which the property will be sold may or may not be the same
    as the predicted price. The difference between the actual price and the predicted
    price is the error. While building a prediction model, you should try to minimize
    the error so that the predicted value can be as close to the actual value as possible.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 物业实际出售的价格可能与预测价格相同，也可能不同。实际价格与预测价格之间的差异是误差。在构建预测模型时，您应尝试最小化误差，以便预测值尽可能接近实际值。
- en: 'Extending the preceding example, you have supposedly built a model and predicted
    the value for a 1800 square feet flat using the following formula:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展前面的例子中，您假设已经构建了一个模型，并使用以下公式预测了一个1800平方英尺公寓的价值：
- en: f(F, 1800) = $400,000
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: f(F, 1800) = $400,000
- en: So, $400,000 is the predicted value, and consider that $410,000 is the actual
    value at which the property was sold. Then, the error would be *Error = $410,000
    - $400,000 = $10,000*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，$400,000是预测值，假设该物业以$410,000的实际价格出售。那么，误差将是 *误差 = $410,000 - $400,000 = $10,000*。
- en: Train, score, and evaluate
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练、评分和评估
- en: Before making the prediction, you need to train an algorithm with the example
    data or training dataset where the target value or the label is known. After training
    the model, you can make a prediction with the trained model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行预测之前，您需要使用示例数据或训练数据集训练一个算法，其中目标值或标签是已知的。在训练模型后，您可以使用训练好的模型进行预测。
- en: '![Train, score, and evaluate](img/0792EN_06_15.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![训练、评分和评估](img/0792EN_06_15.jpg)'
- en: Continuing with the preceding illustration, the trained model may be considered
    as the mathematical function `f` to make a prediction.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前面的例子，训练好的模型可以被视为数学函数 `f` 来进行预测。
- en: Usually, when you have to build a model from a given dataset, you split the
    dataset into two sets and use one as a training dataset and the other as a test
    dataset. After the model is trained with the training data, you use the test dataset
    to see how the model is performing, that is, how many errors it has.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你需要从一个给定的数据集中构建模型时，你需要将数据集分成两个集合，一个作为训练数据集，另一个作为测试数据集。使用训练数据训练模型后，你使用测试数据集来查看模型的表现，即它有多少错误。
- en: After the model is trained, you can use the test data to make a prediction or
    to score. In scoring, the feature values are used and then the target value is
    predicted. At this point, you are not sure how your model is performing. You need
    to evaluate it to find out its performance. During evaluation, you take the scored
    value and the actual value, which is known as you have split your dataset into
    train and test.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 模型训练完成后，你可以使用测试数据来进行预测或评分。在评分过程中，使用特征值，然后预测目标值。此时，你不确定你的模型表现如何。你需要评估它以了解其性能。在评估过程中，你将评分值和实际值进行比较，这被称为你已经将数据集分为训练集和测试集。
- en: Continuing with the previous illustration, while scoring, you find out that
    the predicted price of a 1800 square feet flat will be $400,000 and during evaluation,
    you discover that there is an error of $10,000.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用之前的示例，在评分过程中，你发现一个1800平方英尺公寓的预测价格为$400,000，而在评估过程中，你发现误差为$10,000。
- en: 'Overall, during experimentation you can follow the given steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，在实验过程中，你可以遵循以下步骤：
- en: '![Train, score, and evaluate](img/0792EN_06_16.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![训练、评分和评估](img/0792EN_06_16.jpg)'
- en: ML Studio provides different statistics to measure error and performance of
    your regression model. It also comes with a set of algorithms to experiment with
    your dataset.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ML Studio提供了不同的统计方法来衡量回归模型的误差和性能。它还附带了一套算法，可以用来对数据集进行实验。
- en: The test and train dataset
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试和训练数据集
- en: Usually, you train an algorithm with your **Train** dataset and validate or
    test your model with a test dataset. In practice, most of the time, you are given
    one dataset. So, you may need to split the given dataset into two and use one
    as a train and the other as test. Usually, the training set consists of bigger
    parts and the test set consists of smaller parts, say 70-30 or 80-20\. Ideally,
    while splitting the original dataset, it is split randomly. The **Split** module
    in ML Studio solves the purpose well.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你使用**训练**数据集来训练算法，并使用测试数据集来验证或测试模型。在实践中，大多数情况下，你只会得到一个数据集。因此，你可能需要将给定的数据集分成两部分，一部分作为训练集，另一部分作为测试集。通常，训练集包含更大的部分，而测试集包含较小的部分，例如70-30或80-20。理想情况下，在分割原始数据集时，应该随机分割。ML
    Studio中的**分割**模块很好地解决了这个问题。
- en: Evaluating
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估
- en: 'Consider the previous illustration of the dataset (refer to table 6.1) as a
    train dataset and the following as a test dataset:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将前一个数据集的示例（参见表6.1）视为训练数据集，以下内容作为测试数据集：
- en: '| Property type | Area (Sq feet) | Actual Price ($) | Predicted price ($) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 属性类型 | 面积（平方英尺） | 实际价格（美元） | 预测价格（美元） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| F | 1800 | 400,000 | 410,000 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| F | 1800 | 400,000 | 410,000 |'
- en: '| T | 1700 | 220,000 | 210,000 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| T | 1700 | 220,000 | 210,000 |'
- en: Consider the actual price and predicted/scored price for the first row as *y1*
    and *f1*, respectively. So, in the preceding table, we can make out that *y1 =
    400,000* and *f1 = 410,000*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将第一行的实际价格和预测/评分价格分别视为*y1*和*f1*。因此，在前面的表中，我们可以看出*y1 = 400,000*和*f1 = 410,000*。
- en: Similarly, we can make out for the second row that *y2 = 220,000* and *f2 =
    210,000*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以看出第二行*y2 = 220,000*和*f2 = 210,000*。
- en: ML Studio provides the following statistics to measure how a model is performing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: ML Studio提供了以下统计方法来衡量模型的表现。
- en: The mean absolute error
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平均绝对误差
- en: '**The mean absolute error** (**MAE**) is a quantity used to measure how close
    forecasts or predictions are to the eventual outcomes. It is calculated as the
    average of the absolute difference between the actual values and the predicted
    values. Let''s take a look at the following figure:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**平均绝对误差**（**MAE**）是用来衡量预测或预测结果与最终结果接近程度的量。它是实际值与预测值之间绝对差值的平均值。让我们看看下面的图表：'
- en: '| ![The mean absolute error](img/0792EN_06_17.jpg)Here ![The mean absolute
    error](img/0792EN_06_18.jpg) is the prediction and ![The mean absolute error](img/0792EN_06_19.jpg)
    is the true value. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| ![平均绝对误差](img/0792EN_06_17.jpg)这里![平均绝对误差](img/0792EN_06_18.jpg)是预测值，![平均绝对误差](img/0792EN_06_19.jpg)是真实值。|'
- en: It has the same unit as the original data and it can only be compared between
    models whose errors are measured in the same units.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有与原始数据相同的单位，并且只能比较误差以相同单位度量的模型。
- en: The root mean squared error
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 均方根误差
- en: '**The root mean** **squared error** (**RMSE**) is calculated by taking the
    square root of the average of the square of all the errors (which is the difference
    between the predicted and actual value). Let''s take a look at the following figure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**均方** **根误差** (**RMSE**) 是通过对所有误差平方的平均值的平方根来计算的（即预测值与实际值之间的差异）。让我们看一下以下图示：'
- en: '| ![The root mean squared error](img/0792EN_06_20.jpg)Here, ![The root mean
    squared error](img/0792EN_06_18.jpg) is the prediction and ![The root mean squared
    error](img/0792EN_06_19.jpg) is the true value |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| ![均方根误差](img/0792EN_06_20.jpg)在此，![均方根误差](img/0792EN_06_18.jpg) 是预测值，![均方根误差](img/0792EN_06_19.jpg)
    是真实值 |'
- en: It can only be compared between models whose errors are measured in the same
    units.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它只能比较误差以相同单位度量的模型。
- en: The relative absolute error
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相对绝对误差
- en: '**The relative absolute** **error** (**RAE**) is the average of the absolute
    error relative to the average of the absolute difference of the mean of the actual
    value and actual values. Let''s take a look at the following figure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**相对绝对** **误差** (**RAE**) 是相对于实际值平均值与实际值绝对差平均值绝对误差的平均值。让我们看一下以下图示：'
- en: '| ![The relative absolute error](img/0792EN_06_21.jpg)Here ![The relative absolute
    error](img/0792EN_06_18.jpg) is the prediction, ![The relative absolute error](img/0792EN_06_19.jpg)
    is the actual or the true value and ![The relative absolute error](img/0792EN_06_22.jpg)
    is the mean of ![The relative absolute error](img/0792EN_06_19.jpg). |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| ![相对绝对误差](img/0792EN_06_21.jpg)此处 ![相对绝对误差](img/0792EN_06_18.jpg) 是预测值，![相对绝对误差](img/0792EN_06_19.jpg)
    是实际值或真实值，![相对绝对误差](img/0792EN_06_22.jpg) 是 ![相对绝对误差](img/0792EN_06_19.jpg) 的平均值。
    |'
- en: It can be compared between models whose errors are measured in different units.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以比较误差以不同单位度量的模型。
- en: The relative squared error
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相对均方误差
- en: '**The relative** **squared error** (**RSE**) is the average of the squared
    difference of the predicted value and the actual value relative to the average
    of the squared difference, average of the actual value and actual values.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**相对** **均方误差** (**RSE**) 是预测值与实际值平方差的平均值相对于实际值平方差平均值、实际值平均值的平均值。'
- en: '| ![The relative squared error](img/0792EN_06_23.jpg)Here ![The relative squared
    error](img/0792EN_06_18.jpg) is the prediction, ![The relative squared error](img/0792EN_06_19.jpg)
    is the true value, and ![The relative squared error](img/0792EN_06_22.jpg) is
    the mean of ![The relative squared error](img/0792EN_06_19.jpg). |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| ![相对均方误差](img/0792EN_06_23.jpg)此处 ![相对均方误差](img/0792EN_06_18.jpg) 是预测值，![相对均方误差](img/0792EN_06_19.jpg)
    是真实值，![相对均方误差](img/0792EN_06_22.jpg) 是 ![相对均方误差](img/0792EN_06_19.jpg) 的平均值。 |'
- en: It can be compared between models whose errors are measured in different units.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以比较误差以不同单位度量的模型。
- en: The coefficient of determination
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确定系数
- en: The coefficient of determination *R2* summarizes the explanatory power of the
    regression model. If the regression model is perfect, though not practical, *R2*
    is 1.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 确定系数 *R2* 总结了回归模型的解释力。如果回归模型完美无缺，尽管不切实际，*R2* 的值将是 1。
- en: '| ![The coefficient of determination](img/0792EN_06_24.jpg)Here ![The coefficient
    of determination](img/0792EN_06_18.jpg) is the prediction, ![The coefficient of
    determination](img/0792EN_06_19.jpg) is the true value, and ![The coefficient
    of determination](img/0792EN_06_22.jpg) is the mean of ![The coefficient of determination](img/0792EN_06_19.jpg)
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| ![确定系数](img/0792EN_06_24.jpg)此处 ![确定系数](img/0792EN_06_18.jpg) 是预测值，![确定系数](img/0792EN_06_19.jpg)
    是真实值，![确定系数](img/0792EN_06_22.jpg) 是 ![确定系数](img/0792EN_06_19.jpg) 的平均值 |'
- en: The coefficient of determination can also be interpreted as the percent of the
    data that fits in the model. For example, if *R2 = 0.7950*, then 79 percent of
    the total variation in *y* can be explained by the linear relationship between
    features and *y*, the response variable (or the target variable).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 确定系数也可以解释为数据中符合模型的比例。例如，如果 *R2 = 0.7950*，那么 79% 的 *y* 的总变化可以通过特征与 *y* 之间的线性关系来解释，*y*
    是响应变量（或目标变量）。
- en: So, for your model, the closer *R2* is to 1, the better it is. For all other
    the error statistics, the less the value, the better it is.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于您的模型，*R2*值越接近1，越好。对于所有其他错误统计量，值越小，越好。
- en: Linear regression
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性回归
- en: '**Linear regression** is one of the regression algorithms available in ML Studio.
    It tries to fit a line to the dataset. It is a popular algorithm and probably
    the oldest regression algorithm. We will use it to train the model to make prediction
    for one of the sample datasets available: automobile price data (Raw). This dataset
    is about automobiles distinguished by their make and model and other features.
    It also includes price. More information on the dataset can be found at [https://archive.ics.uci.edu/ml/datasets/Automobile](https://archive.ics.uci.edu/ml/datasets/Automobile).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**线性回归**是ML Studio中可用的回归算法之一。它试图将一条线拟合到数据集。这是一个流行的算法，可能是最古老的回归算法之一。我们将使用它来训练模型，对可用的样本数据集之一进行预测：汽车价格数据（原始）。这个数据集是关于汽车，根据它们的制造商和型号以及其他特征区分的。它还包括价格。有关数据集的更多信息，可以在[https://archive.ics.uci.edu/ml/datasets/Automobile](https://archive.ics.uci.edu/ml/datasets/Automobile)找到。'
- en: We will use price as a label or the target variable here. So, given the automobile
    features, you need to predict the price of the automobile.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用价格作为标签或目标变量。因此，给定汽车特征，您需要预测汽车的价格。
- en: Go to ML Studio and create a new experiment. Then, expand **Saved Datasets**
    in the modules palette to the left of the screen. Drag the **Automobile price
    data (Raw)** module to the canvas.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前往ML Studio创建一个新的实验。然后，在屏幕左侧的模块调色板中展开**已保存的数据集**。将**汽车价格数据（原始）**模块拖动到画布上。
- en: Then, expand **Data Transformation** and then **Sample and Split** in the modules
    palette and drag the **Split** module to the canvas. Set the **Fraction of rows**
    parameter in the first output dataset to **0.8** and leave the others to their
    default values. You are splitting the dataset so that 80 percent of the data will
    be used to train and the other 20 percent will be used for test.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在模块调色板中展开**数据转换**，然后展开**样本和分割**，将**分割**模块拖动到画布上。将第一个输出数据集的**行分数**参数设置为**0.8**，并将其他设置为默认值。您正在分割数据集，以便80%的数据用于训练，其余20%用于测试。
- en: After you are ready with your train and test data, drag the **Train** module
    to canvas. Type `train` in the search box in the modules palette to the left of
    the screen and when the **Train** module appears, drag it to the canvas. Then,
    join the first output of the **Split** module to the second input of the **Train**
    module. Now, you need to select the column of the dataset that will be your target
    variable, or for which you will train a model to make a prediction. In our case,
    *price* is the target variable or label for which you are going to make a prediction.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备好训练数据和测试数据后，将**训练**模块拖动到画布上。在屏幕左侧模块调色板中的搜索框中输入`train`，当**训练**模块出现时，将其拖动到画布上。然后，将**分割**模块的第一个输出连接到**训练**模块的第二个输入。现在，您需要选择数据集的列，该列将成为您的目标变量，或者您将训练一个模型进行预测。在我们的例子中，*价格*是您将要预测的目标变量或标签。
- en: Select the **Train** module by clicking on it, expand the properties pane to
    the right of the screen, and click on the **Launch column selector** option.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击选择**训练**模块，展开屏幕右侧的属性面板，并单击**启动列选择器**选项。
- en: '![Linear regression](img/0792EN_06_01.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![线性回归](img/0792EN_06_01.jpg)'
- en: Then, the pop up to select a column will appear. Type `price` in the textbox
    to the right of the screen and click on the tickbox to select the column.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将出现一个弹出窗口以选择列。在屏幕右侧的文本框中输入`price`，并单击复选框以选择该列。
- en: '![Linear regression](img/0792EN_06_02.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![线性回归](img/0792EN_06_02.jpg)'
- en: Likewise, drag the **Linear Regression** module to the canvas. Type `linear`
    in the search box in the modules palette to the left of the screen and when the
    module appears, drag it to the canvas.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，将**线性回归**模块拖动到画布上。在屏幕左侧模块调色板中的搜索框中输入`linear`，当模块出现时，将其拖动到画布上。
- en: Then, select the **Linear Regression** module and leave the property values
    at default. Use **0** for the **Random number seed** option. The **Random number
    seed** option is used to generate a random number that is used for reproducible
    results.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择**线性回归**模块，并将属性值保留为默认设置。将**随机数种子**选项设置为**0**。**随机数种子**选项用于生成随机数，以便产生可重复的结果。
- en: 'Now, join the output of the **Linear Regression** module to the first input
    port of the **Train** module. It should look like something similar to the following
    screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将**线性回归**模块的输出连接到**训练**模块的第一个输入端口。它应该看起来类似于以下截图：
- en: '![Linear regression](img/0792EN_06_03.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![线性回归](img/0792EN_06_03.jpg)'
- en: Next, drag the **Score Model** and the **Evaluate Model** modules to the canvas.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将**评分模型**和**评估模型**模块拖动到画布上。
- en: 'The **Score Model** will generate the predicted price value for the test dataset
    using the trained algorithm. So, it takes two inputs: first, the trained model
    and second, the test dataset. It generates the scored dataset that contains the
    predicted values. The **Evaluate Model** takes a scored dataset and generates
    an evaluation matrix. It can also take two scored datasets so that you can compare
    two models side by side.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**评分模型**将使用训练好的算法为测试数据集生成预测价格值。因此，它需要两个输入：首先，训练好的模型；其次，测试数据集。它生成包含预测值的评分数据集。**评估模型**接受评分数据集并生成评估矩阵。它还可以接受两个评分数据集，这样你可以并排比较两个模型。'
- en: Connect the output of the **Train Model** to the first input of the **Score
    Model** and the second output of the **Split** module to the second input. Then,
    connect the output of the **Score Model** to the first input of the **Evaluate
    Model**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将**训练模型**的输出连接到**评分模型**的第一个输入，将**分割**模块的第二个输出连接到第二个输入。然后，将**评分模型**的输出连接到**评估模型**的第一个输入。
- en: The complete model may look as follows. Now, click on the **Run** button to
    run the experiment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的模型可能看起来如下。现在，点击**运行**按钮来运行实验。
- en: '![Linear regression](img/0792EN_06_04.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![线性回归](img/0792EN_06_04.jpg)'
- en: After the run is complete and you see the green tick mark on all the module
    boxes, you can see the evaluation matrix to find out how your model is performing.
    To do so, right-click on the output of the **Evaluate Model** and select the **Visualize**
    option by clicking on it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完成后，当你看到所有模块框上都有绿色的勾号时，你可以查看评估矩阵以了解你的模型表现如何。为此，右键单击**评估模型**的输出，并点击它以选择**可视化**选项。
- en: '![Linear regression](img/0792EN_06_05.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![线性回归](img/0792EN_06_05.jpg)'
- en: 'The following popup displays the **Evaluation Results** graph, as shown in
    the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个弹出窗口显示**评估结果**图，如下截图所示：
- en: '![Linear regression](img/0792EN_06_06.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![线性回归](img/0792EN_06_06.jpg)'
- en: As you can see, **Coefficient of** **Determination** is **0.941703**, which
    is decent and the model seems to be performing well.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，**确定系数**为**0.941703**，这是一个不错的数值，模型似乎表现良好。
- en: If you had noticed, you have trained this linear regression model using the
    Ordinary Least Squared method. You could also have used the Online Gradient Descent
    with proper parameters, such as the learning rate and number of epochs (iterations).
    While working with a large dataset, this method can be quite useful as it scales
    very well. However, working with a few thousand data points in a dataset's Ordinary
    Least Squared method might be the choice for you as it is simple and easy to train
    (with a few parameters to choose from).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，你使用普通最小二乘法训练了这个线性回归模型。你也可以使用带有适当参数的在线梯度下降，例如学习率和迭代次数（周期）。当处理大型数据集时，这种方法非常有用，因为它具有良好的可扩展性。然而，当数据集只有几千个数据点时，使用普通最小二乘法可能更适合你，因为它简单且易于训练（只需选择少量参数）。
- en: To keep it simple, in the preceding and following illustrations in this chapter,
    we have started modeling without initial data preparation, such as removing missing
    values or choosing the right set of columns or features. In practice, you should
    always do initial data preparation before training with a dataset. Again, some
    algorithms require data to be in the proper format to generate the desired result.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单，在本章的前后示例中，我们在没有进行初始数据准备的情况下开始建模，例如去除缺失值或选择正确的列或特征集。在实践中，你应该在用数据集进行训练之前始终进行初始数据准备。再次强调，某些算法需要数据以适当的格式存在才能生成期望的结果。
- en: Optimizing parameters for a learner – the sweep parameters module
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为学习者优化参数——扫描参数模块
- en: To successfully train a model, you need to come up with the right set of property
    values for an algorithm. Most of the time, doing this is not an easy task. First,
    you need to have a clear understanding of the algorithm and the mathematics behind
    it. Second, you have to run an experiment many times, trying out many combinations
    of parameters for an algorithm. At times, this can be very time consuming and
    daunting.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要成功训练一个模型，你需要为算法找到正确的一组属性值。大多数情况下，这并不是一项容易的任务。首先，你需要对算法及其背后的数学有一个清晰的理解。其次，你必须多次运行实验，尝试算法参数的多种组合。有时，这可能会非常耗时且令人沮丧。
- en: For example, in the same preceding example, what should be the right value for
    L2 regularization weight? It is used to reduce overfitting of the model. A model
    overfits when it performs well on a training dataset, but performs badly on any
    new dataset. By reducing overfitting, you generalize the model. However, the problem
    here is that you have to manually adjust this L2 regularization weight, which
    can be done by trying different values, running the experiment many times, and
    evaluating its performance in each run.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在上述相同的前一个例子中，L2正则化权重的正确值应该是什么？它用于减少模型的过拟合。当模型在训练数据集上表现良好，但在任何新数据集上表现不佳时，模型就会过拟合。通过减少过拟合，你可以泛化模型。然而，这里的问题是，你必须手动调整这个L2正则化权重，这可以通过尝试不同的值、多次运行实验并在每次运行中评估其性能来完成。
- en: 'ML Studio comes with a sweet solution to this in the form of the **Sweep Parameters**
    module. Instead of a **Train Model** module, you can use the **Train Model** module
    to generate a trained model optimized with the right set of parameters or property
    values. The following screenshot describes its inputs and outputs:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ML Studio提供了一个名为**参数扫描**模块的解决方案。你不需要使用**训练模型**模块，而是可以使用**训练模型**模块来生成一个使用正确的参数或属性值优化的训练模型。以下截图描述了其输入和输出：
- en: '![Optimizing parameters for a learner – the sweep parameters module](img/0792EN_06_07.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![优化学习器的参数 - 参数扫描模块](img/0792EN_06_07.jpg)'
- en: 'You need to specify a parameter sweeping mode as a parameter of this module.
    You have two options to specify the parameter of sweeping mode, they are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要指定一个参数扫描模式作为此模块的参数。你有两种方式来指定扫描模式的参数，如下所示：
- en: '**Entire grid**: This option is useful for cases where you don''t know what
    the best parameter settings might be and want to try many parameters. It loops
    over a grid predefined by the system to try different combinations and identify
    the best learner.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整网格**：此选项在不知道最佳参数设置可能是什么，并希望尝试许多参数的情况下很有用。它遍历系统预定义的网格，尝试不同的组合，并确定最佳学习器。'
- en: '**Random Sweep**: Alternatively, you can choose this option and specify the
    maximum number of runs that you want the module to execute. It will randomly select
    parameter values over a range of a limited number of sample runs. This option
    is suggested when you want to increase the model''s performance using the metrics
    of your choice and conserve computing resources.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机扫描**：或者，你也可以选择此选项，并指定模块要执行的最大运行次数。它将在有限的样本运行范围内随机选择参数值。当你想使用你选择的指标来提高模型性能并节省计算资源时，建议使用此选项。'
- en: You also need to choose a target or label column along with specifying a value
    for metric to measure the performance of regression, which can be one of the five
    evaluation matrices, for example, the root mean squared error. While working on
    a regression problem, you may ignore the parameter setting for classification.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要选择一个目标或标签列，并指定一个用于衡量回归性能的指标值，这可以是五个评估矩阵之一，例如，均方根误差。在处理回归问题时，你可能可以忽略分类的参数设置。
- en: The decision forest regression
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决策森林回归
- en: Decision forest, or random forest as it is widely known, is a very popular algorithm.
    Internally, it constructs many decision trees and then ensembles them as a forest.
    Each decision tree generates a prediction and in the forest, the predicted values
    of each tree is averaged out. It works well even in the case of noisy data.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 决策森林，或如人们广泛所知的随机森林，是一个非常流行的算法。内部，它构建了许多决策树，然后将它们作为森林进行集成。每个决策树生成一个预测，在森林中，每棵树的预测值被平均。即使在有噪声数据的情况下，它也能很好地工作。
- en: However, to train a decision forest, you need to set the right parameters, for
    example, the number of decision trees. We will now train a decision forest and
    optimize its parameters with the **Sweep Parameters** module.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，要训练一个决策森林，你需要设置正确的参数，例如决策树的数量。现在，我们将使用**Sweep Parameters**模块来训练一个决策森林并优化其参数。
- en: As in the previous case, create a new experiment and give a name to it. Then,
    do the same steps and expand **Saved Datasets** in the modules palette to the
    left of the screen. Drag the **Automobile price data (Raw)** module to the canvas.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个案例一样，创建一个新的实验并为它命名。然后，执行相同的步骤，并将屏幕左侧的模块调色板中的**Saved Datasets**展开。将**Automobile
    price data (Raw)**模块拖到画布上。
- en: Then, expand **Data Transformation** and **Sample and Split** in the modules
    palette and drag the **Split** module to the canvas. Set the **Fraction** parameter
    of the rows in the first output dataset to **0.8** and leave the others to their
    default values. You are splitting the dataset so that 80 percent of the data will
    be used for train and the other 20 percent will be used as test.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在模块调色板中展开**Data Transformation**和**Sample and Split**，并将**Split**模块拖到画布上。将第一个输出数据集的行**Fraction**参数设置为**0.8**，其他保持默认值。你正在分割数据集，以便80%的数据用于训练，其余20%用于测试。
- en: Type `Sweep` in the search box in the modules palette to the left of the screen
    and when the **Sweep Parameters** module appears, drag it to the canvas. Then,
    join the first output of the **Split** module to the second input of the **Sweep
    Parameters** module and join the second output of the **Split** module to the
    third input of the **Sweep Parameters** module.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕左侧的模块调色板中的搜索框中输入`Sweep`，当**Sweep Parameters**模块出现时，将其拖到画布上。然后，将**Split**模块的第一个输出连接到**Sweep
    Parameters**模块的第二个输入，将**Split**模块的第二个输出连接到**Sweep Parameters**模块的第三个输入。
- en: Now, you need to set the column of the dataset that is your target or label
    column for which you will train a model to do a prediction. In our case, **price**
    is the target variable or label for which you are going to make a prediction.
    Also, set the sweeping mode to **Entire grid** and **Metric for measuring performance
    for regression** to **Coefficient of determination**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要设置数据集的列，这是你的目标或标签列，你将训练一个模型来进行预测。在我们的案例中，**price**是目标变量或标签，你将对其进行预测。同时，将扫描模式设置为**Entire
    grid**，将**回归性能度量指标**设置为**确定系数**。
- en: '![The decision forest regression](img/0792EN_06_08.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![决策森林回归](img/0792EN_06_08.jpg)'
- en: 'Likewise, drag the **Decision Forest Regression** module to the canvas. Type
    `Decision Forest` in the search box in the modules palette to the left of the
    screen and when the module appears, drag it to the canvas. Set the **Resampling
    method** property to **Bagging** and leave the rest with their default values,
    as you can see in the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，将**Decision Forest Regression**模块拖到画布上。在屏幕左侧的模块调色板中的搜索框中输入`Decision Forest`，当模块出现时，将其拖到画布上。将**Resampling
    method**属性设置为**Bagging**，其余保持默认值，如以下截图所示：
- en: '![The decision forest regression](img/0792EN_06_09.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![决策森林回归](img/0792EN_06_09.jpg)'
- en: Then, connect the only output of the **Decision Forest Regression** module to
    the first input of the **Sweep Parameters** module.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将**Decision Forest Regression**模块的唯一输出连接到**Sweep Parameters**模块的第一个输入。
- en: Next, drag the **Score Model** and **Evaluate Model** to the canvas. Connect
    the second output of the **Sweep Parameters** module to the first input of the
    **Score Model** and connect the second output of the **Split** module to the second
    input of the **Score Model**. Then, connect the output of the **Score Model**
    to the first input of the **Evaluate Model**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将**Score Model**和**Evaluate Model**拖到画布上。将**Sweep Parameters**模块的第二个输出连接到**Score
    Model**的第一个输入，将**Split**模块的第二个输出连接到**Score Model**的第二个输入。然后，将**Score Model**的输出连接到**Evaluate
    Model**的第一个输入。
- en: '![The decision forest regression](img/0792EN_06_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![决策森林回归](img/0792EN_06_10.jpg)'
- en: Now, run the experiment and after completion, visualize the output of the **Evaluate
    Model** to know the performance of the model.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行实验，完成后，可视化**Evaluate Model**的输出以了解模型的性能。
- en: 'If you are interested to know about the optimum parameters for the **Decision
    Forest Regression** module obtained by the **Sweep Parameters** module, then right-click
    on the **Sweep Parameter** module''s output port and click on **Visualize**. In
    the preceding case, it looked as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道通过**Sweep Parameters**模块获得的**Decision Forest Regression**模块的最佳参数，那么右键单击**Sweep
    Parameter**模块的输出端口，然后点击**Visualize**。在前一个例子中，它看起来如下：
- en: '![The decision forest regression](img/0792EN_06_11.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![决策森林回归](img/0792EN_06_11.jpg)'
- en: The train neural network regression – do it yourself
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练神经网络回归 – 自己动手做
- en: Neural network is a kind of machine learning algorithm inspired by the computational
    models of a human brain. For regression, ML Studio comes with the Neural Network
    Regression module. You can train this using the Sweep Parameters module. First,
    try to train it without the Sweep Parameters module (with the Train module) with
    default parameters for Neural Network Regression and then train it with the Sweep
    Parameters module. Note the improvement in performance of the model.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络是一种受人类大脑计算模型启发的机器学习算法。对于回归，ML Studio提供了神经网络回归模块。你可以使用Sweep Parameters模块来训练它。首先，尝试在没有Sweep
    Parameters模块（使用Train模块）的情况下使用神经网络回归的默认参数进行训练，然后使用Sweep Parameters模块进行训练。注意模型性能的改进。
- en: Comparing models with the evaluate model
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用评估模型比较模型
- en: 'With the **Evaluate** **Model**, you can also compare two models side by side
    in the same experiment. The two input ports of the module can take the output
    from the two Score modules and generate the evaluation matrix to compare the output
    from the two inputs that the module accepts. As shown in the following screenshot:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**Evaluate Model**，你还可以在同一个实验中并排比较两个模型。模块的两个输入端口可以接受来自两个Score模块的输出，并生成评估矩阵来比较模块接受的两个输入的输出。如下截图所示：
- en: '![Comparing models with the evaluate model](img/0792EN_06_12.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![使用评估模型比较模型](img/0792EN_06_12.jpg)'
- en: Comparing models – the neural network and boosted decision tree
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较模型 – 神经网络和提升决策树
- en: The **Boosted Decision Tree Regression** module is another regression algorithm
    that comes with ML Studio. It is an ensemble model like decision forest, but is
    a bit different.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**Boosted Decision Tree Regression**模块是ML Studio附带的其他回归算法之一。它是一个类似于决策森林的集成模型，但有一些不同。'
- en: Here, we will use both the **Boosted Decision Tree Regression** and **Neural
    Network Regression** modules in the same experiment and compare both using the
    **Evaluate Model**. We will use the **Sweep Parameters** module in both cases,
    to train the algorithm.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用**Boosted Decision Tree Regression**和**Neural Network Regression**模块进行相同的实验，并使用**Evaluate
    Model**来比较两者。在两种情况下，我们将使用**Sweep Parameters**模块来训练算法。
- en: 'Create a new experiment and drag the same sample dataset—the **Automobile price
    data (Raw)** module. Then, use the two algorithms with the same training dataset
    (80 percent) and also score using the other 20 percent. The constructed model
    may look like the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的实验，并拖动相同的样本数据集——**Automobile price data (Raw)**模块。然后，使用相同的训练数据集（80%）进行两种算法的训练，并使用其他20%进行评分。构建的模型可能看起来如下：
- en: '![Comparing models – the neural network and boosted decision tree](img/0792EN_06_13.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![比较模型 – 神经网络和提升决策树](img/0792EN_06_13.jpg)'
- en: While the connections are straight-forward and intuitive, the connection for
    the **Sweep Parameters** module for both the cases might be confusing. Note that
    the inputs with the red circles are coming from the same output of the **Split**
    module also marked with a red circle. So, the two **Sweep Parameters** modules
    accept the same training data, but different algorithms to train with. Also, note
    the input ports marked with the blue circle coming from the same output port of
    the **Split** module also marked with a blue circle.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然连接直观且简单，但两种情况下的**Sweep Parameters**模块的连接可能令人困惑。请注意，带有红色圆圈的输入来自标记有红色圆圈的**Split**模块的相同输出。因此，两个**Sweep
    Parameters**模块接受相同的训练数据，但使用不同的算法进行训练。此外，请注意带有蓝色圆圈的输入端口来自标记有蓝色圆圈的**Split**模块的相同输出端口。
- en: 'After you run the experiment successfully, all the boxes will have a green
    tick mark. Then, right-click on the output port of the **Evaluate Model** to find
    the comparison metrics for both the algorithms. Let''s take a look at the following
    screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在实验成功运行后，所有框都将有一个绿色的勾号。然后，右键单击**Evaluate Model**的输出端口，以找到两种算法的比较指标。让我们看一下以下截图：
- en: '![Comparing models – the neural network and boosted decision tree](img/0792EN_06_14.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![比较模型 – 神经网络和提升决策树](img/0792EN_06_14.jpg)'
- en: 'The first row in the preceding screenshot shows the metrics for the model connected
    to the first input of the **Evaluate Model** and in this case, it shows the **Neural
    Network Regression** module and the second row for the second model: the **Boosted
    Decision Tree Regression** module. You know that for better performing models,
    error values should be as less as possible and the coefficient of determination
    should be as close as possible to 1, which means that the higher it is the better.
    As you will find, the Boosted Decision Tree outperforms the Neural Network for
    this dataset on every evaluation statistic, for example, the **Coefficient of
    Determination** is **0.963765** versus **0.444975**. Similarly, the relative absolute
    error is much less for the Boosted Decision Tree as compared to others. If you
    have to choose between these two models, then in this case, you will naturally
    choose the Boosted Decision Tree. Because we have not set a random number seed,
    your results (figures) may be slightly different; however, overall, it doesn''t
    make any difference.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图的第一行显示了连接到**评估模型**的第一个输入的模型的指标，在这种情况下，它显示了**神经网络回归**模块，第二行用于第二个模型：**提升决策树回归**模块。您知道，对于性能更好的模型，错误值应尽可能小，确定系数应尽可能接近1，这意味着它越高越好。正如您将发现的，对于这个数据集的每个评估统计量，提升决策树的表现都优于神经网络，例如，**确定系数**为**0.963765**，而**0.444975**。同样，与其它模型相比，提升决策树的相对绝对误差要小得多。如果您必须在这两个模型之间做出选择，那么在这种情况下，您自然会选择提升决策树。因为我们没有设置随机数种子，所以您的结果（图表）可能会有所不同；然而，总体上，这并没有任何区别。
- en: Here, you compared only two models. In practice, you can and should compare
    as many models as possible on the same problem to find out the best performing
    model among them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您只比较了两个模型。在实践中，您应该尽可能多地比较同一问题上的模型，以找出其中表现最好的模型。
- en: Other regression algorithms
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他回归算法
- en: 'Azure ML comes with a bunch of popular regression algorithms. This section
    briefly describes other algorithms available (at the time of writing of this book)
    that we have not discussed so far:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Azure ML 随带了一系列流行的回归算法。本节简要描述了（在本书编写时）我们尚未讨论的其他算法：
- en: '**The Bayesian Linear Regression Model**: This model uses Bayesian Inference
    for regression. This may not be difficult to train as long as you get the regularization
    parameter right, which may fit a value such as 0.1, 0.2, and so on.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贝叶斯线性回归模型**：此模型使用贝叶斯推理进行回归。只要您正确设置正则化参数，这可能并不难训练，例如，可能适合的值有0.1、0.2等。'
- en: '**The Ordinal Regression Model**: You use this when you have to train a model
    for a dataset in which the labels or target values have a natural ordering or
    ranking among them.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有序回归模型**：当您需要为具有自然排序或排名标签或目标值的数据集训练模型时，您会使用此模型。'
- en: '**The Poisson Regression**: It is a special type of regression analysis. It
    is typically used for model counts, for example, modeling the number of cold and
    flu cases associated with airplane flights or estimating the number of calls related
    to an event or promotion and so on.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**泊松回归**：这是一种特殊的回归分析方法。它通常用于模型计数，例如，对与飞机航班相关的感冒和流感病例数进行建模，或估计与事件或促销相关的电话数量等。'
- en: No free lunch
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有免费的午餐
- en: The *No Free Lunch* theorem is related to machine learning and it popularly
    states the limitation of any machine learning model. As per the theorem, there
    is no model that fits the best for every problem. So, one model that fits well
    for one problem in a domain may not hold good for another. So in practice ,whenever
    you are solving a problem, you need to try out different models and experiment
    with your dataset to choose the best one. This is especially true for supervised
    learning; you use the **Evaluate Model** module in ML Studio to assess the predictive
    accuracies of multiple models of varying complexity to find the best model. A
    model that works well could also be trained by multiple algorithms, for example,
    linear regression in ML Studio can be trained by Ordinary Least Square or Online
    Gradient Descent.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*无免费午餐*定理与机器学习相关，它通常表述了任何机器学习模型的局限性。根据该定理，没有一种模型适合解决所有问题。因此，在一个领域内适合解决一个问题的模型可能对另一个问题并不适用。所以在实践中，每当你解决问题时，你需要尝试不同的模型，并对你自己的数据集进行实验以选择最佳模型。这在监督学习中尤其如此；你可以在ML
    Studio中使用**评估模型**模块来评估不同复杂度的多个模型的预测准确性，以找到最佳模型。一个表现良好的模型也可能由多个算法训练，例如，ML Studio中的线性回归可以通过普通最小二乘法或在线梯度下降法进行训练。'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You started the chapter by understanding predictive analysis with regression
    and explored the concepts of training, testing, and evaluating a regression model.
    You then proceeded to carry on building experiments with different regression
    models, such as linear regression, decision forest, neural network, and boosted
    decision trees inside ML Studio. You learned how to score and evaluate a model
    after training. You also learned how to optimize different parameters for a learning
    algorithm with the Sweep Parameters module. The No Free Lunch theorem teaches
    us not to rely on any particular algorithm for every kind of problem, so in ML
    Studio you should train and evaluate the performance of different models before
    finalizing a single one.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过理解回归预测分析开始了这一章，并探讨了训练、测试和评估回归模型的概念。然后你继续在ML Studio中构建不同的回归模型实验，例如线性回归、决策森林、神经网络和提升决策树。你学习了如何在训练后评分和评估模型。你还学习了如何使用Sweep
    Parameters模块优化学习算法的不同参数。无免费午餐定理教导我们不要依赖任何特定的算法来解决所有问题，所以在ML Studio中，你应该在最终确定单个模型之前，训练和评估不同模型的性能。
- en: In the next chapter, you will explore another kind of unsupervised learning
    called classification and you will explore the different algorithms available
    with ML Studio.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将探索另一种无监督学习类型，称为分类，你将探索ML Studio中可用的不同算法。
