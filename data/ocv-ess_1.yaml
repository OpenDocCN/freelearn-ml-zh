- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 入门
- en: This chapter deals with the basic installation steps and settings required to
    develop applications with the OpenCV library. Also, it introduces the essential
    concepts in order to use the **Application Programming Interface** (**API**) provided
    by the library and the basic datatypes supplied. This chapter includes a section
    with full examples of code that illustrate how to read/write images and video
    files, and access images from live cameras. These examples also show how to get
    access to live input from cameras connected to a computer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用 OpenCV 库开发应用程序所需的基本安装步骤和设置。同时，它还介绍了使用库提供的**应用程序编程接口（API**）和基本数据类型所必需的基本概念。本章包括一个包含完整代码示例的部分，展示了如何读取/写入图像和视频文件，以及如何从实时摄像头访问图像。这些示例还展示了如何获取连接到计算机的摄像头的实时输入。
- en: Setting up OpenCV
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 OpenCV
- en: OpenCV can be downloaded from [http://opencv.org/](http://opencv.org/), and
    is available for the most popular operating systems, such as Unix (Linux/Mac),
    Microsoft Windows (Windows), Android, and iOS. In this book, the last stable release
    (2.4.9) of OpenCV for Windows 7 (SP1) has been used. For Windows, this release
    comes in the form of a self-extracting archive (`opencv-2.4.9.exe`), which should
    be extracted to the desired location (for example, `OPENCV_SCR` for `C:\opencv-src`).
    It should be noted that in Windows it is strongly recommended to allocate the
    source and binaries at absolute paths without white spaces because errors might
    appear later.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV 可以从 [http://opencv.org/](http://opencv.org/) 下载，适用于最流行的操作系统，如 Unix（Linux/Mac）、Microsoft
    Windows（Windows）、Android 和 iOS。在本书中，使用了适用于 Windows 7（SP1）的 OpenCV 的最后一个稳定版本（2.4.9）。对于
    Windows，这个版本以自解压存档（`opencv-2.4.9.exe`）的形式提供，应该解压到所需的位置（例如，`C:\opencv-src` 下的 `OPENCV_SCR`）。需要注意的是，在
    Windows 中，强烈建议将源代码和二进制文件分配到没有空格的绝对路径，因为以后可能会出现错误。
- en: 'After extracting the archive, the obtained files are organized in two subdirectories
    under `OPENCV_SCR`: `build` and `sources`. The first one (`build`) includes precompiled
    (binaries) versions with Microsoft Visual C++ compilers (MSVC, v. 10, 11, and
    12) for 32- and 64-bit architectures (located in the x 86 and x 64 subdirectories
    respectively). The `sources` subdirectory contains the source code of the OpenCV
    library. This code might be compiled with other compilers (for example, GNU g++).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解压存档后，获取的文件在 `OPENCV_SCR` 下的两个子目录中组织：`build` 和 `sources`。第一个（`build`）包括预编译（二进制）版本，使用
    Microsoft Visual C++ 编译器（MSVC，版本 10、11 和 12）为 32 位和 64 位架构编译（分别位于 x86 和 x64 子目录中）。`sources`
    子目录包含 OpenCV 库的源代码。此代码可能使用其他编译器（例如，GNU g++）编译。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Using the precompiled versions of OpenCV is the easiest option and only requires
    setting the location of OpenCV's dynamic libraries binaries (DLL files) in the
    **Path** environment variable. For instance, in our setup, this location could
    be `OPENCV_SCR/build/x86/vc12/bin` where the binaries compiled with MS VC version
    12 for the 32 bit architecture are located. Remember that changing the environment
    variables in Windows 7 (SP1) can be done on **Advanced System Settings** under
    **Properties** of **My Computer**. The **Rapid Environment Editor** tool (available
    at [http://www.rapidee.com](http://www.rapidee.com)) provides a convenient way
    to change **Path** and other environment variables in Windows 7.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预编译版本的 OpenCV 是最简单的方法，只需在 **Path** 环境变量中设置 OpenCV 的动态库二进制文件（DLL 文件）的位置。例如，在我们的设置中，这个位置可能是
    `OPENCV_SCR/build/x86/vc12/bin`，其中包含用 MS VC 版本 12 编译的 32 位架构的二进制文件。请记住，在 Windows
    7（SP1）中更改环境变量可以在 **我的电脑** 的 **属性** 下的 **高级系统设置** 中完成。**快速环境编辑器** 工具（可在 [http://www.rapidee.com](http://www.rapidee.com)
    获取）提供了在 Windows 7 中方便地更改 **Path** 和其他环境变量的方法。
- en: This chapter covers a detailed installation process of OpenCV on Windows 7 (SP1).
    For Linux and other operating systems, you can have a look at the OpenCV online
    documentation (*OpenCV Tutorials, Introduction to OpenCV* section) available at
    [http://docs.opencv.org/doc/tutorials/tutorials.html](http://docs.opencv.org/doc/tutorials/tutorials.html).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细介绍了在 Windows 7（SP1）上安装 OpenCV 的过程。对于 Linux 和其他操作系统，您可以查看 OpenCV 在线文档（*OpenCV
    教程，OpenCV 简介* 部分），该文档可在 [http://docs.opencv.org/doc/tutorials/tutorials.html](http://docs.opencv.org/doc/tutorials/tutorials.html)
    获取。
- en: Compiled versus precompiled library
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译库与预编译库
- en: The OpenCV distribution includes the source code of the library that can be
    compiled when a different binary version is required. One such situation comes
    when we need to use the Qt-based user interface functions available in OpenCV
    (which are not included in the precompiled versions). Besides, the build process
    (compilation) for the OpenCV library is required if our compiler (for example,
    GNU g++) doesn't match the precompiled version of the library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV 的发行版包括库的源代码，当需要编译不同版本的二进制文件时可以编译。这种情况之一是我们需要使用 OpenCV 中可用的基于 Qt 的用户界面函数（这些函数不包括在预编译版本中）。此外，如果我们的编译器（例如，GNU
    g++）与库的预编译版本不匹配，则需要为 OpenCV 库进行构建过程（编译）。
- en: 'The requirements that have to be met in order to compile OpenCV with Qt are
    as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Qt 编译 OpenCV 必须满足以下要求：
- en: '**A compatible C++ compiler**: We use the GNU g++ compiler included with MinGW
    (Minimal GNU GCC for Windows). This is a standard compiler on Unix and it is appropriate
    to guarantee code compatibility. Prior to the build process, it is quite convenient
    to add the location of the compiler binaries (g++ and gmake) to the **Path** environment
    variable (for example, in our local system, the location is `C:\Qt\Qt5.2.1\Tools\mingw48_32\bin`).'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容的 C++ 编译器**：我们使用 MinGW（Minimal GNU GCC for Windows）中包含的 GNU g++ 编译器。这是一个在
    Unix 上的标准编译器，它适合保证代码兼容性。在构建过程之前，将编译器二进制文件（g++ 和 gmake）的位置添加到 **Path** 环境变量中非常方便（例如，在我们的本地系统中，位置是
    `C:\Qt\Qt5.2.1\Tools\mingw48_32\bin`）。'
- en: '**The Qt library**: In particular, the Qt 5.2.1 bundle (available at [http://qt-project.org/](http://qt-project.org/))
    is customized for an easy setup because it includes the Qt library and the complete
    development IDE Qt Creator with MinGW 4.8 and OpenGL. Qt Creator is a full-fledged
    IDE with free software license that we recommend. The Qt binaries location must
    also be added to the **Path** environment variable (for example, `C:\Qt\Qt5.2.1\5.2.1\mingw48_32\bin`).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 库**：特别是，Qt 5.2.1 包（可在 [http://qt-project.org/](http://qt-project.org/)
    获取）是为了简化设置而定制的，因为它包括了 Qt 库和完整的开发 IDE Qt Creator，以及 MinGW 4.8 和 OpenGL。Qt Creator
    是一个功能齐全的 IDE，拥有免费软件许可，我们推荐使用。Qt 二进制文件的位置也必须添加到 **Path** 环境变量中（例如，`C:\Qt\Qt5.2.1\5.2.1\mingw48_32\bin`）。'
- en: '**The CMake build system**: This cross-platform build system is available at
    [http://www.cmake.org/](http://www.cmake.org/). It consists of a set of tools
    that help the user prepare and generate the suitable configuration files used
    for building (compiling), testing, and packaging a large code project such as
    OpenCV.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CMake 构建系统**：这个跨平台构建系统可在 [http://www.cmake.org/](http://www.cmake.org/) 获取。它由一组工具组成，帮助用户准备和生成用于构建（编译）、测试和打包大型代码项目（如
    OpenCV）的适当配置文件。'
- en: Configuring OpenCV with CMake
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 CMake 配置 OpenCV
- en: 'In this section, we illustrate the configuration steps for OpenCV with CMake,
    with the help of screenshots of the steps involved:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们通过截图展示了使用 CMake 配置 OpenCV 的步骤：
- en: The first step involves the selection of directories and compilers. Once CMake
    is launched, both the source directory (`OPENCV_SCR`) and the build directory
    (`OPENCV_BUILD`) can be set in the proper text fields in the CMake main window.
    Also, the checkboxes labeled as **Grouped** and **Advanced** should be marked
    in the CMake main window. We continue clicking on the **Configure** button. At
    this point, the tool prompts the user to specify the desired compiler and we choose
    **MinGW Makefiles** using the native compilers. If we choose the **Specify native
    compilers** option, it is possible to specify a particular location for the compiler
    and make tools. After clicking on the **Finish** button, the configuration step
    continues checking the settings of the system. The following screenshot shows
    the CMake window at the end of this preconfiguration process:![Configuring OpenCV
    with CMake](img/00002.jpeg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步涉及选择目录和编译器。一旦启动 CMake，就可以在 CMake 主窗口的适当文本字段中设置源目录（`OPENCV_SCR`）和构建目录（`OPENCV_BUILD`）。此外，在
    CMake 主窗口中标记为 **Grouped** 和 **Advanced** 的复选框应该被选中。我们继续点击 **Configure** 按钮。此时，工具提示用户指定所需的编译器，我们使用本地编译器选择
    **MinGW Makefiles**。如果我们选择 **指定本地编译器** 选项，可以指定编译器和构建工具的特定位置。点击 **Finish** 按钮后，配置步骤将继续检查系统的设置。以下截图显示了此预配置过程结束时的
    CMake 窗口：![使用 CMake 配置 OpenCV](img/00002.jpeg)
- en: CMake at the end of the preconfiguration step
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预配置步骤结束时的 CMake
- en: Note
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the purpose of simplicity, we use in this text `OPENCV_BUILD` and `OPENCV_SCR`
    to denote respectively the target and source directories of the OpenCV local setup.
    Keep in mind that all directories should match the current local configuration.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了简化，我们在本文中使用`OPENCV_BUILD`和`OPENCV_SCR`分别表示OpenCV本地设置的目标和源目录。请记住，所有目录都应该与当前的本地配置相匹配。
- en: The next step is the selection of the build options. At the center of the main
    CMake window, the red entries might be changed if desired. In our setup, we open
    the entries grouped with the label **WITH** and there we set the **WITH_QT** entry
    to **ON**, and then we click on **Configure** again to obtain a new set of options.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是选择构建选项。在主CMake窗口的中心，如果需要，红色条目可能会更改。在我们的设置中，我们打开带有**WITH**标签的条目组，并在那里将**WITH_QT**条目设置为**ON**，然后我们再次单击**配置**以获取一组新的选项。
- en: 'Now, the next stage is to set the Qt directories. In the main CMake window,
    a few entries are marked in red. These are the required directories to build OpenCV
    with Qt. The next entries to be set are: `Qt5Concurrent_DIR`, `Qt5Core_DIR`, `Qt5Gui_DIR`,
    `Qt5OpenGL_DIR`, `Qt5Test_DIR`, and `Qt5Widgets_DIR` (refer to the following figure).
    In our setup, these directories can be found under `C:/Qt/Qt5.2.1/5.2.1/mingw48_32/lib/cmake`.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，下一步是设置Qt目录。在主CMake窗口中，有一些条目被标记为红色。这些是构建带有Qt的OpenCV所需的目录。接下来要设置的条目是：`Qt5Concurrent_DIR`、`Qt5Core_DIR`、`Qt5Gui_DIR`、`Qt5OpenGL_DIR`、`Qt5Test_DIR`和`Qt5Widgets_DIR`（参见图示）。在我们的设置中，这些目录可以在`C:/Qt/Qt5.2.1/5.2.1/mingw48_32/lib/cmake`下找到。
- en: 'By clicking on the **Configure** button once, we obtain no further red entries
    and the configuration process is finally done, as shown in the following screenshot:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过单击一次**配置**按钮，我们获得没有进一步的红色条目，配置过程最终完成，如图所示：
- en: '![Configuring OpenCV with CMake](img/00003.jpeg)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用CMake配置OpenCV](img/00003.jpeg)'
- en: Setting Qt directories for CMake
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为CMake设置Qt目录
- en: The last step is to generate the project. In this step, we click on the **Generate**
    button to obtain the suitable project files to build OpenCV in the target platform.
    Then, the CMake GUI should be closed to continue with the compilation.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是生成项目。在这一步中，我们点击**生成**按钮以获取在目标平台上构建OpenCV所需的合适项目文件。然后，应该关闭CMake GUI以继续编译。
- en: 'In the process just described, it is possible to change the configuration options
    as many times as desired before the generation step. Some other convenient options
    to be set are listed as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述过程中，可以在生成步骤之前多次更改配置选项。以下列出了要设置的一些其他方便的选项：
- en: '**BUILD_EXAMPLES**: This option is used to compile the source code of several
    examples included in the distribution'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BUILD_EXAMPLES**：此选项用于编译分发中包含的几个示例的源代码'
- en: '**BUILD_SHARED_LIBS**: Uncheck this option to get a static version of the libraries'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BUILD_SHARED_LIBS**：取消选中此选项以获取库的静态版本'
- en: '**CMAKE_BUILD_TYPE**: Set this to **Debug** to get a version for debugging
    purposes and so on'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CMAKE_BUILD_TYPE**：将其设置为**调试**以获取用于调试目的的版本等'
- en: '**WITH_TBB**: Set this option to activate the use of Intel® Threading Building
    Block that lets you easily write parallel C++ code'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WITH_TBB**：将此选项设置为激活使用Intel® Threading Building Block，这使您能够轻松编写并行C++代码'
- en: '**WITH_CUDA**: Set this option to use processing by GPU through CUDA libraries'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WITH_CUDA**：将此选项设置为使用CUDA库通过GPU进行处理'
- en: Building and installing the library
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建和安装库
- en: 'The compilation should be launched from the console at the target directory
    (`OPENCV_BUILD`) set during the configuration with CMake (that is, step 1 from
    the previous list). The command should be as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 编译应该从配置过程中设置的CMake目标目录（`OPENCV_BUILD`）的终端启动（即前述列表中的第1步）。命令应如下所示：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command launches a build process using the generated files by CMake. Compilation
    typically takes several minutes. If the compilation ends without errors, the installation
    continues with the execution of the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令使用CMake生成的文件启动构建过程。编译通常需要几分钟。如果编译没有错误结束，则安装将继续执行以下命令：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command copies the OpenCV binaries to the following directory:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将OpenCV的二进制文件复制到以下目录：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If something goes wrong during the compilation, we should return to CMake to
    change the options selected in the previous steps. Installation ends by adding
    the location of the library binaries (DLL files) to the **Path** environment variable.
    In our setup, this directory is located at `OPENCV_BUILD\install\x64\mingw\bin`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在编译过程中出现问题，我们应该返回 CMake 来更改之前步骤中选择的选项。通过将库二进制文件（DLL 文件）的位置添加到 **Path** 环境变量来结束安装。在我们的设置中，此目录位于
    `OPENCV_BUILD\install\x64\mingw\bin`。
- en: To check the success of the installation process, it is possible to run some
    of the examples compiled along with the library (if the **BUILD_EXAMPLES** option
    was set with CMake). The code samples can be found at `OPENCV_BUILD\install\x64\mingw\samples\cpp`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查安装过程是否成功，可以运行与库一起编译的一些示例（如果设置了 CMake 中的 **BUILD_EXAMPLES** 选项）。代码示例可在 `OPENCV_BUILD\install\x64\mingw\samples\cpp`
    中找到。
- en: '![Building and installing the library](img/00004.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![构建和安装库](img/00004.jpeg)'
- en: Canny edge detection sample
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Canny 边缘检测示例
- en: The preceding screenshot shows the output window for the sample `cpp-example-edge.exe`
    file, which demonstrates the Canny edge detection on the `fruits.jpg` input file
    included with the source OpenCV distribution.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了示例 `cpp-example-edge.exe` 文件的输出窗口，该文件演示了在包含在源 OpenCV 分发的 `fruits.jpg`
    输入文件上的 Canny 边缘检测。
- en: In the next section, we summarize the recipe used to set up OpenCV 2.4.9 in
    our Windows 7-x32 platform with Qt 5.2.1 (MinGW 4.8).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们总结了在 Windows 7-x32 平台上使用 Qt 5.2.1（MinGW 4.8）设置 OpenCV 2.4.9 的配方。
- en: Quick recipe for setting up OpenCV
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 OpenCV 的快速配方
- en: 'The whole process for setting up OpenCV can be done using the following steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 OpenCV 的整个过程可以使用以下步骤完成：
- en: Download and install Qt5 (available at [http://qt-project.org/](http://qt-project.org/)).
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装 Qt5（可在[http://qt-project.org/](http://qt-project.org/)找到）。
- en: Add the MinGW bin directory (for g++ and gmake) to the **Path** environment
    variable (for example, `C:\Qt\Qt5.2.1\Tools\mingw48_32\bin\`).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 MinGW 二进制目录（用于 g++ 和 gmake）添加到 **Path** 环境变量中（例如，`C:\Qt\Qt5.2.1\Tools\mingw48_32\bin\`）。
- en: Add the Qt bin directory (for DLLs) to the **Path** environment variable (for
    example, `C:\Qt\Qt5.2.1\5.2.1\mingw48_32\bin\`).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Qt 二进制目录（用于 DLL）添加到 **Path** 环境变量中（例如，`C:\Qt\Qt5.2.1\5.2.1\mingw48_32\bin\`）。
- en: Download and install CMake (available at [http://www.cmake.org/](http://www.cmake.org/)).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装 CMake（可在[http://www.cmake.org/](http://www.cmake.org/)找到）。
- en: Download OpenCV archive (available at [http://opencv.org/](http://opencv.org/)).
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 OpenCV 存档（可在[http://opencv.org/](http://opencv.org/)找到）。
- en: Extract the downloaded archive to an `OPENCV_SRC` directory.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的存档解压到 `OPENCV_SRC` 目录。
- en: 'Configure the OpenCV build project with CMake using the following steps:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下步骤使用 CMake 配置 OpenCV 构建项目：
- en: Choose the source (`OPENCV_SCR`) and target (`OPENCV_BUILD`) directories.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择源目录（`OPENCV_SCR`）和目标目录（`OPENCV_BUILD`）。
- en: Mark the **Grouped** and **Advanced** checkboxes and click on **Configure**.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标记 **分组** 和 **高级** 复选框，然后点击 **配置**。
- en: Choose a compiler.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个编译器。
- en: Set the **BUILD_EXAMPLES** and **WITH_QT** options, and finally click on the
    **Configure** button.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 **BUILD_EXAMPLES** 和 **WITH_QT** 选项，并最终点击 **配置** 按钮。
- en: 'Set the following Qt directories: `Qt5Concurrent_DIR`, `Qt5Core_DIR`, `Qt5Gui_DIR`,
    `Qt5OpenGL_DIR`, `Qt5Test_DIR`, `Qt5Widgets_DIR`. Then, click on **Configure**
    again.'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置以下 Qt 目录：`Qt5Concurrent_DIR`、`Qt5Core_DIR`、`Qt5Gui_DIR`、`Qt5OpenGL_DIR`、`Qt5Test_DIR`、`Qt5Widgets_DIR`。然后，再次点击**配置**。
- en: If no errors are reported (marked in red in the CMake window), you can click
    on the **Generate** button. If some error is reported, the wrong options should
    be corrected and the **Configure** steps should be repeated. Close CMake after
    the **Generate** step.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有报告错误（在 CMake 窗口中用红色标记），则可以点击 **生成** 按钮。如果有错误报告，应纠正错误的选项，并重复 **配置** 步骤。在
    **生成** 步骤后关闭 CMake。
- en: Open a console under the `OPENCV_BUILD` directory and run the `mingw32-make`
    command to start the compilation.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OPENCV_BUILD` 目录下打开控制台，并运行 `mingw32-make` 命令以开始编译。
- en: If the build process doesn't produce an error, run `mingw32-make install` on
    the command line.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果构建过程没有产生错误，请在命令行上运行 `mingw32-make install`。
- en: Add the OpenCV bin directory (for DLLs) to the **Path** environment variable
    (for example, `OPENCV_BUILD\install\x64\mingw\bin\`).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 OpenCV 二进制目录（用于 DLL）添加到 **Path** 环境变量中（例如，`OPENCV_BUILD\install\x64\mingw\bin\`）。
- en: To check the right installation of the OpenCV library, you can run some of the
    examples included at `OPENCV_BUILD\install\x64\mingw\samples\cpp`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 OpenCV 库的正确安装，可以在 `OPENCV_BUILD\install\x64\mingw\samples\cpp` 中运行一些包含的示例。
- en: API concepts and basic datatypes
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 概念和基本数据类型
- en: After installation, preparing a new OpenCV code project is quite a straightforward
    process that requires including the header files and instructing the compiler
    to find the files and libraries used in the project.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，准备一个新的OpenCV代码项目是一个相当直接的过程，需要包含头文件并指示编译器查找项目中使用的文件和库。
- en: 'OpenCV is composed of several modules, grouping related functionalities. Each
    module has an associated header file (for example, `core.hpp`) located in the
    directory with the same name as that of the module (that is, `OPENCV_BUILD\install\include\opencv2\<module>`).
    The supplied modules with the current version of OpenCV are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV由几个模块组成，将相关功能分组。每个模块都有一个与之关联的头文件（例如，`core.hpp`），位于与模块同名的目录中（即，`OPENCV_BUILD\install\include\opencv2\<module>`）。当前OpenCV版本提供的模块如下：
- en: '`core`: This module defines the basic (core) functions used by all the other
    modules and fundamental data structures, including the dense multidimensional
    array, `Mat`.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core`：此模块定义了所有其他模块使用的（基本）函数和基本数据结构，包括密集的多维数组`Mat`。'
- en: '`highgui`: This module provides simple **user interface** (**UI**) capabilities
    and an easy interface for video and image capturing. Building the library with
    the Qt option allows UI compatibility with such frameworks.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`highgui`：此模块提供简单的**用户界面**（**UI**）功能和视频和图像捕获的简单接口。使用Qt选项构建库允许与这些框架的UI兼容性。'
- en: '`imgproc`: This module includes image-processing functions that include filtering
    (linear and nonlinear), geometric transformations, color space conversion, and
    so on.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imgproc`：此模块包括图像处理函数，包括滤波（线性和非线性）、几何变换、颜色空间转换等。'
- en: '`features2d`: This module includes functions for feature detection (corners
    and planar objects), feature description, feature matching, and so on.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`features2d`：此模块包括用于特征检测（角点和平面对象）、特征描述、特征匹配等功能。'
- en: '`objdetect`: This module includes functions for object detection and instances
    of the predefined detection classes (for example, face, eyes, smile, people, cars,
    and so on).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objdetect`：此模块包括用于对象检测和预定义检测类实例（例如，面部、眼睛、微笑、人物、汽车等）的函数。'
- en: '`video`: This module supplies the functionality of video analysis (motion estimation,
    background extraction, and object tracking).'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`video`：此模块提供视频分析功能（运动估计、背景提取和对象跟踪）。'
- en: '`gpu`: This module provides a collection of GPU-accelerated algorithms for
    some functions in the other OpenCV modules.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gpu`：此模块为其他OpenCV模块中的某些函数提供了一组GPU加速算法。'
- en: '`ml`: This module includes functions to implement machine-learning tools such
    as statistical classification, regression, and data clustering.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ml`：此模块包括实现机器学习工具的函数，如统计分类、回归和数据聚类。'
- en: Some other less usual miscellaneous modules oriented are camera calibration,
    clustering, computational photography, images stitching, OpenCL-accelerated CV,
    super resolution, and others.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些其他不太常见的模块，如相机标定、聚类、计算摄影、图像拼接、OpenCL加速CV、超分辨率等。
- en: 'All OpenCV classes and functions are in the `cv` namespace. Consequently, we
    will have the following two options in our source code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有OpenCV类和函数都在`cv`命名空间中。因此，在我们的源代码中将有以下两种选择：
- en: Add the `using namespace cv` declaration after including the header files (this
    is the option used in all the code samples in this book).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在包含头文件后添加`using namespace cv`声明（这是本书中所有代码示例使用的选项）。
- en: Append the `cv::` specifier as a prefix to all the OpenCV classes, functions,
    and data structures that we use. This option is recommended if the external names
    provided by OpenCV conflict with the **standard template library** (**STL**) or
    other libraries.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`cv::`指定符作为前缀添加到我们使用的所有OpenCV类、函数和数据结构之前。如果OpenCV提供的外部名称与**标准模板库**（**STL**）或其他库冲突，则建议使用此选项。
- en: 'The `DataType` class defines the primitive datatypes for OpenCV. The primitive
    datatypes can be `bool`, `unsigned char`, `signed char`, `unsigned short`, `signed
    short`, `int`, `float`, `double`, or a tuple of values of one of these primitive
    types. Any primitive type can be defined by an identifier in the following form:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataType`类定义了OpenCV的原始数据类型。原始数据类型可以是`bool`、`unsigned char`、`signed char`、`unsigned
    short`、`signed short`、`int`、`float`、`double`，或者这些原始类型值的一个元组。任何原始类型都可以通过以下形式的标识符定义：'
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding code, `U`, `S`, and `F` stand for unsigned, signed, and float
    respectively. For the single channel arrays, the following enumeration is applied
    describing the datatypes:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`U`、`S` 和 `F` 分别代表无符号、有符号和浮点。对于单通道数组，以下枚举应用于描述数据类型：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following diagram shows a graphical representation of a single channel (4
    x 4) array with 8 bits of unsigned integers (`CV_8U`). In this case, each element
    should have a value from zero to 255, which may be represented by a grayscale
    image.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了单个通道（4 x 4）数组（8位无符号整数 `CV_8U`）的图形表示。在这种情况下，每个元素应该有一个从零到255的值，这可以由一个灰度图像表示。
- en: '![API concepts and basic datatypes](img/00005.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![API概念和基本数据类型](img/00005.jpeg)'
- en: Single channel array of 8 bit unsigned integers for a greyscale image
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 灰度图像的8位无符号整数单通道数组
- en: We can define all of the preceding datatypes for multichannel arrays (up to
    512 channels). The following diagram illustrates a graphical representation of
    three channels 4 x 4 array of 8 bits of unsigned integers (`CV_8UC3`). In this
    example, the array consists of tuples of three elements corresponding to an RGB
    image.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为多通道数组（最多512个通道）定义所有上述数据类型。以下图示说明了三个通道4 x 4数组（8位无符号整数 `CV_8UC3`）的图形表示。在这个例子中，数组由三个元素的元组组成，对应于RGB图像。
- en: '![API concepts and basic datatypes](img/00006.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![API概念和基本数据类型](img/00006.jpeg)'
- en: A three-channel array of 8 bit unsigned integers for an RGB image
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: RGB图像的8位无符号整数三通道数组
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Here, it should be noted that the following three declarations are equivalent:
    `CV_8U`, `CV_8UC1`, and `CV_8UC(1)`.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的是，以下三个声明是等价的：`CV_8U`、`CV_8UC1` 和 `CV_8UC(1)`。
- en: 'The OpenCV `Mat` class is used for dense n-dimensional single or multichannel
    arrays. It can store real or complex-valued vectors and matrices, colored or grayscale
    images, histograms, point clouds, and so on. There are many different ways to
    create a `Mat` object, the most popular being the constructor where the size and
    type of the array are specified as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV的 `Mat` 类用于存储和操作密集的n维单通道或多通道数组。它可以存储实值或复值向量矩阵、彩色或灰度图像、直方图、点云等。创建 `Mat`
    对象的方法有很多种，最流行的是构造函数，其中指定了数组的大小和数据类型，如下所示：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The initial value for the array elements might be set by the `Scalar` class
    as a typical four-element vector (for the RGB and transparency components of the
    image stored in the array). Next, we show some usage examples of `Mat` as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的初始值可能由 `Scalar` 类设置为一个典型的四元素向量（用于存储在数组中的图像的RGB和透明度组件）。接下来，我们将展示 `Mat` 的一些使用示例：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that OpenCV allocates colored RGB images to a three channel (and a fourth
    for the transparency, that is, alpha channel) array, following the BGR order with
    the higher values corresponding to brighter pixels.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，OpenCV按照BGR顺序将彩色RGB图像分配到三通道数组（以及第四个通道用于透明度，即alpha通道），其中较高的值对应于亮度更高的像素。
- en: The `Mat` class is the main data structure that stores and manipulates images.
    OpenCV has implemented mechanisms to allocate and release memory automatically
    for these data structures. However, the programmer should still take special care
    when data structures share the same buffer memory.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mat` 类是存储和操作图像的主要数据结构。OpenCV实现了为这些数据结构自动分配和释放内存的机制。然而，程序员在数据结构共享相同的缓冲区内存时仍需特别小心。'
- en: Many functions in OpenCV process dense single or multichannel arrays usually
    using the `Mat` class. However, in some cases, a different datatype may be convenient,
    such as `std::vector<>`, `Matx<>`, `Vec<>`, or `Scalar`. For this purpose, OpenCV
    provides the proxy classes, `InputArray` and `OutputArray`, which allow any of
    the previous types to be used as parameters for functions.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV中的许多函数处理密集的单通道或多通道数组时通常使用 `Mat` 类。然而，在某些情况下，不同的数据类型可能更方便，例如 `std::vector<>`、`Matx<>`、`Vec<>`
    或 `Scalar`。为此，OpenCV提供了代理类 `InputArray` 和 `OutputArray`，允许使用任何前面的类型作为函数的参数。
- en: Our first program – reading and writing images and videos
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个程序——读取和写入图像和视频
- en: To prepare the examples for this book, we used the Qt Creator IDE (included
    in the Qt 5.2 bundle) and OpenCV 2.4.9 compiled with MinGW g++ 4.8 and Qt functionality.
    Qt Creator is a free multiplatform IDE with very helpful features for C++ programming.
    However, the user can choose the tool chain to build the executables that best
    fit its needs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备本书的示例，我们使用了包含在Qt 5.2捆绑包中的Qt Creator IDE和用MinGW g++ 4.8和Qt功能编译的OpenCV 2.4.9。Qt
    Creator是一个免费的多平台IDE，具有针对C++编程非常有用的功能。然而，用户可以选择构建可执行文件的最佳工具链，以满足其需求。
- en: Our first Qt Creator project with OpenCV will be quite a simple flip-image tool,
    named `flipImage`. This tool reads a color image file and transforms it into a
    grayscale image, flipped and saved into an output file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们第一个使用OpenCV的Qt Creator项目将是一个非常简单的翻转图像工具，命名为`flipImage`。这个工具读取彩色图像文件，将其转换为灰度图像，翻转并保存到输出文件中。
- en: 'For this application, we choose to create a new code project by navigating
    to **File** | **New File** or **File** | **Project…**, and then navigate to **Non-Qt
    Project** | **Plain C++ Project**. Then, we have to choose a project name and
    location. The next step is to pick a kit (that is, compiler) for the project (in
    our case, **Desktop Qt 5.2.1 MinGW 32 bit**) and location for the binaries generated.
    Usually, two possible build configurations (profiles) are used: `debug` and `release`.
    These profiles set the appropriate flags to build and run the binaries.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，我们选择通过导航到**文件** | **新建文件**或**文件** | **项目…**来创建一个新的代码项目，然后导航到**非Qt项目**
    | **纯C++项目**。然后，我们必须选择项目名称和位置。下一步是选择项目的工具链（即编译器）（在我们的情况下，**桌面Qt 5.2.1 MinGW 32位**）和生成的二进制文件的位置。通常，使用两种可能的构建配置（配置文件）：`debug`和`release`。这些配置文件设置了适当的标志来构建和运行二进制文件。
- en: When a Qt Creator project is created, two special files (with the `.pro` and
    `.pro.user` extension) are generated to configure the build and run processes.
    The build process is determined by the kit chosen during the creation of the project.
    With the **Desktop Qt 5.2.1 MinGW 32 bit** kit, this process relies on the `qmake`
    and `mingw32-make` tools. With the `.pro` files as input, `qmake` generates the
    **makefiles** for Make (that is, `mingw32-make`) that drive the build process
    for each profile (that is, `release` and `debug`).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建Qt Creator项目时，会生成两个特殊文件（具有`.pro`和`.pro.user`扩展名），用于配置构建和运行过程。构建过程由创建项目时选择的工具链确定。使用**桌面Qt
    5.2.1 MinGW 32位**工具链，此过程依赖于`qmake`和`mingw32-make`工具。使用`.pro`文件作为输入，`qmake`为Make（即`mingw32-make`）生成**makefiles**，驱动每个配置文件（即`release`和`debug`）的构建过程。
- en: The qmake project file
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: qmake项目文件
- en: 'For our `flipImage` sample project, the `flipImage.pro` file looks like the
    following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`flipImage`示例项目，`flipImage.pro`文件看起来像以下代码：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding file illustrates the options that `qmake` needs to generate the
    appropriate makefiles to build the binaries for our project. Each line starts
    with a tag indicating an option (`TARGET`, `CONFIG`, `SOURCES`, `INCLUDEPATH`,
    and `LIBS`) followed with a mark to add (`+=`) or remove (`-=`) the value of the
    option. In this sample project, we deal with the non-Qt console application. The
    executable file is `flipImage.exe` (`TARGET`) and the source file is `flipImage.cpp`
    (`SOURCES`). Since this project is an OpenCV application, the two last tags point
    out to the location of the header files (`INCLUDEPATH`) and the OpenCV libraries
    (`LIBS`) used by this particular project (for example, `core` and `highgui`).
    Note that a backslash at the end of the line denotes continuation in the next
    line. In Windows, path backslashes should be duplicated, as shown in the preceding
    example.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的文件说明了`qmake`需要哪些选项来生成适当的makefiles，以便为我们的项目构建二进制文件。每一行都以一个标签开头，表示一个选项（`TARGET`、`CONFIG`、`SOURCES`、`INCLUDEPATH`和`LIBS`），后面跟着一个标记来添加（`+=`）或删除（`-=`）该选项的值。在这个示例项目中，我们处理的是非Qt控制台应用程序。可执行文件是`flipImage.exe`（`TARGET`），源文件是`flipImage.cpp`（`SOURCES`）。由于这个项目是OpenCV应用程序，最后两个标签指出了该特定项目使用的头文件位置（`INCLUDEPATH`）和OpenCV库（`LIBS`）（例如，`core`和`highgui`）。请注意，行尾的反斜杠表示下一行的延续。在Windows中，路径反斜杠应该重复，如前例所示。
- en: 'The following code shows the source code for the `flipImage` project:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了`flipImage`项目的源代码：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After building the project, we can run the `flipImage` application from the
    following command line:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 构建项目后，我们可以从以下命令行运行`flipImage`应用程序：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows the window with the output image after flipping
    on both the axes (horizontal and vertical):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了翻转后两个轴（水平和垂直）的输出图像窗口：
- en: '![The qmake project file](img/00007.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![qmake项目文件](img/00007.jpeg)'
- en: Input image (left) and output image after the flipImage tool has been applied
    (right)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 输入图像（左侧）和翻转图像工具应用后的输出图像（右侧）
- en: The source code starts with the inclusion of the header files (`core.hpp` and
    `highgui.hpp`) associated with the modules used by the application. Note that
    it is also possible to include only the `opencv.hpp` header since it will in turn
    include all the header files of OpenCV.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码以包含与应用程序使用的模块相关的头文件（`core.hpp`和`highgui.hpp`）开始。请注意，也可以只包含`opencv.hpp`头文件，因为它将依次包含OpenCV的所有头文件。
- en: 'The `flipImage` example gets the flip code and two file names (for the input
    and output images) as the command-line arguments. These arguments are obtained
    from the `argv[]` variable. The following example illustrates several essential
    tasks in an OpenCV application:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`flipImage`示例获取翻转代码和两个文件名（输入图像和输出图像）作为命令行参数。这些参数从`argv[]`变量中获取。以下示例说明了OpenCV应用程序中的几个基本任务：'
- en: Read an image from the file (`imread`) to a `Mat` class and check whether the
    target variable is not empty (`Mat::empty`).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从文件中读取图像到`Mat`类（`imread`）并检查目标变量是否不为空（`Mat::empty`）。
- en: Call a procedure (for example, `flip`) with the proxy classes, `InputArray`
    (`in_image`) and `OutputArray` (`out_image`).
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用代理类（例如，`InputArray` (`in_image`) 和 `OutputArray` (`out_image`)）调用过程（例如，`flip`）。
- en: Write an image to a file (`imwrite`).
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像写入文件（`imwrite`）。
- en: Create an output window (`namedWindow`) and show (`imshow`) an image on it.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个输出窗口（`namedWindow`）并在其上显示图像（`imshow`）。
- en: Wait for a key (`waitKey`).
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待按键（`waitKey`）。
- en: 'The code explanation is given as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对代码的解释：
- en: '`Mat imread(const string& filename, int flags=1)`: This function loads an image
    from the specified file and returns it. It also returns an empty matrix if the
    image cannot be read. It supports the most usual image formats of the files, detected
    by their content rather than by their extension. The `flags` parameter indicates
    the color of the image loaded in the memory, which may differ from the original
    color of the image stored in the file. In the example code, this function is used
    as follows:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mat imread(const string& filename, int flags=1)`: 此函数从指定的文件中加载图像并返回它。如果无法读取图像，它还返回一个空矩阵。它支持文件中最常见的图像格式，通过其内容而不是扩展名来检测。`flags`参数指示加载到内存中的图像颜色，这可能与文件中存储的原始图像颜色不同。在示例代码中，此函数的使用方式如下：'
- en: '[PRE10]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, the filename is obtained from the command-line arguments (the second argument
    after the command name). The `CV_LOAD_IMAGE_GRAYSCALE` flag indicates that the
    image should be loaded in the memory as an 8 bit grayscale image. For a description
    of the available tags, it is recommended to read the OpenCV online documentation
    (available at [http://docs.opencv.org/](http://docs.opencv.org/)).
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，文件名是从命令行参数中获得的（命令名之后的第二个参数）。`CV_LOAD_IMAGE_GRAYSCALE`标志表示图像应作为8位灰度图像加载到内存中。有关可用标签的描述，建议阅读OpenCV在线文档（可在[http://docs.opencv.org/](http://docs.opencv.org/)找到）。
- en: '`bool imwrite(const string& filename, InputArray img, const vector<int>& params=vector<int>())`:
    This function writes an image to a given file where some optional format parameters
    are specified after the second argument. The format of the output file is determined
    by the file extension. In our example code, this function is used without the
    format parameters as follows:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool imwrite(const string& filename, InputArray img, const vector<int>& params=vector<int>())`:
    此函数将图像写入指定的文件，其中在第二个参数之后指定了一些可选的格式参数。输出文件的格式由文件扩展名确定。在我们的示例代码中，此函数使用时没有格式参数，如下所示：'
- en: '[PRE11]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`void namedWindow(const string& winname, int flags=WINDOW_AUTOSIZE)`: This
    function creates a window without displaying it. The first argument is a string
    used as a name for the window and its identifier. The second argument is a flag
    or flag combination, which controls some window properties (for example, enable
    resize). Next, we show how this function is used in the example using a constant
    string as a name for the created window, as follows:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void namedWindow(const string& winname, int flags=WINDOW_AUTOSIZE)`: 此函数创建一个不显示的窗口。第一个参数是一个用作窗口名称及其标识符的字符串。第二个参数是一个标志或标志组合，它控制一些窗口属性（例如，启用调整大小）。接下来，我们将展示如何使用常量字符串作为创建的窗口名称来使用此函数，如下所示：'
- en: '[PRE12]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Compiling OpenCV with Qt adds some new functionality to the `highgui` module
    (more on that later). Then, the window created with Qt and the `namedWindow` function
    uses the default flags: `CV_WINDOW_AUTOSIZE`, `CV_WINDOW_KEEPRATIO`, or `CV_GUI_EXPANDED`.'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Qt 编译 OpenCV 为 `highgui` 模块添加了一些新功能（关于这一点稍后讨论）。然后，使用 Qt 和 `namedWindow` 函数创建的窗口使用默认标志：`CV_WINDOW_AUTOSIZE`、`CV_WINDOW_KEEPRATIO`
    或 `CV_GUI_EXPANDED`。
- en: '`void imshow(const string& winname, InputArray mat)`: This function displays
    an array (image) in a window with the properties set previously with the specified
    flags when the window was created. In the example, this function is used as follows:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void imshow(const string& winname, InputArray mat)`: 此函数在创建窗口时使用指定标志设置的属性中显示一个数组（图像）。在示例中，此函数的使用如下：'
- en: '[PRE13]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`int waitKey(int delay=0)`: This function waits for a key press or the milliseconds
    specified by `delay` (if `delay` is greater than zero). If `delay` is less than
    or equal to zero, it waits infinitely. It returns the key code if pressed or `-1`
    if a key is not pressed after the delay. This function has to be used after creating
    and activating a window. In the example code, it is used as follows:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int waitKey(int delay=0)`: 此函数等待按键或由 `delay` 指定的毫秒数（如果 `delay` 大于零）。如果 `delay`
    小于或等于零，则无限期等待。如果按下按键，则返回按键代码；如果在延迟后未按下按键，则返回 `-1`。此函数必须在创建和激活窗口后使用。在示例代码中，它的使用如下：'
- en: '[PRE14]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Reading and playing a video file
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和播放视频文件
- en: 'A video deals with moving images rather than still images, that is, display
    of a frame sequence at a proper rate (**FPS** or **frames per second**). The following
    `showVideo` example illustrates how to read and play a video file with OpenCV:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 视频处理的是动态图像而不是静态图像，即以适当的速率显示帧序列（**FPS** 或 **每秒帧数**）。以下 `showVideo` 示例说明了如何使用
    OpenCV 读取和播放视频文件：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The code explanation is given as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 代码解释如下：
- en: '`VideoCapture::VideoCapture(const string& filename)` – This class constructor
    provides a C++ API to grab a video from the files and cameras. The constructor
    can have one argument, either a filename or a device index for a camera. In our
    code example, it is used with a filename obtained from the command-line arguments
    as follows:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VideoCapture::VideoCapture(const string& filename)` – 此类构造函数提供了一个 C++ API，用于从文件和摄像头中抓取视频。构造函数可以有一个参数，即文件名或摄像头的设备索引。在我们的代码示例中，它使用从命令行参数获得的文件名如下：'
- en: '[PRE16]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`double VideoCapture::get(int propId)` – This method returns the specified
    `VideoCapture` property. If a property is not supported by the backend used by
    the `VideoCapture` class, the value returned is `0`. In the following example,
    this method is used to get the frames per second of the video file:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`double VideoCapture::get(int propId)` – 此方法返回指定的 `VideoCapture` 属性。如果 `VideoCapture`
    类使用的后端不支持该属性，则返回的值是 `0`。在以下示例中，此方法用于获取视频文件的帧率：'
- en: '[PRE17]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Since the method returns a `double` value, an explicit cast to `int` is done.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于该方法返回一个 `double` 值，因此执行显式转换为 `int`。
- en: '`bool VideoCapture::read(Mat& image)` – This method grabs, decodes, and returns
    a video frame from the `VideoCapture` object. The frame is stored in a `Mat` variable.
    If it fails (for example, when the end of the file is reached), it returns `false`.
    In the code example, this method is used as follows, also checking the end of
    file condition:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool VideoCapture::read(Mat& image)` – 此方法从 `VideoCapture` 对象中抓取、解码并返回一个视频帧。该帧存储在
    `Mat` 变量中。如果失败（例如，当文件末尾到达时），它返回 `false`。在代码示例中，此方法的使用如下，同时也检查文件末尾条件：'
- en: '[PRE18]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, the `waitKey` function is used with a computed number
    of milliseconds (`1000/fps`) trying to play the video file at the same rate it
    was originally recorded. Playing a video at a faster/slower rate (more/less fps)
    than that will produce a faster/slower playback.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`waitKey` 函数使用计算出的毫秒数（`1000/fps`）尝试以与原始录制相同的速率播放视频文件。以比原始速率更快/更慢的速率（更多/更少
    fps）播放视频将产生更快/更慢的播放。
- en: Live input from a camera
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来自摄像头的实时输入
- en: 'Usually, the computer vision problems we face are related with processing live
    video input from one or several cameras. In this section, we will describe the
    `recLiveVid` example, which grabs a video stream from a webcam (connected to our
    computer), displays the stream in a window, and records it in a file (`recorded.avi`).
    By default, in the following example, the video capture is taken from the camera
    with `cam_id=0`. However, it is possible to handle a second camera (`cam_id=1`)
    and grab the video from it, setting an argument at the command line:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们面临的计算机视觉问题与处理来自一个或多个摄像头的实时视频输入有关。在本节中，我们将描述 `recLiveVid` 示例，该示例从连接到我们计算机的摄像头中抓取视频流，在窗口中显示该流，并将其记录在文件中（`recorded.avi`）。默认情况下，在下面的示例中，视频捕获是从具有
    `cam_id=0` 的摄像头中获取的。然而，可以处理第二个摄像头（`cam_id=1`）并从它那里抓取视频，通过命令行设置一个参数：
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The code explanation is given as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 代码解释如下：
- en: '`VideoCapture::VideoCapture(int device)` – This class constructor initializes
    a `VideoCapture` object to receive a video from a camera rather than a file. In
    the following code example, it is used with a camera identifier:'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VideoCapture::VideoCapture(int device)` – 此类构造函数初始化一个 `VideoCapture` 对象，使其从摄像头而不是文件接收视频。在下面的代码示例中，它使用摄像头标识符：'
- en: '[PRE20]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`VideoWriter::VideoWriter(const string& filename, int fourcc, double fps, Size
    frameSize, bool isColor=true)` – This class constructor creates an object to write
    a video stream to a file with the name passed as the first argument. The second
    argument identifies the video codec with a code of four single characters (for
    example, in the previous sample code, FFDS stands for `ffdshow`). Obviously, only
    codecs actually installed in the local system can be used. The third argument
    indicates the frames per second of the recording. This property can be obtained
    from the `VideoCapture` object with the `VideoCapture::get` method, although it
    may return `0` if the property is not supported by the backend. The `frameSize`
    argument indicates the total size for each frame of the video that is going to
    be written. This size should be the same as the input video grabbed. Finally,
    the last argument allows writing the frame in color (default) or in grayscale.
    In the example code, the constructor is used with the `ffdshow` codec and the
    size of the video capture is as follows:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VideoWriter::VideoWriter(const string& filename, int fourcc, double fps, Size
    frameSize, bool isColor=true)` – 此类构造函数创建一个对象，用于将视频流写入名为第一个参数传递的文件。第二个参数使用四个字符的代码标识视频编解码器（例如，在先前的示例代码中，FFDS
    代表 `ffdshow`）。显然，只有实际安装在本地系统中的编解码器才能使用。第三个参数表示记录的每秒帧数。此属性可以通过 `VideoCapture::get`
    方法从 `VideoCapture` 对象中获取，尽管如果后端不支持该属性，它可能返回 `0`。`frameSize` 参数表示将要写入的视频的每一帧的总大小。此大小应与抓取的输入视频相同。最后，最后一个参数允许以彩色（默认）或灰度写入帧。在示例代码中，构造函数使用
    `ffdshow` 编解码器和以下视频捕获大小：'
- en: '[PRE21]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`void VideoCapture::release()` – This method closes the capturing device (webcam)
    or the video file. This method is always called implicitly at the end of the program.
    However, in the preceding example, it is called explicitly to avoid wrong termination
    of the output file (only noticeable when playing the recorded video).'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void VideoCapture::release()` – 此方法关闭捕获设备（摄像头）或视频文件。此方法在程序结束时总是隐式调用。然而，在先前的示例中，它是显式调用的，以避免输出文件错误终止（仅在播放录制的视频时才会注意到）。'
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter started with an explanation of how to build and install the OpenCV
    library with Qt (using CMake, the GNU g++ compiler, and GNU Make). Then, it is
    given a quick look to the modules organization of the library with an easy explanation
    of its basic API concepts. The chapter follows up with a more detailed revision
    of the fundamental data structures to store arrays and manipulate images. Also,
    three examples of code, such as `flipImage`, `showVideo` , and `recLiveVid` are
    explained to illustrate the basic use of the OpenCV library. The next chapter
    will introduce you to the two mainstream options available to provide graphical
    user interface capabilities for OpenCV programs.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从如何使用 Qt（使用 CMake、GNU g++ 编译器和 GNU Make）构建和安装 OpenCV 库的解释开始。然后，简要介绍了库的模块组织以及其基本
    API 概念的简单解释。本章接着更详细地修订了存储数组和操作图像的基本数据结构。此外，还解释了三个代码示例，例如 `flipImage`、`showVideo`
    和 `recLiveVid`，以说明 OpenCV 库的基本用法。下一章将介绍为 OpenCV 程序提供图形用户界面功能的两种主流选项。
