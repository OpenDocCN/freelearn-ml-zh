- en: 'Chapter 8: Managing Models at Scale Using a Model Registry'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：使用模型注册管理大规模模型
- en: As you begin to deploy multiple models and manage multiple model versions, ensuring
    core architectural practices such as governance, traceability, and recoverability
    are followed is challenging without using a model registry. A model registry is
    a central store containing metadata specific to a model version. It includes information
    on how the model was built, the performance of that model, as well as where and
    how the model is deployed. Model registry services or solutions often include
    additional capabilities, such as approval workflows and notifications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始部署多个模型并管理多个模型版本时，如果不使用模型注册，确保遵循核心架构实践（如治理、可追溯性和可恢复性）是具有挑战性的。模型注册是一个包含特定于模型版本的元数据的中央存储库。它包括有关模型如何构建、该模型的表现以及模型部署位置和方式的信息。模型注册服务或解决方案通常包括额外的功能，例如审批流程和通知。
- en: In this chapter, we'll cover the concept of a model registry and why a model
    registry is important for managing multiple models at scale. We'll also outline
    considerations you need to make when choosing a model registry implementation,
    in order to best meet the needs of your environment and operational requirements.
    For this, we'll examine two example implementations of a model registry. These
    will be a custom-built model registry using AWS services, as well as SageMaker's
    implementation (called the SageMaker model registry).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍模型注册的概念以及为什么模型注册对于管理大规模的多个模型很重要。我们还将概述在选择模型注册实现时需要考虑的因素，以便最好地满足您环境和操作需求。为此，我们将检查两个模型注册的示例实现。这些将是一个使用AWS服务的自定义构建的模型注册，以及SageMaker的实现（称为SageMaker模型注册）。
- en: Amazon SageMaker provides a built-in model registry. This is a fully managed
    model registry, optimized for use within Amazon SageMaker. However, if the Amazon
    SageMaker model registry does not meet your needs, there are several common patterns
    utilizing either a custom-built model registry or a third-party solution that
    also work well with Amazon SageMaker. Although there are many third-party model
    registries available that can be used for SageMaker-trained models, we do not
    cover them specifically in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon SageMaker提供了一个内置的模型注册功能。这是一个完全管理的模型注册，针对在Amazon SageMaker中使用进行了优化。然而，如果Amazon
    SageMaker模型注册不符合您的需求，有几种常见的模式，利用自定义构建的模型注册或第三方解决方案，这些解决方案与Amazon SageMaker也兼容得很好。尽管有许多第三方模型注册可供使用，用于SageMaker训练的模型，但我们不会在本章中具体介绍它们。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Using a model registry
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模型注册
- en: Choosing a model registry solution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择模型注册解决方案
- en: Managing models using the Amazon SageMaker model registry
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon SageMaker模型注册管理模型
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need an AWS account to run the examples included in this chapter. If
    you have not set up the data science environment yet, please refer to [*Chapter
    2*](B17249_02_Final_JM_ePub.xhtml#_idTextAnchor039)*, Data Science Environments*.
    This provides a walk-through of the setup process.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要有一个AWS账户来运行本章包含的示例。如果您尚未设置数据科学环境，请参阅[*第2章*](B17249_02_Final_JM_ePub.xhtml#_idTextAnchor039)*，数据科学环境*。该章节提供了设置过程的概述。
- en: 'Code examples included in the book are available on GitHub at the following
    URL: https://github.com/PacktPublishing/Amazon-SageMaker-Best-Practices/tree/main/Chapter08\.
    You will need to install a Git client to access them ([https://git-scm.com/](https://git-scm.com/)).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 书中包含的代码示例可在以下URL的GitHub上找到：https://github.com/PacktPublishing/Amazon-SageMaker-Best-Practices/tree/main/Chapter08。您需要安装Git客户端才能访问它们（[https://git-scm.com/](https://git-scm.com/)）。
- en: The code for this chapter is in the `CH08` folder of the GitHub repository.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于GitHub仓库的`CH08`文件夹中。
- en: Using a model registry
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模型注册
- en: A model registry allows you to centrally track key metadata for each model version.
    The granularity of metadata tracked is often dependent on the chosen implementation
    (Amazon SageMaker's model registry, a custom solution, or a third-party solution).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 模型注册允许您集中跟踪每个模型版本的关键元数据。跟踪的元数据粒度通常取决于所选的实现（Amazon SageMaker的模型注册、自定义解决方案或第三方解决方案）。
- en: 'Regardless of the implementation, the key metadata to consider includes model
    version identifiers, and the following information about each model version registered:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不论实现方式如何，需要考虑的关键元数据包括模型版本标识符以及每个已注册模型版本以下信息：
- en: '**Model inputs**: These include metadata related to the inputs and versions
    of those inputs used to train the model. This can include inputs such as the name
    of the Amazon S3 bucket storing the training data, training hyperparameters, and
    the **Amazon Elastic Container Registry** (**ECR**) repository or container image
    used for training.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型输入**：这包括与模型输入及其版本相关的元数据。这可以包括诸如存储训练数据的Amazon S3存储桶名称、训练超参数以及用于训练的**Amazon
    Elastic Container Registry**（**ECR**）仓库或容器镜像等输入。'
- en: '**Model performance**: This includes model evaluation data such as training
    and validation metrics.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型性能**：这包括模型评估数据，如训练和验证指标。'
- en: '`model.tar.gz`).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model.tar.gz`）。'
- en: '**Model deployment**: This includes metadata relating to the deployment of
    a model. This includes information such as the environment(s) a model version
    is deployed to, or the inference code that can be used for the registered model.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型部署**：这包括与模型部署相关的元数据。这包括诸如模型版本部署到的环境（们）或用于注册模型的推理代码等信息。'
- en: Amazon SageMaker offers multiple options for training models including built-in
    algorithms, built-in frameworks (that is, script mode), and a bring-your-own container.
    Depending on the option chosen, the number of inputs required to train a model
    can vary. This could impact the metadata you choose to track. As a result, it's
    important to determine the minimum requirements of metadata that you need to track
    in order to meet any regulatory or internal traceability requirements you may
    have.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon SageMaker提供了多种训练模型的选择，包括内置算法、内置框架（即脚本模式）以及自带容器。根据选择的不同，训练模型所需的输入数量可能会有所不同。这可能会影响您选择跟踪的元数据。因此，确定您需要跟踪的元数据的最低要求，以满足您可能具有的任何监管或内部可追溯性要求，是非常重要的。
- en: 'When evaluating levels of granularity, you need to track your use case. Keep
    in mind the way your teams are using Amazon SageMaker to build models. *Figure
    8.1* illustrates an example of the inputs, metrics, and artifacts to consider
    for tracking across the SageMaker options for training models:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当评估粒度级别时，您需要跟踪您的用例。记住您的团队是如何使用Amazon SageMaker来构建模型的。*图8.1*展示了在SageMaker的训练模型选项中跟踪时需要考虑的输入、指标和工件示例：
- en: '![Figure 8.1 – Model build metadata across training options'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 – 训练选项中的模型构建元数据'
- en: '](img/B17249_08_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_08_01.jpg)'
- en: Figure 8.1 – Model build metadata across training options
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 训练选项中的模型构建元数据
- en: 'Similar considerations exist for tracking and storing model deployment data.
    The metadata tracked for model deployments should provide enough information to
    package the model for deployment using Amazon SageMaker, to a real-time endpoint,
    or using batch transform. This should also allow someone to easily identify where
    a given model version is deployed, as well as how it is packaged for deployment
    and consumption. *Figure 8.2* illustrates an example of the inputs, deployment
    stages, and artifacts to consider for tracking across the SageMaker options for
    deploying models:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于跟踪和存储模型部署数据，也存在类似的考虑。为模型部署跟踪的元数据应提供足够的信息，以便使用Amazon SageMaker打包模型进行部署，到实时端点，或使用批量转换。这也应允许某人轻松地识别给定模型版本部署的位置，以及它是如何打包进行部署和使用的。*图8.2*展示了在SageMaker的模型部署选项中跟踪时需要考虑的输入、部署阶段和工件示例：
- en: '![Figure 8.2 – Model deploy metadata across deployment options'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 – 模型部署选项中的模型部署元数据'
- en: '](img/B17249_08_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_08_02.jpg)'
- en: Figure 8.2 – Model deploy metadata across deployment options
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 模型部署选项中的模型部署元数据
- en: 'If you had a couple of models to manage, you could potentially track the previous
    information using a simple method, such as a spreadsheet. However, as you begin
    to scale to 20, 100, or thousands of models, that mechanism for tracking model
    metadata no longer scales. Centrally storing and tracking the information (shown
    in *Figures 8.1* and *8.2*) for each model version provides the following benefits:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要管理几个模型，您可以使用简单的方法（如电子表格）来跟踪上述信息。然而，当您开始扩展到20、100或数千个模型时，跟踪模型元数据的那种机制就不再可扩展了。集中存储和跟踪每个模型版本的元数据（如图*8.1*和*8.2*所示）提供了以下好处：
- en: '**Operational efficiencies**: A model registry provides tracking and visibility
    into key inputs used to build a specific model version, output artifacts, and
    information about the deployment stages aligned to that version. Having this metadata
    allows for the ability to quickly understand how a model was built, how the model
    performed, information about the trained model artifact, and also provides the
    ability to track the environment(s) a specific version is deployed to.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作效率**：模型注册库提供了对构建特定模型版本所使用的关键输入、输出工件以及与该版本对齐的部署阶段信息的跟踪和可见性。拥有这些元数据允许您快速了解模型是如何构建的，模型的表现如何，有关训练模型工件的信息，同时也提供了跟踪特定版本部署到哪些环境的能力。'
- en: '**Recoverability**: To be able to recover a deployed model or roll back to
    a previous version, you need to have visibility to the inputs and input versions
    used to create a deployable artifact or a deployed model. In the event of system
    or human error, you can recover to a specific point in time using the metadata
    stored in the model registry, combined with protected versioned inputs. As an
    example, if an administrator were to accidentally delete a model endpoint, it
    should be easy to identify the artifacts needed to recreate that endpoint. This
    can be identified using metadata stored in the model registry that points to the
    location of the versioned model artifact, in combination with the versioned inference
    container image.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可恢复性**：为了能够恢复已部署的模型或回滚到之前的版本，您需要能够看到用于创建可部署工件或已部署模型的输入和输入版本。在系统或人为错误的情况下，您可以使用存储在模型注册库中的元数据，结合受保护的版本化输入，恢复到特定的时间点。例如，如果管理员意外删除了一个模型端点，应该能够轻松地识别用于重新创建该端点的工件。这可以通过存储在模型注册库中的元数据来识别，这些元数据指向版本化模型工件的位置，并结合版本化的推理容器镜像。'
- en: '**Pipeline sources and triggers**: Often there is a need to bridge the model
    build and model deployment environments. This is typical in large enterprises
    that have central deployment teams, or in organizations that separate model build
    and model deployment roles. A model registry provides a mechanism to capture the
    minimum metadata needed for visibility into how a model is built. However, it
    can also be used to trigger approval workflows and downstream deployments.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道源和触发器**：通常需要连接模型构建和模型部署环境。这在拥有中央部署团队的大型企业中很常见，或者在模型构建和模型部署角色分离的组织中很常见。模型注册库提供了一个机制来捕获对了解模型构建所需的最小元数据。然而，它也可以用于触发审批工作流和下游部署。'
- en: In the next section, we'll cover three patterns for creating a model registry
    to centrally track and manage machine learning models at scale. The considerations
    and high-level architectures of each will be outlined in order to guide you to
    the right fit for your specific use case.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍三种创建模型注册库的模式，以集中跟踪和管理大规模机器学习模型。我们将概述每个模式的考虑因素和高级架构，以便指导您找到适合您特定用例的正确匹配。
- en: Choosing a model registry solution
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择模型注册库解决方案
- en: 'There are multiple options available for implementing a model registry. While
    each implementation offers different features or capabilities, the concept of
    providing a central repository to track key metadata largely remains the same
    across implementations. In this section, we''ll cover a few common patterns for
    creating a model registry, as well as discuss the considerations for each. The
    patterns covered in this section include the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实现模型注册库有多种选项。虽然每种实现都提供不同的功能或能力，但提供中央存储库以跟踪关键元数据的概念在所有实现中基本保持一致。在本节中，我们将介绍创建模型注册库的一些常见模式，并讨论每个模式的考虑因素。本节中涵盖的模式包括以下内容：
- en: Amazon SageMaker model registry
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon SageMaker模型注册库
- en: Building a custom model registry
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义模型注册库
- en: Utilizing a third-party or **open source software** (**OSS**) model registry
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用第三方或**开源软件**（**OSS**）模型注册库
- en: Amazon SageMaker model registry
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Amazon SageMaker模型注册库
- en: The Amazon SageMaker model registry is a managed service that allows you to
    centrally catalog models, manage model versions, associate metadata with your
    model versions, and manage the approval status of a model version. The service
    is continuously evolving with new features, so the information contained in this
    section is current as of the publication date. It's always recommended to validate
    the current features and capabilities with the official documentation for the
    *Amazon SageMaker model registry* ([https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html)).
    The SageMaker model registry is optimized for use in conjunction with Amazon SageMaker
    Pipelines and projects; however, it can also be used independently as well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon SageMaker 模型注册表是一项托管服务，允许您集中目录化模型、管理模型版本、将元数据与您的模型版本关联，并管理模型版本的批准状态。该服务持续发展，新增功能，因此本节中的信息以出版日期为准。始终建议您通过官方文档验证当前功能和能力，官方文档为
    *Amazon SageMaker 模型注册表* ([https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html))。SageMaker
    模型注册表针对与 Amazon SageMaker Pipelines 和项目一起使用进行了优化；然而，它也可以独立使用。
- en: 'You can interact with the SageMaker''s model registry programmatically, as
    well as within Amazon SageMaker Studio. Studio provides a visual interface and
    experience for version management. The Studio interface also provides additional
    search capabilities. These can be seen in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过编程方式与 SageMaker 的模型注册表进行交互，也可以在 Amazon SageMaker Studio 中进行。Studio 提供了版本管理的可视化界面和体验。Studio
    界面还提供了额外的搜索功能。以下截图展示了这些功能：
- en: '![Figure 8.3 – The SageMaker Studio interface for the SageMaker model registry'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.3 – SageMaker Studio 的 SageMaker 模型注册表界面'
- en: '](img/B17249_08_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_08_03.jpg)'
- en: Figure 8.3 – The SageMaker Studio interface for the SageMaker model registry
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – SageMaker Studio 的 SageMaker 模型注册表界面
- en: 'The SageMaker model registry also includes an approval status that can be modified
    when a model is approved for production. This could be after a peer or designated
    deployment approver reviews the model metadata and metrics as a final quality
    gate for deployment. In the following screenshot, you can see how the approval
    status field integrates natively with MLOps projects in Amazon SageMaker Pipelines
    to create automatic triggers based on a change in model status:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当模型获得生产批准时，SageMaker 模型注册表还包括一个可以修改的批准状态。这可能是经过同行或指定的部署审批者审查模型元数据和指标，作为部署的最终质量关卡之后。在以下截图中，您可以看到批准状态字段如何与
    Amazon SageMaker Pipelines 中的 MLOps 项目集成，以根据模型状态的变化创建自动触发器：
- en: '![Figure 8.4 – SageMaker model registry – approval status'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.4 – SageMaker 模型注册表 – 批准状态'
- en: '](img/B17249_08_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_08_04.jpg)'
- en: Figure 8.4 – SageMaker model registry – approval status
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – SageMaker 模型注册表 – 批准状态
- en: 'The main components of the SageMaker model registry include the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker 模型注册表的主要组件包括以下内容：
- en: '**Model registry**: This is the central store containing model groups and it
    exists at the AWS account and AWS region levels. Cross-account privileges can
    be set up to interact with the model registry from other AWS accounts.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型注册表**：这是包含模型组的中央存储库，它存在于 AWS 账户和 AWS 区域级别。可以设置跨账户权限，以便从其他 AWS 账户与模型注册表进行交互。'
- en: '**Model groups**: Model groups are a logical grouping. They allow you to track
    different model versions that are related to, or grouped by, the same machine
    learning problem.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型组**：模型组是一种逻辑分组。它们允许您跟踪与同一机器学习问题相关或分组的不同模型版本。'
- en: '**Model packages**: Model packages are registered models or specific versions
    of a model.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型包**：模型包是已注册的模型或模型的特定版本。'
- en: '*Figure 8.5* illustrates the main components, where each model version is a
    model package contained in a model group inside the model registry:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 8.5* 展示了主要组件，其中每个模型版本都是包含在模型注册表内模型组中的模型包：'
- en: '![Figure 8.5 – Amazon SageMaker model registry components and usage'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.5 – Amazon SageMaker 模型注册表组件和用法'
- en: '](img/B17249_08_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_08_05.jpg)'
- en: Figure 8.5 – Amazon SageMaker model registry components and usage
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – Amazon SageMaker 模型注册表组件和用法
- en: When registering a new model version within a model group, you can use either
    the AWS SDK for Python (`boto3`) with the `create_model_package` method ([https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.create_model_package](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.create_model_package)),
    or create a step within a model build pipeline, using the `RegisterModel` step
    ([https://sagemaker.readthedocs.io/en/stable/workflows/pipelines/sagemaker.workflow.pipelines.html#pipeline](https://sagemaker.readthedocs.io/en/stable/workflows/pipelines/sagemaker.workflow.pipelines.html#pipeline))
    within Amazon SageMaker Pipelines. Understanding the ways you can register a model
    is important for understanding how you can use the SageMaker model registry outside
    of SageMaker Pipelines. It is also important for understanding how you can integrate
    the SageMaker model registry into other workflow tooling options you may already
    be using.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型组内注册新的模型版本时，您可以使用Python的AWS SDK（`boto3`）的`create_model_package`方法（[https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.create_model_package](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.create_model_package)），或者在使用Amazon
    SageMaker Pipelines中的`RegisterModel`步骤（[https://sagemaker.readthedocs.io/en/stable/workflows/pipelines/sagemaker.workflow.pipelines.html#pipeline](https://sagemaker.readthedocs.io/en/stable/workflows/pipelines/sagemaker.workflow.pipelines.html#pipeline)）在模型构建管道内创建一个步骤。了解您如何注册模型对于理解您如何在SageMaker管道之外使用SageMaker模型注册非常重要。这同样对于理解您如何将SageMaker模型注册集成到您可能已经使用的其他工作流程工具选项中也很重要。
- en: It's possible to register a model as either **versioned** or **unversioned**.
    Model packages that are versioned are part of a model group, and unversioned model
    packages are not part of a model group. The benefit of using a model group, or
    a versioned model, is the ability to logically group and manage models that are
    related, as well as provide the ability to automatically version models related
    to a specific **machine learning** (**ML**) problem. It's recommended to register
    your models using model groups with registered models that are versioned. This
    is the default setting.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将模型注册为**版本化**或**非版本化**。版本化的模型包是模型组的一部分，而非版本化的模型包不是模型组的一部分。使用模型组或版本化模型的优点在于能够逻辑上分组和管理相关的模型，以及提供自动版本化与特定**机器学习**（**ML**）问题相关的模型的能力。建议使用带有已注册版本化模型的模型组来注册您的模型。这是默认设置。
- en: 'A registered model has specific metadata that can be associated with that version.
    The metadata is defined and configured by the API request parameters. At high-level,
    the API accepts and associates the following key metadata as input:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 已注册的模型具有特定的元数据，可以与该版本关联。元数据由API请求参数定义和配置。在高级别上，API接受并关联以下关键元数据作为输入：
- en: '**Inference specification**: A series of parameters that provide detailed information
    and guidance on hosting the model for inference. Information passed includes data
    such as the Amazon ECR data. This contains the inference code image, the Amazon
    S3 bucket containing the trained model artifact, and the supported instance types
    when hosting the model for either real-time inference or for batch inference.
    For example, if a model requires GPU for inference, that can be captured in the
    registry.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推理规范**：一系列参数，提供有关托管模型进行推理的详细信息和指导。传递的信息包括如Amazon ECR数据等信息。这包含推理代码镜像、包含训练模型实体的Amazon
    S3存储桶，以及托管模型进行实时推理或批量推理时支持的实例类型。例如，如果模型需要GPU进行推理，这可以在注册表中捕获。'
- en: '**Model metrics**: Model evaluation metrics across evaluated categories, such
    as statistical bias in a model, or model quality.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型指标**：跨评估类别的模型评估指标，例如模型中的统计偏差或模型质量。'
- en: '**Validation specification**: Information about the SageMaker batch transform
    job(s) that were used to validate the model package (if applicable).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证规范**：有关用于验证模型包的SageMaker批量转换作业（如果适用）的信息。'
- en: '**Algorithm specification**: Details about the algorithm(s) used to create
    the model, as well as the Amazon S3 bucket containing the trained model artifact.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算法规范**：关于创建模型所使用的算法的详细信息，以及包含训练模型实体的Amazon S3存储桶。'
- en: '`CodeCommit` commit ID, author of the source, the SageMaker Pipelines project
    ID, and the name of the `CodeCommit` repository. While they are not restricted
    for use outside Amazon SageMaker Pipelines, they are direct pointers to SageMaker
    Pipelines project resources.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CodeCommit` 提交 ID、源作者、SageMaker Pipelines 项目 ID 以及 `CodeCommit` 仓库的名称。虽然它们在
    Amazon SageMaker Pipelines 之外的使用没有限制，但它们是直接指向 SageMaker Pipelines 项目资源的指针。'
- en: '**Model approval status**: This parameter is used to indicate whether a model
    is approved for deployment. This parameter can be used to manage workflows. In
    the case of SageMaker Pipelines projects, the automated workflow triggers are
    automatically set up based on the status of this field. If a model status is changed
    to **approved**, a downstream deployment workflow can be triggered.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型批准状态**：此参数用于指示模型是否获准部署。此参数可用于管理工作流程。在 SageMaker Pipelines 项目的情况下，基于此字段的状况，自动工作流程触发器会自动设置。如果模型状态更改为**批准**，则可以触发下游部署工作流程。'
- en: Amazon SageMaker's model registry is fully managed, meaning there are no servers
    to manage. It also natively integrates into SageMaker Pipelines, providing the
    ability to integrate directly with the model registry as a native step in your
    model build pipeline. It does this using the `RegisterModel` step.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon SageMaker 的模型注册库是全托管的，这意味着没有服务器需要管理。它还原生集成到 SageMaker Pipelines 中，提供直接在模型构建管道中将模型注册库作为原生步骤集成的功能。它是通过使用
    `RegisterModel` 步骤来实现的。
- en: For example, if you build a model build pipeline that contains the automated
    steps for data processing, training, and model evaluation, you can add a conditional
    step to validate the evaluation metric. If the evaluation metric is above a specified
    threshold (for example, accuracy > 90%), the pipeline can then be configured to
    automatically register your model.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您构建了一个包含数据预处理、训练和模型评估的自动化步骤的模型构建管道，您可以添加一个条件步骤来验证评估指标。如果评估指标高于指定的阈值（例如，准确率
    > 90%），则可以配置管道以自动注册您的模型。
- en: SageMaker's model registry also integrates natively with SageMaker Pipelines
    projects. Projects allow you to automatically provision MLOps pipelines and provision
    patterns that take advantage of the model registry. SageMaker projects can be
    used to automatically set up the model package group, as well as the approval
    workflows that can be used to trigger the pre-configured downstream deployment
    pipeline.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker 的模型注册库也原生集成到 SageMaker Pipelines 项目中。项目允许您自动配置 MLOps 管道和利用模型注册库的模板。SageMaker
    项目可用于自动设置模型包组，以及可以用来触发预配置的下游部署管道的批准工作流程。
- en: Important note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Amazon SageMaker Pipelines is covered in more detail in [*Chapter 12*](B17249_12_Final_JM_ePub.xhtml#_idTextAnchor222),
    *Machine Learning Automated Workflows*. The model registry is a component within
    SageMaker Pipelines but can be used independently of SageMaker Pipelines.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 12 章*](B17249_12_Final_JM_ePub.xhtml#_idTextAnchor222)“机器学习自动化工作流程”中更详细地介绍了
    Amazon SageMaker Pipelines。模型注册库是 SageMaker Pipelines 中的一个组件，但可以独立于 SageMaker
    Pipelines 使用。
- en: Many of the parameters passed as input to the `CreateModelPackage` API are tailored
    for Amazon SageMaker use and integrations with other Amazon SageMaker features.
    For example, data that can be associated with model metrics has a direct correlation
    with metrics produced with features such as Amazon SageMaker Clarify, model statistical
    bias metrics, Amazon SageMaker Model Monitor, and data quality constraint metrics.
    In another example, the validation specification relates specifically to a SageMaker
    batch transform job run to evaluate the SageMaker model package.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `CreateModelPackage` API 的许多参数针对 Amazon SageMaker 使用和与其他 Amazon SageMaker
    功能的集成进行了定制。例如，可以与模型指标相关联的数据与使用 Amazon SageMaker Clarify、模型统计偏差指标、Amazon SageMaker
    Model Monitor 和数据质量约束指标等特征产生的指标有直接关联。在另一个例子中，验证规范专门针对 SageMaker 批量转换作业运行以评估 SageMaker
    模型包。
- en: In this section, we reviewed the high-level architecture and usage of the Amazon
    SageMaker model registry to provide a basis for comparison against other options
    that will be covered in the next sections. Multiple options are being covered
    in this chapter. This is in order to support a variety of use cases and to help
    you choose the right option for your specific use case.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了 Amazon SageMaker 模型注册库的高级架构和用法，以便与其他选项进行比较，这些选项将在下一节中介绍。本章涵盖了多个选项。这是为了支持各种用例，并帮助您为您的特定用例选择正确的选项。
- en: Building a custom model registry
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建自定义模型注册库
- en: A model registry can also be built using AWS services. Building a custom registry
    requires more effort to build the solution, set up the integrations between AWS
    services, set up the ML pipeline integrations, and then manage the solution. However,
    a custom registry also offers the ability to completely customize a registry to
    meet the needs specific to your use case. This could include requirements specific
    to tracking more granular metadata, or requirements to support multiple ML services/platforms.
    In this section, we'll review one pattern for creating a custom model registry
    using AWS services.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 模型注册表也可以使用AWS服务构建。构建自定义注册表需要更多努力来构建解决方案、设置AWS服务之间的集成、设置ML管道集成，然后管理解决方案。然而，自定义注册表也提供了完全自定义注册表以满足特定于您的用例的需求的能力。这可能包括跟踪更细粒度元数据的特定要求，或支持多个ML服务/平台的要求。在本节中，我们将回顾使用AWS服务创建自定义模型注册表的一个模式。
- en: 'The pattern shown in *Figure 8.6* illustrates a simple model registry built
    using Amazon DynamoDB. DynamoDB can be used to store model metadata using a design
    pattern that separates groups of models by partition key. You could also consider
    a design pattern establishing a new table for different teams or business units
    if table-level isolation is preferred. Controls should also be set up using **AWS
    Identity and Access Management** (**IAM**) to control access to DynamoDB for specific
    tables, as well as specific primary keys to set up controls on who can access
    specific model groupings:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8.6*中所示的模式说明了使用Amazon DynamoDB构建的简单模型注册表。可以使用设计模式通过分区键将模型分组分开来存储模型元数据。您还可以考虑如果更喜欢表级隔离，为不同的团队或业务单元建立一个新的表的设计模式。还应使用**AWS身份和访问管理**（**IAM**）设置控制，以控制对DynamoDB特定表的访问，以及设置特定主键以对谁可以访问特定的模型分组进行控制：'
- en: '![Figure 8.6 – Custom-built model registry using AWS services'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.6 – 使用AWS服务的自定义模型注册表'
- en: '](img/B17249_08_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B17249_08_06.jpg)'
- en: Figure 8.6 – Custom-built model registry using AWS services
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 使用AWS服务的自定义模型注册表
- en: The schema for a model registry based on DynamoDB provides flexibility in the
    metadata that can be stored for each model version. As an example, you may want
    to track data versions that correspond to the object(s) in an Amazon S3 bucket.
    A custom-built model registry provides the flexibility to define and adjust the
    schema to meet your individual requirements for traceability or for more granular
    metadata tracking.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 基于DynamoDB的模型注册表架构为每个模型版本存储的元数据提供了灵活性。例如，您可能希望跟踪与Amazon S3存储桶中对象相对应的数据版本。一个自定义构建的模型注册表提供了定义和调整架构的灵活性，以满足您对可追溯性或更细粒度元数据跟踪的个别需求。
- en: Interacting with a custom-built model registry can be done through the Amazon
    DynamoDB API (**PutItem**) or through a custom-built API. Using a simple **PutItem**,
    API can often work for smaller teams or teams that perform end-to-end tasks, such
    as model building, model deployment, and operating in a production environment.
    However, in many cases, a model registry is built as part of a shared service
    (or ML platform component) that serves multiple teams and use cases. In this case,
    it's recommended to build an API that includes similar controls and validations
    that are seen in a managed service, such as SageMaker's model registry.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Amazon DynamoDB API（**PutItem**）或通过自定义构建的API与自定义构建的模型注册表进行交互。使用简单的**PutItem**
    API通常适用于较小的团队或执行端到端任务（如模型构建、模型部署和在生产环境中运行）的团队。然而，在许多情况下，模型注册表作为共享服务（或ML平台组件）的一部分构建，为多个团队和用例提供服务。在这种情况下，建议构建一个包含类似控制和验证的API，就像在托管服务（如SageMaker的模型注册表）中看到的那样。
- en: To extend a custom-built model registry to include workflow tasks, such as triggering
    a model deployment pipeline based on a changed attribute, the solution needs to
    be extended to set up the trigger to detect a change and then execute any downstream
    processes you want to invoke. To do this, you can enable DynamoDB Streams and
    AWS Lambda triggers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要将自定义构建的模型注册表扩展以包括工作流任务，例如根据更改的属性触发模型部署管道，解决方案需要扩展以设置检测更改的触发器，然后执行您想要调用的任何下游过程。为此，您可以使用DynamoDB
    Streams和AWS Lambda触发器。
- en: In this section, we covered a high-level implementation pattern for creating
    a custom model registry using AWS services. This example provides complete flexibility
    in the registry schema, data points collected, and in defining the intended usage.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了使用AWS服务创建自定义模型注册表的高级实现模式。此示例在注册表架构、收集的数据点和定义预期用途方面提供了完全的灵活性。
- en: As an example, you may have some teams that utilize Amazon SageMaker features,
    but other teams that are utilizing other services or even building models on-premises.
    Building a custom registry also allows the flexibility to place the model registry
    in the AWS account you choose, based on your existing multi-account strategy,
    and adjust the schema based on usage.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能有一些团队正在使用Amazon SageMaker功能，而其他团队则在使用其他服务，甚至是在本地构建模型。构建自定义注册库也允许您根据现有的多账户策略，将模型注册库放置在您选择的AWS账户中，并根据使用情况调整模式。
- en: The pattern discussed also utilizes AWS-managed services, DynamoDB and API Gateway,
    meaning there are still no servers to manage. However, this is not a packaged
    solution. Therefore, the services need to be set up and configured. Interfacing
    code may need to be written, integrations between services need to be set up,
    and the solution needs to be managed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论的模式还利用了AWS管理的服务，如DynamoDB和API Gateway，这意味着仍然没有服务器需要管理。然而，这并不是一个打包的解决方案。因此，需要设置和配置这些服务。可能需要编写接口代码，设置服务之间的集成，并管理解决方案。
- en: Utilizing a third-party or OSS model registry
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用第三方或开源模型注册库
- en: Next, we'll briefly cover using a third-party or OSS implementation of a model
    registry. Because there are a lot of options available, this section will focus
    on high-level considerations, rather than diving deep into any specific implementation.
    Common implementations, such as MLflow, have existing documentation provided for
    integrating with Amazon SageMaker. Those resources should be utilized when implementing
    a third-party/OSS implementation and integrating with Amazon SageMaker.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将简要介绍使用第三方或开源模型注册库的方法。由于可供选择的项目很多，本节将侧重于高级考虑因素，而不是深入探讨任何特定实现。常见的实现，如MLflow，已经提供了与Amazon
    SageMaker集成的现有文档。在实施第三方/开源实现并与Amazon SageMaker集成时，应利用这些资源。
- en: 'When considering a third-party or OSS implementation, there are a few questions
    to consider when evaluating your options:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑第三方或开源实现时，在评估您的选项时需要考虑以下几个问题：
- en: Does the implementation require you to manage the underlying servers, meaning
    you need to incur some additional operational overhead to ensure servers are patched,
    monitored, scaled, and set up using a readily available architecture?
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现是否要求您管理底层服务器，这意味着您需要承担一些额外的运营开销，以确保服务器得到修补、监控、扩展和设置，使用的是现成的架构？
- en: Does the implementation offer native integrations that make it easy to integrate
    with Amazon SageMaker?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现是否提供与Amazon SageMaker集成的原生集成，使其易于集成？
- en: What additional credentials do you need to set up and manage in order to integrate
    with Amazon SageMaker?
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了与Amazon SageMaker集成，您需要设置和管理哪些额外的凭证？
- en: Using a third-party or OSS option can add some additional overheads in terms
    of setup, integration, and ongoing management. However, many of these implementations
    offer robust capabilities, interfaces, and extensibility that may be preferred
    depending on your ML environments and use cases.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第三方或开源选项可能会在设置、集成和持续管理方面增加一些额外的开销。然而，许多这些实现提供了强大的功能、接口和可扩展性，这可能会根据您的ML环境和用例而受到青睐。
- en: In this section, we discussed three common patterns for model registry implementations
    for use with Amazon SageMaker models. Each pattern can be a valid choice depending
    on your requirements. As a result, key considerations for each were discussed
    to provide general guidance in order to choose the best implementation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了三种用于与Amazon SageMaker模型一起使用的模型注册库实现的常见模式。根据您的需求，每种模式都可以是一个有效的选择。因此，讨论了每个模式的关键考虑因素，以提供一般性指导，以便选择最佳实现。
- en: In general, it is recommended to choose the option that provides the capabilities
    you need based on your own requirements, combined with the option that offers
    the lowest development and operational overhead. In the next section, we'll narrow
    the focus to a technical deep dive into the Amazon SageMaker model registry.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，建议根据您自己的需求选择提供所需功能的选项，并结合提供最低开发和运营开销的选项。在下一节中，我们将重点深入探讨Amazon SageMaker模型注册库的技术细节。
- en: Managing models using the Amazon SageMaker model registry
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon SageMaker模型注册库管理模型
- en: An introduction to the Amazon SageMaker model registry was included in the section
    titled *Amazon SageMaker model registry*. This was done in order to explain the
    high-level architecture and features that are important to consider when choosing
    a model registry implementation. In this section, we'll dive deeper into the Amazon
    SageMaker model registry by covering the process and best practice guidance when
    setting up and using SageMaker's model registry.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为“Amazon SageMaker模型注册表”的部分中包含了Amazon SageMaker模型注册表的介绍。这是为了解释在选择模型注册表实现时需要考虑的总体架构和功能。在本节中，我们将通过介绍设置和使用SageMaker模型注册表的过程和最佳实践指南来深入了解Amazon
    SageMaker模型注册表。
- en: 'SageMaker''s model registry includes the model registry, as well as model groups
    and model packages. Each model group contains model versions, or model packages,
    related to the same ML problem. Each model package represents a specific version
    of a model and includes metadata associated with that version. The SageMaker model
    registry APIs are used when interacting with the SageMaker model registry, and
    those APIs can also be called through any of the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker的模型注册表包括模型注册表、模型组和模型包。每个模型组包含与相同机器学习问题相关的模型版本或模型包。每个模型包代表模型的特定版本，并包含与该版本相关的元数据。在与SageMaker模型注册表交互时使用SageMaker模型注册表API，并且可以通过以下任何一种方式调用这些API：
- en: '`create-model-package-group` or `create-model-package` commands.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create-model-package-group`或`create-model-package`命令。'
- en: '`boto3`): This uses methods to interact with the model registry, such as the
    `create_model_package_group` or `create_model_package` methods.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '(`boto3`): 这使用方法与模型注册表进行交互，例如`create_model_package_group`或`create_model_package`方法。'
- en: '**Amazon SageMaker Studio**: This uses the click-through interface in SageMaker
    Studio (as shown in *Figure 8.7*) to create a model package group.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon SageMaker Studio**：这使用SageMaker Studio中的点击式界面（如图8.7所示）来创建模型包组。'
- en: '`RegisterModelstep`.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RegisterModelstep`。'
- en: '*Figure 8.7* illustrates creating a model package group using the Studio UI:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图8.7*展示了使用Studio UI创建模型包组的过程：'
- en: '![Figure 8.7 – Using SageMaker Studio to create a new model group'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.7 – 使用SageMaker Studio创建新的模型组'
- en: '](img/B17249_08_07.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B17249_08_07.jpg)'
- en: Figure 8.7 – Using SageMaker Studio to create a new model group
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 使用SageMaker Studio创建新的模型组
- en: Although you can interact with the model registry using any of the methods listed,
    in this chapter we'll cover interacting with the model registry using the AWS
    Python SDK (`boto3`), to showcase a lower level of abstraction that is not dependent
    on Amazon SageMaker Studio or Amazon SageMaker Pipelines.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以使用列出的任何方法与模型注册表进行交互，但在本章中，我们将介绍使用AWS Python SDK（`boto3`）与模型注册表进行交互，以展示一个不依赖于Amazon
    SageMaker Studio或Amazon SageMaker Pipelines的低级别抽象。
- en: In this section, you learned more about the primary components of the SageMaker
    model registry, as well as the different ways you can interact with the model
    registry either programmatically or via the Studio UI.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了SageMaker模型注册表的主要组件，以及你可以通过编程方式或通过Studio UI与模型注册表进行交互的不同方式。
- en: Creating a model package group
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型包组
- en: A model package group contains a collection of model packages or model versions.
    A model package group is not required for registering a model package; however,
    it is recommended for the manageability of your model versions across ML use cases.
    A model package group can contain one or more model packages.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 模型包组包含一组模型包或模型版本。创建模型包组不是注册模型包的要求；然而，为了在机器学习用例中管理你的模型版本，建议使用模型包组。模型包组可以包含一个或多个模型包。
- en: 'Creating a model package group involves a method that accepts only a few parameters
    on input to configure, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个模型包组涉及一种方法，该方法在输入时仅接受少量参数进行配置，如下所示：
- en: '[PRE0]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code is used to create a model package group that can then be
    used by ML builders, as well as with ML pipelines to register model packages (versions)
    for deployment. Configuration for a model package group requires only a model
    package group name and optionally a description and any tags you want to associate
    with the model group.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码用于创建一个模型包组，然后可以由机器学习构建者使用，以及与机器学习管道一起注册模型包（版本）以进行部署。配置模型包组只需要一个模型包组名称，以及可选的描述和任何你想要与模型组关联的标签。
- en: 'Recommendations when creating model package groups include the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模型包组时的建议包括以下内容：
- en: '**Establishing naming standards for model package groups**: As the number of
    model package groups grows, having clear naming standards can help with easily
    identifying and searching for related model package groups. Some considerations
    may include a team identifier and/or project identifier. Because it''s common
    to have more than one team working on models, a team identifier can help easily
    sort and search for models specific to a given team. It''s also common to have
    more than one model used in an overall solution. In this case, it is valuable
    to have a way to group models related to a specific project or solution. This
    can be done through established naming conventions, as well as tagging.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建立模型包组的命名标准**：随着模型包组数量的增加，拥有清晰的命名标准可以帮助轻松识别和搜索相关的模型包组。一些考虑因素可能包括团队标识符和/或项目标识符。由于通常有多个团队在模型上工作，团队标识符可以帮助轻松地对特定团队的模型进行分类和搜索。在整体解决方案中使用多个模型也很常见。在这种情况下，拥有一种将特定项目或解决方案相关的模型分组的方法是非常有价值的。这可以通过建立命名约定以及标签来实现。'
- en: '`MLProject` is created with the value of `weather`. In this case, let''s assume
    a weather team is responsible for building weather-related models and only team
    members belonging to the weather team should be able to view model package groups
    with this tag. Resource tags can be used to establish conditional policies for
    access.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MLProject`使用`weather`的值创建。在这种情况下，让我们假设一个天气团队负责构建与天气相关的模型，并且只有属于天气团队的团队成员应该能够查看带有此标签的模型包组。资源标签可以用来建立访问的条件策略。'
- en: Creating a model package
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型包
- en: A model package is a model version that can exist outside of a model package
    group, referred to as *unversioned*, or inside a model package group, referred
    to as *versioned*. A model package outside of a model package group is referred
    to as unversioned because it's not using the versioning capabilities of a model
    package group. It's recommended to register model packages using model package
    groups for automatic management of model versions, and for added manageability
    as the number of model versions increases.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 模型包是一个可以存在于模型包组之外（称为*未版本化*）或存在于模型包组内（称为*版本化*）的模型版本。模型包组之外的模型包被称为未版本化，因为它没有使用模型包组的版本化功能。建议使用模型包组注册模型包，以自动管理模型版本，并在模型版本数量增加时提高可管理性。
- en: Important note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Amazon SageMaker has two concepts called `CreateModel` API. This is required
    to deploy your model using Amazon SageMaker and is discussed in the *Amazon SageMaker
    documentation* ([https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-model-pkg-model.html](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-model-pkg-model.html)).
    The second example, and the one we refer to in this chapter, is a model package
    specifically for Amazon SageMaker's model registry that is created using the `CreateModelPackage`
    API.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon SageMaker有两个名为`CreateModel` API的概念。这是使用Amazon SageMaker部署模型所必需的，并在*Amazon
    SageMaker文档*中讨论（[https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-model-pkg-model.html](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-model-pkg-model.html)）。第二个例子，也是我们在本章中提到的例子，是使用`CreateModelPackage`
    API创建的专门针对Amazon SageMaker模型注册表的模型包。
- en: The `CreateModelPackage` API accepts several parameters on input. The high-level
    parameter categories were already covered in the section titled *Amazon SageMaker
    model registry*, so in this section, we'll include an example that uses those
    parameters to then register a model using our sample use case. In [*Chapter 12*](B17249_12_Final_JM_ePub.xhtml#_idTextAnchor222),
    *Machine Learning Automated Workflows*, we'll again discuss the model registry
    in the context of an ML pipeline, to demonstrate how a model registry can be integrated
    into your automated workflows. For now, we'll focus on registering a model package
    as an indication that it has passed initial model validation outside of a pipeline
    workflow.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreateModelPackage` API在输入时接受多个参数。高级参数类别已在标题为*Amazon SageMaker模型注册表*的章节中介绍过，因此在本节中，我们将包括一个示例，使用这些参数然后通过我们的示例用例注册一个模型。在[*第12章*](B17249_12_Final_JM_ePub.xhtml#_idTextAnchor222)
    *机器学习自动化工作流程*中，我们将在ML管道的上下文中再次讨论模型注册表，以展示如何将模型注册表集成到您的自动化工作流程中。现在，我们将专注于注册模型包，以表明它已通过管道工作流程之外的初始模型验证。'
- en: 'In this case, the model has been trained and we''ve evaluated the training
    metrics. Once our model reaches the minimum threshold identified for our evaluation
    metric, we are ready to register the model package. Using the AWS Python SDK (`boto3`),
    we''ll register the model package, as shown in the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，模型已经训练完毕，我们已经评估了训练指标。一旦我们的模型达到评估指标所确定的最低阈值，我们就可以准备注册模型包了。使用 AWS Python
    SDK (`boto3`)，我们将注册模型包，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`ModelPackageGroupName` is required to associate the model package with a model
    package group. This allows you to take advantage of automatic versioning, as previously
    discussed.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModelPackageGroupName` 是必需的，用于将模型包与模型包组关联。这允许您利用之前讨论过的自动版本控制功能。'
- en: 'The model packages can then be viewed using the `list_model_packages` method,
    as well as within Amazon SageMaker Studio. To list the model package, use the
    following code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `list_model_packages` 方法以及 Amazon SageMaker Studio 来查看模型包。要列出模型包，请使用以下代码：
- en: '[PRE2]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Recommendations when creating model packages include the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模型包时的建议包括以下内容：
- en: '**Creating versioned packages**: Associate model packages with a model group
    by specifying the model package group when you create your model package. This
    allows for automatic versioning and grouping of use cases for easier management.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建版本化包**：在创建模型包时指定模型包组，以便将模型包与模型组关联。这允许自动进行版本控制和将用例分组，以便于管理。'
- en: '`ApprovalStatus` can optionally be used after a peer review of the registered
    model to indicate minimum standards or criteria have been met for that model.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对已注册模型进行同行评审后，可以选择使用 `ApprovalStatus` 来表明该模型已达到最低标准或符合特定标准。
- en: '**Protecting the inputs/artifacts referred to in the model registry**: Details
    contained in the model registry can be used to recreate or roll back deployed
    models; however, those resources need to be protected from unauthorized access
    or accidental deletion. For example, if an administrator accidentally deletes
    a SageMaker endpoint, it can still be easily recreated using the resources identified
    in the model registry. This would include the S3 object containing the model artifact,
    the S3 object with inference code (optional), and the ECR inference image. If
    any of those inputs are not available or cannot be guaranteed, then re-creating
    that endpoint may not be possible. Therefore, the metadata gives the information
    required, but there are still additional steps needed to protect inputs and artifacts.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保护模型注册表中引用的输入/工件**：模型注册表中的详细信息可用于重新创建或回滚已部署的模型；然而，这些资源需要受到未经授权的访问或意外删除的保护。例如，如果管理员意外删除了
    SageMaker 端点，它仍然可以很容易地使用模型注册表中标识的资源重新创建。这包括包含模型工件的 S3 对象、包含推理代码的 S3 对象（可选）以及 ECR
    推理镜像。如果这些输入中的任何一个不可用或无法保证，则可能无法重新创建该端点。因此，元数据提供了所需的信息，但仍需要采取额外步骤来保护输入和工件。'
- en: '**Considering tags when additional metadata is needed**: The metadata within
    SageMaker''s model registry is fixed to the input parameters that are defined
    in the API. However, tags can be used to supplement additional metadata. An example
    of the recommended use of tags here would be to capture the S3 version for resources
    such as the model artifact, in order to include more granularity on artifact tracking.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**考虑标签以添加额外元数据**：SageMaker 的模型注册表中的元数据固定在 API 中定义的输入参数。然而，可以使用标签来补充额外的元数据。在此处推荐使用标签的示例可能是捕获模型工件等资源的
    S3 版本，以便在工件跟踪中包含更多粒度。'
- en: '`MLProject` is created with the value of `weather`. In this case, let''s assume
    a weather team is responsible for building weather-related models and only team
    members from this team should be able to register new models to this model package
    group or other model package groups created with this tag. Resource tags can be
    used to establish conditional policies for access, in order to create model packages
    within specific model package groups. Resource tags can be used to establish conditional
    policies for access.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MLProject` 使用 `weather` 的值创建。在这种情况下，假设一个天气团队负责构建与天气相关的模型，并且只有该团队成员应该能够注册新模型到该模型包组或其他使用此标签创建的模型包组。资源标签可以用来建立访问条件策略，以便在特定的模型包组内创建模型包。资源标签可以用来建立访问条件策略。'
- en: In this section, we detailed the steps necessary to create a model package group
    and register model packages to that model package group using the sample code
    provided for this chapter. We also outlined recommendations to consider when creating
    your own model package groups and model packages. [*Chapter 12*](B17249_12_Final_JM_ePub.xhtml#_idTextAnchor222),
    *Machine Learning Automated Workflows*, will expand on the information covered
    in this chapter to include integrating Amazon SageMaker's model registry into
    an MLOps pipeline.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们详细介绍了使用本章提供的示例代码创建模型包组和将模型包注册到该模型包组的步骤。我们还概述了在创建自己的模型包组和模型包时需要考虑的建议。[*第12章*](B17249_12_Final_JM_ePub.xhtml#_idTextAnchor222)，*机器学习自动化工作流程*，将扩展本章涵盖的信息，包括将
    Amazon SageMaker 的模型注册集成到 MLOps 流程中。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered model registries and the benefits of utilizing a
    model registry to manage Amazon SageMaker models at scale. Common patterns for
    model registry implementations were covered, including Amazon SageMaker's model
    registry, building a custom model registry using AWS services, and utilizing a
    third-party or OSS model registry implementation. Each option is a valid choice
    depending on your use case and needs. However, we also highlighted some of the
    considerations when choosing the implementation that best fits your requirements.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了模型注册以及利用模型注册在规模上管理 Amazon SageMaker 模型的优势。涵盖了模型注册实现的常见模式，包括 Amazon
    SageMaker 的模型注册、使用 AWS 服务构建自定义模型注册以及利用第三方或开源模型注册实现。根据您的用例和需求，每个选项都是一个有效的选择。然而，我们也强调了在选择最适合您需求的实现时需要考虑的一些因素。
- en: Finally, we did a deep dive into Amazon SageMaker's model registry, covering
    detailed recommendations for creating model package groups, as well as registering
    models by creating model packages.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们深入探讨了 Amazon SageMaker 的模型注册功能，涵盖了创建模型包组和通过创建模型包注册模型的具体建议。
- en: In the next chapter, we'll cover performing live tests and updates of production
    models using Amazon SageMaker endpoint production variants.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍使用 Amazon SageMaker 端点生产变体进行生产模型的实时测试和更新的内容。
