- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Vertex AI Workbench – a One-Stop Tool for AI/ML Development Needs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vertex AI Workbench – AI/ML开发需求的一站式工具
- en: '**Machine learning** (**ML**) projects are complex in nature and require an
    entirely different type of development environment from normal software applications.
    When the data is huge, a data scientist may want to use several big data tools
    for quick wrangling or preprocessing needs, and a **deep learning** (**DL**) model
    might require several GPUs for fast training and experimentation. Additionally,
    dedicated compute resources are required for hosting models in production, and
    even more to scale them up to the enterprise level. Acquiring such resources and
    tools is quite costly, and even if we manage to buy and set things up, it takes
    a lot of effort and technical knowledge to bring them together into a project
    pipeline. Even after doing all that, there are risks of downtime and data security.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**机器学习**（**ML**）项目在本质上很复杂，需要与普通软件应用完全不同的开发环境。当数据量巨大时，数据科学家可能需要使用几个大数据工具来快速处理或预处理数据，而一个**深度学习**（**DL**）模型可能需要几个GPU来进行快速训练和实验。此外，还需要专门的计算资源来托管生产环境中的模型，以及更多资源来将其扩展到企业级。获取这些资源和工具成本很高，即使我们设法购买并设置好，也需要大量的努力和技术知识才能将它们整合到项目流程中。即便如此，仍然存在停机时间和数据安全的风险。'
- en: Nowadays, cloud-based solutions are very popular and take care of all the technical
    hassle, scaling, and security aspects for us. These solutions let ML developers
    focus more on project development and experimentation without worrying about infrastructure
    and other low-level things. As an **artificial intelligence** (**AI**)-first company,
    Google brings all the important resources required for ML project development
    under one umbrella called Vertex AI. In this chapter, we will learn about Vertex
    AI Workbench, a managed solution for Jupyter Notebook kernels that can help us
    bring our ML projects from prototype to production many times faster.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，基于云的解决方案非常流行，并且为我们处理所有的技术难题、扩展性和安全性方面的问题。这些解决方案让机器学习开发者能够更多地专注于项目开发和实验，无需担心基础设施和其他底层问题。作为一家以人工智能（**AI**）为先导的公司，谷歌将所有用于机器学习项目开发的重要资源都整合在一个名为Vertex
    AI的统一框架下。在本章中，我们将学习关于Vertex AI Workbench的内容，这是一个针对Jupyter Notebook内核的托管解决方案，可以帮助我们更快地将机器学习项目从原型推向生产。
- en: 'This chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: What is Jupyter Notebooks?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Jupyter Notebook？
- en: Vertex AI Workbench
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vertex AI Workbench
- en: Custom containers for Vertex AI Workbench
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vertex AI Workbench的自定义容器
- en: Scheduling notebooks in Vertex AI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vertex AI中安排笔记本
- en: What is Jupyter Notebook?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Jupyter Notebook？
- en: Jupyter Notebook is an open source web-based application for writing and sharing
    live code, documentation, visualizations, and so on. Jupyter Notebooks are very
    popular among ML practitioners as they provide the flexibility to run code dynamically
    and collaborate, provide fast visualizations, and can also be used for presentations.
    Most data scientists and ML practitioners prefer Jupyter Notebook as their primary
    tool for exploring, visualizing, and preprocessing data using powerful Python
    libraries such as pandas and NumPy. Jupyter Notebooks are very useful for **exploratory
    data analysis** (**EDA**) as they let us run small code blocks dynamically and
    also draw quick plots to understand data statistically. Notebooks can also be
    used for doing quick ML modeling experiments. Another good thing about Jupyter
    Notebooks is that they let us write Markdown cells as well. Using Markdown, we
    can explain each code block inside the notebook and turn it into a tutorial. Jupyter
    Notebooks are popular among ML communities to share and collaborate on projects
    on platforms such as GitHub and Kaggle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook是一个开源的基于网络的程序，用于编写和分享实时代码、文档、可视化等内容。Jupyter Notebook在机器学习从业者中非常受欢迎，因为它们提供了动态运行代码和协作的灵活性，提供了快速的可视化，还可以用于演示。大多数数据科学家和机器学习从业者更喜欢Jupyter
    Notebook作为他们探索、可视化和预处理数据的主要工具，这些数据科学家和从业者使用强大的Python库，如pandas和NumPy。Jupyter Notebook对于**探索性数据分析**（**EDA**）非常有用，因为它们允许我们动态地运行小的代码块，并快速绘制图表来理解数据统计。笔记本还可以用于进行快速的机器学习建模实验。关于Jupyter
    Notebook的另一个优点是，它允许我们编写Markdown单元格。使用Markdown，我们可以解释笔记本中的每个代码块，并将其转变为教程。Jupyter
    Notebook在机器学习社区中很受欢迎，用于在GitHub和Kaggle等平台上分享和协作项目。
- en: Getting started with Jupyter Notebook
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用Jupyter Notebook
- en: The Jupyter Notebook application can be installed in local systems using a simple
    `pip` command (shown next). For quick experiments, we can also utilize web-based
    notebook kernels such as Colab and Kaggle, where everything is already set and
    we can run the Python code directly. As these kernels are public, we can’t use
    them if our data is confidential, and we will have to install the Jupyter Notebook
    application on our system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook应用程序可以通过简单的`pip`命令（如下所示）在本地系统中安装。对于快速实验，我们还可以利用基于Web的笔记本内核，如Colab和Kaggle，那里一切都已经设置好，我们可以直接运行Python代码。由于这些内核是公开的，如果我们有保密数据，我们无法使用它们，我们不得不在我们的系统上安装Jupyter
    Notebook应用程序。
- en: 'We can install the Jupyter application on our local system by using the following
    `pip` command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下`pip`命令在我们的本地系统上安装Jupyter应用程序：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the application is installed, it can be launched through the terminal
    by typing the following command, and it will automatically open the Jupyter application
    in a browser tab:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序安装完成后，可以通过在终端输入以下命令来启动，它将在浏览器标签页中自动打开Jupyter应用程序：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If it doesn’t open the browser tab automatically, we can launch the application
    by typing the following URL: [http://localhost:8888/tree](http://localhost:8888/tree).
    By default, the Jupyter server starts on port `8888`, but if this port is unavailable,
    it finds the next available port. If we are interested in using a custom port,
    we can launch Jupyter by passing a custom port number.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它没有自动打开浏览器标签页，我们可以通过输入以下URL来启动应用程序：[http://localhost:8888/tree](http://localhost:8888/tree)。默认情况下，Jupyter服务器在端口`8888`上启动，但如果该端口不可用，它会找到下一个可用的端口。如果我们有兴趣使用自定义端口，我们可以通过传递自定义端口号来启动Jupyter。
- en: 'Here is a terminal command for launching the Jupyter application on custom
    port number `9999`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是启动Jupyter应用程序在自定义端口`9999`的终端命令：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In some cases, the Jupyter server may ask for a token (maybe in the case of
    a non-default browser) when we try to hit the aforementioned URL manually. In
    such cases, we can copy the URL from the terminal output that provides the token
    within the URL. Alternatively, we can obtain a token by running the `jupyter notebook
    list` command in the terminal.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，当我们尝试手动点击上述URL时，Jupyter服务器可能会要求我们提供一个令牌（可能是在非默认浏览器的情况下）。在这种情况下，我们可以从提供令牌的URL中复制URL。或者，我们可以在终端中运行`jupyter
    notebook list`命令来获取令牌。
- en: 'Once we are able to launch the application server in a browser, the Jupyter
    server looks something like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们能够在浏览器中启动应用程序服务器，Jupyter服务器看起来就像这样：
- en: '![Figure 4.1 – Jupyter application server UI](img/B17792_04_1.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – Jupyter应用程序服务器UI](img/B17792_04_1.jpg)'
- en: Figure 4.1 – Jupyter application server UI
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – Jupyter应用程序服务器UI
- en: 'Now, we can launch a Jupyter Notebook instance by clicking on the **New** button.
    It creates a new notebook and saves it in the same directory where we started
    the Jupyter Notebook from the terminal. We can now open that notebook in a new
    tab and start running scripts. The following screenshot shows an empty notebook:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过点击**新建**按钮来启动一个Jupyter Notebook实例。它创建一个新的笔记本，并将其保存在我们从终端启动Jupyter Notebook的同一目录中。我们现在可以在新标签页中打开那个笔记本并开始运行脚本。以下截图显示了一个空白的笔记本：
- en: '![Figure 4.2 – A Jupyter Notebook instance](img/B17792_04_2.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – Jupyter Notebook实例](img/B17792_04_2.jpg)'
- en: Figure 4.2 – A Jupyter Notebook instance
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – Jupyter Notebook实例
- en: As we can see in the previous screenshot, the web UI provides multiple options
    to manipulate notebooks, code, cells, kernels, and so on. A notebook cell can
    execute code or can be converted into a Markdown cell by changing its type from
    the drop-down menu. There are also options for exporting notebooks into different
    formats such as HTML, PDF, Markdown, LaTeX, and so on for creating reports or
    presentations. Going further in the book, we will be working with notebooks a
    lot for data wrangling, modeling, and so on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，Web UI提供了多种操作笔记本、代码、单元格、内核等选项。一个笔记本单元格可以执行代码，或者可以通过更改下拉菜单中的类型将其转换为Markdown单元格。还有将笔记本导出为不同格式（如HTML、PDF、Markdown、LaTeX等）的选项，以便创建报告或演示文稿。在本书的进一步内容中，我们将大量使用笔记本进行数据处理、建模等。
- en: Now that we have some basic understanding of Jupyter Notebooks in general, let’s
    see how Vertex AI Workbench provides a more enriched experience of working with
    a Jupyter Notebook-based environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Jupyter Notebook的一般概念有了基本的了解，让我们看看Vertex AI Workbench如何提供一个更丰富的基于Jupyter
    Notebook环境的体验。
- en: Vertex AI Workbench
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vertex AI Workbench
- en: While working on an ML project, if we are running a Jupyter Notebook in a local
    environment, or using a web-based Colab- or Kaggle-like kernel, we can perform
    some quick experiments and get some initial accuracy or results from ML algorithms
    very fast. But we hit a wall when it comes to performing large-scale experiments,
    launching long-running jobs, hosting a model, and also in the case of model monitoring.
    Additionally, if the data related to a project requires some more granular permissions
    on security and privacy (fine-grained control over who can view/access the data),
    it’s not feasible in local or Colab-like environments. All these challenges can
    be solved just by moving to the cloud. Vertex AI Workbench within Google Cloud
    is a JupyterLab-based environment that can be leveraged for all kinds of development
    needs of a typical data science project. The JupyterLab environment is very similar
    to the Jupyter Notebook environment, and thus we will be using these terms interchangeably
    throughout the book.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行 ML 项目工作时，如果我们在一个本地环境中运行 Jupyter Notebook，或者使用类似 Colab 或 Kaggle 的基于网络的内核，我们可以快速进行一些实验，并从
    ML 算法中获得一些初始准确度或结果。但是，当我们进行大规模实验、启动长时间运行的任务、托管模型以及模型监控时，我们会遇到障碍。此外，如果与项目相关的数据需要在安全和隐私方面有更细粒度的权限（对谁可以查看/访问数据的精细控制），在本地或类似
    Colab 的环境中是不切实际的。所有这些挑战只需迁移到云端就可以解决。Google Cloud 中的 Vertex AI 工作台是一个基于 JupyterLab
    的环境，可以用于典型数据科学项目的所有开发需求。JupyterLab 环境与 Jupyter Notebook 环境非常相似，因此我们将在整本书中使用这些术语交替使用。
- en: 'Vertex AI Workbench has options for creating *managed notebook instances* as
    well as *user-managed notebook instances*. User-managed notebook instances give
    more control to the user, while managed notebooks come with some key extra features.
    We will discuss more about these later in this section. Some key features of the
    Vertex AI Workbench notebook suite include the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Vertex AI 工作台提供了创建 *托管笔记本实例* 以及 *用户管理笔记本实例* 的选项。用户管理笔记本实例赋予用户更多控制权，而托管笔记本则附带一些关键额外功能。我们将在本节后面进一步讨论这些功能。Vertex
    AI 工作台笔记本套件的一些关键特性包括以下内容：
- en: Fully managed**–**Vertex AI Workbench provides a Jupyter Notebook-based fully
    managed environment that provides enterprise-level scale without managing infrastructure,
    security, and user-management capabilities.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全托管**-**Vertex AI 工作台提供了一个基于 Jupyter Notebook 的完全托管环境，该环境提供企业级规模，无需管理基础设施、安全和用户管理功能。
- en: Interactive experience–Data exploration and model experiments are easier as
    managed notebooks can easily interact with other Google Cloud services such as
    storage systems, big data solutions, and so on.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互式体验 - 由于托管笔记本可以轻松与其他 Google Cloud 服务（如存储系统、大数据解决方案等）交互，因此数据探索和模型实验变得更加容易。
- en: Prototype to production AI–Vertex AI notebooks can easily interact with other
    Vertex AI tools and Google Cloud services and thus provide an environment to run
    end-to-end ML projects from development to deployment with minimal transition.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从原型到生产 AI - Vertex AI 笔记本可以轻松与其他 Vertex AI 工具和 Google Cloud 服务交互，从而提供一个从开发到部署的端到端
    ML 项目运行环境，转换过程最小化。
- en: Multi-kernel support–Workbench provides multi-kernel support in a single managed
    notebook instance including kernels for tools such as TensorFlow, PyTorch, Spark,
    and R. Each of these kernels comes with pre-installed useful ML libraries and
    lets us install additional libraries as required.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多内核支持 - 工作台在单个托管笔记本实例中提供多内核支持，包括 TensorFlow、PyTorch、Spark 和 R 等工具的内核。每个内核都预装了有用的
    ML 库，并允许我们根据需要安装额外的库。
- en: Scheduling notebooks–Vertex AI Workbench lets us schedule notebook runs on an
    ad hoc and recurring basis. This functionality is quite useful in setting up and
    running large-scale experiments quickly. This feature is available through managed
    notebook instances. More information will be provided on this in the coming sections.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 笔记本排程 - Vertex AI 工作台允许我们根据需要和定期排程笔记本运行。此功能在快速设置和运行大规模实验时非常有用。此功能通过托管笔记本实例提供。关于此功能的更多信息将在后续章节中提供。
- en: With this background, we can now start working with Jupyter Notebooks on Vertex
    AI Workbench. The next section provides basic guidelines for getting started with
    notebooks on Vertex AI.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在此背景下，我们现在可以开始在 Vertex AI 工作台上使用 Jupyter Notebook。下一节将提供有关在 Vertex AI 上开始使用笔记本的基本指南。
- en: Getting started with Vertex AI Workbench
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用 Vertex AI 工作台
- en: Go to the Google Cloud console and open **Vertex AI** from the products menu
    on the left pane or by using the search bar on the top. Inside Vertex AI, click
    on **Workbench**, and it will open a page very similar to the one shown in *Figure
    4**.3*. More information on this is available in the official documentation ([https://cloud.google.com/vertex-ai/docs/workbench/introduction](https://cloud.google.com/vertex-ai/docs/workbench/introduction)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 Google Cloud 控制台，从左侧面板的产品菜单或使用顶部搜索栏打开 **Vertex AI**。在 Vertex AI 中，点击 **Workbench**，它将打开一个与
    *图 4*.3* 非常相似的页面。更多相关信息可在官方文档中找到 ([https://cloud.google.com/vertex-ai/docs/workbench/introduction](https://cloud.google.com/vertex-ai/docs/workbench/introduction))。
- en: '![Figure 4.3 – Vertex AI Workbench UI within the Google Cloud console](img/B17792_04_3.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – Google Cloud 控制台中 Vertex AI 工作台 UI](img/B17792_04_3.jpg)'
- en: Figure 4.3 – Vertex AI Workbench UI within the Google Cloud console
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – Google Cloud 控制台中 Vertex AI 工作台 UI
- en: As we can see, Vertex AI Workbench is basically Jupyter Notebook as a service
    with the flexibility of working with managed as well as user-managed notebooks.
    User-managed notebooks are suitable for use cases where we need a more customized
    environment with relatively higher control. Another good thing about user-managed
    notebooks is that we can choose a suitable Docker container based on our development
    needs; these notebooks also let us change the type/size of the instance later
    on with a restart.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Vertex AI Workbench 主要是作为服务的 Jupyter Notebook，同时具有使用托管以及用户托管笔记本的灵活性。用户托管笔记本适用于需要相对更高控制度的定制化环境的使用场景。关于用户托管笔记本的另一件好事是我们可以根据我们的开发需求选择合适的
    Docker 容器；这些笔记本还允许我们通过重启来更改实例的类型/大小。
- en: 'To choose the best Jupyter Notebook option for a particular project, it’s important
    to know about the common differences between the two solutions. *Table 4.1* describes
    some common differences between fully managed and user-managed notebooks:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要为特定项目选择最佳的 Jupyter Notebook 选项，了解两种解决方案之间的常见差异很重要。*表 4.1* 描述了完全托管和用户托管笔记本之间的某些常见差异：
- en: '| **Vertex** **AI-managed notebooks** | **Vertex AI** **user-managed notebooks**
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **Vertex AI 管理笔记本** | **Vertex AI 用户管理笔记本** |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Google-managed environment with integrations and features that provide us
    with an end-to-end notebook-based production environment without setting up anything
    by hand. | Heavily customizable VM instances (with prebuilt DL images) that are
    ideal for users who need a lot of control over the environment. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 提供集成和功能，为我们提供一个端到端基于笔记本的生产环境，无需手动设置任何内容。| 高度可定制的虚拟机实例（带有预构建的深度学习镜像），非常适合需要大量控制环境的用户。|'
- en: '| Scaling up and down (for vCPUs and RAM) can be performed from within the
    notebook itself without needing to restart the environment. | Changing the size/memory
    of an instance requires stopping the instance in the Workbench UI and restarting
    it every time. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 可以在笔记本内部进行横向和纵向扩展（对于 vCPU 和 RAM），无需重新启动环境。| 改变实例的大小/内存需要在 Workbench UI 中停止实例，并每次重新启动它。|'
- en: '| Managed notebooks let us browse data from **Google Cloud Storage** (**GCS**)
    and BigQuery without leaving the Jupyter environment (with GCS and BigQuery integrations).
    | UI-level data browsing is not supported in user-managed notebooks. However,
    we can read the data using Python in a notebook cell and view it. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 管理笔记本让我们能够在不离开 Jupyter 环境的情况下浏览来自 **Google Cloud Storage** （**GCS**） 和 BigQuery
    的数据（带有 GCS 和 BigQuery 集成）。| 在用户管理笔记本中不支持 UI 级别的数据浏览。然而，我们可以使用笔记本中的 Python 读取数据并查看它。|'
- en: '| Automated notebook runs are supported with one-time and recurring schedules.
    The executor runs scheduled tasks and saves results even when an instance is in
    a shutdown state. | Automated runs are not yet supported in a user-managed environment.
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 支持一次性和重复性计划的自动化笔记本运行。执行器运行计划任务并保存结果，即使实例处于关闭状态。| 在用户管理环境中尚不支持自动化运行。|'
- en: '| Less control over networking and security. | Option to implement desired
    networking and security features and VPC service controls on a per-need basis.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 对网络和安全的控制较少。| 可根据需要实施所需的网络和安全功能以及 VPC 服务控制。|'
- en: '| Not much control for a DL-based environment while setting up notebooks. |
    User-managed instances provide multiple DL VM options to choose from during notebook
    creation. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 在设置笔记本时对基于深度学习的环境控制不多。| 用户托管实例在创建笔记本时提供多个深度学习虚拟机选项。|'
- en: Table 4.1 – Differences between managed and user-managed notebook instances
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.1 – 管理和用户管理笔记本实例之间的差异
- en: 'Let’s create one user-managed notebook to check the available options:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个用户管理的笔记本来检查可用的选项：
- en: '![Figure 4.4 – Jupyter Notebook kernel configurations](img/B17792_04_4.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – Jupyter Notebook 内核配置](img/B17792_04_4.jpg)'
- en: Figure 4.4 – Jupyter Notebook kernel configurations
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – Jupyter Notebook 内核配置
- en: As we can see in the preceding screenshot, user-managed notebook instances come
    with several customized image options to choose from. Along with the support of
    tools such as TensorFlow Enterprise, PyTorch, JAX, and so on, it also lets us
    decide whether we want to work with GPUs (which can be changed later, of course,
    as per needs). These customized images come with all useful libraries pre-installed
    for the desired framework, plus provide the flexibility to install any third-party
    packages within the instance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，用户管理的笔记本实例提供了几个自定义图像选项供选择。除了支持 TensorFlow Enterprise、PyTorch、JAX
    等工具之外，它还允许我们决定是否想要使用 GPU（当然，根据需要可以稍后更改）。这些自定义图像为所需的框架预装了所有有用的库，并提供在实例内安装任何第三方软件包的灵活性。
- en: 'After choosing the appropriate image, we get more options to customize things
    such as notebook name, notebook region, operating system, environment, machine
    types, accelerators, and so on (see the following screenshot):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的镜像后，我们可以获得更多选项来自定义笔记本名称、笔记本区域、操作系统、环境、机器类型、加速器等（参见以下屏幕截图）：
- en: '![Figure 4.5 – Configuring a new user-managed Jupyter Notebook](img/B17792_04_5.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 配置新的用户管理的 Jupyter Notebook](img/B17792_04_5.jpg)'
- en: Figure 4.5 – Configuring a new user-managed Jupyter Notebook
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 配置新的用户管理的 Jupyter Notebook
- en: 'Once we click on the **CREATE** button, it can take a couple of minutes to
    create a notebook instance. Once it is ready, we can launch the Jupyter instance
    in a browser tab using the link provided inside Workbench (see *Figure 4**.6*).
    We also get the option to stop the notebook for some time when we are not using
    it (to reduce cost):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击 **创建** 按钮，创建笔记本实例可能需要几分钟。一旦准备好，我们可以使用 Workbench 内提供的链接在浏览器标签页中启动 Jupyter
    实例（参见 *图 4**.6*）。我们还有在不用它时暂时停止笔记本的选项（以降低成本）：
- en: '![Figure 4.6 – A running Jupyter Notebook instance](img/B17792_04_6.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 运行的 Jupyter Notebook 实例](img/B17792_04_6.jpg)'
- en: Figure 4.6 – A running Jupyter Notebook instance
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 运行的 Jupyter Notebook 实例
- en: 'This Jupyter instance can be accessed by all team members having access to
    Workbench, which helps in collaborating and sharing progress with other teammates.
    Once we click on **OPEN JUPYTERLAB**, it opens a familiar Jupyter environment
    in a new tab (see *Figure 4**.7*):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Jupyter 实例可以被所有有权访问 Workbench 的团队成员访问，这有助于与其他团队成员协作和分享进度。一旦我们点击 **打开 JupyterLab**，它将在新标签页中打开一个熟悉的
    Jupyter 环境（参见 *图 4**.7*）：
- en: '![Figure 4.7 – A user-managed JupyterLab instance in Vertex AI Workbench](img/B17792_04_7.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – Vertex AI Workbench 中的由用户管理的 JupyterLab 实例](img/B17792_04_7.jpg)'
- en: Figure 4.7 – A user-managed JupyterLab instance in Vertex AI Workbench
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – Vertex AI Workbench 中的用户管理的 JupyterLab 实例
- en: 'A Google-managed JupyterLab instance also looks very similar (see *Figure 4**.8*):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Google 管理的 JupyterLab 实例看起来也非常相似（参见 *图 4**.8*）：
- en: '![Figure 4.8 – A Google-managed JupyterLab instance in Vertex AI Workbench](img/B17792_04_8.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – Vertex AI Workbench 中的由 Google 管理的 JupyterLab 实例](img/B17792_04_8.jpg)'
- en: Figure 4.8 – A Google-managed JupyterLab instance in Vertex AI Workbench
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – Vertex AI Workbench 中的由 Google 管理的 JupyterLab 实例
- en: Now that we can access the notebook instance in the browser, we can launch a
    new Jupyter Notebook or terminal and get started on the project. After providing
    sufficient permissions to the service account, many useful Google Cloud services
    such as BigQuery, GCS, Dataflow, and so on can be accessed from the Jupyter Notebook
    itself using SDKs. This makes Vertex AI Workbench a one-stop tool for every ML
    development need.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过浏览器访问笔记本实例，我们可以启动一个新的 Jupyter Notebook 或终端，开始项目。一旦为服务账户提供了足够的权限，我们就可以通过
    SDK 从 Jupyter Notebook 本身访问许多有用的 Google Cloud 服务，如 BigQuery、GCS、Dataflow 等。这使得
    Vertex AI Workbench 成为每个机器学习开发需求的终极工具。
- en: Note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: We should stop Vertex AI Workbench instances when we are not using them or don’t
    plan to use them for a long period of time. This will help prevent us from incurring
    costs from running them unnecessarily for a long period of time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们不再使用 Vertex AI Workbench 实例或计划长时间不使用时，我们应该停止这些实例。这将帮助我们避免因长时间不必要的运行而产生费用。
- en: In the next sections, we will learn how to create notebooks using custom containers
    and how to schedule notebooks with Vertex AI Workbench.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将学习如何使用定制容器创建笔记本以及如何使用 Vertex AI 工作台安排笔记本。
- en: Custom containers for Vertex AI Workbench
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适用于 Vertex AI 工作台的定制容器
- en: Vertex AI Workbench gives us the flexibility of creating notebook instances
    based on a custom container as well. The main advantage of a custom container-based
    notebook is that it lets us customize the notebook environment based on our specific
    needs. Suppose we want to work with a new TensorFlow version (or any other library)
    that is currently not available as a predefined kernel. We can create a custom
    Docker container with the required version and launch a Workbench instance using
    this container. Custom containers are supported by both managed and user-managed
    notebooks.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Vertex AI 工作台还提供了基于定制容器的笔记本实例创建的灵活性。基于定制容器的笔记本的主要优势是它允许我们根据我们的特定需求自定义笔记本环境。假设我们想要使用当前作为预定义内核不可用的新的
    TensorFlow 版本（或任何其他库）。我们可以创建一个包含所需版本的定制 Docker 容器，并使用此容器启动一个 Workbench 实例。定制容器由托管和非托管笔记本都支持。
- en: 'Here is how to launch a user-managed notebook instance using a custom container:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用定制容器启动用户管理的笔记本实例的步骤：
- en: 'The first step is to create a custom container based on the requirements. Most
    of the time, a derivative container (a container based on an existing DL container
    image) would be easy to set up. See the following example Dockerfile; here, we
    are first pulling an existing TensorFlow GPU image and then installing a new TensorFlow
    version from the source:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是根据要求创建一个定制容器。大多数情况下，派生容器（基于现有深度学习容器镜像的容器）设置起来会很容易。请参阅以下示例 Dockerfile；在这里，我们首先拉取现有的
    TensorFlow GPU 镜像，然后从源安装新的 TensorFlow 版本：
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, build and push the container image to **Container Registry**, such that
    it should be accessible to the **Google Compute Engine** (**GCE**) service account.
    See the following source to build and push the container image:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，构建并推送容器镜像到**容器注册库**，使其对**Google Compute Engine**（GCE）服务账户可访问。请参阅以下源代码以构建和推送容器镜像：
- en: '[PRE4]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that the service account should be provided with sufficient permissions
    to build and push the image to the container registry, and the respective APIs
    should be enabled.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，服务账户应提供足够的权限来构建和推送镜像到容器注册库，并且相应的 API 应该被启用。
- en: Go to the **User-managed notebooks** page, click on the **New Notebook** button,
    and then select **Customize**. Provide a notebook name and select an appropriate
    **Region** and **Zone** value.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**用户管理笔记本**页面，点击**新建笔记本**按钮，然后选择**自定义**。提供笔记本名称并选择合适的**区域**和**区域值**。
- en: In the **Environment** field, select **Custom Container**.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**环境**字段中，选择**定制容器**。
- en: 'In the **Docker Container Image** field, enter the address of the custom image;
    in our case, it would look like this:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Docker 容器镜像**字段中，输入定制镜像的地址；在我们的例子中，它看起来像这样：
- en: '[PRE5]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Make the remaining appropriate selections and click the **Create** button.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行剩余的适当选择并点击**创建**按钮。
- en: We are all set now. While launching the notebook, we can select the custom container
    as a kernel and start working on the custom environment.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备就绪。在启动笔记本时，我们可以选择定制容器作为内核，并开始在定制环境中工作。
- en: We can now successfully launch Vertex AI notebooks and also create custom container-based
    environments if required. In the next section, we will learn how to schedule notebook
    runs within Vertex AI.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以成功启动 Vertex AI 笔记本，并在需要时创建基于定制容器的环境。在下一节中，我们将学习如何在 Vertex AI 中安排笔记本运行。
- en: Scheduling notebooks in Vertex AI
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Vertex AI 中安排笔记本
- en: Jupyter Notebook environments are great for doing some initial experiments.
    But when it comes to launching long-running jobs, multiple training trials with
    different input parameters (such as hyperparameter tuning jobs), or adding accelerators
    to training jobs, we usually copy our code into a Python file and launch experiments
    using custom Docker containers or managed pipelines such as Vertex AI pipelines.
    Considering this situation and to minimize the duplication of efforts, Vertex
    AI-managed notebook instances provide us with the functionality of scheduling
    notebooks on an ad hoc or recurring basis. This feature allows us to execute our
    scheduled notebook cell by cell on Vertex AI. It provides us with the flexibility
    to seamlessly scale our processing power and choose suitable hardware for the
    task. Additionally, we can pass different input parameters for experimentation
    purposes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 环境非常适合进行一些初步实验。但是，当涉及到启动长时间运行的任务、具有不同输入参数（如超参数调整任务）的多个训练试验或向训练任务添加加速器时，我们通常会将代码复制到
    Python 文件中，并使用自定义 Docker 容器或托管管道（如 Vertex AI 管道）来启动实验。考虑到这种情况，为了最小化工作重复，Vertex
    AI 管理笔记本实例为我们提供了在临时或重复基础上安排笔记本的功能。此功能允许我们在 Vertex AI 上逐个执行安排好的笔记本单元格。它为我们提供了无缝扩展处理能力和选择适合任务的硬件的灵活性。此外，我们还可以传递不同的输入参数以进行实验。
- en: Configuring notebook executions
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置笔记本执行
- en: 'Let’s try to configure notebook executions to check the various options it
    provides. Imagine we are building a toy application that takes two parameters–`user_name`
    and `frequency`–and when executed, it prints the `user_name` parameter as many
    times as the `frequency` parameter. Now, let’s launch a managed notebook and create
    our application, as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试配置笔记本执行以检查它提供的各种选项。想象我们正在构建一个玩具应用，它接受两个参数–`user_name` 和 `frequency`–当执行时，它会将
    `user_name` 参数打印出与 `frequency` 参数相同次数。现在，让我们启动一个托管笔记本并创建我们的应用，如下所示：
- en: '![Figure 4.9 – A simple Python application within Jupyter Notebook](img/B17792_04_9.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – Jupyter Notebook 内的一个简单 Python 应用](img/B17792_04_9.jpg)'
- en: Figure 4.9 – A simple Python application within Jupyter Notebook
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – Jupyter Notebook 内的一个简单 Python 应用
- en: 'Next, put all the parameters into a single cell and click on the gear-like
    button at the top-right corner. Assign this cell with tag *parameters*. See the
    following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将所有参数放入单个单元格中，然后点击右上角的齿轮形按钮。将此单元格标记为 *parameters*。请参阅以下截图：
- en: '![Figure 4.10 – Tagging parameters within a Jupyter Notebook cell](img/B17792_04_10.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 在 Jupyter Notebook 单元格内标记参数](img/B17792_04_10.jpg)'
- en: Figure 4.10 – Tagging parameters within a Jupyter Notebook cell
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 在 Jupyter Notebook 单元格内标记参数
- en: 'Our toy application is now ready. Once you click on the **Execute** button
    from the toolbar, it provides us with the options for customizing machine type,
    accelerators, environment (which can be a custom Docker container), and execution
    type–one-time or recurring. See the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的玩具应用现在已准备就绪。一旦您从工具栏中点击 **执行** 按钮，它就会提供自定义机器类型、加速器、环境（可以是自定义 Docker 容器）和执行类型–单次或重复执行的选项。请参阅以下截图：
- en: '![Figure 4.11 – Configuring notebook execution for Python application](img/B17792_04_11.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 配置笔记本执行以用于 Python 应用](img/B17792_04_11.jpg)'
- en: Figure 4.11 – Configuring notebook execution for Python application
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 配置笔记本执行以用于 Python 应用
- en: 'Next, let’s change the parameters for our one-time execution by clicking on
    the **ADVANCED OPTIONS** Here, we can provide key-value pairs for parameter names
    and values. Check the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过点击 **高级选项** 来更改我们的单次执行参数。在这里，我们可以为参数名称和值提供键值对。请参阅以下截图：
- en: '![Figure 4.12 – Setting up parameters for one-time execution](img/B17792_04_12.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 为单次执行设置参数](img/B17792_04_12.jpg)'
- en: Figure 4.12 – Setting up parameters for one-time execution
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 为单次执行设置参数
- en: 'Finally, click the **SUBMIT** button. It will then display the following dialog
    box:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击 **提交** 按钮。然后，它将显示以下对话框：
- en: '![Figure 4.13 – One-time execution scheduled](img/B17792_04_13.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 已安排的单次执行](img/B17792_04_13.jpg)'
- en: Figure 4.13 – One-time execution scheduled
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 已安排的单次执行
- en: 'We have now successfully scheduled our notebook run with custom parameters
    on Vertex AI. We can find it under the **EXECUTIONS** section in the Vertex AI
    UI:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 Vertex AI 上成功安排了笔记本运行，并带有自定义参数。我们可以在 Vertex AI UI 的 **执行** 部分找到它：
- en: '![Figure 4.14 – Checking the EXECUTIONS section for executed notebook instances](img/B17792_04_14.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图4.14 – 检查已执行笔记本实例的EXECUTIONS部分](img/B17792_04_14.jpg)'
- en: Figure 4.14 – Checking the EXECUTIONS section for executed notebook instances
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14 – 检查已执行笔记本实例的EXECUTIONS部分
- en: 'We can now check the results by clicking on **VIEW RESULT**. Check the following
    screenshot for how it overrides the input parameters:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过点击**查看结果**来检查结果。查看以下截图了解它是如何覆盖输入参数的：
- en: '![Figure 4.15 – Checking the results of the execution](img/B17792_04_15.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图4.15 – 检查执行结果](img/B17792_04_15.jpg)'
- en: Figure 4.15 – Checking the results of the execution
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15 – 检查执行结果
- en: Similarly, we can schedule large one-time or recurring experiments without moving
    our code out of the notebook and take advantage of the cloud platform’s scalability.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以在不将代码移出笔记本的情况下安排大型一次性或重复性实验，并利用云平台的可扩展性。
- en: We just saw how easy it is to configure and schedule notebook runs within Vertex
    AI Workbench. This capability allows us to do seamless experiments while keeping
    our code in the notebook. This is also helpful in setting up recurring jobs in
    the development environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了在Vertex AI Workbench中配置和安排笔记本运行是多么容易。这种能力使我们能够在保持笔记本中的代码的同时进行无缝实验。这也有助于在开发环境中设置重复性作业。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about Vertex AI Workbench, a managed platform for
    launching the Jupyter Notebook application on Google Cloud. We talked about the
    benefits of having notebooks in a cloud-based environment as compared to a local
    environment. Having Jupyter Notebook in the cloud makes it perfect for collaboration,
    scaling, adding security, and launching long-running jobs. We also discussed additional
    features of Vertex AI Workbench that are pretty useful while working on different
    aspects of ML project development.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Vertex AI Workbench，这是一个在Google Cloud上启动Jupyter Notebook应用程序的托管平台。我们讨论了在云环境中有笔记本相比于本地环境的优势。在云中拥有Jupyter
    Notebook使其非常适合协作、扩展、增加安全性和启动长时间运行的任务。我们还讨论了Vertex AI Workbench的一些附加功能，这些功能在处理ML项目开发的不同方面时非常有用。
- en: After reading this chapter, we should be able to successfully deploy, manage,
    and use Jupyter Notebooks on the Vertex AI platform for our ML development needs.
    As we understand the difference between managed and user-managed notebook instances,
    we should be in good shape to choose the best solution for our development needs.
    We should also be able to create custom Docker container-based notebooks if required.
    Most importantly, we should now be able to schedule notebook runs for recurring
    as well as one-time execution based on the requirements. Notebook scheduling is
    also quite useful for launching multiple model training experiments in parallel
    with different input parameters. Now that we have a good background in Vertex
    AI Workbench, it will be easier for us to follow the code samples in the upcoming
    chapters.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章之后，我们应该能够成功部署、管理和使用Vertex AI平台上的Jupyter Notebook来满足我们的ML开发需求。由于我们理解了托管和用户托管笔记本实例之间的区别，我们应该能够为我们的开发需求选择最佳解决方案。我们还应该能够根据需要创建基于自定义Docker容器的笔记本。最重要的是，我们现在应该能够根据需求安排笔记本运行，以进行重复性以及一次性执行。笔记本调度对于并行启动具有不同输入参数的多个模型训练实验也非常有用。现在我们已经对Vertex
    AI Workbench有了良好的背景知识，这将使我们更容易跟随即将到来的章节中的代码示例。
