- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Machine Learning System Design
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习系统设计
- en: In the last chapter, we delved into the different machine learning concepts
    and the packages and libraries used to create these models. Using that information,
    we will begin to discuss the design process when building a machine learning pipeline
    and the different components found in most machine learning pipelines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们深入探讨了不同的机器学习概念以及创建这些模型所使用的包和库。利用这些信息，我们将开始讨论构建机器学习管道时的设计过程以及大多数机器学习管道中找到的不同组件。
- en: 'We will cover the following areas in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下领域：
- en: Machine learning system components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习系统组件
- en: Fit and transform interfaces
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适配和转换接口
- en: Train and serve interfaces
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练和提供接口
- en: Orchestration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编排**'
- en: Machine learning system components
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习系统组件
- en: There are many moving parts required in order to build a robust machine learning
    system. Starting from gathering data to deploying your model to the user, each
    plays a vital role in keeping the system dynamic and scalable. Here, we will briefly
    discuss the different stages in the machine learning system life cycle and the
    role they play. These stages can be edited in order to suit the model or application
    at hand.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个健壮的机器学习系统需要许多组成部分。从收集数据到将模型部署给用户，每个部分都在保持系统动态和可扩展性方面发挥着至关重要的作用。在这里，我们将简要讨论机器学习系统生命周期中的不同阶段以及它们所起的作用。这些阶段可以根据模型或应用进行编辑。
- en: 'The majority of machine learning systems include the following stages, with
    some other stages depending on business needs:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数机器学习系统包括以下阶段，其中一些阶段取决于业务需求：
- en: '**Data collection**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据收集**'
- en: '**Date preprocessing**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据预处理**'
- en: '**Model training**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型训练**'
- en: '**Model testing**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型测试**'
- en: '**Model serving**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型提供**'
- en: Realistically, the majority of the time spent building machine learning systems
    is spent on the data. This is a key element in the process that can decide the
    effectiveness of your system since the model is dependent on the data it uses
    during training. Just like the human body, if you feed the model poor data or
    not enough data, it will output poor results.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，构建机器学习系统的大部分时间都花在了数据上。这是决定你系统有效性的关键要素，因为模型依赖于训练期间使用的训练数据。就像人体一样，如果你给模型提供差的数据或数据不足，它将输出差的结果。
- en: The first part when it comes to data is the collection process. Understanding
    the application and the goal of the task can assist in the process of deciding
    how to collect data and what data to collect. We then determine the target value
    that we want to predict, such as the price of a home or the presence of a certain
    disease. These target values can be collected explicitly or implicitly. A target
    variable is explicit when we can directly determine the value of the variable
    we are trying to capture, while an implicit target value is found by using contextual
    data to determine the target value.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的第一部分是收集过程。理解应用和任务的目的是有助于决定如何收集数据以及收集哪些数据。然后我们确定我们想要预测的目标值，例如房屋价格或某种疾病的发病率。这些目标值可以是显式收集或隐式收集。当我们可以直接确定我们试图捕捉的变量的值时，目标变量是显式的，而隐式目标值是通过使用上下文数据来确定目标值。
- en: 'Depending on the task, we usually store the data in a database (for either
    metadata or tabular data) such as MySQL or cloud storage (for images, video, or
    audio) such as Amazon S3:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据任务的不同，我们通常将数据存储在数据库中（用于元数据或表格数据）如MySQL或云存储（用于图像、视频或音频）如Amazon S3：
- en: '![Figure 5.1: Data collection](img/B18934_05_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1：数据收集](img/B18934_05_1.jpg)'
- en: 'Figure 5.1: Data collection'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：数据收集
- en: Once we set up continuous data collection, we must devise a procedure for cleaning
    and processing the data. Not everything we collect will be perfect. You will always
    find missing data and certain outliers, which can negatively impact our model.
    No matter how intuitive your model is, it will always perform poorly with garbage
    data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了持续的数据收集，我们必须制定一个数据清洗和处理的程序。我们收集的并非所有数据都是完美的。你总会发现缺失数据和某些异常值，这些可能会对我们的模型产生负面影响。无论你的模型多么直观，它都会在垃圾数据上表现不佳。
- en: Some practices to deal with unclean data include removing outliers, normalizing
    certain features, or imputing missing data depending on the amount of data you
    have collected. Once the data has gone through the cleaning process, the next
    step is the feature selection/engineering process.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 处理不干净数据的一些做法包括移除异常值、标准化某些特征，或者根据你收集的数据量来填补缺失数据。一旦数据通过了清理过程，下一步就是特征选择/工程过程。
- en: Understanding the different features your data contains plays an important role
    when your model tries to find the relationship in its data. **Exploratory Data
    Analysis** (**EDA**) is the common process used when it comes to understanding
    the data you have collected and how the data is structured. This helps when it
    comes to determining which features to use in your model. As we previously mentioned
    in [*Chapter 4*](B18934_04.xhtml#_idTextAnchor051), when we include more features
    in our models, it allows them to map to more complex problems. However, adding
    too many features can lead to overfitting, so it is important to research the
    most important features for your model.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的模型试图在其数据中找到关系时，理解你的数据包含的不同特征起着重要作用。**探索性数据分析**（**EDA**）是在理解你收集的数据及其结构时常用的过程。这有助于确定在模型中使用哪些特征。正如我们之前在[*第4章*](B18934_04.xhtml#_idTextAnchor051)中提到的，当我们向模型中包含更多特征时，这允许它们映射到更复杂的问题。然而，添加过多的特征可能导致过拟合，因此研究对你模型最重要的特征非常重要。
- en: While most machine learning models can find patterns and relationships in data,
    the best way of understanding the data you collect is via the experts in the field
    of the task you are trying to solve. Subject matter experts can provide the best
    insight into what features to focus on when creating your model. Some unsupervised
    machine learning models, such as PCA and t-SNE, can group and find features that
    can provide the most valuable information for your model.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数机器学习模型可以在数据中找到模式和关系，但理解你收集的数据的最佳方式是通过解决你试图解决的问题的任务领域的专家。领域专家可以提供关于在创建模型时应关注哪些特征的最好见解。一些无监督机器学习模型，如PCA和t-SNE，可以分组并找到为你的模型提供最有价值信息的特征。
- en: Important note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Having domain knowledge of the problem you are trying to solve is the most effective
    way of understanding your data and determining which features to use for training
    your machine learning model.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你试图解决的问题的领域知识是理解你的数据并确定用于训练机器学习模型的特征的最有效方式。
- en: Once you have set up the processes to collect and clean the data, the next step
    is creating and training your model. Thanks to most machine learning libraries,
    you can import prebuilt models and even use weights from already trained models
    to use on your own model. Here, it is common practice to use different models
    and techniques to see which produces the best result, and from there, you can
    choose the best model and begin to fine-tune it by updating the hyperparameters.
    This process can take time depending on the amount of data you use.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了收集和清理数据的流程，下一步就是创建和训练你的模型。多亏了大多数机器学习库，你可以导入预构建的模型，甚至可以使用已经训练好的模型的权重来应用于你自己的模型。在这里，常见的做法是使用不同的模型和技术来查看哪种能产生最佳结果，然后你可以从中选择最佳模型，并开始通过更新超参数来微调它。这个过程可能需要时间，具体取决于你使用的数据量。
- en: Testing your model is a critical element in your system’s pipeline. Depending
    on the application, a poor model can negatively impact your business and give
    your users a bad experience. To prevent that, you need to determine the different
    metrics and thresholds that need to be met for the model to be production-ready.
    If the model can’t meet these expectations, then you need to go back and understand
    the weaknesses of the model and address them before training again.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 测试你的模型是系统管道中的关键要素。根据应用的不同，一个糟糕的模型可能会对你的业务产生负面影响，并给你的用户带来糟糕的体验。为了避免这种情况，你需要确定模型要达到生产就绪状态所需满足的不同指标和阈值。如果模型无法满足这些期望，那么你需要回过头来理解模型的弱点，并在再次训练之前解决它们。
- en: 'After performing tests and getting solid results from your model, you can now
    deploy your model to the user application. This varies from application to application.
    From then, the whole process can start from the beginning, where new data is inserted
    and follows the machine learning pipeline so it can dynamically grow based on
    user actions:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在对模型进行测试并获得稳定的结果后，你现在可以将模型部署到用户应用程序中。这因应用而异。从那时起，整个过程可以从开始处重新开始，即新数据被插入并遵循机器学习管道，以便根据用户行为动态增长：
- en: '![Figure 5.2: The machine learning pipeline](img/B18934_05_2.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图5.2：机器学习管道](img/B18934_05_2.jpg)'
- en: 'Figure 5.2: The machine learning pipeline'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：机器学习管道
- en: In the following sections, we will look into the details of the different interfaces
    that constitute our machine learning pipeline.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨构成我们机器学习管道的不同接口的细节。
- en: Fit and transform interfaces
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拟合和转换接口
- en: 'Now that we have looked at the entire pipeline process, we will look in detail
    at the different interfaces that make up the machine learning system. The majority
    of the systems include the following interfaces:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了整个管道过程，我们将详细探讨构成机器学习系统的不同接口。大多数系统包括以下接口：
- en: '**Fit**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拟合**'
- en: '**Transform**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转换**'
- en: '**Train**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**训练**'
- en: '**Serve**'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**'
- en: When it comes to the data and creating the model, we come across the fit and
    transform interfaces. We will start by looking at the transform interface.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到数据和创建模型时，我们会遇到拟合和转换接口。我们将首先查看转换接口。
- en: Transform
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换
- en: The transform interface is the process of taking in the collected data and preprocessing
    the data so that the model can train properly and extract meaningful information.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 转换接口是将收集到的数据预处理的过程，以便模型能够正确训练并提取有意义的信息。
- en: 'It is common for the data we collect to have missing values or outliers, which
    can cause bias in our model. To remove this bias, we can apply certain techniques
    that help remove the skew in the data and produce meaningful machine learning
    models. Some of the following techniques we will learn about fall into the following
    three types of transformations:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收集的数据通常会有缺失值或异常值，这可能会在我们的模型中引入偏差。为了消除这种偏差，我们可以应用某些技术来帮助消除数据中的偏斜，并产生有意义的机器学习模型。以下我们将学习的一些技术可以分为以下三种类型的转换：
- en: '**Scaling**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**'
- en: '**Clipping**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**裁剪**'
- en: '**Log**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对数**'
- en: Log transformation is the most common and simple transformation technique we
    can apply to our data. A lot of the time, our data is skewed in one direction,
    which can introduce bias. To help mitigate the skewed distribution, we can simply
    apply the log function to our data, and this shifts our data into more of a normal
    distribution, which allows the data to be more balanced.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对数转换是我们能应用到数据上的最常见和简单的转换技术。很多时候，我们的数据会偏向一个方向，这可能会引入偏差。为了帮助减轻这种偏斜分布，我们可以简单地应用对数函数到我们的数据上，这将使我们的数据更接近正态分布，从而使数据更加平衡。
- en: 'We can perform this transformation by using the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下代码执行这种转换：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 5.3: Performing log transformation on skewed data](img/B18934_05_3.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图5.3：对偏斜数据进行对数转换](img/B18934_05_3.jpg)'
- en: 'Figure 5.3: Performing log transformation on skewed data'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：对偏斜数据进行对数转换
- en: Once we apply the log transformation, we can start looking at the other transformations.
    The second transformation we can use is the clipping transformation. The more
    we make our data follow a normal distribution, the better, but we may encounter
    outliers that can skew our data. To help reduce the impact that outliers have
    on our data, we can apply a quantile function. The most common quantile range
    that people use is the 0.05 and 0.95 percentile. This means that any data below
    the 0.05 percentile will be rounded up to the lower bound while any data above
    the 0.95 percentile will be rounded down to the upper bound. This allows us to
    retain the majority of the data while reducing the impact that outliers have on
    the model. The upper and lower ranges can also be modified based on what makes
    sense for the distribution of the data.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用了对数转换，我们就可以开始查看其他转换。我们可以使用的第二种转换是截断转换。我们使数据更符合正态分布的程度越高，效果越好，但我们可能会遇到可以扭曲数据的异常值。为了帮助减少异常值对我们数据的影响，我们可以应用分位数函数。人们最常用的分位数范围是0.05和0.95百分位数。这意味着任何低于0.05百分位数的数据将被四舍五入到下限，而任何高于0.95百分位数的数据将被四舍五入到上限。这使我们能够在减少异常值对模型影响的同时保留大部分数据。上下限也可以根据数据的分布进行修改。
- en: 'This transformation can be performed using the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此转换可以使用以下代码执行：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Figure 5.4: Clipping transformation on data](img/B18934_05_4.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4：数据上的截断转换](img/B18934_05_4.jpg)'
- en: 'Figure 5.4: Clipping transformation on data'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：数据上的截断转换
- en: 'The last major transformation technique is scaling transformations. A lot of
    the time, the data we collect have different types of metrics and values, which
    can skew our data and confuse our model. For example, one feature measures the
    revenue of companies in the millions while another feature measures the employee
    count in the thousands, and when using these features to train the model, the
    discrepancy may put more emphasis on one feature over another. To prevent these
    kinds of problems, we can apply scaling transformations, which can be of the following
    types:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个主要转换技术是缩放转换。很多时候，我们收集的数据具有不同类型的指标和值，这可能会扭曲我们的数据并混淆我们的模型。例如，一个特征衡量公司的收入以百万为单位，而另一个特征衡量员工数量以千为单位，当使用这些特征来训练模型时，这种差异可能会使一个特征比另一个特征更受重视。为了防止这些问题，我们可以应用缩放转换，这些转换可以是以下类型：
- en: '**MinMax**'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MinMax**'
- en: '**Standard**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Standard**'
- en: '**Max Abs**'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Max Abs**'
- en: '**Robust**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Robust**'
- en: '**Unit Vector**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单位向量**'
- en: 'The MinMax scaler is the simplest scaling transformation. It works best when
    the data is not distorted. This scales the data between 0 and 1\. It can be calculated
    using this formula:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: MinMax缩放器是最简单的缩放转换。当数据没有扭曲时，它效果最好。这种转换将数据缩放到0到1之间。可以使用以下公式进行计算：
- en: '![](img/Formula_05_001.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![公式_05_001.jpg](img/Formula_05_001.jpg)'
- en: 'We can perform this scaling transformation using the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码执行此缩放转换：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The MaxAbs scaler is similar to MinMax but rather than scaling the data between
    0 to 1, it scales the data from -1 to 1\. This can be calculated using the following
    formula:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: MaxAbs缩放器与MinMax类似，但它不是将数据缩放到0到1之间，而是将数据缩放到-1到1之间。可以使用以下公式进行计算：
- en: '![](img/Formula_05_002.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![公式_05_002.jpg](img/Formula_05_002.jpg)'
- en: 'We can perform this scaling transformation using the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码执行此缩放转换：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Standard scaler is another popular scaling transformation. Rather than
    using the min and max like the MinMax scaler, this scales the data so that the
    mean is 0 and the standard deviation is 1\. This scaler works on the assumption
    that the data is normally distributed. This can be calculated using the following
    formula:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 标准缩放器是另一种流行的缩放转换。与MinMax缩放器不同，它不是使用最小值和最大值，而是将数据缩放到均值是0，标准差是1。这种缩放器基于数据呈正态分布的假设。可以使用以下公式进行计算：
- en: '![](img/Formula_05_003.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![公式_05_003.jpg](img/Formula_05_003.jpg)'
- en: 'We can perform this scaling transformation using the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码执行此缩放转换：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The MinMax, MaxAbs, and Standard scalers, while powerful, can suffer from outliers
    and skewed distribution. To remedy this issue, we can use the Robust scaler. Rather
    than using the mean or max, this scaler works by removing the median from the
    data and then scaling the data using the interquartile range. This can be calculated
    using the following formula:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: MinMax、MaxAbs和Standard缩放器虽然功能强大，但可能会受到异常值和偏斜分布的影响。为了解决这个问题，我们可以使用Robust缩放器。而不是使用均值或最大值，这个缩放器通过从数据中移除中位数，然后使用四分位距缩放数据来工作。可以使用以下公式进行计算：
- en: '![](img/Formula_05_004.jpg)![](img/Formula_05_005.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_05_004.jpg)![](img/Formula_05_005.jpg)'
- en: 'We can perform this scaling transformation using the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码执行这种缩放转换：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we have the Unit Vector scaler, also known as a normalizer. While
    the other scaler functions work based on columns, this scaler normalizes based
    on rows. It uses the MinMax scaler formula and converts positive values between
    0 and 1 and negative values between -1 and 1\. There are two ways of performing
    this scaling:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有单位向量标量，也称为归一化器。虽然其他标量函数是基于列工作的，但这个标量是基于行进行归一化的。它使用MinMax标量公式，将正值转换为0到1之间，负值转换为-1到1之间。执行这种缩放有两种方式：
- en: L1 norm – values in the column are converted so that the sum of their absolute
    value in the row equals 1
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: L1范数 – 列中的值被转换，使得行中它们绝对值的和等于1
- en: L2 norm – values in the column are squared and added so that the sum of their
    absolute value in the row is equal to 1
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: L2范数 – 列中的值被平方并相加，使得行中它们绝对值的和等于1
- en: 'We can perform this scaling transformation using the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码执行这种缩放转换：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There are many more scaling and transforming techniques, but these are the most
    commonly used, as they provide stable and consistent results.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他的缩放和转换技术，但这些都是最常用的，因为它们提供稳定和一致的结果。
- en: Important note
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Much of the development process takes place in the transformation stage. Understanding
    how the data is structured and distributed helps dictate which transformation
    methods you will perform on your data. No matter how advanced your model is, poorly
    structured data will produce weak models.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分开发过程发生在转换阶段。了解数据的结构和分布有助于决定你将在数据上执行哪些转换方法。无论你的模型多么先进，结构不良的数据都会产生弱模型。
- en: Fit
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拟合
- en: Now, we will look at the fit interface. This interface refers to the process
    of creating the machine learning model that will be used in training. With today’s
    technology, not much work or effort is needed to create the model used for training
    in the machine learning pipeline. There are already prebuilt models ready to be
    imported and used for any type of application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看拟合接口。这个接口指的是创建将在训练中使用的机器学习模型的过程。凭借今天的技术，创建用于机器学习管道训练的模型不需要太多的工作或努力。已经有预构建的模型可以导入和使用，适用于任何类型的应用。
- en: Here is a small example of creating a KNN classification model using the scikit-learn
    library.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用scikit-learn库创建KNN分类模型的小例子。
- en: 'First, we import all the required libraries:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入所有必需的库：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then import the data, split the data into training and testing batches,
    and apply a standard scaler transformation:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们导入数据，将数据分为训练和测试批次，并应用标准标量转换：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We then initialize a KNN model with k = `3` and then perform training on the
    model:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们初始化一个k = `3`的KNN模型，并在该模型上进行训练：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The main effort when using the fit interface is setting up the models that will
    be used for the training phase of the machine learning pipeline. Due to the simplicity
    of importing multiple prebuilt models, it is common practice to import multiple
    types of machine learning models and train all of them at once. This way, we are
    able to test different types of models and determine which one of them performs
    the best. Once we decide which model to use, we can then start to experiment with
    different hyperparameters to further fine-tune our model.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用拟合接口的主要工作是设置将在机器学习管道的训练阶段使用的模型。由于导入多个预构建模型很简单，因此通常的做法是导入多种类型的机器学习模型，并一次性训练所有这些模型。这样，我们能够测试不同类型的模型，并确定哪一种表现最好。一旦我们决定使用哪种模型，我们就可以开始尝试不同的超参数，以进一步微调我们的模型。
- en: Train and serve interfaces
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练和提供接口
- en: The transform and fit interfaces are responsible for preparing the data and
    setting up our machine learning models for our pipeline. Now that we have preprocessed
    the data, we need to begin looking at how we can begin the actual training process
    and take our trained models and deploy them for our clients to use.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 转换和拟合接口负责准备数据和设置我们的机器学习模型以供管道使用。现在我们已经预处理了数据，我们需要开始考虑如何开始实际的训练过程，并将我们的训练模型部署给客户使用。
- en: Training
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: Now that we have preprocessed the data and created our models, we can begin
    the training process. This stage can vary from time to time depending on the quality
    of data being trained on or the type of model being used during training.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经预处理了数据并创建了模型，我们可以开始训练过程。这个阶段可能会因训练数据的品质或训练过程中使用的模型类型而有所不同。
- en: Once we preprocess the data, we need to split the dataset into training and
    testing sets. This is done to prevent overfitting. We need the model to be able
    to generalize the data, and using all the data for training would defeat the purpose.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们预处理了数据，我们需要将数据集分为训练集和测试集。这样做是为了防止过拟合。我们需要模型能够泛化数据，而使用所有数据进行训练将违背初衷。
- en: A common practice is to split your data into 70% training and 30% testing. This
    way, the model has enough data to learn the relationships and uses the testing
    data to self-correct its training process.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的做法是将数据分为70%的训练集和30%的测试集。这样，模型就有足够的数据来学习关系，并使用测试数据来自我纠正训练过程。
- en: There is a more robust approach to splitting the data, which is called **K-Fold
    Cross-Validation**. This process works best in cases where there may not be enough
    training data. To perform this, we split the data into *k* number of subsets and
    then we train on all subsets except for one. We then iterate through this process
    where a new subset is selected to be the test data. Finally, we measure the performance
    of the model by averaging the metrics for each iteration. This way, we can train
    and test using all the data without leaving any important features that may be
    useful when it comes to learning the data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种更稳健的数据分割方法，称为**K-Fold交叉验证**。这种方法在可能没有足够训练数据的情况下效果最好。为了执行这个过程，我们将数据分成*k*个子集，然后我们在除了一个以外的所有子集上训练。然后我们迭代这个过程，选择一个新的子集作为测试数据。最后，我们通过平均每个迭代的指标来衡量模型的性能。这样，我们可以使用所有数据来训练和测试，而不会遗漏任何可能对学习数据有用的重要特征。
- en: '![Figure 5.5: K-Cross Validation](img/B18934_05_5.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5：K-Cross Validation](img/B18934_05_5.jpg)'
- en: 'Figure 5.5: K-Cross Validation'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5：K-Cross Validation
- en: Once we have split the data, now comes the actual training part. This part is
    as simple as setting up the function used to train the model. This part depends
    on the type of library you use and the different APIs it offers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们分割了数据，接下来就是实际的训练部分。这部分就像设置用于训练模型的函数一样简单。这部分取决于你使用的库类型以及它提供的不同API。
- en: 'We can create a simple example using the scikit-learn library:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用scikit-learn库创建一个简单的例子：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After training your model, you must measure its performance. To prevent poor
    models from being deployed to users, it is a common practice to measure certain
    metrics and set certain thresholds that need to be met before a model is considered
    ready for production.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 训练完模型后，你必须衡量其性能。为了防止性能差的模型被部署给用户，通常的做法是衡量某些指标并设置某些阈值，只有当模型达到这些阈值时，才被认为适合生产。
- en: 'Depending on the type of model you create, certain metrics need to be evaluated.
    For example, a regression model will typically look at the following metrics:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你创建的模型类型，某些指标需要被评估。例如，回归模型通常会查看以下指标：
- en: '**Mean Absolute** **Error** (**MAE**)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均绝对** **误差** (**MAE**)'
- en: '**Mean Squared** **Error** (**MSE**)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**均方** **误差** (**MSE**)'
- en: '**Root Mean Squared** **Error** (**RMSE**)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**均方根** **误差** (**RMSE**)'
- en: '**R-Squared** (**R2**)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**决定系数** (**R2**)'
- en: 'For classification models, you will monitor the following metrics to determine
    the model’s strength:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于分类模型，你需要监控以下指标以确定模型的强度：
- en: Accuracy
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准确率
- en: Precision and recall
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确率和召回率
- en: The F1-score
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F1分数
- en: The **Area Under the Receiver Operating Characteristics** **Curve** (**AUROC**)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**受试者工作特征曲线下面积** (**AUROC**)'
- en: Having domain knowledge helps immensely when determining what thresholds are
    applicable to the model you are training. In some cases, such as with cancer detection
    models, it is important to avoid false negatives, so it is important to set stricter
    thresholds for what models can be used confidently.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定适用于你正在训练的模型的阈值时，拥有领域知识非常有帮助。在某些情况下，例如癌症检测模型，避免假阴性很重要，因此需要为模型可以自信使用的阈值设定更严格的限制。
- en: Important note
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Before serving your model, you need to make sure the model is viable for production.
    Setting up the metric thresholds that the model needs to pass is a fundamental
    way of validating your models before deploying them. If your model fails to pass
    these criteria, then there should be a process to redo the data transformation
    and model training phases until it can pass the thresholds.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署模型之前，你需要确保模型适用于生产。设置模型需要通过的指标阈值是部署前验证模型的基本方法。如果模型未能通过这些标准，那么应该有一个流程来重新进行数据转换和模型训练阶段，直到它能够通过阈值。
- en: Serving
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务
- en: 'When it comes to serving our model, this is open and flexible depending on
    the user’s needs. In most cases, we are deploying our model into one of two types
    of systems:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到服务我们的模型时，这取决于用户的需求，是开放的且灵活的。在大多数情况下，我们将模型部署到以下两种系统之一：
- en: '**Model serving**, where we deploy our model as an API'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型服务**，即我们将模型作为API部署'
- en: '**Model embedding**, where we deploy our model straight into an application
    or device'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型嵌入**，即我们直接将模型部署到应用程序或设备中'
- en: Model embedding is the simplest way of deploying your model. You create a binary
    file containing your model and you embed the file into your application code.
    This simplicity provides the best performance when making predictions, but this
    comes at a cost. Because you directly embed the file into your application, it
    is difficult to scale your model since you will have to recreate and reupload
    the file every time you make an update to your model. As such, this is not considered
    a recommended practice.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 模型嵌入是部署模型最简单的方式。你创建一个包含你的模型的二进制文件，并将该文件嵌入到你的应用程序代码中。这种简单性在做出预测时提供了最佳的性能，但这也带来了代价。因为你直接将文件嵌入到应用程序中，所以很难扩展你的模型，因为你每次更新模型时都必须重新创建和重新上传文件。因此，这不被视为推荐的做法。
- en: Model serving is the most commonly used method on today’s market. This separation
    between the application and the model makes it easy for a developer to maintain
    and update the model without having to change the application itself. You simply
    create an API service that a user can access to make calls and predictions. Due
    to the separation, you can continuously update the model without having to redeploy
    the whole application.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 模型服务是当今市场上最常用的方法。应用程序和模型之间的这种分离使得开发者可以轻松地维护和更新模型，而无需更改应用程序本身。你只需创建一个用户可以访问以进行调用和预测的API服务。由于这种分离，你可以持续更新模型，而无需重新部署整个应用程序。
- en: 'An alternative to model embedding that includes model serving is creating a
    microservice that includes the binary file of the model, which could be accessed
    by other applications:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 模型服务的一种替代方法是创建一个包含模型二进制文件的微服务，其他应用程序可以访问：
- en: '![Figure 5.6: Serving machine learning models](img/B18934_05_6.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6：服务机器学习模型](img/B18934_05_6.jpg)'
- en: 'Figure 5.6: Serving machine learning models'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：服务机器学习模型
- en: One of the more intuitive approaches is creating your own package or library
    that includes all the models that you have trained. That way, you can scale efficiently
    by allowing multiple applications to access the different models you have created.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 更直观的一种方法是你创建自己的包或库，其中包括你训练的所有模型。这样，你可以通过允许多个应用程序访问你创建的不同模型来有效地进行扩展。
- en: Everything we’ve seen so far is what it takes to build a simple machine learning
    pipeline. While this is doable for most applications, to be dynamic and robust,
    we need to look at orchestration and what it can offer us to support more advanced
    applications and problems.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止所看到的一切都是构建简单机器学习管道所需的内容。虽然这对大多数应用来说都是可行的，但要实现动态性和健壮性，我们需要考虑编排以及它能为支持更高级的应用和问题提供什么。
- en: Orchestration
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编排
- en: Now that we understand the different interfaces and the roles they play in the
    machine learning pipeline, the next step is understanding how to wrap everything
    together into one seamless system. To understand the holistic system, we must
    first understand automation and orchestration.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了不同的接口以及它们在机器学习管道中的作用，下一步是了解如何将所有这些整合成一个无缝的系统。为了理解整个系统，我们首先必须了解自动化和编排。
- en: '**Automation** refers to the process of automating small or simple tasks, such
    as uploading files to a server or deploying an application, without human intervention.
    Rather than having a person perform these repetitive tasks, we can program our
    system to handle these simple tasks, thus reducing wasted time and resources.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动化**指的是自动化小型或简单任务的过程，例如将文件上传到服务器或部署应用程序，而不需要人工干预。我们不必让人员执行这些重复性任务，而是可以编程我们的系统来处理这些简单任务，从而减少浪费的时间和资源。'
- en: 'This is useful for most systems due to the linear nature of the pipeline. This
    highlights a common limitation of automation though – the lack of flexibility.
    Most systems today require a more dynamic process to be able to adapt to certain
    applications and processes, and automation alone isn’t enough:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于管道的线性特性，这对大多数系统都很有用。这突出了自动化常见的局限性——缺乏灵活性。今天的大多数系统需要更动态的过程才能适应某些应用程序和流程，而自动化本身是不够的：
- en: '![Figure 5.7: A linear system pipeline](img/B18934_05_7.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图5.7：线性系统管道](img/B18934_05_7.jpg)'
- en: 'Figure 5.7: A linear system pipeline'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7：线性系统管道
- en: This is where orchestration comes into action. **Orchestration** is the configuration
    and coordination of automated tasks to create a whole workflow. We can create
    a system to perform certain jobs or tasks based on a certain set of rules. It
    takes some planning and understanding to create a comprehensive orchestration
    workflow since the user determines what actions the system needs to take for certain
    cases.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是编排发挥作用的地方。“编排”是指配置和协调自动化任务以创建整个工作流程。我们可以根据一组特定的规则创建一个系统来执行某些工作或任务。由于用户决定系统需要针对某些情况采取哪些行动，因此创建一个全面编排工作流程需要一些规划和理解。
- en: 'A simple example would be deploying an application to users. There can be many
    moving parts in the system, such as the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的例子是将应用程序部署给用户。系统中可能包含许多动态部分，例如以下内容：
- en: Connecting to a server
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到服务器
- en: Uploading certain files to certain servers
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将特定文件上传到特定服务器
- en: Handling user requests
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理用户请求
- en: Storing data or logs in a database
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中存储数据或日志
- en: Let’s say that after the recent changes have been deployed, the app has suffered
    critical errors, which may bring down the application. The system admin could
    set up rules for recovering and restoring the system, such as rolling back to
    a stable version. With the system able to self-recover, the developers can spend
    more time in development rather than dealing with overhead when it comes to recovery.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 假设最近部署了更改后，应用程序出现了关键错误，这可能会使应用程序崩溃。系统管理员可以设置恢复和恢复系统的规则，例如回滚到稳定版本。由于系统能够自我恢复，开发者可以花更多的时间在开发上，而不是在恢复时处理开销。
- en: 'Depending on certain outcomes, not all tasks may need to be performed. There
    may be backup actions that need to take place, or different paths that the system
    needs to go through to maintain a stable workflow. This way, the system can adapt
    to its environment and self-sustain without much human intervention:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 根据某些结果，可能不需要执行所有任务。可能需要执行备份操作，或者系统需要通过不同的路径来维持稳定的工作流程。这样，系统可以适应其环境并自我维持，而无需太多的人工干预：
- en: '![Figure 5.8: A dynamic system pipeline (orchestration)](img/B18934_05_8.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图5.8：动态系统管道（编排）](img/B18934_05_8.jpg)'
- en: 'Figure 5.8: A dynamic system pipeline (orchestration)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：动态系统管道（编排）
- en: 'The different tasks in the machine learning system that can be automated are
    as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习系统中可以自动化的不同任务如下：
- en: Gathering and preprocessing the data
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集和预处理数据
- en: Training the machine learning model
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练机器学习模型
- en: Running tests and diagnostics on the trained model to evaluate its performance
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对训练好的模型进行测试和诊断以评估其性能
- en: Serving the machine learning model
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供机器学习模型服务
- en: Monitoring the model in production
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控生产中的模型
- en: 'With these automated tasks, the system admin needs to orchestrate the stages
    of the pipeline to be dynamic and sustainable. The following components help create
    a robust system:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些自动化任务，系统管理员需要编排管道的阶段，使其动态且可持续。以下组件有助于创建一个健壮的系统：
- en: '**Scheduling**: The system must be able to schedule and run different automated
    tasks in the pipeline individually while maintaining system dependencies.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度**：系统必须能够调度并单独运行管道中的不同自动化任务，同时保持系统依赖性。'
- en: '**CI/CD Testing**: After model training is complete, it is imperative to do
    automated testing on your model to measure its performance. If it fails to pass
    certain metrics, you must repeat the training process from the beginning to address
    the weaknesses of the model; otherwise, it cannot be deployed to production.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD 测试**：模型训练完成后，对模型进行自动测试以衡量其性能是至关重要的。如果模型未能通过某些指标，你必须从头开始重复训练过程，以解决模型的弱点；否则，它不能部署到生产环境中。'
- en: '**Deployment**: Depending on where you will deploy your model to production,
    setting up an automated process can help reduce the time spent on deployment and
    still maintain an updated version of the model.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：根据您将模型部署到生产环境的位置，设置自动化流程可以帮助减少部署时间，同时保持模型的更新版本。'
- en: '**Monitoring**: After deploying your model, continuously monitoring the model’s
    performance in production is needed to maintain the model’s health without it
    decaying. This will give us an indication of when we need to update our pipeline
    or our model in order to stay efficient.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：在部署模型后，持续监控模型在生产环境中的性能，以保持模型的健康状态，防止其退化。这将为我们提供何时需要更新我们的管道或模型以保持效率的指示。'
- en: Important note
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Understanding what your business needs are and how your model functions gives
    you a good picture of how you want to orchestrate your machine learning pipeline.
    Setting up backup phases to address certain pitfalls in your system allows it
    to be more dynamic and adaptable to industry demands.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 了解您的业务需求以及您的模型如何工作，可以帮助您更好地规划您的机器学习管道。设置备份阶段以解决系统中的一些潜在问题，可以使系统更具动态性和适应行业需求的能力。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the different key components that make up a machine
    learning pipeline.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了构成机器学习管道的不同关键组件。
- en: From there, we looked in detail at the interfaces that make up the components.
    We started with the transform interface, which is responsible for the data aspect
    of the pipeline. It takes the data and applies different types of data transformation
    that allow us to maintain clean and stable data, which we can later use in our
    machine learning model.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，我们详细研究了构成组件的接口。我们从转换接口开始，它负责管道的数据方面。它接收数据并应用不同类型的数据转换，使我们能够保持干净和稳定的数据，这些数据我们可以在后续的机器学习模型中使用。
- en: After our transformation stage, we start creating our model in the fit interface.
    Here, we can use the prebuilt models that the libraries and packages offer to
    initialize our models. Due to the ease of creating models, it is a good practice
    to test different types of models to see which model performs the best based on
    our data.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在转换阶段之后，我们开始在 fit 接口中创建我们的模型。在这里，我们可以使用库和包提供的预构建模型来初始化我们的模型。由于创建模型的简便性，测试不同类型的模型以查看哪种模型基于我们的数据表现最佳是一种良好的实践。
- en: Once we have created our model, we can begin the actual training of our model.
    We need to split our data into training and test sets to allow our model to understand
    the relationship in our data. From there, we can measure the different metrics
    in our model to validate the model’s performance.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了模型，我们就可以开始模型的实际训练。我们需要将数据分成训练集和测试集，以便我们的模型理解数据中的关系。然后，我们可以测量模型中的不同指标，以验证模型的表现。
- en: Once we feel comfortable with our model’s performance, we can start to deploy
    our application to production. There are two major ways of deploying our model,
    whether it be embedded into our application or deployed as a service for our clients
    to use.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们对模型的性能感到满意，我们就可以开始将我们的应用程序部署到生产环境中。部署我们的模型主要有两种方式，无论是将其嵌入到我们的应用程序中，还是作为服务供我们的客户使用。
- en: Finally, wrapping everything together, we learned what orchestration consists
    of when it comes to machine learning. We learned what concepts need to be considered
    when orchestrating your machine learning pipeline and how to keep your system
    dynamic and robust to keep up with everyday demands.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将所有内容整合起来，了解了机器学习中的编排包含哪些内容。我们学习了在编排机器学习管道时需要考虑哪些概念，以及如何保持系统动态和稳健，以跟上日常需求。
- en: As time passes and data changes, it is important that we adjust and maintain
    our models to handle certain situations that may arise in the real world. In the
    next chapter, we will look at how we can maintain our machine learning models
    when our data starts to shift and change.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移和数据的变化，我们调整和维护我们的模型以应对现实世界中可能出现的某些情况变得尤为重要。在下一章中，我们将探讨当我们的数据开始发生变化和转移时，我们如何维护我们的机器学习模型。
