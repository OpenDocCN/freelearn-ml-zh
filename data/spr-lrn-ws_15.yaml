- en: 7\. Model Evaluation
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 模型评估
- en: 'Activity 7.01: Final Test Project'
  id: totrans-1
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动 7.01：最终测试项目
- en: 'Import the relevant libraries:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 导入相关库：
- en: import pandas as pd
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: import pandas as pd
- en: import numpy as np
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: import numpy as np
- en: import json
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: import json
- en: '%matplotlib inline'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '%matplotlib inline'
- en: import matplotlib.pyplot as plt
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: import matplotlib.pyplot as plt
- en: from sklearn.preprocessing import OneHotEncoder
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.preprocessing import OneHotEncoder
- en: from sklearn.model_selection import RandomizedSearchCV, train_test_split
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.model_selection import RandomizedSearchCV, train_test_split
- en: from sklearn.ensemble import GradientBoostingClassifier
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.ensemble import GradientBoostingClassifier
- en: from sklearn.metrics import (accuracy_score, precision_score, \
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: from sklearn.metrics import (accuracy_score, precision_score, \
- en: recall_score, confusion_matrix, precision_recall_curve)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: recall_score, confusion_matrix, precision_recall_curve)
- en: 'Read the breast-cancer-data.csv dataset:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 读取 breast-cancer-data.csv 数据集：
- en: data = pd.read_csv('../Datasets/breast-cancer-data.csv')
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: data = pd.read_csv('../Datasets/breast-cancer-data.csv')
- en: data.info()
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: data.info()
- en: 'Let''s separate the input data (X) and the target (y):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将输入数据（X）和目标（y）分开：
- en: X = data.drop(columns=['diagnosis'])
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: X = data.drop(columns=['diagnosis'])
- en: 'y = data[''diagnosis''].map({''malignant'': 1, ''benign'': 0}.get).values'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'y = data[''diagnosis''].map({''malignant'': 1, ''benign'': 0}.get).values'
- en: 'Split the dataset into training and test sets:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据集分割为训练集和测试集：
- en: X_train, X_test, \
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: X_train, X_test, \
- en: y_train, y_test = train_test_split(X, y, \
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: y_train, y_test = train_test_split(X, y, \
- en: test_size=0.2, random_state=11)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: test_size=0.2, random_state=11)
- en: print(X_train.shape)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: print(X_train.shape)
- en: print(y_train.shape)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: print(y_train.shape)
- en: print(X_test.shape)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: print(X_test.shape)
- en: print(y_test.shape)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: print(y_test.shape)
- en: 'You should get the following output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应该得到以下输出：
- en: (455, 30)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: (455, 30)
- en: (455,)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: (455,)
- en: (114, 30)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: (114, 30)
- en: (114,)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: (114,)
- en: 'Choose a base model and define the range of hyperparameter values corresponding
    to the model to be searched for hyperparameter tuning. Let''s use a gradient-boosted
    classifier as our model. We then define ranges of values for all hyperparameters
    we want to tune in the form of a dictionary:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个基础模型，并定义要搜索超参数调整的模型的超参数值范围。让我们使用梯度提升分类器作为我们的模型。然后，以字典形式定义要调整的所有超参数的值范围：
- en: meta_gbc = GradientBoostingClassifier()
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: meta_gbc = GradientBoostingClassifier()
- en: 'param_dist = {''n_estimators'': list(range(10, 210, 10)), \'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 'param_dist = {''n_estimators'': list(range(10, 210, 10)), \'
- en: '''criterion'': [''mae'', ''mse''],\'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '''criterion'': [''mae'', ''mse''],\'
- en: '''max_features'': [''sqrt'', ''log2'', 0.25, 0.3, \'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '''max_features'': [''sqrt'', ''log2'', 0.25, 0.3, \'
- en: 0.5, 0.8, None], \
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 0.5, 0.8, None], \
- en: '''max_depth'': list(range(1, 10)), \'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '''max_depth'': list(range(1, 10)), \'
- en: '''min_samples_leaf'': list(range(1, 10))}'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '''min_samples_leaf'': list(range(1, 10))}'
- en: 'Define the parameters with which to initialize the RandomizedSearchCV object
    and use K-fold cross-validation to identify the best model hyperparameters. Define
    the parameters required for random search, including cv as 5, indicating that
    the hyperparameters should be chosen by evaluating the performance using 5-fold
    cross-validation. Then, initialize the RandomizedSearchCV object and use the .fit()
    method to initiate optimization:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 定义参数以初始化 RandomizedSearchCV 对象，并使用 K 折交叉验证来识别最佳模型超参数。定义随机搜索所需的参数，包括 cv 设为 5，表示使用
    5 折交叉验证来选择超参数。然后初始化 RandomizedSearchCV 对象，并使用 .fit() 方法启动优化：
- en: 'rand_search_params = {''param_distributions'': param_dist, \'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'rand_search_params = {''param_distributions'': param_dist, \'
- en: '''scoring'': ''accuracy'', ''n_iter'': 100, \'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '''scoring'': ''accuracy'', ''n_iter'': 100, \'
- en: '''cv'': 5, ''return_train_score'': True, \'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '''cv'': 5, ''return_train_score'': True, \'
- en: '''n_jobs'': -1, ''random_state'': 11 }'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '''n_jobs'': -1, ''random_state'': 11 }'
- en: random_search = RandomizedSearchCV(meta_gbc, **rand_search_params)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: random_search = RandomizedSearchCV(meta_gbc, **rand_search_params)
- en: random_search.fit(X_train, y_train)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: random_search.fit(X_train, y_train)
- en: 'You should get the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应该得到以下输出：
- en: '![Figure 7.36: The RandomizedSearchCSV object'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.36：RandomizedSearchCSV 对象'
- en: '](img/image-B4U09VDI.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-B4U09VDI.jpg)'
- en: 'Figure 7.36: The RandomizedSearchCSV object'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36：RandomizedSearchCSV 对象
- en: 'Once the tuning is complete, find the position (iteration number) at which
    the highest mean test score was obtained. Find the corresponding hyperparameters
    and save them to a dictionary:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 调整完成后，找到获得最高平均测试分数的位置（迭代次数）。找到相应的超参数并保存到字典中：
- en: idx = np.argmax(random_search.cv_results_['mean_test_score'])
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: idx = np.argmax(random_search.cv_results_['mean_test_score'])
- en: final_params = random_search.cv_results_['params'][idx]
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: final_params = random_search.cv_results_['params'][idx]
- en: final_params
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: final_params
- en: 'You should get the following output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 应该得到以下输出：
- en: '![Figure 7.37: Hyperparameters'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.37：超参数'
- en: '](img/image-Q75G5A0N.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-Q75G5A0N.jpg)'
- en: 'Figure 7.37: Hyperparameters'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.37：超参数
- en: 'Split the training dataset further into training and validation sets and train
    a new model using the final hyperparameters on the training dataset. Use scikit-learn''s
    train_test_split() method to split X and y into train and validation components,
    with the validation set comprising 15% of the dataset:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将训练数据集进一步拆分为训练集和验证集，并在训练数据集上使用最终的超参数训练一个新模型。使用 scikit-learn 的 train_test_split()
    方法将 X 和 y 拆分为训练集和验证集，验证集占数据集的 15%：
- en: train_X, val_X, \
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: train_X, val_X, \
- en: train_y, val_y = train_test_split(X_train, y_train, \
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: train_y, val_y = train_test_split(X_train, y_train, \
- en: test_size=0.15, random_state=11)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: test_size=0.15, random_state=11)
- en: train_X.shape, train_y.shape, val_X.shape, val_y.shape
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: train_X.shape, train_y.shape, val_X.shape, val_y.shape
- en: 'You should get the following output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: ((386, 30), (386,), (69, 30), (69,))
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ((386, 30), (386,), (69, 30), (69,))
- en: 'Train the gradient-boosted classification model using the final hyperparameters
    and make predictions in relation to the training and validation sets. Also, calculate
    the probability regarding the validation set:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最终的超参数训练梯度增强分类模型，并根据训练和验证集进行预测。同时，计算验证集的概率：
- en: gbc = GradientBoostingClassifier(**final_params)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: gbc = GradientBoostingClassifier(**final_params)
- en: gbc.fit(train_X, train_y)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: gbc.fit(train_X, train_y)
- en: preds_train = gbc.predict(train_X)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: preds_train = gbc.predict(train_X)
- en: preds_val = gbc.predict(val_X)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: preds_val = gbc.predict(val_X)
- en: pred_probs_val = np.array([each[1] \
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: pred_probs_val = np.array([each[1] \
- en: for each in gbc.predict_proba(val_X)])
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: for each in gbc.predict_proba(val_X)])
- en: 'Calculate accuracy, precision, and recall for predictions in relation to the
    validation set, and print the confusion matrix:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 计算预测的准确度、精度和召回率，并打印混淆矩阵：
- en: print('train accuracy_score = {}'\
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: print('train accuracy_score = {}'\
- en: .format(accuracy_score(y_true=train_y, y_pred=preds_train)))
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: .format(accuracy_score(y_true=train_y, y_pred=preds_train)))
- en: print('validation accuracy_score = {}'\
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: print('validation accuracy_score = {}'\
- en: .format(accuracy_score(y_true=val_y, y_pred=preds_val)))
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: .format(accuracy_score(y_true=val_y, y_pred=preds_val)))
- en: 'print(''confusion_matrix: \n{}''\'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(''confusion_matrix: \n{}''\'
- en: .format(confusion_matrix(y_true=val_y, y_pred=preds_val)))
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: .format(confusion_matrix(y_true=val_y, y_pred=preds_val)))
- en: print('precision_score = {}'\
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: print('precision_score = {}'\
- en: .format(precision_score(y_true=val_y, y_pred=preds_val)))
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: .format(precision_score(y_true=val_y, y_pred=preds_val)))
- en: print('recall_score = {}'\
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: print('recall_score = {}'\
- en: .format(recall_score(y_true=val_y, y_pred=preds_val)))
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: .format(recall_score(y_true=val_y, y_pred=preds_val)))
- en: 'You should get the following output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 7.38: Evaluation scores and the confusion matrix'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.38: 评估得分和混淆矩阵'
- en: '](img/image-RRBUP7VU.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-RRBUP7VU.jpg)'
- en: 'Figure 7.38: Evaluation scores and the confusion matrix'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.38: 评估得分和混淆矩阵'
- en: Experiment with varying thresholds to find the optimal point having a high recall.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试不同的阈值，找到具有较高召回率的最佳点。
- en: 'Plot the precision-recall curve:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制精度-召回率曲线：
- en: plt.figure(figsize=(10,7))
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: plt.figure(figsize=(10,7))
- en: precision, recall, \
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 精度, 召回率, \
- en: thresholds = precision_recall_curve(val_y, \
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: thresholds = precision_recall_curve(val_y, \
- en: pred_probs_val)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: pred_probs_val)
- en: plt.plot(recall, precision)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: plt.plot(recall, precision)
- en: plt.xlabel('Recall')
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: plt.xlabel('召回率')
- en: plt.ylabel('Precision')
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: plt.ylabel('精度')
- en: plt.show()
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'The output will be as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.39: Precision recall curve'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.39: 精度-召回率曲线'
- en: '](img/image-PQXLFL93.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-PQXLFL93.jpg)'
- en: 'Figure 7.39: Precision recall curve'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.39: 精度-召回率曲线'
- en: '"""'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: Plot the variation in precision and recall with increasing threshold values.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制精度和召回率随阈值增加的变化。
- en: '"""'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '"""'
- en: 'PR_variation_df = pd.DataFrame({''precision'': precision, \'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'PR_variation_df = pd.DataFrame({''precision'': precision, \'
- en: '''recall'': recall}, \'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '''recall'': recall}, \'
- en: index=list(thresholds)+[1])
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: index=list(thresholds)+[1])
- en: PR_variation_df.plot(figsize=(10,7))
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: PR_variation_df.plot(figsize=(10,7))
- en: plt.xlabel('Threshold')
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: plt.xlabel('阈值')
- en: plt.ylabel('P/R values')
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: plt.ylabel('P/R 值')
- en: plt.show()
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: plt.show()
- en: 'You should get the following output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '![Figure 7.40: Variation in precision and recall with increasing threshold
    values'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.40: 精度和召回率随阈值增加的变化'
- en: '](img/image-5EQYQMWH.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-5EQYQMWH.jpg)'
- en: 'Figure 7.40: Variation in precision and recall with increasing threshold values'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7.40: 精度和召回率随阈值增加的变化'
- en: 'Finalize a threshold that will be used for predictions in relation to the test
    dataset. Let''s finalize a value, say, 0.05\. This value is entirely dependent
    on what you feel would be optimal based on your exploration in the previous step:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最终确定一个阈值，用于根据测试数据集进行预测。我们设定一个值，例如 0.05。该值完全取决于你在前一步探索中认为最合适的值：
- en: final_threshold = 0.05
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: final_threshold = 0.05
- en: 'Predict the final values in relation to the test dataset and save them to a
    file. Use the final threshold value determined in Step 10 to find the classes
    for each value in the training set. Then, write the final predictions to the final_predictions.csv
    file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 根据测试数据集预测最终值并将其保存到文件中。使用第 10 步中确定的最终阈值，找出训练集中每个值的类别。然后，将最终预测写入 final_predictions.csv
    文件：
- en: pred_probs_test = np.array([each[1] \
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: pred_probs_test = np.array([每个值[1] \
- en: for each in gbc.predict_proba(X_test)])
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个值 in gbc.predict_proba(X_test)])
- en: preds_test = (pred_probs_test > final_threshold).astype(int)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: preds_test = (pred_probs_test > final_threshold).astype(int)
- en: preds_test
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: preds_test
- en: 'The output will be as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.41: Prediction for final values for the test dataset'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.41：测试数据集的最终值预测'
- en: '](img/image-M3PSVYTK.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-M3PSVYTK.jpg)'
- en: 'Figure 7.41: Prediction for final values for the test dataset'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.41：测试数据集的最终值预测
- en: 'Alternatively, you can also get the output in CSV format:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以以 CSV 格式获取输出：
- en: 'with open(''final_predictions.csv'', ''w'') as f:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `open('final_predictions.csv', 'w')` 打开文件：
- en: f.writelines([str(val)+'\n' for val in preds_test])
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: f.writelines([str(val)+'\n' for val in preds_test])
- en: 'The output will be a CSV file as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是如下的 CSV 文件：
- en: '![Figure 7.42: Output for the final values'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.42：最终值的输出'
- en: '](img/image-B4Q64TC3.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image-B4Q64TC3.jpg)'
- en: 'Figure 7.42: Output for the final values'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.42：最终值的输出
- en: Note
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To access the source code for this specific section, please refer to https://packt.live/2Ynw6Lt.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此特定部分的源代码，请参阅 https://packt.live/2Ynw6Lt。
- en: You can also run this example online at https://packt.live/3erAajt. You must
    execute the entire Notebook in order to get the desired result.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在 https://packt.live/3erAajt 在线运行此示例。必须执行整个 Notebook 才能得到期望的结果。
