- en: Building an IMDB Top 250 Clone with Pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pandas 构建 IMDB 前250名克隆
- en: 'The **Internet Movie** **Database** (**IMDB**) maintains a chart called the IMDB
    Top 250*, *which is a ranking of the top 250 movies according to a certain scoring
    metric. All the movies in this list are non-documentary, theatrical releases with
    a runtime of at least 45 minutes and over 250,000 ratings:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网电影数据库**（**IMDB**）维护着一个名为 IMDB Top 250 的榜单，这是根据某种评分标准对前250部电影的排名。榜单中的所有电影都是非纪录片、影院上映且时长至少为45分钟，并且有超过25万条评分：'
- en: '![](img/5a3b1cb6-d956-475b-ad1a-7e9a353820e8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a3b1cb6-d956-475b-ad1a-7e9a353820e8.png)'
- en: This chart can be considered the simplest of recommenders. It doesn't take into
    consideration the tastes of a particular user, nor does it try to deduce similarities
    between different movies. It simply calculates a score for every movie based on
    a predefined metric and outputs a sorted list of movies based on that score.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表可以被认为是最简单的推荐系统。它没有考虑特定用户的口味，也没有尝试推断不同电影之间的相似性。它只是根据预定义的指标为每部电影计算分数，并根据该分数输出排序后的电影列表。
- en: 'In this chapter, we will be covering the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Building a clone of the IMDB Top 250chart (henceforth referred to as the simple
    recommender).
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 IMDB 前250名图表的克隆（以下简称为简单推荐系统）。
- en: Taking the functionalities of the chart one step further and building a knowledge-based
    recommender. This model takes user preferences with regards to genre, timeframe,
    runtime, language, and so on, and recommends movies that satisfy all conditions.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图表的功能向前推进一步，构建一个基于知识的推荐系统。该模型考虑用户对电影的偏好，如类型、时间段、时长、语言等，并推荐符合所有条件的电影。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have Python installed on a system. Finally, to use the
    Git repository of this book, the user needs to install Git.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在系统上安装 Python。最后，为了使用本书的 Git 仓库，用户还需要安装 Git。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python](https://github.com/PacktPublishing/Hands-On-Recommendation-Systems-with-Python)。'
- en: 'Check out the following video to see the code in action:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码的实际效果：
- en: '[http://bit.ly/2v7SZD4](http://bit.ly/2v7SZD4)[.](http://bit.ly/2v7SZD4)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bit.ly/2v7SZD4](http://bit.ly/2v7SZD4)[.](http://bit.ly/2v7SZD4)'
- en: The simple recommender
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的推荐系统
- en: The first step in building our simple recommender is setting up our workspace.
    Let's create a new directory named `Chapter3`*.* Create a Jupyter Notebook in
    this directory named `Simple Recommender`and open it in the browser.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 构建我们简单推荐系统的第一步是设置我们的工作空间。让我们在名为`Chapter3`的目录中创建一个新的 Jupyter Notebook，命名为`Simple
    Recommender`，并在浏览器中打开它。
- en: Let's now load the dataset we used in the previous chapter into our notebook.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们加载在上一章中使用的数据集到我们的笔记本中。
- en: In case you have not downloaded it already, the dataset is available at
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有下载，数据集可以在以下位置获取：
- en: '[https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/movies_metadata.csv/7](https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/movies_metadata.csv/7).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/movies_metadata.csv/7](https://www.kaggle.com/rounakbanik/the-movies-dataset/downloads/movies_metadata.csv/7)。'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Upon running the cell, you should see a familiar table-like structure output
    in the notebook.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该单元格后，你应该会在笔记本中看到一个熟悉的类似表格的结构输出。
- en: 'Building the simple recommender is fairly straightforward. The steps are as
    follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 构建简单的推荐系统相当简单。步骤如下：
- en: Choose a metric (or score) to rate the movies on
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个指标（或分数）来为电影评分
- en: Decide on the prerequisites for the movie to be featured on the chart
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定电影出现在图表中的先决条件
- en: Calculate the score for every movie that satisfies the conditions
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算每部符合条件的电影的分数
- en: Output the list of movies in decreasing order of their scores
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出按分数递减顺序排列的电影列表
- en: The metric
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指标
- en: The metric is the numeric quantity based on which we rank movies. A movie is
    considered to be betterthan another movie if it has a higher metric score than
    the other movie. It is very important that we have a robust and a reliable metric
    to build our chart upon to ensure a good quality of recommendations.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 指标是根据其数值来对电影进行排名的量化标准。如果一部电影的指标分数高于另一部电影，那么它就被认为比另一部电影更好。确保我们拥有一个强大且可靠的指标来构建我们的图表，这对确保推荐的高质量至关重要。
- en: The choice of a metric is arbitrary. One of the simplest metrics that can be
    used is the movie rating. However, this suffers from a variety of disadvantages.
    In the first place, the movie rating does not take the popularity of a movie into
    consideration. Therefore, a movie rated 9 by 100,000 users will be placed below
    a movie rated 9.5 by 100 users.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 指标的选择是任意的。可以使用的最简单的指标之一是电影评分。然而，这样做有许多缺点。首先，电影评分没有考虑到电影的受欢迎程度。因此，一部由10万人评分为9的电影将排在一部由100人评分为9.5的电影之后。
- en: This is not desirable as it is highly likely that a movie watched and rated
    only by 100 people caters to a very specific niche and may not appeal as much
    to the average person as the former.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做并不可取，因为一部仅有100人观看并评分的电影，很可能迎合的是一个非常特定的小众群体，可能不像前者那样对普通观众有吸引力。
- en: It is also a well-known fact that as the number of voters increase, the rating
    of a movie normalizes and it approaches a value that is reflective of the movie's
    quality and popularity with the general populace. To put it another way, movies
    with very few ratings are not very reliable. A movie rated 10/10 by five users
    doesn't necessarily mean that it's a good movie.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个众所周知的事实是，随着投票人数的增加，电影的评分会趋于正常化，接近反映电影质量和普及度的值。换句话说，评分很少的电影并不太可靠。五个人打10分的电影不一定是好电影。
- en: Therefore, what we need is a metric that can, to an extent, take into account
    the movie rating and the number of votes it has garnered (a proxy for popularity).
    This would give a greater preference to a blockbuster movie rated 8 by 100,000
    users over an art house movie rated 9 by 100 users.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要的是一个可以在一定程度上兼顾电影评分和它获得的投票数（作为受欢迎度的替代指标）的指标。这样一来，它会更倾向于选择一部由10万人评分为8的大片，而不是由100人评分为9的艺术片。
- en: 'Fortunately, we do not have to brainstorm a mathematical formula for the metric.
    As the title of this chapter states, we are building an IMDB top 250 clone. Therefore,
    we shall use IMDB''s weighted rating formula as our metric. Mathematically, it
    can be represented as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们不必为这个指标构思数学公式。正如本章标题所示，我们正在构建一个IMDB前250的克隆。因此，我们将使用IMDB的加权评分公式作为我们的指标。从数学角度来看，它可以表示为以下形式：
- en: '*Weighted Rating (WR) =* ![](img/4489b75d-977e-4557-895a-2aeff1f98725.png)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*加权评分 (WR) =* ![](img/4489b75d-977e-4557-895a-2aeff1f98725.png)'
- en: 'The following apply:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容适用：
- en: '*v* is the number of votes garnered by the movie'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*v* 是电影获得的评分次数'
- en: '*m* is the minimum number of votes required for the movie to be in the chart
    (the prerequisite)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*m* 是电影进入排行榜所需的最低投票数（前提条件）'
- en: '*R* is the mean rating of the movie'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*R* 是电影的平均评分'
- en: '*C* is the mean rating of all the movies in the dataset'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*C* 是数据集中所有电影的平均评分'
- en: We already have the values for *v* and *R *for every movie in the form of the `vote_count` and
    `vote_average`features respectively. Calculating *C *is extremely trivial, as
    we have already seen in the previous chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了每部电影的 *v* 和 *R* 值，分别以 `vote_count` 和 `vote_average` 形式呈现。计算 *C* 非常简单，正如我们在上一章中所见。
- en: The prerequisties
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: The IMDB weighted formula also has a variable *m *, which it requires to compute
    its score. This variable is in place to make sure that only movies that are above
    a certain threshold of popularity are considered for the rankings. Therefore,
    the value of *m *determines the movies that qualify to be in the chart and also,
    by being part of the formula, determines the final value of the score.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: IMDB加权公式还包含一个变量 *m*，它用于计算评分。这个变量的存在是为了确保只有超过某一受欢迎度阈值的电影才能进入排名。因此，*m* 的值决定了哪些电影有资格进入排行榜，并且通过成为公式的一部分，决定了最终的评分值。
- en: Just like the metric, the choice of the value of *m *is arbitrary. In other
    words, there is no right value for *m. *It is a good idea to experiment with different
    values of *m *and then choose the one that you (and your audience) think gives
    the best recommendations. The only thing to be kept in mind is that the higher
    the value of *m, *the higher the emphasis on the popularity of a movie, and therefore
    the higher the selectivity.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这个指标一样，*m* 的值选择是任意的。换句话说，*m* 没有正确的值。建议尝试不同的 *m* 值，然后选择你（和你的受众）认为能给出最佳推荐的值。唯一需要记住的是，*m*
    的值越高，电影的受欢迎程度所占的比重越大，因此选择性也越高。
- en: For our recommender, we will use the number of votes garnered by the 80th percentile
    movie as our value for *m. *In other words, for a movie to be considered in the
    rankings, it must have garnered more votes than at least 80% of the movies present
    in our dataset. Additionally, the number of votes garnered by the 80th percentile
    movie is used in the weighted formula described previously to come up with the
    value for the scores.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的推荐系统，我们将使用第 80 百分位电影获得的投票数作为 *m* 的值。换句话说，为了使电影出现在排行榜上，它必须获得比数据集中至少 80%
    的电影更多的投票。此外，第 80 百分位电影获得的投票数将用于先前描述的加权公式中，来计算评分值。
- en: 'Let us now calculate the value of *m*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们计算 *m* 的值：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can see that only 20% of the movies have gained more than 50 votes. Therefore,
    our value of *m* is`50`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，只有 20% 的电影获得了超过 50 次投票。因此，我们的 *m* 值是 `50`。
- en: 'Another prerequisite that we want in place is the runtime. We will only consider
    movies that are greater than `45 minutes` and less than `300 minutes` in length.
    Let us define a new DataFrame, `q_movies`,which will hold all the movies that
    qualify to appear in the chart:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望具备的另一个前提条件是运行时间。我们将只考虑时长超过 `45 分钟` 且小于 `300 分钟` 的电影。我们将定义一个新的数据框 `q_movies`，它将包含所有符合条件的电影，以便出现在图表中：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We see that from our dataset of 45,000 movies approximately 9,000 movies (or
    20%) made the cut.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，在 45,000 部电影的数据集中，大约 9,000 部电影（即 20%）达到了标准。
- en: Calculating the score
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算评分
- en: 'The final value that we need to discover before we calculate our scores is *C, *the
    mean rating for all the movies in the dataset:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算评分之前，我们需要发现的最后一个值是 *C*，即数据集中所有电影的平均评分：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see that the average rating of a movie is approximately 5.6/10\. It seems
    that IMDB happens to be particularly strict with their ratings. Now that we have
    the value of *C, *we can go about calculating our score for each movie.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，电影的平均评分大约是 5.6/10。看起来 IMDB 对其评分的标准非常严格。现在我们已经有了 *C* 的值，接下来可以计算每部电影的评分。
- en: 'First, let us define a function that computes the rating for a movie, given
    its features and the values of *m *and *C*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义一个函数，根据电影的特征以及 *m* 和 *C* 的值来计算评分：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we will use the familiar `apply` function on our `q_movies` DataFrame
    to construct a new feature score*. *Since the calculation is done for every row,
    we will set the axis to `1` to denote row-wise operation:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `q_movies` 数据框上使用熟悉的 `apply` 函数来构建一个新的特征 *score*。由于计算是对每一行进行的，我们将设置轴
    `1` 来表示按行操作：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Sorting and output
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序与输出
- en: 'There is just one step left. We now need to sort our DataFrame on the basis
    of the score we just computed and output the list of top movies:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只剩下一步。现在我们需要根据刚才计算的评分对数据框进行排序，并输出前几名电影的列表：
- en: '![](img/a0667c30-199a-4342-b2c3-6181e3e3aa19.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0667c30-199a-4342-b2c3-6181e3e3aa19.png)'
- en: And voila! You have just built your very first recommender. Congratulations!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！你刚刚构建了你的第一个推荐系统。恭喜你！
- en: We can see that the Bollywood film *Dilwale Dulhania Le Jayenge *figures at
    the top of the list. We can also see that it has a noticeably smaller number of
    votes than the other Top 25 movies. This strongly suggests that we should probably
    explore a higher value of *m. *This is left as an exercise for the reader; experiment
    with different values of *m *and observe how the movies in the chart change.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，宝莱坞电影 *Dilwale Dulhania Le Jayenge* 排名榜单的顶部。我们还可以看到，它的投票数明显少于其他前 25 名电影。这强烈暗示我们应该探索更高的
    *m* 值。这部分留给读者作为练习；尝试不同的 *m* 值，并观察图表中电影的变化。
- en: The knowledge-based recommender
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于知识的推荐系统
- en: 'In this section, we are going to go ahead and build a knowledge-based recommender
    on top of our IMDB Top 250 clone. This will be a simple function that will perform
    the following tasks:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续在 IMDB Top 250 克隆的基础上构建一个基于知识的推荐系统。这将是一个简单的函数，执行以下任务：
- en: Ask the user for the genres of movies he/she is looking for
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 询问用户他/她想要的电影类型
- en: Ask the user for the duration
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 询问用户电影的时长
- en: Ask the user for the timeline of the movies recommended
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 询问用户推荐电影的时间范围
- en: Using the information collected, recommend movies to the user that have a high
    weighted rating (according to the IMDB formula) and that satisfy the preceding
    conditions
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用收集到的信息，向用户推荐评分较高（根据 IMDB 公式）且符合前述条件的电影：
- en: The data that we have has information on the duration, genres, and timelines,
    but it isn't currently in a form that is directly usable. In other words, our
    data needs to be wrangled before it can be put to use to build this recommender.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有的数据包含时长、类型和时间线的信息，但目前的形式并不直接可用。换句话说，我们的数据需要进行整理，才能用于构建推荐系统。
- en: In our `Chapter3`folder, let's create a new Jupyter Notebook named `Knowledge
    Recommender`*. *This notebook will contain all the code that we write as part
    of this section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`Chapter3`文件夹中，让我们创建一个新的 Jupyter Notebook，命名为`Knowledge Recommender`*。*这个笔记本将包含我们在这一部分编写的所有代码。
- en: 'As usual, let us load our packages and the data into our notebook. Let''s also
    take a look at the features that we have and decide on the ones that will be useful
    for this task:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，让我们加载所需的包和数据到笔记本中。我们还可以查看我们拥有的特性，并决定哪些对这个任务有用：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'From our output, it is quite clear which features we do and do not require.
    Now, let''s reduce our DataFrame to only contain features that we need for our
    model:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的输出中，可以很清楚地看到我们需要哪些特性，哪些不需要。现在，让我们将数据框缩减到只包含我们模型所需的特性：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, let us extract the year of release from our `release_date`feature:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们从`release_date`特性中提取出发行年份：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Our `year`feature is still an `object` and is riddled with `NaT`values, which
    are a type of null value used by Pandas. Let's convert these values to an integer, `0`,
    and convert the datatype of the `year`feature into `int`*.*
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`year`特性仍然是`object`类型，并且充满了`NaT`值，这是 Pandas 使用的一种空值类型。让我们将这些值转换为整数`0`，并将`year`特性的类型转换为`int`*。*
- en: 'To do this, we will define a helper function, `convert_int`,and apply it to
    the `year`feature:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将定义一个辅助函数`convert_int`，并将其应用到`year`特性上：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We do not require the `release_date`feature anymore. So let''s go ahead and
    remove it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再需要`release_date`特性。所以让我们去掉它：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `runtime`feature is already in a form that is usable. It doesn't require
    any additional wrangling. Let us now turn our attention to `genres`*.*
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`runtime`特性已经是可用的格式，不需要做额外的处理。现在让我们把注意力转向`genres`*。'
- en: Genres
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型
- en: 'Upon preliminary inspection, we can observe that the genres are in a format
    that looks like a JSON object (or a Python dictionary). Let us take a look at
    the `genres`object of one of our movies:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 初步检查后，我们可以观察到类型的格式看起来像是 JSON 对象（或 Python 字典）。让我们查看一下我们某部电影的`genres`对象：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can observe that the output is a stringified dictionary. In order for this
    feature to be usable, it is important that we convert this string into a native
    Python dictionary. Fortunately, Python gives us access to a function called `literal_eval`(available
    in the `ast`library) which does exactly that. `literal_eval`parses any string
    passed into it and converts it into its corresponding Python object:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到输出是一个字符串化的字典。为了使这个功能可用，重要的是我们将这个字符串转换为本地的 Python 字典。幸运的是，Python 提供了一个名为`literal_eval`（在`ast`库中）的函数，它正是完成这个操作的。`literal_eval`解析传递给它的任何字符串，并将其转换为相应的
    Python 对象：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We now have all the tools required to convert the *genres *feature into the
    Python dictionary format.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们拥有了所有必需的工具来将*genres*特性转换为 Python 字典格式。
- en: 'Also, each dictionary represents a genre and has two keys: `id`and `name`*. *However,
    for this exercise (as well as all subsequent exercises), we only require the `name`*. *Therefore,
    we shall convert our list of dictionaries into a list of strings, where each string
    is a genre name:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个字典代表一个类型，并具有两个键：`id`和`name`*。*然而，对于这个练习（以及所有后续的练习），我们只需要`name`*。*因此，我们将把字典列表转换成字符串列表，其中每个字符串是一个类型名称：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Printing the head of the DataFrame should show you a new `genres`feature, which
    is a list of genre names. However, we're still not done yet. The last step is
    to `explode`the genres column. In other words, if a particular movie has multiple
    genres, we will create multiple copies of the movie, with each movie having one
    of the genres.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打印数据框的头部应该会显示一个新的`genres`特性，它是一个类型名称的列表。然而，我们还没有完成。最后一步是`explode`类型列。换句话说，如果某部电影有多个类型，我们将创建多行每行代表该电影的一个类型。
- en: 'For example, if there is a movie called *Just Go With It *that has *romance *and *comedy *as
    its genres, we will `explode`this movie into two rows. One row will be *Just Go
    With It *as a *romance *movie. The other will be a *comedy*movie:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果有一部电影叫做*Just Go With It*，其类型为*romance*和*comedy*，我们将通过`explode`将这部电影拆分成两行。一行将是*Just
    Go With It*作为一部*romance*电影，另一行则是*comedy*电影：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/3e28d632-7f07-410c-be80-0fdada09bdf3.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e28d632-7f07-410c-be80-0fdada09bdf3.png)'
- en: You should be able to see three *Toy Story *rows now; one each to represent *animation*,
    *family*,and *comedy. *This `gen_df`DataFrame is what we will use to build our
    knowledge-based recommender.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够看到三行*Toy Story*数据；每一行代表一个类别：*动画*、*家庭*和*喜剧*。这个`gen_df`数据框就是我们将用来构建基于知识的推荐系统的数据。
- en: The build_chart function
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`build_chart`函数'
- en: 'We are finally in a position to write the function that will act as our recommender.
    We cannot use our computed values of *m *and *C *from earlier, as we will not
    be considering every movie just the ones that qualify. In other words, these are
    three main steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于可以编写作为推荐系统的函数了。我们不能使用之前计算的*m*和*C*值，因为我们并不是考虑所有的电影，而仅仅是符合条件的电影。换句话说，这有三个主要步骤：
- en: Get user input on their preferences
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取用户关于他们偏好的输入
- en: Extract all movies that match the conditions set by the user
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取所有符合用户设定条件的电影
- en: Calculate the values of *m *and *C *for only these movies and proceed to build
    the chart as in the previous section
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅针对这些电影计算*m*和*C*的值，然后按照上一节中的方式构建图表
- en: 'Therefore, the `build_chart`function will accept only two inputs: our `gen_df`DataFrame
    and the percentile used to calculate the value of *m. *By default, let''s set
    this to 80%, or `0.8`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`build_chart`函数将仅接受两个输入：我们的`gen_df`数据框和用于计算*m*值的百分位数。默认情况下，我们将其设置为80%，即`0.8`：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Time to put our model into action!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候让我们的模型投入实际使用了！
- en: 'We want recommendations for animated movies between 30 minutes and 2 hours
    in length, and released anywhere between 1990 and 2005\. Let''s see the results:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望推荐的动画电影时长在30分钟到2小时之间，并且上映时间介于1990年到2005年之间。让我们来看看结果：
- en: '![](img/2ffa5654-3666-43b8-b4a0-af1a897ab647.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ffa5654-3666-43b8-b4a0-af1a897ab647.png)'
- en: We can see that the movies that it outputs satisfy all the conditions we passed
    in as input. Since we applied IMDB's metric, we can also observe that our movies
    are very highly rated and popular at the same time. The top 5 also includes *The
    Lion King, *which is my favorite animated movie of all time! I, for one, would
    be very happy with the results of this list.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，输出的电影满足我们作为输入传递的所有条件。由于我们应用了IMDB的评分标准，我们还可以观察到我们的电影在评分上非常高，而且同时也很受欢迎。前五名还包括*狮子王*，这是我最喜欢的动画电影！就我个人而言，我会非常满意这个列表的结果。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built a simple recommender, which was a clone of the IMDB
    Top 250 chart. We then proceeded to build an improved knowledge-based recommender,
    which asked the user for their preferred genres, duration, and time. In the process
    of building these models, we also learned to perform some advanced data wrangling
    with the Pandas library.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们构建了一个简单的推荐系统，它是IMDB Top 250排行榜的克隆。然后我们继续构建了一个改进的基于知识的推荐系统，该系统要求用户提供他们偏好的类型、时长和上映时间。在构建这些模型的过程中，我们还学习了如何使用Pandas库进行一些高级的数据整理。
- en: In the next chapter, we will use more advanced features and techniques to build
    a content-based recommender. This model will be able to detect similar movies
    based on their plots and recommend movies by identifying similarities in genre,
    cast, crew, plot, and so on.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用更高级的特性和技术来构建一个基于内容的推荐系统。该模型将能够根据电影的情节来检测相似的电影，并通过识别类型、演员、导演、情节等方面的相似性来推荐电影。
